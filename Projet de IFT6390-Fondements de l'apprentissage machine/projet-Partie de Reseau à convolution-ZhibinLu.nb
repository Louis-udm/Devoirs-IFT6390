(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3616522,      70593]
NotebookOptionsPosition[   3582999,      69907]
NotebookOutlinePosition[   3583341,      69922]
CellTagsIndexPosition[   3583298,      69919]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Projet Final de IFT6390
Algorithme de R\[EAcute]seau \[AGrave] convolution\
\>", "Title",
 CellChangeTimes->{{3.722907180722642*^9, 3.722907192653303*^9}, 
   3.722955845036332*^9},ExpressionUUID->"38be4325-55f0-4fb7-aecc-\
5b616013a50d"],

Cell[CellGroupData[{

Cell["\<\
Professeur : Aaron Courville
\[CapitalEAcute]tudiants:  Zhibin Lu, L\[EAcute]a-Marie Normandin et \
Xiaocheng Liu

1. Sur MNIST
Pour les donn\[EAcute]es de MNIST, on va constater \
l\[CloseCurlyQuote]influence sur les hyper-param\[EGrave]tres traditionnels \
(Taux d\[CloseCurlyQuote]apprentissage, batchsize, r\[EAcute]gularisation) en \
fixant la taille de neurones couches cach\[EAcute]es\[NonBreakingSpace]: 
\
\>", "Chapter",
 CellChangeTimes->{{3.722268786400169*^9, 3.722268808654469*^9}, {
  3.722268843779127*^9, 3.722268867333167*^9}, {3.722359365319392*^9, 
  3.7223593656359177`*^9}, {3.7224326991415453`*^9, 3.7224327488950453`*^9}, {
  3.722432795240004*^9, 3.722432801246262*^9}, {3.722440619782214*^9, 
  3.722440620186513*^9}, {3.7224596833506727`*^9, 3.722459698716138*^9}, {
  3.722459788457684*^9, 3.7224598259819107`*^9}, {3.722907176815639*^9, 
  3.722907178886222*^9}, {3.722943319854231*^9, 3.7229433370447445`*^9}, {
  3.722955517947541*^9, 
  3.7229555204886427`*^9}},ExpressionUUID->"e0174c19-564c-45a3-bba1-\
1c0012751a5e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mtrainset", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mtestset", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TestData\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.72226881442152*^9, {3.722268932252974*^9, 3.7222689506365023`*^9}, {
   3.722268987222187*^9, 3.722269053247229*^9}, {3.722269207148239*^9, 
   3.722269210537212*^9}, {3.722269396221017*^9, 3.722269397425706*^9}, {
   3.722269458491251*^9, 3.7222694587083883`*^9}, {3.7222697712248173`*^9, 
   3.722269805156747*^9}, {3.7222698670255136`*^9, 3.722269872658434*^9}, 
   3.722273703551569*^9},ExpressionUUID->"1d88d65a-9c8a-4d2d-96cd-\
7b400b2cd1f7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"indexs", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "mtrainset", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"indexs", "=", 
   RowBox[{"RandomSample", "[", "indexs", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mvalidset", "=", 
   RowBox[{"mtrainset", "[", 
    RowBox[{"[", 
     RowBox[{"indexs", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "10000"}], "]"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mtrainset", "=", 
   RowBox[{"mtrainset", "[", 
    RowBox[{"[", 
     RowBox[{"indexs", "[", 
      RowBox[{"[", 
       RowBox[{"10001", ";;", "50000"}], "]"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.722269931789606*^9, 3.72226993554167*^9}, {
   3.722269989668022*^9, 3.7222700839127617`*^9}, {3.722270118910386*^9, 
   3.722270137962545*^9}, {3.7222709345390053`*^9, 3.7222709566349707`*^9}, {
   3.722271766257715*^9, 3.722271768053314*^9}, {3.722273409302308*^9, 
   3.7222735659165783`*^9}, 3.722273607518092*^9, {3.722273749778022*^9, 
   3.722273830084558*^9}, 3.7222739927451363`*^9, {3.722296616732006*^9, 
   3.72229662944726*^9}},ExpressionUUID->"1a73dcbe-df03-4891-8c57-\
111d388ae0cd"],

Cell[TextData[{
 "\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3QewbklVN3y+7/3eqq/K0jJgQMsSCiXnDJIk5zTkzBCGnIac0yA5CgID
DjmJ5BwcJQqMiAExoKNgVgRzdr/+9usfF23v55w7c8e5c+5aVfs+9zzP3r27
V69evda/V68+17EPuNk9/t+zne1sx/////HPze7y8B978IPv8shjvv0//rjF
/Y+/13H3v/vdrnv/h9z9uLs/+HLH/q//+PIv/p+zne3m//tsZ/v//uP/S1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NT
U9NRSv/+7//+3777x3/8x+VrX/va8sd//MfLpz/96eVjH/vYcvLJJy8///M/
v/zmb/7m8gd/8AfLX/7lXy5f//rXl7/6q79a/vqv/3r5l3/5l28q61//9V+/
cf3bv/3bf3uH73I1HTza1b9kJXJBZiIn6J//+Z+XP/3TP11+/dd/fZW7n/u5
n1s+8YlPrH+Tx7/4i79YZe6f/umf1nJy5fmmI5f0kb6KTFQdgXbJDDnxvef/
4R/+Yfm1X/u15TOf+cwqI/TSJz/5yeWXfumXlj/6oz9addff/M3frNff/d3f
rfd7biyLniNvu+RnrGPTkUH60EUP6MfI1e///u+vuoIskI1f/uVfXr74xS8u
v/M7v7PqjsiD55DnyED+rqQ8/Z7fq46qfzf9X0qf5Jr9nvFdbYPMA/WZ3HOo
NOqQWp/IyFi3rfqe1SntqjzZ4j0adZ1xlWvkj+9mvGxqampqampqamo6mmjE
LtjScFJ+6a/+6q8ur33ta5eXvexlywtf+MLlpS996Yqrfv7zn19OPfXU5Stf
+cqKrf7Jn/zJ6l9W2zp+qqvx1KOPdvVvMKyKpwbTgnf8xm/8xvKBD3xglbsX
vehFyyte8Yrlwx/+8IqhfelLX1rl7m//9m+/gYelvPbtjmxKX8VfH7HwXTLj
HjqGfMDF3vve9y6ve93rlhNPPHF5yUtesrzyla9c3vrWt64yQj5g7/RS1n3I
SigyFxlSrnrNKLK59XvTmUPBiWCjZCK4z2c/+9lVd/zMz/zMqj/e+c53Lh/6
0IeWj3/848tv//Zvr7JDHjyD9L0yXKP+CJaa34PJ510Vo2/65vG7F56acV9x
vTruw/vTU4fxndE9Y9121fmsTDM8NTwf+Y/qXIr+/u//ftWRxsqok31X18aa
mpqampqampqajkYafZivfvWrawyqmMB3v/vdy1Of+tTlsY997PLQhz50/fzp
n/7p5Wd/9mfX2LBf/MVfXOOAvvCFL6yxYBXTSgzPLI6nxiR2jM/BpF39Gwwr
Piy58TecQ3zhRz/60RUne/zjH7888pGPXJ785Ccvb3zjG5ePfOQjKy5C7mBl
fD04R3DVg+gTHySqsYQoOGX+3iUz+voP//APVzzdes6LX/zi5YQTTlge97jH
rdfTnva0db1HTOKv/MqvrBds1XrPn/3Zn63Pp9zInDjnyGLiE0c8Zlf8YtOZ
R5lDYD72R8DN6Y63v/3tK476nOc8Z3niE5+46hG4O6zdWiBMFd5ungtGH0x2
xJyC6XmHK/Nb7m+M/ZtpLzy18rZidxVTDaVv9tLnYzzsqEMqnhjdc7ThqZUn
dZ0761nhe/RzdB2daWy5qk5WJnsvtt1B41tTU1NTU1NTU1PToRDbmn8Ir/ip
n/qp5WEPe9hy61vfernpTW+6PP3pT19+4id+YjnppJOW17zmNct73vOe1TeF
X8BX4a3819/6rd9afVR+J4ptXuPCENu92uJNB49qzGmwsupLj+Q7MiHm8OUv
f/kqUw9/+MPXuMM3vOENK0YiPpXMwVif8IQnrN/BTyJvTUcube2nHf336uvX
Z+kmeUfgpne+852XG9zgBstd73rX9W8YKqz9fe973xqX+I53vGP9m4zQT3IB
wGDFqyZOddf+/mAIsNat/cFNZy7pj8SN6h99RT/8+I//+HL88cev85f/Ww8U
n/qWt7xl1St3vOMd1zhm31mT+fM///NVHoIJ+b++N4+JY/WOMYdNXbdpufhm
qthmxfAOBXPblTMgMaZ1/UOfJX645maY7VHfel/0zkGNtdyad9Purf6pfWme
HXM34XFiWMf8Oz02mpqampqampqajhaCS9ljLe70/ve//3KnO91puf3tb78c
d9xxazzq+9///jXu6xd+4RfWfHSf+tSnVmzVXmxxYq961avW/f/Ja4lq7i1U
4yMS63NQ/Zejnbbw1HHfdGKHfAe/IEuPfvSj15jUJz3pSSvuIS/m5z73uTX3
BEzk+c9//hp7BisJnppyOub5yKQxF2L6axeemjhAOLt4QrjpHe5wh+U617nO
ctWrXnWVj1e/+tUrjiZWnny46KYPfvCDyzOf+cw1rplOS+7d7FGteGrVS4g8
ua/GszYdeRTsjPzIt/ymN71pue9977vOX4961KOWF7zgBStmesopp6w6xFrN
Qx7ykG9g7/ZVwNeTSzWyqO+Te3eUkchJY0V706iPZzlLa7zk1rpFxU8rXpfx
Ou6DqfHk+4ltzbx0kOyREYve6oMq01Wus15R43azDjXj/fhb682mpqampqam
pqajiWCp8FK5UsWk3uxmN1vjv+Ba9l7zPe2T/N3f/d0V25APgH/KN4Wr+kxO
y9ja/FTYhE9U7e34PgfFf2n6Zprlc6j4R70v+zDt34d/3eMe91ge9KAHrbGo
ZI+syeVLvt785jev8dPioWH8nhnx1OrvNR0ZFMwiFPnYC0+1PiOGEB76iEc8
Yrnuda+7XPGKV1wvscvyYsJQreWIrbe339lDYlmt9cBU4an2/ZOVxCLWvcV5
3xjvRq5aPx25FJmCf375y19ecyxbA7zPfe6zxiWTD3smnENFJuDs4t4T625d
0HyVvfyZq+pV85F07N2h0aiPZ3hqbAG8rnGSFderOTwzfsd5peJ4+ftQcgWM
5+Sd1WnEU7f6oOayrboxZ/7VfAw1L0p0ZcWva78cFD42NTU1NTU1NTU17Yec
oW4fJMzih3/4h5erX/3qa75U2BWcQqxOtZH5NsEt+KawLbhHjT1MnFf2Y8em
j+3d51EdXJrt2YyPVs99ic9NvmBisBB7uY899tgVT02eVHtwyRHMn6yJW5Xf
V17MlDfu9Ww6cih9U/s9PvwWnuoeMaX26sNEr3GNaywXu9jFlktc4hKrfpIL
E8ae9ZrgM1/72tdWfM15ROLmyYz8zmRlpmsqnobG/cRNRy4Fc7fW99znPnfF
2+kO8animcmHGFQy4f/2Wsj/YJ8FjD65Uekf5eTMqYo7+X90Sp97t3+q++hr
ruz6e/Ir6CP5b/WTv/VH8G2xx/YhJF/HrrWyMd5yr1wdBxVPHdsdfbaVPwHP
6cf0gUvOC5947tIncO2sQYzUeVSbmpqampqampqONoo/+sIXvnDd23/lK195
+bZv+7Y1d6o8hLDU+JA1ZsvFrmZv83XgF+ztet76VixEfBY2Ogx2C+doOmvT
2N81HjEUP5Y/R4bs4b7tbW+7XPrSl17Oec5zrtiImFX7/GH3sDWxqnzr4B8V
j2uM/sik4Kf1zJi6fzexZuM51GIK5WuW3+EHfuAHlhvf+MbLAx7wgOV5z3ve
KgPp95yPQo5Snr/pGHLi++RXTLxbMIE855pRY/RHJkVG9L155PWvf/2aH/VC
F7rQct7znne50pWutDzlKU9ZsXixqPZWmGvIhL5OntzxTJ3IauIm9XvVYbO5
rWmZ7vHe0scZr/oNzm29w9qtcS7ni7Vd497+BN//5E/+5Ppp7TZ5bZWZ8b6l
7+t+9bF/j6Z+rBhz9KNP48Gc6pzH8N9l/wde23ckp4rLfiQ6t+rJGp9Kn2bf
f8+/TU1NTU1NTU1NB50SP8Kn4Xfe8pa3XC584Qsv3/md37n6pXLMiQ1JzEfF
U5Nfi/2c2J7gIz7jp9Y4kRqfisSu5tyXpoNHW/lTZ/u+yRY/WfyYuFT5JsRJ
w0RudKMbrWcQ5XwZPraz2+Ehwfp9wkni0/W520cWBfuqWOks3954ng1MBbbi
bLLv+q7vWm51q1stj3nMY9bvrOPUPdnZpx98PThozTvisgYkDovuyX7iXOMZ
Op1D4sil5PhA+lLcqfwO17zmNdc45kte8pKr7nA2FZ0iXvXjH//4Kjf6v/Z7
lY86b0WWRjw1V+eJ/C8a9+rnu1k+a/fQ32yP3/u931vzCcmbLW+76973vveK
68Hz9J99C9ZRnvWsZ605HJIHme3h/7nqnnV0tOKp4UFdvxpz2fq090OuJ/Mu
/suXYT0Tr33nHNJnPOMZ6zqnvUvWt/CfzZZzAv2fTjWGan6Apqampqampqam
poNMwVPZ1M7JFvt1vvOdbzn72c++4lfwVL/FNs9ZrqNvyQdlV8eWdh9/Nf5N
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
65G3W20I7pbxNM6hszXLYJW13GAOdazUeXSGM6d92aNfccrooXGtacQiKy/G
d3heHLPYweTDFCdFL8HP5e6DxZMROSLgNakHnUZu4G2wA3H21otgcHB8skcG
x/Wo2TrvDJvamgOqbTPKfv1915pafedsLWM/GOmsv+qzdTzn2VpO1lzGtaoZ
RjdrX+o9rk+Pc2PFgLdkfJRf/Zw4R3gO2bDOB3e3/kJ/ZC8yLF1fkwfrMHSM
vBBkyD5yeKucvGRFee6pdcm4GMfPOOa31ldmtIXjbZW3NVbGMrfWTs4o3HCm
67fk0z3JsWD86TMYuHValzFqPGePgn70PRxPjg7Ytz5ib7Az7n3ve69xrNZ/
jX9l1hiHqs/Th3XNaL99dVajLRlC+EGfisvGM3NteHzSSSetdp9Yf/1g7jU+
6FfjyFo6/NS6lvEVnepvaxPWK3pvXlNTU1NT0+Gj2OBb2OcW7RX7sAv7GH3W
ETPYZeOxoYNDjL/P3jPbQ1ufGdfCm876VH3MmRzF/9/KXbXlM9bnt+SlyvOI
y4x++X58p4qFpazqcyTO0f5pfqv/B3sYMTy/83XEsPJx5ESzPxe+kTOpZm0L
BrRV1634tkqjDzlrZ9Uph0rBhCp+cEbRyKMRh6rt2GtvdtVB0aXRx+HJKMee
gefWnAP53nNkYNc56LP93luYQfCc7CmodSQzfGaYKdlyT42Z9Tus3r5teVWd
ZSVe0f/5ibO4x/3yOu8Y+Tj2xVZ5MwztUOfAjPUtHGVGlYdVTuraSS0/++lH
efYMGZhh8jPZrzGUM9yt4rNba5O72ub3uieFbEY3RScl5rDqGd/x7+EAYpfh
7eKs5JWA1Vg3OvU/14bGes3WeWs7t9Z601/7mfsrDn1a9MquuWIXVbzdGKvn
m48ygtexi2ZzWmjEkUdKvkwxbMEq6zjadfbXll4f1y8jJzljiu4gH2Sl5tD0
nTN3zFXyMZurrMnAkmD15EJd6zu35vQ6/x7u2Lz0Ud1HsN9ntvJU/E/Rrvk4
NhQ50Bf6yYXnvovuyT4a/Uduos/8bk4wjsVQOpPeOhqsD66uzK061Xyq+W5X
HPpZkao9WPXVbD0k+WyzL0Y/wLqzxw6vfWad1+/W1OVZMXacWyqWWL4N6+3W
M/TXQeJnU1NTU1PTmUk1PmbL99/yybdyc9XyZrhUfc7FBqj50at/OmJCNbZm
pL1iPEZcNTbjLh+k6axJY/zXiHXUWLEqw7N4k104S3C8UaZnez0rFrq1z3LE
NGfxVmOMSfVBxvGY8RucDXYqzuGpT33qGjsiZkSsT9YzXHUv8IiDzjDXGmex
hTtsxQZVX7f22Yg5jjphjFEc67mfuLJDpTFOJnwdY0WDdfoc8ZrKv+BJFeMa
6z6TvWAoyS1Zv08/j7Iy9mHF/7b4VHH7qj/HMiJ/o75WRzE24lrJWWKiTzzx
xDVGKfu1qyxUGatUYyjzzlnc7TiWKm6xhbPUd4zjdRZLNsrEOO/sWnOpY2TU
GWlj1UuRrzG+bNx7UXGdcZ4bx9ZWvGLVISOf8n2d07fGYsWmt7DtYHNkWKyy
uDax8k95ylPWvd/yA4rBoq+yx3ssZzbeq4yPMZij3qnxqbuu2ZywpWdG2ipj
trZWy6gY3dj/2eeeNtb41BqzO8psbfds7SnrJsFntvDU2dlfefeoG2frA3VM
1nrU9XRy4SwzMkFvwOXg7eKW7T+3RqOOVYcFx5/NuVvrLKP+q3yqfNvqqzqm
ahsOtb/HsXg4562UP1LVRVu2RbVVan9uzbl5zr3wcnGTJ5xwwrpuK0+u88cS
WzyjGZ66a83vrEijzh9lZIuqPqvjfJwD8Raf8RuGDVN1VqS/5XpqPLWpqamp
qenw0gwrqTSzi7co83nWrrdizWrsSOKc6lmtY50y78/ypY51ndkkFbeo5cVP
VNe2LQ4epX+rPxqKTVr3SaIqQ2PM5ExGKp62td9yC38LFlZt4VldZ/vBt2R/
xoPqL4sFY1PbJ2a/mP2UYh0qViYGIlhgHZOjbz++Zyv+rfI8PEnZ1cfd5VPO
/O+9sJCZr3d6qGIGwQYSo1Pz4yZmx+eY87Hi1q4Zr0e+znid2L+qX1OnxG3N
ZGgX3lb5VPtzlH/37CeHp/aTLf6zWDOXOET5f/na4U+w2JkvHaqxZ+nbej7R
rC617rMy9/LRK74Zmd7PPLEXFjLDjev4T6xRzQ+5C6MdZX1cP9qa40ecYlwX
qGWnPnVOr3jMSDPsuZZZYyHFMJ9yyinrfm5rPfam2sN68sknr7kjcvbQ7B0V
J569c8Sad+Hq6YOR3zP8bAsTnLW14lJ1DFZcpbal9sVoPykv8aNjzOqIj9W1
xLGMsf61rv7OWk3VSYk79O4RJ82aeO6fxYrWMTnOfXl3lY+cY2W/sjUYn/Y9
28t86qmnfmMNvtqddGLlyYh5jrSl++pYq+sR4/yTfq3rU2hXf8+oytjhnrdS
/kh17GztpQiNumfLlqm/iZO0TuLcS7aG/ejWR8Stbu1B2TUHHBSK/3J6MeKt
NSK6Uq4MY4c+dX6kPLbyM8izIRdD1iKampqampqaTj+NNtzoQ9R4sUrV/h9j
rkZ/Y6RqW8Ymq3tax/XamV+45Tvt8q1H7Kz6WgfVdjuaKbIY2ZphbGMc1egv
1b+3fPWKQ1S5HOW3+tajH1vHzijD1ecZ/bZxvIZGPDJ15SfzRe2XdLG7s5+4
2uPjfvHq54xxS6EZP0e/tOqb8fddeOosLmwvPHXmK58eGnXd6E/mHTPssurT
WseKU8326I94TH1utt9/C5Ovvv2M75VXs/6s7aiymGfHeJm8MxiHHHzOyLDX
E0ZW937XcsbcebUutf25t7alvr9iBeMe8/r7XvFAI+a1n3lilN2RqnyPcpx2
jrwZ5XjUS6OMjXj5WJ/MiYkRrmVuyd84p+9q4648Qnl3MDj6B+Yut5+zqGCr
4qvENcNcK8Zb+bClT2b9sV+7Ya9rpov26uvZvLOl3yqeGr0wllPjU0fscFbm
rL21b2Y4Yh3P4WEdT6N8jPl1qq6r947vTHkVQ8t91v7EocJVyUQ9k6qeUV7n
zrrPqeqErTlgliNkHGv1+S0ejzq1zgFVr2/pm11z3+GgrTWP9Eet50zmx/jj
6Km67pP3pO36wllI8Dtjm61hHS24+ww33uVzHBSq+nk/+mbE82dzwGiX2Bdi
7NCj9v7LRa0PvvzlL6+/dY6zpqampqamw0ujDTf6orO5t+4NS2xpvWcve3CG
AY3Pnt42jWUmD9Fsv1rTwaSKm7gir3V/cpX5Q8nhGdt/K25zxEXz3a6xMfP5
qo8yu38WX1NjtlLX2s7UOf5QHb+zsVHx1Pjae42h04NlzrDQiktsYdyHsw5b
ZYUiL7uwnPpcxZkrzl3xhFmckPuyv3/EbPfbrrp3eEa79HFtR/DO4HCRJXUb
8eBaZmJwd8VoVV7M9Pde/T3uk9/Vhro3egtfy717ydiWDzzDNkfKHDviPuP9
Y4zdmD91bONe5J5ZjPMu2i/GE7w/eOls/0faE95Ev9RnZrj6XnK8iw6XHthF
M52/H9rCU5OrtOqImc4/1DqOumgvmsXTzXDi+tt4zWjMwVn1Q7VDg/dt5ZhC
o47YpTMyToPtVR7U96acQ+X11pramWV3Vqw6VMfziK+P9kL2YFQsL/JZ8dSM
+4z5uhacOSO8Hvc/oP3MQweNRmy+XiP/Ztj1uNaaMuvYGXH9pqampqampsNL
1YaZrYtWPCMxAPboiTNyroiYI3vyglPl3jE2o9qoo52dmIiKT4S27OLR7qjl
jThHfIjYJPn+aLPdjhaqeAmZE+ty6qmnrvFP9jyJzSS7wRPqnrddWN24936M
wapyHBkb4+RGv6XSrjijmT8381lrHeKf1zqP7+LLjhjOzLbfsve39tHWdm/F
uNeYuDFeZoZFVZ0yxmfMMILDGeczw81qHdOGer92iwehK8Xbffazn133q4oV
oTfHOGh9Ed1Vy0n/jXJU8bcqA6POHeV6hlVX+Z31V43FHdtdx85WLFf177Yw
jnH/bJWVcd/sTN524akVt6vx5ONcMNZ/pIrvBIsYc0HUOWesc5V1GJL9r2TD
+eZkw5UYPPIwW4MZYwVrf+7Cviq2U2WqytvYptmcPfrvNe551hczfHwv3TfT
FyOeOq6tVLx8lJM6ZqserzbC2M5R3+13/WYXxj4rYxyP0YFsKnMXmRBj9qlP
fWqNOyMfWRfeletgbEvVr2O7K2/rb65xvXCcAyouXjGzet+sv0dMqN47k+Pa
f1tzQ80JNVszrXPSDGessjGO35FmOmOvdu+VIyLlHk78f7SP0Uw+Z/Z/1g3H
PWSzGOeKkY7tHPkw3jPWK7TfsXdWozpHbOHZW1jrTDdVqrZC5vLanweNl01N
TU1NTWc27RdXdB8skp8X/89+EjY+vMD3s3iZcX11NpcnVmA8Vzb2xix/ZbWN
xzyFOeN8tHFrvtRqkzQdHNKv9fxzn/DTj33sY2sONvn55Orzt3Nxar7CEV8Z
KXFheWaMcfNMYgljt455HGuMzcxPmNnOh2L/1nemDokDquMzbUxdt2J0ZvhV
/N0aJzeOozEGduZX1jWU+ndyDmzppOrn1WsX9ny4qPqcIw5V/Va/4a2ccZ/7
3OfW81XInlxy73jHO9bccjUXofvh+zUOaMSAwssRhx3xv/Cy3j/ivnV9q7Zt
FlOY78n9rvjR1KXuo62+duRwC/8ZZS409nX17Wd12MJTazkjbjriLVuylxis
lLFLxse1lIr5uR+WCleX01i+O3mNXfY425vpXPsZDjXDz9PuWax8Ha9p84i5
p7ysmSYmbczRGx1XdWV07Qyf36/u2uu+1L/Gs9X4rfRv1XWjrFbdOO6tmeGp
Iy68l41UZbfiU3th9DO8XN3lO2BnyX140kknrecz0R3sLmvY7k87d8lJ7f9c
4/0Z31lfq+PCb7X94ccYG1dlrPbPbA6Z4c5Vjsd35plRp41tVv+sk1beZ2yM
OVZGGY2eih6ssX0j1bL3ko/0wywX8UweUu7hoENdT5zNE7Uu41xX11HGuWcr
D/BoC23RiNEfBKo+V13rHtelZs/l2S396m92R3RgHQdVVzY1NTU1NTUdPjot
eCqMgM8nZuKjH/3oGuvHvp/tpZ/5QaMtcHrx1DE2aAtPrfdW/7vti4NDkVM2
JVmF9TvHwhknz372s5enP/3p63nj/hbrA7MIjjXG4IxUMaGZTxc5rjGfNWZj
jLE7LXhq9XVmMU/1nRXTrfn4ajnjmJv5UVt46ojZ1TFYY9zG8VvrFCx2vH/U
A6MvHsyhXrviFw8XbWEjvqu6RRvEltGRH/7wh1cM33m7z3ve85YXv/jFq/yJ
86+5J2p86ix2pWKB6aeq5yqeOovBS99Vv7dSxs6sv4IxVAx2xEJy7cJTU8Zs
vhkx4pG3dRyN43Osw0j5vfqtu+LXRtnLNdahjq3ZHDXGaaYOwdrJx1ve8pYV
a3/+85+/6ij6Siy932tbMq7G8V75VuN7a9+Msb+5Znhq3a+/Hzw1fbqFp+6F
I27hrlv6JHJbZbziqan3jFe5v56hNNb1tOCpqeMuPHXU6SN/Iof0gLlLXlnr
MC972cuWZz7zmcuTnvSkVX+8//3vX77yla980xrdDK+sfT3yb2xL5rWKjac+
41xX8dQqO+FrsLdxDqkyV3Od1jqn7PGdeW4/eGry7o54al2vq3NM7au6/j9i
fjP8dy88dcTpK3Y228812qaHgw51Lqw2xqhTqz6pNK7RjO0c27hrD/psrj8o
eOo479T9DjXuetc19s2o47Lenz4Y54D2d5qampqamg4/jfP11j2J95Nn3p5V
cRIf//jHV9s+8akVV9mi6h9X32W2zzQ2x6HYAON+sGpP1P2LtQ5NB4vgFeIC
3/Oe9yyPe9zjlvve977LQx/60OXhD3/48oAHPGB50IMetPqlX/jCF1b5zZmn
kYWKuRyKfOxnLJ0eyhjkM87OMhrx3a0xVe+tNvpsTWMvqmOp+k9b97ovOfNc
+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
Bk/+WWVl/cEYVG5th99qTHpyLLuU6178Sk678Cu+dMZp/FzPaUP6Jmc2xR92
r/a7T12iA7b2tZ7RNPo50U/24z72sY9dHvjAB677uOXtTVyg+qu7NmsnvuN/
jRdEwcPTJ+5TBn7iffXdg4kkX6tLnJtyvSNXdGNwC2VEP7tqH0WvKjcxr+7J
Xt2K86e/028VR8iaxZjDF/k9eQ3if0e+tNX7gsdnnKqvugRrjf9dZdc9LvVR
t5q3tfqt8V2TQyNtUOfgy7Wv1dNvtQ/Hs95y74inarvYP+t6b3vb25Y73vGO
y13ucpflQx/60DflII+uSD38nXZUnZP3+B2fyEXa7XmfWeNQDp56l7lQHWC3
eW94lTXM+ON4Ermt60DB0qKL9Ed0Qj0zDW8jQ+roM+tRszWrik1H9usaQjBb
7fP/vCtrsJFD7fH/Ks+xT/Sb39yT8ejZcTwHOwveFz2eZ8b96rlP2eFLxf13
6Y0qMy996UuXRz/60cv97ne/NS+IuQQGr13W6MhQ+irjMXVKW3PhS/iVez0b
viRWVC5xOXutNb7vfe9b/848p/8jixmL2bPvt7w/Ojjr4hlTGTPBMZPfJOM5
shMZ9/2Wng3Fdsz8GSzUs3XMVPnwfcaJ99U5I3oqshMdlDEZXRabNjo0uK1n
8SFzXcWX63pq7I3wYjYOzghsdZTrGgt8qDGx9b6Kp8bmj12TNbr0967yKtY/
4qlHg40+rgmO+6T2konZOkPmwl05y5uampqamppOH832LVeKP1TXRLPfH2bA
rveZWClX7NVgVjAs8RX8R+fUirGIz6Us94jFgX+Jz5EzjD0P97Svjd/nHcpV
pnvEb/AxxPiccsopa3n+5id6x8knn7yWp2zn4z7xiU9c7nCHOyzXuta1lutc
5zorruo9fAH2RtsZB4PIKRvSGR7289/+9rdfrnGNayxXu9rVlhvd6EbLK1/5
yhVjgnG6j3yIW3am2ute97p1PyX5gUXlvIzYppG7V7/61ev5IPbkejZ+JBkV
Q+TcEDFnt73tbdf3y51Jjt/5zneusUUucbIwfvKnXDGL/Ng3v/nNK8ZhXPHn
+In+z4fm66qbSxnkPX6h39VFnYwb94h5832NTRpzGIaMFTGTsDjP4JHcjcpT
V/WLb83PNna0Cb+Mb3wMdsQfhgsb8363tx3P3CdeMmM/fjS+abM+8y5t815Y
tGe8T92NU88qA1ZpjLv0nbbj04jV1XafXooPOsM/agyl+C59e9JJJy1XvepV
V51D9u50pzut+SbwKli6OuMTHpET8oXXwcFSPiwFL8Rby1/hkzyRCXrR/coi
Q/IDkzvXcccdt/aBd+hPWBq5oBPV0zPBX5VHf/pemcEkyAUee45edpE992i3
++hvcmdfsnOVvE9fBXvbOqs7GFh0v5ha/U0W1FfuY3X2HZxDP9P5fsMD7T/1
P+MslU32Mh60xT14q27uhR0mZi14CfmjD/CXXJM9/eD/+BRMVf3VAS+UTU6N
E23Xp+owW7fI/Op5/NYeOSAe8YhHLD/2Yz+2yojYeWs/2quvgxsac3iJr3SX
uikjOGJ8ZvyiO8gQ+fAOYwTf8B6P9JlcAjBcOTgf//jHr+fy4ZE+1WYyoE3a
jYfB2LSXbJEFfeTdytRvfvc8fqi/vjH+s2aUuZlO0hfkUTnGcY1bi+6u+EvW
mZShTvSr/tc36mTuVwd1UZ7f1QMvfOqrjCUEw9LP9IxcHOrj/9pG/oIhZ+97
dJM2skO0A3+Mb9/pi6wn64vgke7xSV7xURuCg1e9FKw4ceLqZzzCUW984xsv
V7nKVZarX/3qa3w7GdDurDmRN20n2/qVTaMP1SkyTsfgnXqRnxe96EUrVqsv
sjcDf/TzU5/61PW98H3rj+SR3k6/Gf/eryxjhxyQO3zWF/7v+6x3sdXwgWyw
/dSTfNE1+l/79Sk+6QO/+02f0YGjzq52qv8Hw9fv6m8csi3VxdykLOVEz+kH
/ec3uVbURR2Tv1d9jD11cY82swk849msAyQ+AP+V7bfoq4wBsuSd7lNXupKO
8b3xjCfeY/7yTrJW25u9MllL/J+gWfzqGFscrC57GnbZzXVPS/1uK6/MVp1q
/PFBoDFue689cnUdOTp/lmsiumRLZs7o+OempqampqajlWIzzb6v9hTKfij2
eXw3+ED8p+wVY7e72P9sfL/buyY+S644v7F12Zb8Af4fDOoFL3jBauvzt9jW
vjvhhBNWH4B9K+aPzcxG95uzsuUk9B72qnuc3WB/nLMb2K1sf9cjH/nI5eY3
v/lyxStecfVf1Zt/EJ+/8dSDQRVPhXne8pa3XK585Suv/X7ta1977XdYA1ki
q3w3PhCZ4z8+4QlPWHEGssXX4ROREb6nZ+3ZlvPQRc74sXxM5RkD/Gw4CbwC
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
cIvTSuN+/8Sq5H3xsbQNf9Rf+/Em59yTkXruGf6qf87uxaPs6SZ/ySUb7Czt
DZ6Gz/iZmFwXvzyxqtmHnLNvyKDn1MWYIF/6JrLsueQbwFNt0MfuVUd97l3k
Bl+TA9V9dLxyfaqTenive9B45o666FtymvOvE9OKf+pjHYMu937/Jw/441P7
fE8+8Tfxl+GJ59RLez2Db9rnb8+bW/iLYvSSb04bkzfWuDZuEz+ov4w9dVae
eCHyrB7KVWf3RN5qTnJENsgwXnsmeR+Mu8RE5jw5Y9b85F147l6X+/SN3yMf
wV/xLrGmylKnyJN6kw3PJReDOmQsqjc94H2eCe/wybwafZTYan1EdtxHL9BP
7qvzdGSXvGiD+9NX+hYf8AO/6lluwSn85r6qZ7Rfu9RfG7WXDKhH8hbEBvAe
dXP5f2KMlRWe+9u9PvWn9uG7MeH/8DJ4R84u9D71wQN1yF702CWeTW5oddLm
5D5NW5NPKbnpo1uSfyU5TslW2q087yRj3pVcu/raffR+5BvPcwaaPte2/IZn
2qmf1QsP8A1emrMLyZMyla3v/KaemSv95jPjyn3Kwhf1Sxw3XhljxnV0VNa6
XNqac87VD6/Ux73KyZ6KjKes+ScvgmfxRF9GdyR222fGmHpkPtFu5bs3GLIy
tCdzaHJ+p87K87dyPO9vsmBdCzYFe42+8D7yiC/4mfhafY+PdKK6Zay6kiMj
cY/Z+9D7pI9Mqv5RfCdjhryxXy51qUuteLv5hAyR1ZztmHOmYPR+o2foF2sR
9VwnejpnnsH1rafQnZ4xpuD38FT3u8/9yUMC/7Qm4H66PevuWVP0fmsOWfv2
fmsB8H1j1xj1aW3IGp51Oesnxol1AustWU8zZumhrC0nB3T8yvzdcdZNTU1N
TQedsvc3tn49n6rGXsWOYNMGM2J/m8v5Yjnbie3Ijvf/+ITshnp/zqP1XdZU
zd1iJdil7AB2f84ZTy661C1xQLAJ5QUzYAv4PucYBLuIDZ735rteQz14lLN/
+TN8GLJINv1NJv1NDpKDlDwEh8rvvqs2cz2TOecoGy8+MxZSZjBYshefNvsc
Y38nf4b3+S14V+zS+NvqnFhGMq2seoZqYiK1M+eV+H+tp3Jj4wYXGmN+1MM7
tCP5VvOs9yqb3ez/aZ/y44cH/6vtV55nclaKMtMn7uGj5jwq8ak++cb85PAD
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
HFH/83PFs1nGjEA/eZKfG9EgqcyIu87gYOvclwJXNxzM3GRdq/AhQT64Qzw3
kO9JupfnidQsYZB46WJOCZL+1xlbVJBnxp05djWJK/NzWaYNt75M3BaWccMl
ri+3ywyJcSJ4JojeT5BuJzIE+QWZdK9lhp9CphRd6QUN+vnvhkce9CfIhOGR
CRNeFF7FRMT6lLeObhsd3gTFe5YepGmyF3q4m3gSTG8j8yZt/HueYwbd64jD
c+KVRbImni/4FU3mX5CxSZaIEzbFK5PpSneCeMb9HqP5PZaIimuVF7rFsuGQ
YfGaZUKQzWRLDMMQ1H/+5HUB6k+tj/RJj5B57nvR7lC36HNHb7rjwHLbk5QL
py2WyTGONJ4MKRuOrPC1bQ2mdzS3HoPMnTZjKV7cJh3TsfuRd75Nl4f+CJCV
RgniG5O8zrSykwlPTbaBpyyNeo/mAV5TM3guMNOrb9PcwCTfM3UXTxVrhrbA
VxmX5feYGCv02hkCB1VMgoQHT+VnJGhuiEVjRFo/PNWgOSmu4KwmY6n0N6/d
x5J4qmu/8Pq/xfG3vaSyfKK/Ae5/fs1EQUG2zedFcXwh5y3mV44Fj7t7PSyh
n9LRN67cU67t/4xkprPaXdc2Ux0oMFLGjqMuhVwKZuBDyOGVuE/izVLfpyTJ
g0K+cB4I+zrZPkkxpf6ZKAPm6n2u5a4pS6K5yuJ4iwSv7dCcp5GcxGiOjrMe
1tJ4pBZvrL43Z05qbKbOFJX5IzhHDec75fwkL730ksjpy3gqx68y5ipj+Qfa
/6Du7cuUrydTHLv3O9mSLdmSLdmSLf8tC9usUZoLNUuEVghTgfHUmAU9QvN0
VBdxYmx68R45iaeyVZ4wyR82NcQNJo4nirNHLPxljfykFGlujBGSZHCcAfvg
dGGYbBtoZDvTfK+FnLhTEXOlixgQjrHheBKOkdHIj49GgohpITcOyY2/kTFJ
AgtMCOIYnXicKOZQMv4mQ7wfxzeJuCoZn2rL+FRNxJtJStB9OrVJp/pyfIPJ
8TCuv5eJUj6QjNN6Ep7K9lnsBVN/P+dJeOpgPEjxwRyYDxnx1BfMB8aDyId0
METHTzQZD01ii6YTSyowT0tc2wkn9lLFUgWeyn4c+5aMQXJ8T5xkjUk3XJfG
fU6c7mX8VprwIoaV/X4tRfKa42isKCKhbmjhHpLfsPI+jZd4kMZU0H2fYw4j
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
+GOs/cDXsOIfL8Oy//k5rPjw17D+8h9h/69/K+xUceAg/ea4zD9VIF0joHNF
+g4ypA/ReoDgBlnh7xPw/rvWI5RiFCo343zEWRicIrJqzcYcp8zVFUgVxJRJ
paBFVlTiCbySvPi3vlhhOchFBaRJBrwOlLDE9WwEMVG/2/BEFSJVf4mc8kNz
4aOYs4zl4OlFSlR9LagNIrQCr+QQCgbfU/xIQUDKwVZyd4dVDhpO4o9X81z/
Ul8ptaMYd6hftVw8o+8IN15qTR7Bl+cR9n7iCrbile3iNYdbBiU5aDanoPYb
3OI+jFhM676hFfwEBV+OSMqAc557vjhXIPqahGtcVV4vGlYZMFeTFTxWXrwW
BLsq94t0vwhDxf04xgKtUkwQ3S9sJTO1WON1eSFiuzu5u8JselaNR2n16ijO
aLjk4AkGgP0mCzQ26B0opygHLYtI8GfKedIxOOZq0H1IycEW9XeKcsjBjckh
J/rMcMpBtgntq2upXuubcymDY15Y9F6O+gsn8skpw77keGkGveMxRYhC2sDm
BVPG9fcEzNiLGbVjOZx9g6+fFwy7JXjuLLcMtouDjP4ovhUqfcJVc4Y27jIX
/sLHw+TYw9iyn6WbE3W2xVxRgmwX7hDU5XzlUBBt0xb8boZkkVMjuqfY9yhS
dZKDSklnSI4R5vipSS8FT+xouJBRDzx1TTWXsl0i7/em6YdnSCtr7EK0uwHB
gg3o+/3DaP3xdWj4t59gw3s+ijXv/SBWf+BfseYTl2LD97+NrlHPwJn7GrBx
OdDVJOMzcf4v5s50/6ymE6rCOpYf+eLJ8xZrSzbEoQ4bi3a14IW5u3DF42/g
W3dOwGU3vYR/+vlT+PiNE/CFO2bi3x9dgqdXd+Kd0w429QQ4aMv4p9p3mS8j
bCJFLBiOH5WWEPFxeO9CBSRQFKmUWVj5SZnxcnlE8xyx/xHp+Ojaz1/FCg2p
/gFdNxA8oi0VxrD0e0aocq8zt1u6jie/y/GlPav02yj+sGUMqhJ8ZWfs2mkB
YYsgbFMNfrAYe96Wz8eEvoYBZT1dBPPxZa1Xc6ZcF44P7ysbc8Gv+uKV5eCT
HEJPfZY4Rxi5RZTJvRiHVu1DVzwOjOOgwrF/Fsfxa0RBGHObErbVvhxmdFgm
XTh3aEj6mU/tynP52XrCdlf0XyrpnIVUhnTWvCWmcp2PjK05WhyOpQqcpnNz
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
/2wbrMwZ2NkzCAOSg7CYzCrwzFzaYS1Gu+iHTy3fSX/3UZlPNTXPct28Ug88
Hz41l+4l2abh2RataRSf6tiw6NiybOFXxz4IrrpbsSai33ZTn2vP2Gjty+Nk
ZxqtKQvtWQfd1DFzKI/MkKylyBERStT41FqplVqplVqplSEsSbcdrTQoXSDJ
p5IGQNqhH4NNMzbDVfAVAgU/Ac3BllCKHUSaK3oI3ZDxsxhaV9BhB0WOWNu4
Z0/eq23R/eR95HNeiUPVCgY70OTkJi6HhiqQnpsjaO3QR1INihKaWKV1UJKM
7j82UyXtzrweIl5f5ocRBXAu0HKVcACO4KzlkORUo4Tcg2GVg/B1iyyxesgY
KCiuz1F8YhmHKGyA+oHiFIvrSWEHxH1Kgs/P10krZESbGM72IGUxkBzK+NRw
ADkEcTkwXGj73MpyiETbHO6+kfRnrMCnDtA3ojLE5VAeESXec6LIugjk4MXl
IGSR5HjOVw4BklFk4iPI8I4ReqysxKeaSNar0viYSnVh5cplmDp1Ih555EFc
c81V+OUVP8cvf/Vf+PWVV+DGG6/D9ddfh+uuu5Y+uxq/+c1vcNVVV+Hqq6/C
NVf/N266+hcCN1bBTdf8VxE3MszPzgHJ899w9S9x9bVX44abbsRvf/87/Okv
9+Po8Qaksmk4gSviAeSsrADzqcyruW4eDvu6RjK7fDSIeaN/HjFSz2S424TB
J1XoF6VIHmZb9/pFeRtK7l3E+6LecSmqcjrJPfOpHEDJtSSPmiNk1atNWpAI
choKlwK2SaUaFWFaJ4pjh+PlQvgXi71nYZeao//pWSKnZoq8gE+fuQE9/4j/
b6nn7ipIDVDMu2FGIQXH6kOqtxldHcfRdvoQDh7YgkP1O3DkyF4cOrQLq9cu
w7IVi7Fmw2qsXL8Kr8+ZiVETX8HCVcuxdusmrN+8BRs2bMGubbtQt3svjtQf
Qk97G/K9XbBSPXAyKZqKsrAy9F7qNHKpZtINSeP0+6hSCk4nVZI0Uj8V41UR
5KRdr94nVL5SjmUjl6F27QWSWw1JHyVZ5EgmmSiF3qAXDelGPPPac4JPvf6x
m/HwtMfwwtLReGX1BIxbPwWvrByL17a8joUHFmPdyfVoLjShwzuDVNiDLqsN
W/avx5xlb+CJkY/gz4/ehREjH8NLY0fhuReew9PPPoMnnhqBhx97AtNnvIll
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
xPuCODeazxgYGOD6qcStEndKnBnd9+J9SPcgxazScvoMfZ7mQmhehHhZyvcW
+22pLuoDfbHEr5xPb5M/F5jPr2f3jdKoxODUIGTdMlQ2VuJuI+uDGljfVlXC
UdVUjcbORsxp5JxPNRDPTrCbeTyrmdc+s/9hfKpNuBR0PyjYdZpm7WaMHVun
2oL6KT0ibnTiYGoNVgXk4dWd5/H8uhg8+1kUnl0bhZe2JWBX/F34ZTUhtnwA
TUoLRtilJk51jv1WFbvvNRY1u+9U0JmUvD2Y2D1opLlANsgh7QLSETGz79CY
h+qVzRdz79zfOfvsUs2X+XxKZz1zeqXYVLqWtI76Vnq+dnZ2cm6d6j9GRUVx
DXPS2qG2QVy8qBXgrAkhcrauPDaXucxlLnOZy6TGnokWNiq1DPF6sBTxY8Us
84aVzBdXQ2nXslcD1wmymtgzVWeBXcH+aumHOiET0/7hGNjpi6InfoGbjz6J
kkefQOljj6PoycfRvPR3mAs4BGtaItBaA4z2svHDNPP7Vdy5oOGynrkEWtIX
+orckYtP/ermHJcq5SXm07938anfrInnlHzTr6s15awP4DKX/aWZtE2LNVbE
OOv56lNJ8xFFfoD4s+DgYB6bePToUcTGxvK4GTFGRty2c90kkU+l2iA+UbFY
6OaJX67cCP+rpYiuGERC7RTiZSpENRgQLrNw7jREBgQxBEpwtt6Ks7Vmvj6i
CTxmNZb4VZkZMQ1mxDZYEN9gR2IDkFAvxKNGVDDcdaASCG4QtisiuMGGkAYr
268ZkTITYup17HsaxNcqkFQzh9S6aVxqmMbV5hmk1wzjTNotbDoUipcWrcJP
X/8QC5asw8ngWPgHheLk2XPwDwxCUFAQTgf4I+CkH/xPHMHJo/tx1u8wAo8f
ReCJY2zZCfj7n0RAQADnpUk7gUAxv6dPn2br/HHypLCe6n7R9ui803r6mz5D
3/smQPsg0D7pVTyW+Y7j3LlzeOedd/Daa69hyZIlnF//PN1c0cR8VVHv74Ha
OTzHGiLFyaGcVuLY/hPYttYDh7yPo/J2A+QjKliUNkrDf+CzIpjLA7tewL2Q
Q5uDTzXoYDYZJHwqHQf7267n8WkG5j+pMAEdZpjfJGd/a4hZhM5qZrDAQH26
zfE1coCowNOoCvbaLtjLGmHLvg757oO4++tXkfvoj3DxO99B2vf+L/Jf+AnK
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
ZSIpgK0/cw0XgtnnA7PYZ69wpARdwYXQLFwIZ4hkiMrAxbh0pCVm4trlfCgm
FbDozbCbrbBb6XiIU9Kx49HCYFJBY52BEhNQQQ41+5+YShVrrRpemQqCdhL9
PCmfSgtn2dppJTA6DXS1Qld0FYpLCZgMO4Xyj95B3kvPI+3xh5H6yPeQ9dNn
cOON36Jj+06MHPWDgv1+c20N7CMjbBszMKi0UOpt0Jkop4jtxuK4X4nns+oo
gBc8OJeD/D1ifO08pnWK3VxDzPe7MaJCaEUf3NJq8HFYMZ5yj8X31gXhodWn
8MiGQCw4chErQnMQfacDOe2jqJ/RYMxm5zF/c+y8KKwW/rPUNIfIrpuG/BH2
t9FuvQeKNDSyz5IPaKT4TuZ3zs5OoKenDXWsXaemJuBK5iV0dbay5VNsvYHz
qTbiiCxCnCrnUC2sbzHb+SvVHLJSHKLRgDm1HDearuNM4kkciTyAk/HHUdN7
F72KLgxpBzFsGEa/hvL8CQPo19GyUaEeVeNtZJVmITj5HCLTolDVXoGB6V7M
6qZhsOu4TqwIEwOPTTUbuLYu1dfi8aki/kgT2/t8+UXSzzhrq4o+hKidKeXq
xG1Sf0zcG/FqNMdF2prErdbX1/P7mbhUup9JCzknJ4fzbBS/2NPTcy+OUdRc
dc5Tp2Mg/YDbJbeRlnEJbn7bsT9yH8KzQ3Hhdiou30lDduUV3Gguwq3WG8it
uYaM0ss4GXcSRyOOIvpyFPLv5qJvopfHBatJZ4GrVNz/97X4VNY+DHYjz77T
2s1Qs7akdNSUoigSqi81xO7HxikLkssGcTq9EV4Rt/Dm9hD8fMURvLDsIMMB
vLzhMPbG5yEwtxrn73agbkaHIaMVk1YhGkUF3ONUTSSVrGXPPZ2VZIL5cUjj
d+l6EJ9N553OLfHWdM7ovIp5GmKf56yPKr2+Un9T1JkS2wytp3lKqkVGz9n1
69fzOS+KPaa5Krp+tG/KG6A5r9TUVP5Zek5L42g/73nsMpe5zGUuc9n/ZrPz
OgUUQTELnXUaOss0zCbmVRuYJ2y0cVeQUkvUJoFHpfQ4Ao1jKafLxPwbi2YK
9s5mmC6kQnfmLOTunqh/+heo+MFTKP33H6KEofQXL6Nj/WbIA4NgTs+EpbYS
1t4O2Ji/a7doHcEaD5pz7sp8fKqzrp7LBJPGK3ye3/N5OgoufLNcqlRLga4J
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
1EcYUBOmR12EEU3xQF2sDtUxagYVahLlqEmZQXXqBK9RlXA0/z6fuu4kBprm
4VMtNL9h4/nlFqvgZxgtJhhNRl6jirhImt4h0LyYnv2tZ52JCA3sD8RtGug7
xKuJk8dGtlSrIQEN2OXkV40DA92w3y2B4VoW+gNP49amtYh56UWEPPMMop/+
JVKfexvd3gGYC78IXfZtYEzJc47sxJOaKEzVdn+fdoFHtZCGAenCsu7DpmWf
09lhJxAHy/1AO69VNcbe17Kb7/q0Bsdu1mF72nV8GHgJv/QKw+PsHD3ymT9+
vPEcXtyXiZ3pfTh0Ywqh9RqUs233sNt52C7wqsSpqtnv1zrOA/HHVL/Jbjdw
UL+lVs+iqvIOCgtzkF+QizvlZZhkz1HiiSysr7NR27KQxoiR504JRb4o0crI
YbELla5EmG1CzTAD1Q1jbVDF2rLSqIHCqGYg5SojdFzDSg+5SYnqrlpklmTh
QNhheJ3dg5D0UOTU56J6uAYNU/VonJVBNtuA8qFSlPTdwu3+WygdKsHhpEPY
FeiOvYFeKKsoZa7w5D1NdOmYxlmH6avk2It97tflpb7O56V5TFKbT9PYmQcW
tVppTo30XA4dPoQt27dg+zE3hGVFoqz3Dro0PejT9GJA3YNeRRd65zowpOlj
f/eirqsSxVX5OJd4Bl5+7ux9AdpHWtA/04tBxQCGFSOsbx7j/Pc4639HZ8YY
Rjlm2f0xy3ynGTb2IChmFRzKWSWHhvWvKta/TrN1k8wXU7I+SM36bTXrs1Uq
5rOy7U3PTrB+mfXRDFOKWXbrKDGq1mFYY8SAxoT2ORtudCtxpWECCaU9WHk0
BS9vOYufrT6BZz49jGdX+eG3HuH45EQ6tsUWI717HIXjsyhnY5o61v8PK5j/
zPzrIfb8a+7owPnLadi51xuvL1yIVxYswFuLF2OzmztCo2NwISMDWXm5aGiU
oa+/h53TQXbcw5DPjUOrZPeBeob5AcSnatg9qoXFrGH9kBo61p51Jj3rS9gz
gPXP3exaFJaVYaPnbixbv4ltOxatbW0815+uE2lRe3p68ucwPbcpt0p8notw
Ho+LbZaeydS2xTbzee1Y5Oi/Dq/vMpe5zGUu+2ITx0Wk+eLM9VDfTOtEnR+p
NpcL3zAk2l8EodbsfflUw7xg4wU2kDBzOMbjVJyBHHITc8YNas6pQsk8Zjl7
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
dN5F7CLXLDbpybRmrTAd7TfL10sdI7uQT13sUy7WC1Xwux6BuT44114y6nQi
h1b95Z3kkzjpnHAdKsEzqsexjzquFz6MU5Z6LvdW78ps//PAaxFO8gVZo1Kt
T+l0zj/n/sZ1f7jWtUvm69lPtNs4TtUiIH4N+zYc68o8jTI+yCdC4VOVUDib
VdKIZFeNZegcMtXJfbSvr0/UrmD904sXL4oYU65nwXWllDwUdf1DpbG/xp/l
WlXvv/8+QkNDcffuXcGnct4g+3b8fj4Gr6Myb8vrsBxDU1RcgpS0DDy3Zhf+
+uu/wJ/8jx/iL7/xPIKv1iCpaBzJFRokVxtwqc6FxHo3EhsxjwauRyXFp6a1
2JDs4VOP4S3fKISn30fnmMKnstaoU6GT5s+RKlbU+77hel1Wmn9ssp6xRzNB
7pbs35psnMdJv83O8a/uJSuDqac1ZQVkfmqW/prDbsbIcC8O7XsbHxx4B+GB
frh2JREtzfVo72hDd08/Orv7UN/UiuqGFtQ2P0ZDSzuaH3fiYVsX6hpaUVvf
jIaGZjx62Iym2ho0VlehuaYa3W0t6HzULNBB6GpvR3d3F7p7e9BN162lowsN
dJya1g7UtHSg9WEHHrd2oqO9B53tvejsoMfObkIXoUPw7Rzb1EbHfdxGf+9x
Ex62NuDhoya0PqZt2t/R0Y7W1odobm5BUxN9n8ZWPHrUSZ/rRVfHIPp7p9DV
NoaWxn5UlbfhYmQGDr57AevX7MH6V/bi5oWHqI7ToSpGh4ooHWpiLGiIc6Ne
AGiIB5oTpcd6Ql28C3WJ1A+OtSJ2XwVCd+Xg9JZk+O5Kgu/uRJx5Kxq7Vx/C
8z9YgZ984xf46XeeRWxEHK4mp+JqagpSUi7hcnI8LqfEIzUtCdfSk3EjLQ13
r2YgM+Musm7eR/bt+8i7n4Xe9m5Mjk5AN6eVYvk4Do3GLCONXZyzrtSj8lxz
GsicMub7nLJI5JQWu802ieA02WRw3KpV0gJgG4v5Fp67ndKammydeWwq4yK4
hQ6AnmNX3Q6h6yTqS6r7nhLn6YAkvyynnrjYxBPUjgPTUza09OhxPrMLLx1J
ws92BePbG47ia79+Ha8fD8eJyDREXctGz9iMyEe2O6W/IPhU1iUReU5cv0xP
doVJ6A3xmtbw1Axae/qQW16J7JIyPKJ+yBqT89oJdE/RvKcz66GjeVBv1i/J
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
pFiozuOorlVrzqlQW1sj/PQOHSrC5csX0dV1g57HNQcshXip5MJxCvsjvf6s
SCqN71FykXP+HC1PCs8fyCoH8W2A8794fF44JKuIYmh1mHF//B5yCrMQHLYP
QaH7kJgci7HpMbglu/Al9vqULDZemdouPbvb65rJauObsXSbzQfDNoLsh+ly
OoTd7+DgHbS2tiAnNxv5+Ur+Kc4HybYomr7MRbM91XMBet9Bs9ksbFJv3LiB
uro6ETeVbVELSNZzDir2++ftrKdxHDbmVNk+lflWxtGjR0W+C6GHkRziXIXD
9E6Cssvw7rZwPLtiF0JKapBxZZTanRUlbV4U3wDyWn3IaJSQUushuJBe70J+
qxdlN2Qc6/PgcPsklgcm4/X1+7AxPAmJpcfQOzI6w6fa/fhUzZ7Pp34TNucL
i0nHeyu/xNOvLEVy8XmUVnXhWMM9HG8ZQ2nDmJCBBfVGpd03MCwoaLKhsNku
liwv8utIXtA+hSQLygxmlBCKWxSZkUOyoKDZikKSDQUtDmQ3E1qcyDYQaFs2
yYL85mkU8zGEAoMFebTMIWS1mJBVP4FsQkGLEUUGkrXNE4J7TTpWh4iCSmyJ
ysHLy1bjUkMb7ltI75dVrpT7Xa8CSVZiqQo+TFJqDddHr/A9n7VnlnXzHKLZ
au9KrR+z8TIl6G1TlfUHOXl9e/d4fNBcJlxONxrr2xAbm4YPP/wUv3/udez4
LAIRmzMRsSkb4V9kIXRjNiEXEVuKEbmlDJHbDuPgrjIEbchFwLpMBKzPROCX
mXj9mU/xylNLseK9TbBO2OBxyGL6VVaDR7NclCT2V3UK73ZZ+Ls4Z+DxOeDk
PFIeq8jjpDUps9GMyjOVCAzch7iEOOQX5uHipfPCztVFbdglWQQ3KXGUVJ9F
wOUzCXbS49PgUOWTEhdU1vOp/jnAvIrtrsykt+BTPTN8qqzyqbOYnRMQnQN3
FhqXyp2HiZ5jikZoE0YapNHYappgmYbkUjlVj4me10R1xQoL3aPVx3FeZVgF
O6y8GckvFZRoP2odYrjlB3MfuqkuOam+OT3yTCwCUQ8lWe3DfKKv4ngR9+/f
Q0e7ARXlJThyuBCXL52G0zZFz2wi2NRYBV+fT+WYsdw/uLUYt77ZuSkF9Kw0
prS57bTkCLeemeiySuxb14xVsUsNzK8fU2q+0P7xpbX5J38OcrbtzM+P8rrm
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
oMzgwqEWJ4oNTpR3A4WdQB7npqPzFHd6cOgGocuLYlrm0LlySHbk35BQ1O3D
oW4ZZfRbWbcbh2+4UN7OsnYKmWfbEUf3uyfxEJZ8ugVXmzswQbJDcFqyT8cH
sV2zDbLXORNH0MXzMpxnXg0oq/WT+ph3ep9j//5UHw9Xg+Z/qtfD9Zy6TyNi
1IEHt2HezvEYHA66N45d4lWWMn83r1t1MlYO4cO9gtPRwo76YHO4EHYwCuu+
/AJfbt+KodEhGnsY4ZBscPk4toXu/rySyFEl8upw+3F6MThwHy31XSgrOoHs
1EPITSlHXtJxZMUfRWJEMXasjcTS17/AJ29vw7qlAdi9Lhq5sSdQEHdyFvEn
UZRwisB/07HRxShKqUBpxnEczqTfkkpxrbIWw7fG4DR5FP9/r0/EUZVd/JwK
lwo1LrTGp1qooTOn6lC9jOYIT99s7AJJmzdVYyxzfFIYp+Boa8UEjcvvpKaj
ZulqVD7Dc9U/Qf73/hlHf/ALnP3lM+hfvRGjQWGwFRbAV0vjqqGbJJDvAeZx
kj1meslOlVd1izgFzD9r0Pv+C1ErKXmqtN6I+S2OY8txLgXvRb+ZqX62d9/E
tYY2nL/ejDNXm1DdcQfVnUM4a7iD/Kp2nDSMouqmCXV3rbDQSdXXJa5Hn1/U
bQ3+fYqLbegkJdaD5FNGPg/+exyHOjfmqj5nOUOTb1pMyf7+frS0tODatWuo
qqoSnCrnT2cZyzasLPv8eSSNk9W3N/+xqH9b+7aLW80rJqn2/Uq+J0k3Ua/y
+TJ9c44/M3yH3ksDLlVX4nz1GVxtqMad+4OYovZplm1Uvx2Ypj7J4rPD5nNQ
d0dyQHYJJlVkgBB2mfSuSTYwD+ojgS0L23K9faRPgPNPsZ+Kf5wcyIpfisx1
V8WcSYF58Wi+1c25ojh2r4hvSuf0KS3AJ9kJNoKVrqtYkPhE9ikXbHRvA+Nm
tN8dR00P1fNLtSi4YkBxTSf1F/24PupAm4XqklvhU9lmdZLe9SRV+Gkn9fNO
O/XdHNtHs0p5sE741zEtXqk+z6T/b/qxocajavvrzzuf3ap/PID57LD1tqsa
NL8YrV0slIWyUBbKd7ks8KkP9jPfBvzpTr+UUQ/Fgw8zD/SxuR5it6rwqQ2k
T2dib8AeBIcEIjcvh/p/p+j1HSqYT2VelSkCp7igrBgIsY3qlBFy5y04T1TB
FJOJ0S3BuPLzF1H5Dz/Hsb/+MY79zY9x6idP49pr72AiPgbuilJIdReBOy2Q
bQM0th8Wtqr+T6bv8/V5KvXlSbdd/SZ86r1pE6w0rmR/ftZzfDNk0yyYU+Vx
oVHwqbU4kHkYb2/Yj9c2hCH+XC+KOpzI4NwrzTLiOZ8S86lNCuIIKbSe0+5D
fqeMwg4PihpNKGYOoX4KpQ2TKDNME0wEs7JsM6Ks1aium5X1tkest/qta+eY
c855rvHYa5oecQ+mb3DNhz9nKdufGuwEB3IJBa0OlDLfQu/2VJcVJzqMKLl+
C4kV1/HBxmB8sH4P9kal4e60GWbSH6ycI0iN8c/8h8vlEOBYmf7gmHScw8jL
uRfou7MNINuy2gmy79uv2/OFF9HweD5VBftySrO2QZLqz+9TT+R2Uju3E8xe
uExeZUlwTHvhnFbWPfS7x/Etgq/P9zHtgfWeDeN9EzhfWoXEkDREByQh/UA+
xvqNws7NPUmg+/aQnuWx8b2roL9tRheMEzbcuzuJ6qrrqCg/gayMXORkF5Be
X4Px8TG43DbBKXLOFo+PuXUbrHYj7o/dE310fn7+jI82g22smBO4cePGDI+q
5ZdgMC/Kdob8G+/DXCzzqJzTgm1UmYNl/kCfv0Kza9TitPFxzc3NqKmtwcWr
VVj22Wf45TPP4vs/+he8+sEKfL7zADaFpGB7ZC5W7krGO19GYdHqMLzy6X68
sno/3t8eh9Dcs8g83YCjtd0409SNNbuC8N5na7A1MAhpBXm4c/c26Z4O4aXh
83nn9GkejqnrVd2tJSUdusanPr14FaJKryp8auO0sCFPafEisUWxTRV8Ki/b
FD41rc2HvE4JpT1uHOnkdm1HRbsVR1n21Qyh9OoQyq4P4/QNK8qajThEcrG4
gX6j9l/c4UZhO6HVhcPtZhzusNB2C0rbLMhvMQoUttlRQuct7bSjrNNG+5jp
Gma6xhTKm0eQc7YVCaWXsTe+GG+t3IDL9c0YM5pgU3Mtcb4kDS6HBU5hl2qB
zWKGkb4hfxenapOk2SU9rh98VH85nz3U3P5XUrntWcNyLYamh3PKaPNEmj2k
FrBxji226ruvcsYOOm9QeChWrfscazetx93RQRjtU7B72EbVhtnc7pKQgxxf
2ceg0zusLtRfa0dRznGs+ngz3nxpGd57ZTWWv7EFy17dgo9e2ojX/m0FnvnR
W3jpZ0vx6q9WYsnTa/DJq7uw7OXtWPbSVnz88jasXLQTKxZtx/JXtuHjFzfj
jV8vw7JXNmDV4s1Y/e42fPjqp0gIy0B7XQ/M41QvXcoDcN4pn6SfE3MJ7oXt
85hPNev4VPFG/fhUbRjGMxdKfHpJiQ7Aky42E+Q7A/A01MFx6jQG94Whbdlq
nP7Jb3H47/4Vxd/7Z5T+tx+h5nevo+OjlRgN3g9veRnQTh374AAwOgyYp+ik
NHLz2JVJKpYFLmkGPt/c6XbmU926+2K/bC9DSbMllmMTJpw8X430giOISC7A
nthcJFVQm6tsRs6FDmRW96O83YQz/S5UD3owZXfD4fUJO1U+t5PjY9PJXF4F
/n2Jiy7iluWZsfCDw9oH+dSHGxN4xdwlyzC9/z7rNnr/aOZXOT8f26VyXirO
3cdysbW1VcxJ8f7afL7Ga/nbAvqXJ1FHEt/Vp8hNjzTb7868XLa75Xk09smn
8YjJNInbd26i8vxJlB8vxfHKo2jqbMKoeRwWj03UcwfPH4g676J67oLd6xRx
cDm3rI/bt8UKl5XGN3YXJLa/0LjUmTkWnwLNhFoVSxo1ylyr2+UVbV7fdv4Q
aHbZWj1XYlLwM9vo0a1KvFSvGRz8Q1bj+5ocbrTcvIdLzb0oPl+PVfuT8Xlk
PtbHl2Nn/gWUtE2gatiOGw5Z2KiO0BmHPT4M2SWMWCWSZ5KIAzJrzPJwOf0w
f32ua/pYpto8gd4e+lE2J/7zY/o6PZ/9qd6ORV+fRQ4/Nfflk1jPF8pCWSgL
5U9ZFvjUJ4dPnQ+PM0N94Hd1/DHvAY8gQ5hPbWlsQH5OBvbt3Y39wYHIz8uB
jftrzPqDaVyqZp8qxrHse2OnLSYas98dhVzfBs/hM7An5KD9jaW48vPncOq/
/xQVf/1POPz3/4LTv3oGPV9uxEh0OKxHi+BrrwYmugDrbTrxKPzHGF+FT33S
bAD8y9fnU7/E8LQRVhqTOngeHcL6CP6BG0QkSRoQm2wOnLhUg8jMMry9IUTw
qQnnaMxHOj/7oSY1SUho1vLUAzGNtGzguIEy8jt9KLoho7DdhbQLt5F8ugdJ
J28g6UQnks60Ezp1oPXKjrnrc/bxWxf76tcZ86xXPmT9jLbuf81H3cMf95oJ
Z24g4mQPIk71Iup0H2LO9CHp3E16V33IutCNrLNtiC+7gn3JpXh16Ua8+tEa
rNuxH3Wtnei6eRM9/TfRS8ubN/sw0N8rcKu/D7cGemcwINCHEdJ/xybHMG0y
ijirbKPjEHysS/Cr33Z5VKjmya/EpyqayxwdgfQNBuedctu9uHf7PgZJZ7nd
M4w7XSO43T0scKtrFLcJd7pHMNhzD4O9Q98e6Pp36d4G24fR33AHndW9KE0+
htDNMQjccACRO5LQXk3fu/ke7rSO4E47gZ7hDj9T3zAGCXdv3kffjUG0t/Sh
9korMlLzER+TirzcEhyrOIWOzi4Sq06VX1fAeYgnjfQOhgbQ1mEQ8U7ZlpXj
WzLYLpVjp/b09OD+/fsP6EpabADmRfn36upqYZvKNq2FhYXCLovttLTc1sw3
sA3rTaq/zDNwjiuOz8r7cWyBEyeO4+jJCny04mP86umn8Pc//DFeeut9fLxh
Dz7bFoY1e2Kw+PNAvLR8N577aDthJ15ZFYgPt8UgJPskUiquoPBcA4rOXcfy
jVuxZNlybAnYi8zCPAzeuw0Xx7vQxdn151NlleNhPjU0MRvvrdmJ3y7+DFGl
15B1+TbyG4zIbXEgpVlS+NRWhU9lLjWR45y2+pDeyj74bhS0m5BZfRdpF6lt
n+9BBsmQxCP1SCqvpfusR+6lbiSeNCD2eAuiK1oQd7YbUZV9hH7E0DL5bKdA
EiGRZEnUyTZEnWpHbGU3Es73qiDZevaG2C/1bDtSTjUhMu8M9iWUYN3eWLy4
ZCnKjp+Ggb5978AtEadhgGUF4fbATdy+fVPIj5vUrvp6e3DjRhd6envRf+s2
BgfvirxiGu/jX/T9j39/qYwblD7q8Xyqym/DO8OrKrGg1fOJ+KHuGT6V+UZZ
+JvPfj8tRoiY5qXrOL0eBIXvx6p1n2HtF2sxeP82jPYJ2L1mkoE2ITvYfkyB
dyaYKvso281OXL3UiIykErz96id45hevY8nzq/D5EqqDb+zBqkU78fHvNuP9
327Eshe345OXd+OzVwOw9g263qJ9WPXKPrFc+0YoPlsUKNZX0j4fPLuRjt+O
tW/vwpp3duGlX76DsO1xaL7aBcvYLJ8qq8/H96ZknnHQ3Sp2embVPlXz95+P
T1VdhMT4SvEs5lj6Xrg5nqPLDIwNAb2dkOtqYEzPxODOQNT8fjHO/eQplP7N
D1Dyvf+Byn/9d1x59hX0fLYWxugYeC+ch6+FOvq+bmB6hE5uogvR2b12nrAS
doKS0yOg8amzXKYSk3iGMfcpbczDfKgApxOdRsmxsziQnI8NQXFYuiUCWxMO
IyCnEiElV3HwVJfI0VjYbMaxGxaMmx1wMHdKJ3OpfKqD7Yw9CvxtCVycZ172
/YF86uxZOWY3yz2Xbt5BzEOoNvvis5B85LbD3CnLueLi4jnydGhoSLQvbQyq
xZTUfKXn85OeLzbmt10Ed0/v1kkf2emWhQyd0zb5+VxOkZfK43aImN6jY8M4
f/E0yipKUH68DFW1VRiauAeTywK2RHWJOuuegVPMCyvzccyTMpfqpjGqwqe6
Z/hU9vVgW1O3S/F/8LgkYbsuS9rYGGpsZI7z7RHn+mNwqfPzqT7xl5fnL11W
aiMW+DwWMU/CModtpSdtLlzvGsSJ6+1Iq7iMRetDsGhTDN7ckYqlBw4h6sIA
jnRNomHajV5q2NRycY/ufcghYcQuifjEPCvE/L4ka7L00fXD359A41M1PIxP
9Zfh/j4LmkzXoLdP9edTtThBek6Vt2nxXp60Or5QFspCWSh/6rLApz7ZRT8E
eJTr/ny2rbPekfOczI+YtVttMDTVoyAnHcF7dyIsKAAFudlwsv+eb0Z90Vxv
54Dj1/to/CWSQDCnen8MuHkLvkYD7JGJuPnxZ7j8b8/i2D/+CMX/7fso/Lvv
o/hffoSjzz6Frl2b4D5ZAnTVAIMdwPgtRffyK4/z99ePD57E8s341CnYSS91
ka7qUbQMzDLbmsWwEqvNSmOak5euISqzBO9sCMLrG0IQX9mLkjaO/+lFarMH
KQYJya1AXLPCpcbUSYirdaK4UxZ2Vjl10/gy7iQ+2ZeLZTvT8OHWBCzeEIw3
1gWp4L8DVXzV9SC/9eBHrAc9Yt3/Go/6/Y97zddp/cXPQ/H7tWE0fo4QeHN9
GJas34931wfh3bX78PryTXj+jeX4ux/+At//55/iV0+9gN1794k4luFh+xEW
GoLQ4ABEhoUgKnw/YiLCEBsdgZjoA4hWERUdicPlR3D23Hk0NLfAzHqaLM98
9SdB2n5jPtWncC8K/4IH5JDbSbqs0Y17g0YUZh1FenwxUuNKCIeQFFUikJFw
FFmEjKgypIUVIi204FtBelgBMsKKkB1ehvSQIiQG5CFmZya2LA3C+y98jnee
+QRLX1qH2N1ZSNlPzxFWgpRwega65+TwQqQcIETS8fHlSIzMR3hAMnZtCsPL
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
/2AfRseGMTnF7TiNo+l9NBh1mFJP4O79O6iurcS5C2dRfKwAcdFBKMhLx6mT
BSgvO4dr3dcwRm2ZhvpfjoU2EDT0frB2hYquV0P1VkPvvIbjDQnsrzZKdkZE
TDT2H3BDQEggsnIy0NvfQ+0m92rSiNhK12Chus65SvQ0xuY2X7x3dmk8HBiV
geUbDmDBmxsQll2L9Et9yKvXIp/autRGO5IagIR6IJ6WSc1ASiuobTQjqXYS
HlnVWOWVJPjU3X7RiMspwrheR9dulnQx2b/Nyn2bBTrmgsRvsGOC6vG4VVqK
fNZ8PVaJ5+U8Pkb6vUYe61r5ewReWswCBnp+Bnov9DRQ15ssMDq0S83s02ag
doGeqd3A4HyPEswms4i9t1ilfNOcC6auuRFRCQnY73EIweGRyMrNw/2+fqFl
KFgm2T9VxPBbpVxQ9pkQb37RxXaLrIXnRCjY2FeRwXqGrPnHOqZ6h46HxHhJ
eqomkTdsOne8WdJH5udkofvAcf9s0/A94hxOSn1WlWYS4dF07/fvxJYdGxCX
EoXkjDikZMYjLTMBqVlJyMpOR3Z2BnJysnAk9wjV6yNIS85GYkwavA4EYOcm
Vyx5cxVWvLUFSa6F6MwYx1V6T7vSNLhO7+ytTCPak6jNiKO2IpaXRrQkmNCc
YEZTvBGV4VNopL83pxrQnGFAdaYKF1Pv43RiN/JDG7HqdQ9Eeh1Be3UP1GN2
Ee/PHAy3z3oGx4jT/dLS/WA/Ve4DWZPAJLRqLQ5tWocMggNK/VSu6ZKSj5Vg
EZAyWk0JplbMn5rIFtINARO9wFAPcLUDdmpzDUnJmPT2xbWV61H6s5eQ/9gz
yPrSU8h+4kkc/dl30Lp7HW4e3ouBhGDYO2qAwbuwj4+Q8aYCtAbJtuNYAXan
NdKz5g5HCEtxXWYNB0nNgBViVdT2jNL6AD3zO1RXa6jtzm0bxOaUKiwMLcEC
r2I8tSkLX1iWhn9blorHVqVhofsRxJ6/jqKWYVT06NBrlnz1VHQDprgfFTnH
9EIrlxVueB7ZbDNQ3TWLXme6F5O7Ppt9+j2TISXRUgAW6T0hmK1z86my7eUc
iy/H//NYQfZj5XWO82fbPycnR/iKZ2VloaenZ3o/Pp7Sl1A+h3Kc8qi5f+dx
jZL3/aQ0WGc8yxX+mvYZjY/Z4w67iAswCp5Omk/R6bS4Q7+57HIlSs7TuOfi
Rdy6TfdAraH9jOL9NuvpWAba32gVfdTspA90TNqP89TZLRJ3r9fooBqbwLXO
q2iqb0RlxWWUlZbh6lXWk6G+aFTSVrA7no2VwPNJPB6yOuwPYcdze0LH5DbX
mT+1yLqimLFohI6FY7rDOofOGuyS3gBXLXa9FTF5tH2MtrEmauu4HYkVt+Fd
2IyNcWV4aW8GfrApFt/8MARfXx6An2+Lx+qwEvgWX0Fy1QAq+gxom7Khh+5D
P9s9rHfBcQE2yY4S+id0ItFmsE+z3B6LOi37uStnGdi3XGp7LTwmMumnn6xs
b834nTj8Nxywct13cKI8RmHdINZW5xgW1lbv6OgQ42IeJ3NdVtZHLkr/1IeN
253rsVyctQjmy3yZL/Pld738rvKpzjkT5O/KOTXZL0fOWcjzygyeR5bBfQfH
7DCHyv0G9yGcx5hjH1kvLjg4WOQ95mVYWBjCw8NFTmN5O+eDYB0z3sZ/5+/w
ktcZ8ndl8L5KcF5lnuPmuW6OpSw+WoyzZ86iva0dPXd6oJpQPcCncu8j7AUH
JN1+6zTk+eYZzM2dKjVUZah1GjQ01yE1PQGeh9zg6+OJrMw0GLQ6ydZmhwGj
FK8mm6tsXxiE75xsBfOSxro2HdkErHU2KeWmVZP9P95HBsQdsv2rYCgqwO3d
LmhfugIVv3wJp77+LE585SmcefIZXPzhz3Flyy6MJSRDW3QMxvIy+t5tsvk5
3o1z03IMkJqOryXoRB4swafSNfJ8OGPaSPwIfOr0PDXswprXC6XS/z5m5qMU
rotsgytzYzrzqUpdIq63rq6uWLt2LbZs2YLhsWHBY1htEnMlRl722WC/II5l
U2uncKq0CiFJeVi01Rtvb/JBdMlV5LWokdFiREqTEQlNJsQ2Soin9aRmI7La
DChonUJW9QDCilvwnbfWI6agFOeabqP9ngoa9h9yxCZJroR2oRVhlf/xeId1
8yycc1kvLWm8ZXXk35gGHhGDZZdyE0jgYxkkWI0O4FOF0MgzSa5GbN4q/2Z3
YFpkzuL4Au/I4ymjQQLnZ+ExHec3MEsQuQ44/pDzq9J4If9IHvx9AuFx0BM+
NDa+f38AWr1JuDWZlXyqnMhFaEnSuMVIo3cDc7MG8dbbLDPP4QEPn1+bT53t
92MV/uxO7YpdihecUE2irr4OG9atxvHiQtTWSHyqdZpPlSB4Wat9GnyKiWEt
brQPouJMB1a8tgcb3vVAUUwd6osHUJs/hJqcYdRmjaAucxxN6Vq0ppjRkmxB
S5IFrWkWdORY0JSiQ0OyFvXJOrRlWtCWYSaY0JphREuqHm3pJrTTtnb6W3sq
/V0JOlZ70oO4Mgc6kui4KUbhw8acbmuWwQETWjINAs20vT5F4nYbM6YE6jLH
UJc1ijr+LbmDqM67j4ZjvWg904fywmvY+sEhLHl1E/ZuPQwf90hEhqcgI6sA
58vLUdPciJauDvSODmDKOAUdtbEG4QtI7a3aAPWkBmMjY7jacQ0VpZepLzmH
E8dP4uK5S1SXfLB963Z8sHQZNm3aJOL5ue/Jy8tDeXkp9fP16OrqFHqo9+7d
xdDQAMYmRjCpGhO6zPyOm+k91BnUGKbzN7bWobC4ABnZaUhKjUdCXCTOlpxA
TXUFOq+0Y2h4kOqtXsRxWx01kHlVoZdIY0epLeEcRBYBnk+Z1KgRHRcLN4+D
CA4NRlZOFvr67zn4VKmlMJskH3ADaxho9IJb5Lhk5lZ09IIERqdi2ab9eOHt
tQjJrkJm6X0UNmlxtM2GjCY7khuA+FogtgZIapL41MxWC5JqVfDIrMYqT+ZT
g7HbPwpxuUWYNNA5mJMB/w7WfTSKnOPSPJDUHrJvotYBu6MuyzDx3IvZJsbE
Jke+IgHmJAkcD87HNgu+x6E9aHVoFzIPwc6PeqPkQGUgGM3ibzarFHvLepxm
qgPcb0cnRsPt0AEER0Yj80gh7vX1Q8+8AvM7bBswJyJA25jbs0rafRJHI+mk
ypDzTE3DzNw1wyAg+FSLXuSo4fZZykllFON5i5m1kXmOyCz0bTlel/U42ffN
wjG+dH5+blqdVvCofD6DUU9txxhSMhJx2O8Q9h/YDb8gbwQE+84gyA/BIcEI
DSF7KzQckWGxCA2KpvYyHF4ewdi26SBWr9iFha+vwYp3tiPJ7Ri60qdwNd2I
zlQjrlM7cJPf+wQzmmMsaI6mtiPWipZ4G5oJjXEWVIar0ZRsRHOaUbzD9dkq
lKXeRUnCVRSE1GHVa66I9MpGR/UdkY9K1k+V9Re5XhiFMo/EDprE8yGbQs7j
xL/fhlmQ7Q8Zkm6TdRpGskiYnWUlAdi1kg2kHwdUg2RT9QP3yTbq7oL5zGlo
MjJww90LlxYtQ8q3f4DYx59C6mOP4dJTX0XXWy/h9oeLMbB3B2ylp4GeG8Aw
87IqYJLeMa3DmGNXVbKh7Dq7RB7pyR43s4aDTrC8rOeksqkxatNggH7lXap/
HWodLt6bxOGTbdiWVoUPws7huS1Z+MrSRPz7ogR8ZXESvrO1EHsLbyH88gRy
u0y4SucZcMQ/q5jfF969KsIEYYzq0jj1G2pqewxihtvq8ECdxadaZkO6oQrw
M7DI/NrD+VTlGEJpmynzo8ux++yHwXqqPAfFtjvrofA4grfLegLKGG35HHPx
qQ/TrVJCvk6Z6/wkOKjZfr4Kfk2+D858IvNmwna1TuvF8hiqsakZFZVVKC2v
EJ95G3OqQn/VJLVhFiNdtyArMWNKULsoa7Nye8ea2DxHxvOBPbfv4Ep7B8pL
y6n/OoG6uga6v9fJFuqVYs8dz4a5QDXHo7PN6MiBJWL4uU+h/Qzs94rZM0Ni
PsmZT8WMyWZ7BJ8qQ7yjdilmn+vuTTVwsmMIaZdvI/BYCxZ55+KXO2Px7ZX+
+NpSbzy7OgSvux/BhoRKHCwme/yGGqVjVrRT1bgpOFmq9Zxjyyb1K9xe6+h+
6Tn2ycDxDibpSoVuiEnyJbc6Zcrgd8TG9h7XP35p5ZgBi0Jn6SF8qoNT5XvL
dZjjGng8zLYBa7O3t7eTDXdr1nyBXD4qnzqXb6w89pkv82W+zJf/LeWzxqc6
a2w/7JxyWy5D/htv51hEnlNjnW2eT2bulHNy8jwy486dO2hubp7WRJKXAQEB
2L17N95++20sWLBAxEQyXn75Zbz66qt46aWXprdzrCSv898Yr732Gl555ZXp
dfm7Ml588UUB/j4v33nnHSxdulT4Ie7fv1/4C/n6+oocohybybEWc/U3yt8t
r38SMRcaGt/UNtcjjsY0bocPwCvAC+k56UIvSThhMKnjbBc5ZLeU9pmki2Wm
8a2e7AIN2UsqKf+BaYJsdhoHDNyFuaMFI1lZuE9jo+aNW3DmxV8h/bGvI/3f
H8fRLz+Fjm/9GGPrN0Pv5Q1zcgLQToPgURo3aPrIfBgi+2xC8LUGi5agFye2
6Mkm0JDtPOWYC1dclEw/2ZWwyX6pPGywc9YHh3+tWfiXzFV+3ZgcWX+L7RS2
R4Sug5M9LD87XvLflXzqyNjoLI0v6YZbHCSebZoT5nltldaAU6WNCEk6hkVb
/fHWRn9En+lGXosWWS0mpDYakdxkQmKLGfGNeoGkJh2yW9QoaJtAdm0fIk40
4XvvrkfYkXM4UXsVDbeHoTHbJNcVB2YJ4nGsp43sOqvOkd+C9dhoSc9diiF0
6MdxjK7didhW2qzC2dkkcY4m5h7JSLXQMej5SrD/7sOJa5kBx8SZMTk6hsKs
Iwg67AtvN3f4e3hh5H4fLDojZonIiffOJjmHC1KX7FmtCkb1JI1dWKSMxr2m
Kbr9KrEUI3R+TnZH3bE97DqA2QMQx8DVLvk/SMcwTbNLsgaz1W6bHoOpJlVo
qKvHpnVrcbLoKBqqq9Bz66bg+5WcLLOxNruU74RPweebGNbhZvsIKs9cw8pX
9mHjG94oDmlCffYw6tLGUZc8iYYkLZoSDWiOs6I5GqiPJEQBjbHURKQAtdE6
VEVoUBWpQRuttyZbBd/anGhGfbQeLQlWtCba0ZZEf4sh0DFaoqWlAB2rjREp
oZ3QocCVCAJ/5n1o/4Y4Oj8jVkKjE5oErAQzmuLoGhJ1qE+aQl3KBGEUdZlD
aMwbQGNRL8rSu7D5PXe89/xarF28E7s3eyAyLAFnzpzH3YH7mNBN0LhLhUlq
S8cNoxjVDmNENYLhwTEM3RtC750+dHfdRMmJ80iMTUFYUCQCfYORGJeEZYuX
YcEvFuC7z34XO7bvRHZ2jsgpxeNfbp80GrXwO5KiaHkexAitfgpqnQoavQp6
yxRUmjEMjNxHV3cb8oozERThh8NBXvALOix4BR53cZ/F9sLD2k553khuP5Ux
6Nw+Mjdx6NAhMS/J/l88tuN5KNkm4PaR9+O5Um5TeZ5Kw/NVOh1G6LNXeCwW
bdiBn7+zHCHZ5cgsvYsiav+Kr9iQ02JHagMQVwXEVILaQiC1FchptSK1Vo1D
mTVY5ZmINQcDsds/AnG5RzFp0ApGyz49bjUpCB15HgVw7hNlsE8mcwnCn9TC
XCz79+mFwqY8+2izGxxzYyZpvMy8D7/vgrClk0xR/6ahfbS0j87kIOKsUpsq
fJLUaGwqR1xCMA4ecoFvWCQSqR3p6L6FwYkJDI2NSxinz7Q+ODqOgaFRjDjm
lcfGGCN0P2cwMTZMGML42KCEYcKIAuJvw2I/Xo6Pj9KSjjM6QuDtE7Q+ieEh
OufQOEZHxsXzkua0qc4OU33tvUt22iBG6fjDI2Sj9d5G4dFcxMVHkR3mjR07
tpBttAVbt24RfeGG9bTcvAPbtu6k7S7Yud0dWza6Ye1KF6xYth3vvrkeb7y2
RuCD91yQdKAEV9MN6Eym95VwLdWOG2n0TtP72hQpgduA5lgJjTE2aju0aEwy
ojnViJYMHZqPqFCefhsliR0oCK3Ah7/agUiPVHRV3YZ+xC4em7AvZApvummV
YlyMkHI3qcl+UnPeLLM05y1PTTump2fBjNlaolbRXiqc+8xaqa/VkU2lIXtK
PQZMjgC3u2FsbcSdojyU+ngi5I3X4PPcd5HwxBO4/hd/iZ4vfRF3n/4a+l56
Hvq4KFhbmmC/0wMM0ndHqI+YpLOpbVI89qzcQVZHnz5Bv2+MrmKUbCR61vRv
gCym+7TzPbqubvptRzvuI77iGrwK6vH63jx8e0ksnngrBl96Kx5/8N5JPB/Z
gxWFEzhw2YDzYxbcoJ/Ub5P0Ym1C6WCI0Eu4B5ulj0wc1jjg9sTgmMNVzF8q
kwkoA9iVbnv8TbrvzE/pjB8/F5TMsXIedNZE4bESt1UcH806ANz+cfska1wq
8/YoOdtH5UV3HtfI9qLM0X5WclrxdfGYivsRjg0vKioSvNvQ0NC0zoEz3+b8
fWdbmNe5jeDjcm4k9v9lX2C+v8zxcd+ivHfcDzhzfLJmOHPbzueUn8u0ztYc
mOOXzlqTxziyfAG/Nt1jBrT0qnH+yiBck85gyaFU/Hi9H76+xANffd8DT6+P
xo9c8/Ba8EUcqupD0m0tzutsqKXvXjNYMKSh/tbht6CnpdCU0ugwpdFSP6yT
Zq+tNEqx0GdhD7N9Te+FbUp6P2waCZyfludc7HrBsc4oOjj8VSFlH56JNprx
UZYL3zceH3PcCvuo8nPg8SiPo+X5AnHvFP33XL6r0/fL8azmetZKbdb5Ml/m
y3z5XS+fNp8qj6c+iWPJfCrHTbPuG/ftzKty/8xxC6wJx/EMbW1tIr6R5+C4
3+BlUlKSsNvffPNNfPnLX8bf/d3f4c///M/xZ3/2Z2L5F3/xF/irv/or/PVf
//U0/uZv/gZ/+7d/K8B//8u//EsB/qxcZ/AxZPBxvvCFL+Dxxx/HT3/6U8HL
Muf6/vvvC/uMNe95fMr33jk3qPPc9ydVPik+VZJYtQlPNguNEc1k+1t1E9TV
k92v4vgyspmHe2G72gVzbS0ms3Nx180DZ55/BQVPP4ejT3wLZ7/0OEq/9Ryq
nn8ZV1atg+VYAQ2E6oCb7UBft5RLgW0Km17y0TSaHeNMaUBjdwx5ZR5VOdSd
5eMAWXlLul5mi0zsL/QR+NRHFf4729U83ne295R2Me+nzBfD9dXT01Nw7C4u
LhgdH/vU+VTOv6vUnuIYcuGnZNDCIvIDT0n8J3OqzK0KGCU+1UJ2lpnuqohR
tU/7djrC1GfARC07gE77c2qlcaOAbsbYlbk+5WelT4Hzto+7/j9xzlncpfQA
WTtZNTaJU8XHEBkchoDDfggNCMXI0AjdQrPEnRptMOmYOyUb1OBwirLIjhNG
CXbHwNJK982qoaqiFhyr2aiB2UAw6h4I5X0ADwwwpp1KBKwOLlXmUznmWLRP
ZgvGRkZRQ2Of1SuWo5Da1MryMty42gkT1RO78FF1xAZ/DD61OZHGLokWtCQA
tRFWVIdbCGbURulRG6lDXbQeDbFGdKQzx2pDGyPJioZEPWqiNKiKUKMqXI3m
ODta4iEhDmiNnUGbA+2EjhgFaP0Kg/Zvp+81JhISFKD1Jlo2K5FoJ9gIFjQm
6whqNKSoUM+/KX0AVek9KEu7juPRNdj8rjvWvr0HiSHZKCkoxdXWG9QHaGmM
ReMrkw6D1H42dDag+MJRZBdnIjU7BVHhMYiLTkRCdBLio5IQERqFpPg0pKVk
ISM1GxER0QgODEFQQDBiomJFPyhrokn5rs3TGgxwtIbi+bD+I71/k9Rud1xr
Q0Z2OsIig+Ef5ANPX08cO3UUFdWlaL3SLPT0RI4xkzKG2zStIyi3d8qcxMo2
kT8zr8s+s+w7y/EcqampYqzOc6Lcl3M/zksGj+3kPrzk7FkcLSpGUFwC3ly+
Dj985T18+4V3EZhdjsSzN5FaNoTUinGk1pmQ1mRHBnUhmR0Ssq4AR6k7yWnT
4HBeLVZ/FD51ekJOwac6OheTmu6cY/pCGSMhR4FYRS9jdkRASIrmQpXHJsVT
Cz9A5iKUWupiF9uM5o4QlTQ7fNyl3raDnkFaZiIOeu7HC6++gZfffA9bdu/H
/kM+2OKyH5t2u2DH3v3Ys+8AXPa5wYU+s423Y8cO6mu2YsvmjdhBy107d2AP
YZ/LLuzdvYOwHS67tmHPDuqPdm7F3p3bCNulv+3Zib28n8tu+rwLe3bvwm46
psvuPTh4wJPgRdv2Ycd2FzquC/Vne8W8Mc8X8tzxjh107L10jP27sd/VBe7u
e7F16wZs2Lga6zeswo5dW7GTzrOLj0vH3LVzL8GV4IbdOw/Sedzpmg9i4/r9
WLPCBe+/swlvvbYWry1YiSVv7ECc62lcSaf3LUqL6mANakINqIuwoCrMItqM
+mir4FnbeW4lUUJbKlAeOYpL4YM4H3YfVWl9KE/txtnENhSEVeC9n69FoGss
2qu7oR+TnrXFaBfajpyLR/gZM0tO/Z6Ono2RfY4x2/ZQVIs5Ie1jd7Codkc7
K7GJgmm1GyW7x6gC9CrJFtJPsmAKbP13oW1pwMDJY/SbA3Fx1w6Uv/cu2j73
j+j48pfQ8fh/ovXpb+LCCwtwJ5j6l+x8qM9WAEMaSdRxlI49ZpT4VL19Ji5J
cDSsDMuZR8fof7Kr6d896yh6rBO4T9fTR1d3g2zEtkkTSm+rEFR4Dctcj2PB
hmx8f1Um/r8lx/CFdSfx1PYz+OmhUnifvIGSGxNoGtLjjsYqdPc1dDydeQAG
0wAdjeO7J8ksmILBqCZYhXnA0w1C4kmZRECZjFWhT+vc3X4Shdsqnhvgdonn
e27evClizTi/H8eosU8fz1Mo7XMln+qcn0rmHJ01qufinx7GWf02izxW5Had
22L2VWGuk/W3mWNmPxX2WZmL95V9FWXfAXmuzHkfvnd8bPb7ZU00WV+N23u+
t/w9eV/ldXGf9igfXqVmgriXeAiHOsv+eZBPlWUL+CpY85j9VIdo4x2dDRe6
JxB2ohmr/PPx8s5ofHNNCJ5eH4VvbU3Cd3dmUN0/jvfiqhDZOYniUbJN6FWe
tM9kmuUpDNbAYB9Y2QOV2wKT0OWmPtYojXnY9jZrJ2HSTEic6jSXqpO4VLsy
WvHhfKrovhzzBEptCR67ME/O2nXMlTO3Lfth871jLlvOi8XFOU/WXPd+Lv70
s573Yr7Ml/kyXz5q+bT5VLn/+++OpWx3nflXOQaF+2i+Xu7j2c5h/vT69eti
XMb8ZEtLi/hNrLnNOXB5zMa2EOcxZt/UZcuWCV7z85//vOA8/+AP/gC///u/
P40//uM/xp/8yZ8IyJ//9E//VID//kd/9EcPBR9LPh5/93Of+xy++MUv4rnn
nsNPfvITAeZyWUcgPz9fXKvMpyr7KGdtJtk++bjz1h+XT5XHDDr7TMy8kX3Z
aExuNaioqx+jk4xIYE61twe27m4YysownpqGxnWbUE7jwIu/eAlnvvQ4zjz5
DZz/zvdR+fKruEljMO2xAlgqLwEdjWT390m+GYLL04m4aSlW3Cr4nenQawdm
ZyOecReUx7k2h4+dhQx1htU6t6/vr8OnKmPFuMj1Vs59JvsuyPWW+VTmDJhP
3b6dxqx7934m+VShoUf3m2PLrczPmR1+pMyjKn2tRGw72U8Ws3g2ckyVVeEv
PO03LB6UxQGzxBNYGAaB6Th3B+cn+xfPWlf+3TZ7Hb/p+id8TpuTIWtz6HnY
6B5PTkziWNExhAWHwe+wH4L8gzEyPCLiZqe1gY1SDB3n4ZmpxHZM+57aHZa+
4LTZb5s1GGiMYdITDCKf7n/Lpzpj+u2WIlLn4lPl9od9S2poPLl21QoUUxtW
c7kCt7qv0Xm1yrfv4/Op7GeaANRH21AXbSVYUB9rRmOCEU2sh5hsQkuKEY20
f0OiBvUJGjQm6tEQ7wD7uCZaJJ4zgeN97YJTVaJNwE6wCbQ7oZW+05AINCTM
4EE+1S58Y5sTTQKNyXQ9KVOoT51AfdoYGjKGUJtxHxWZN3EqvgHbFnlhw3v7
kRR8BKfyS9FU04E7N++hubUNFXW1OF9ZioJTBcg+no2somxk5hPSc3Hs6Amc
OnYGZ06eQ8np8zh+7DSKaFtezlGEh0cjL7cAJ0+cQuXlKpEz2WSaGctP85x2
Kb+L1WaGnt7r3r67uHq9C/VNdThSmIOo2AiER4UiNiFKrNc31aDzOl3fvZsY
nxgX41yOC2EwNypzoMx9sj4598lynIjcL7NPFy/Z34t9kPbs2YMVK1Zgw4YN
gncrLi4W42kep8ua4zym5s+sW8hzj9xfeh32gYu3L158fwW+99J7+M6C9xFR
WIu0S3eRVjGKlMsqJNdZkEJdR2qLhJRmO1IJuVdsyGiYgmf2XP6pOjHL9lH5
VIveLl696fgIu8OPxyppQhvMOhFTYbTSuFhoQ0oZIkVcpmhX6b0wOPzRLYrX
joUFDBLsRnpvOObfTPuapZnLtistSMlMxgGvA3hr4RIs/GAlXD184BccQdt8
4XroMDwP+8PHNwj+gcEICAqGr48PfA5747C3Jw55uNO6F/x9fRDg54MgP28E
+nkhgLb5HfaCL+3je9iTPhNoW4CvN+13GAH+PvD394UffceXvsvH9PX1Q3BQ
OIIDw+Ht5QcPDzq352EcpmfEz4p1kAIC/GndC97eHjjscwi+fsyhU5sX5Ef7
+BL8EBIagLDwEIRHsNZSBD3rSISGRhNiCLEIC01EUEAcXVs0PA6GY8sGD6xc
tgfvvr4ey97ZhcSDp3ElS4emWB1qI7XUVtD7R+9tbSS1F1FWNMTahJ96fSy1
HTEmNMSZcT0f4v2sTRxHRfwwajP7UZl9A5fSO3AsphKLX1iPEPc4dNZdh3HS
Jng9q2VGd9JiswjG3EjP2sj+yLYHNRytNrscRizaPpPwX2bbQNKUluZ/Z/hU
o8PXVdbYEW08VzIj9btiPtMxp6mehH18GOY7t6BurEdP8VHcSIjHTTc39Hzn
WTQ89h+o/OpXcPGxr6D46WfQum4zbrn7oD88AabaDtior7f303HGqE+fouNz
XATPcVq4fmoJUjy+BZNQY5z+jWHAOoF+yyQG6Xro2xigdvwu2Ymd40Ycrx+G
Z3w1Nvqcx+KDJfjimhP4wopc/MfKbDyzKRcfRpQi5uJ1FLb04vKdcQzSuzFh
1UJtUUFrmRQaB2bqw4wWvYhBMrMd4jARbIquztk/1W6xSeC4D3HXZv593CLz
obKGE4PbPfZ/YD6R54M4zo3nrHg77+c8lzRdVxRtrzLGTG6X5TGRcrzzmclp
5dA+kPNQcLvOv5vbZ27HWUNNzhmgjEFQ+pY686nOuWX53nH/wcfiY168eFGM
TdkHlrfz2EgZ68Dg4yn51Ln0PuXnIL6DufhUu6KNlxn5GYJV2NtwaNhgdh45
1q9oGzWhqLUPgcebsCvxAl7cn4rnNsfgv1aH48mVYXhmWxqe9zqB3SeuI7iu
H2duTeC2Socxqq+TjmNxvrfZKYDtQvdLglFUfqtJ8mew8JzKdD4Fh1/qQ/lU
2yxOVYbV4WvqHA8q5xThPpjHyfx8eRzN/blSw0xZf+X5Aud7/zA+1dl3e77M
l/kyX35Xy+8an+rcLss+qcxR8bWyHcPjNR6jcdvP/QFro3LMAud+4vlj7hdY
s5TtH1kXleMMFy1aJPxF//mf/1n4lzL3+Xu/93vTYF6UuVBe/uEf/uH0OoP/
ztseBuWxeP0f//Ef8W//9m949tln8eMf/1iA+VTOtcwarnzNPC5V2mNc5Dls
mU+V+zA57/JvWj4yn+oU06jkU7nn1tilSEbmVA3s72mR4o/t+glJA5Vj/qdG
gaE+2O/dhrm+DuqjReja54b6Fatx+bW3cfo/nsKpJ76OM9/8Di7+9OdoXLka
E+kpMJacAuqqgf4eyddVOyHGE3aLdI/EuJX5HZlHlQEnTvUBPpU16fgemxz4
+Hyq/EyUtp08r8+2ovy8ZH9Vrr/s88B8KvsNsQ/PZ4FP1Vpss+QTRF4Si1nw
qTaOzTdrFXyqzDk4+FT2faP7ynp/SlmzB/hUOZeEPGBi3yuLcRr/V/jUoqPH
EBocBt/Dfgj0m4NPNUm6ZHa5Ak8nlXEEQU7zqQ5/VSs9I9a0FbqHkgbi/xSf
ynMZE2PjqK2pxrrVq3C8MB91NA66fbMbFqGB+cnwqU0KPrUhxoZ6RqwNDQkW
tCSb0ZJiRmuyCY1JOtTFTaEmdpKgEtxqE+fxTjESTGhiJFrRlMCwPcCntgrY
CWa0KREvoTXeivo5+VS7xKMK2Gb41GQjGpM1aEhVTfOpjVn027J6UZ19ByWJ
zdi52Bsb33NFfGAOirMuoOpSI660dOHs2QsoOH4MOUfzkZKdgszibBw5kYf8
44UoLjqJ0guXUVVRg7qaejTVt+DS+VKcOlGC/CNF1L/FiM+XK6rQ1XWV2h/D
zLjWKukLmlnvzia1g8z7qTVqdF69gsrqSpw+exqRgksNQ0x8FNIyU3Ch7Byu
dLXj5u1u3OvtwZCI3+4VXCmD2zEeY7OfEo9/OSaE5zS5T2ZfJvZ74X6Y++Oa
mhoxXmMfmFWrVuH1118X/TBzqikpKYJTZXAcCesKMGQu9cCBA9hL7eTOXbux
w90TL7y3As+9tBDPvbgI0ccakFHRi8yqCaRWqZFSb0VyI5DUKGmnJjTakdho
Q3abBal1KhzifFQfk0+1Gh0x4Eo+lfOLsEYotZUaoxoakxp6qxYGm17E/8/i
U7mtZA5rLj7VAbuBnpNJyafSu3ClFUnMp3q7Y8mKVVi5djN8g8IQFZeKgLBI
+IeEIywyBlHRcYiLS0RCYhJiaXwcEx2F6Ch6tmGhtB6FuNgYxBMSYyMRHxOB
+OgIxNLfYyLDEcuIIsSE098iaV/aPy5GAn1HHE8cMxYJ8cl0nGTBf4YERyAk
JJLqYRTi4xOEzZWQEI/o6HDaxnxpMCKjQhEXH03PO46QIJCcHIfU1GSkpaXS
Mg0pyelISsp0IAupSXlIiM1FVEQmQoJSsG9XIDatPYhFb23C8vf2IMG9BJ1Z
ejTF6VEfrUMjvbstiTbhl8rgtqM1iTVCjKiJon1ov5tFEHnrGtNVqEmhtiy7
H5U5t1Ca2YkTcdVY8tJ6hHrEo6u+GyaVTcgzSLk5rZI2o+BTLSJHGIP5VOfm
lDlTmU/lvtBg4P6faoHJJmI45uJTTYr2VuJTjVIMB3OpzKvyZy3ZWKoJWPp6
oe/qxPCli+jPO4KBoGAMvPBL1Dz+OC59+cs4/cUvouDxp1D//nJ0bdmDO+5+
0JVUwHq1B/b7ZFON0TEn6Xg6vaS9I+Yz1Q4+lX1UVdARVPYpjFhUGDZPYYx+
6wRd64hd0oO8OWVB+dVJROW2wjWqEpsCyvDUxlP40rIsfHlZKv5rZRre8T4G
36ImJFdcx6kr/bhH5xqx6KGid0Nj1dBvNgi9YnEvhX1nFxIXViWfap7ulqZD
m/8n+VRlDnU53y376bFeGNvs2dnZYsl+fDyPxHEA8tz5XHyq0ldSyasqOb/P
Kp8q+9Qyr8b8Js9zMefJYytu3/l3y7lYlbyb3PfI2+fiU2VulLlavpc8DmXN
WvaB4T6E+xWet5N9KmXI/gsP41OduepPgk/lmWJWpBBqFfTH61T3L90cQ+rl
m/ArasY7Xjn44dZYPLU8CF/5wB9f35CAH7sWYE1mE9xKbiCvrR+dQyoMmSU+
VXCqNum4s/hUR05IhuBTzTyu0lCfo1ZwqMrcCh+PT+XCz5X7b77/7HvN3ABz
211dXdN8qtIv9VHx//N86nyZL/Plf3v5tPnUh+WsdD6+3B5zGy7Hdcja73yN
PIbjsRz7vHCbf+HCBRGrwLEirAPDuab4t3GfXFBQIOL72VeCeVTmrjZu3Ch0
TZnf/Id/+AcR56/kQPmz7I/KS+ZElVyrzJPK/qgyzyqD/yb7p/Lnv//7v8e/
/uu/4umnn8b3vvc9fP/73xcard7e3mLsyD60smYN90+yP6OsDSRrFMn+jvL6
b1qYT61rrkN8RgKNyw7A299LxHgKPtUkC349mk/lHlzFuZHsZqFHqhe+FZzv
U0vd+6RDX9MRn6YaA8aHgJ7bsDU1YjwzE/cDAnB123ac+69ncPLJr+M44eiT
30A2Le/sd8dUXBIsx04CHe3A/XvACH1fNSHmZY02snE5BzNBodT+gLyWUlHI
Lgeci4RDZkfMuZR4yFkr9Tet60pdX66rbIdwfZVtQdle5nV+3lwfP9N8qkws
2iT9Pom7U9pzjuuzOoTlHP44D5EYdDwHKE1Wh6Fnm4Yilb10asVneX2ubR93
/ZM8p01Us5ncBnZ5ncfPDj41v6AIAQE8t+MLX99ADA2PSHGkJs7XYJO+53yv
ZlVLGx7ISGdziPzJ1vMDDlNOmDa05R84Wz/VmU9l/VTRfttZP3USDTSW2rR2
DU4dK0ZDbQ3u3r71yeunxlvRzLxnogNJhBSgPZuahmw72rIsqIyZQGkEjfMi
+lEaOSDi7NuzzLiSYyXY0JRqQGOKEQ3JZjquVfCgs8G+q8zbmtBK52xN1Dug
E2hOMKKO/dsUaKDvNdL3GE0CZrpeE5qSjAQ9nUuN+tRJwjjq00bRkj2C5rxB
NBb0oiytEy7LArDxXTeEeSQjLbIIRzNLcCL/LPx8guHqehCuBw7CO8AHucfy
cKasBOW1FWhru0LtxhDGxiahntJSPTGjnbaVXqxAQX4xIiNi0dTYgt77fSIv
kMki5Q3mfB0GanM0Oj00Wh10eupHqA+ZnFLhXl8vio8fR1xiIvwDA7F+wzoE
hwUjMzsTZy+cxeDwAHoH79N+d3GH2m9ZQ4/7XQbPY3LcZ0NDg+BNuR/meE3u
g1kfPCMjA8nJySI+hDnT6Oho0e798Ic/xBNPPIFnnnkGP//5z4W/6uHDh8Uc
0+bNm4W2Oeug8JI1phcuXIh3330X772/CFvdPPDSotX44atL8IPXliHhTAdy
a8eQ06BFZr0BKXU2JNQC0TVAVDUtKy2IrTIhpd6IxMoxuGdUYdUhZz5V/2g+
1ZksmyUqI72bnOtaT8fhfI8TmglMaCegpjGw1qwV+cQ4Qtwm52rjHFPczzo3
kAreyGqQ5lYsZpvwa+Q/N3W0IT49GQcOH8LOfQfg4e2PvMLjKLlQhhOnz+LE
qRKcPXcRl0rLcLmySvDYVZWXcbm8HBVlZSgvv4TqinLUVlagtqocleWlhIuo
LJNQXnZJQrmEy+V0nAr2G64QvsPMdTDKywjlvKzEpUsVKDlzAadOnsWZ0+eo
DpwXf+P9+XtlZaVkm50k2+y4WF4qPYuGxho0t9QLlFdcoGOWEugayy/Td+mY
F9lPjZYXquj7jbh4oZ6OXY1jReWICMuGu1sEli8m23XxfiR7lqArW4+2ZHr3
4g0i31xHGoRWSCO1Hw0EXlaEaVEWpqL2Ygq3T5hx7agJnQW0/xENqrJ6UZV7
A+XZnTiVWIMVr2xExCH2T+2CftwAE+cKNEr8AfPlege0Ji10Jp3YJvy12B+c
23GDGSaDWcqfRA0f140plZZsN9bGYM0Ax7yj4rHr7TaRK3PaZpF9VDk2xMD5
qfQS+DPVMWoEgLFx2G/ehJ3sdzvZu6bt21D2zadx7EtfQfY//QuyP//vOPvd
n+DyC6+j4d1lGA+NgamqFrbuWwD1OUKPVUd2lYV939RUP1UCdqgJOjFTbqL+
Xm3WQ2ViDtQs/OqYV+Lc5+N0ofcn7bjU0Ifs092IyuvE8/vP46nlKfjq+9F4
7L1wPLs6HCuCjmFPehkizrajTWVED9XrIbvEKWkhc0nS75anDmdIoLn7LpEL
ifO5mVkH2uRgpuV8nr95kefIeeyh5P14G3NO7P/AfGJCwv/P3nd/V3FlWf8B
s2ZmzfzS/U1Y0+3QtsehHdtup3ag28bGGDAYG5OjhAgiJwlJCAkBiiTlnMgC
RDJRAeVIMlECoRxfzmF/59x6Vyo9g7sdZuyeRbE2pXpVr17Fc+/Z95x9ksQz
LmujM6eqzlP6W3kjyTFx/0+di/1LmdSxpOyDNDc3C5+LfS32uZhnljpW3N9l
/0Qdt+jNp0oeztvnYw0svr6cr8dtB19b9ku5zeF4E7WelndsjuRv5bKMnXzw
tfwW04jhBt012JeV/g77Gvzc8zMrFYBv0utY0+vGidsm+CefxoerUvDUlFD8
x9gAPDUjBi8tTMH7wYfwWfRpbDpUjzNX2nDHaEU3/USv2xOjCiX2leNUh/ee
+LlzevXLvl2n9n58qjwPyakO63I/IN9e+iU7duwQbTWPGXBbzveU/U4JySHI
+yr9FvW9VN9/7zoovxRd4IfTw+nh9HD6odPPzac+aPLWsWa7zu0zx59yLAy3
s2znOfaFY1vY3nNsZ0BAAKZOnYpPPvlE6JKyX/b2228LX43Bf7/22mt47rnn
hE4q65g+8sgjIvee41KZ52SNU+ZM1dyozPOXuf7efCp/ptYH8OZa5To198rc
LOu0cqzqP/3TP+FXv/qVODY+duZ3WUeO+V/uQ7CPyn0UUYOD+ijchvEk4yB/
rJ4q19utqqtEcmYSgkIDEbYpFNk5GbCYDUpcqtXxQD5VPV6rFVEMbtHHYD0g
E8drCFVSrvnO3KxO4VRNnloKzKl23IXz+jewV1XAeqwQA+vWonjEn3Hw+Zex
54nnkPebp3Dizb+g5OMJaJwxH44DR+CurgWu3QDa7on9OR0Gel4ITqNHCVXR
QbV9BwbrPDiV2snkDCk1Pyz2YfoSP0S3SuaGyf6kzE3y3p86PpXHg5lD4Dgt
rsP9S6hHJfnUob6cmvSk42DNP/LtrAYtzHSeFvLpWOPJ6XIq7J5LKU1tcijg
MsJc9kINo2ed2fOI2dTaAM7hXLg6xe9vXbb9RMs/9Del1BtL0lnus57rnncN
aJC55wBCIiKxOiiU3sEItJBva2T+y2u/g/t0KGmZRrpoBnp+zeS3cx1jG+ea
ClhgJb/eyTq2rNHAz7m3y+CNb3G1Q949vy82GXvFb5ib488Vf4/9Vw358dUV
lVjoNx8njx5BfU0VWlvuCj7VIep/K8f1o/P9UxxKrm6CE+U7HSjZbsHZaA2q
mG9NN6Mh04KadB1qM7Woy9KiPluHS/vNqM3ToSp7AJWZtL8M1jBlftOAqjSO
GzUpSFNQQ5/VpOkJOoIWtWkawgChX8z588o0G33XPohqQo0A5/Z7YmBT6Xdp
f7W8PzqmmnT6bnoP/VYXLmTeQ+XuNtQdbEdRznUs+jwEX77nC9+Jq7BufjhS
4vJx9ngl6qqu4NLF67h+rQltHV1o6+xAe1cnusk+GE0WaDU69HT34+7de/j6
69OIT0jClq3RiIiIQsGhw7hQVoWa2kY0XryK4uILOH7iFAoKCrHv4CEcPfY1
+anHkJaeidi4HQgO3oDFi/3h67cACxctxvIVq7A1Mhqp5EtlZuUgIysbySmp
2EbtbWR0jMi1nzt3rognZf1xHgdirpTjtDgHhNtmzgVlX5tjUZln5Rgjjjvi
sU8Gx7sw78q276uvvhL1ID/77DPBsXIbyHUaWQOFNQo5n4RjHJmbZQ6DeYvr
N2/iZkcngqITMWn+GoyYOB9bc4uRcqoJWeUaZFVZkFLlQnI1kMq5/oT8a8De
68D+q25kVxsQKvL9EzE3cCtWRGxDQt7+B/CpziH7qx5/4PQNkwtWAfqGxa3I
nLKJ9NRutrAWjtsp+DGL2KtbeZ/dCuzenJF06VXLTq/2lnX2SusbEJWUguXB
odgUvQ1pWXm42XQHAzo9NDoDQQ8d63lzfROj4v8aOF9Zp4WBYDToxN8SJsMQ
jHoJgwLaj9EoYVQ4ExX0eiM9jyZoBwhaI3Qabv9YS9wg2kLD4Pe10NF+tbp+
aLR96OvvFn/r9QME5mJ0YjsDHbNB7NOAgX7OLzbSnD7TmqGn3xnoM6Lz3gBO
n6xCSuJ++Mxeh1mT1yAx5CQac+hdTjGgMkGPykR6x5ONIg61KsGKmmQ7GrPd
uBCvx9ltfTi2tRVpK8uwbfFxxCwsROR8ssWzUhAybxfWz43DymlhePWJ9/Dl
6JnYHByFrORc5GTmIDubkJMjxhpyd+cgf28eMvMykEF9p9ycbOzPzcfhAwU4
caQQ5+ndvFzTAG1vP+zc1xC0iHuoxpLSpA/jU3VkV4083up2q3gVt6JLxPkG
EjbPWLCZ9U/NQC/1sVo6gMtX4d6/B3dXr8K1ufNQM248Dj3+PA4/+hwKn3ge
x559GeWjPkNraCg0qcmwfn0E6LxJDXMrPVyd1Mh0KbVE7TolDpb1Gx3KQ+ji
mFEnx1+7Rbk0btsNLg/oRLp1dtzqNqPmjhYb8r/B5I1HMXpFPt7xScKjo4Lw
4rRIvOW3C2MCcxF96jYOXOlFVZ8N12lf9MuCo5J8kguuIS55kCvy5rpYr4Su
C7c3Lgu1NdQXdBtFv9MFC37s5F1HT8Y4yNw49knYHvE4EY8RsR3kzxSdaoVb
Uuunyr6ft8a+5Gllv5DfmV9i/J5ae4zBfDLbes4hYL011v+RcYzefJ3ah+R1
6roQ6rpbMoaGuVNuK7g+Euu9sP1n3pbjaO4XSyLjVdUcq4ynfLBWp8f4Dg6K
S95SBQ+nKk2zzupW+rFuRQe1lR7WFhvrXgC36JE7cUuPzYWNmBJZgBHLkvDS
7Cg8M2MLnp0VjZfmx2F8UArWJRbg+MU21LSbcLXfJuK8+5wKWJuV/ahhMSLO
oSffw0ri21l46l77cD5VlXx0/6ugileVfDnfT47x4Xacrz1zqpwHKp9v9b2U
vs/96pA9nB5OD6eH0//V6ZfMp6rzXLhfwWO9nEfIY5PsjzHHyFwj1wVmHnXx
4sWYNWsWRowYgRdffFFwplzziblS5kwZzKFynj1zl//8z/8s8vplXSnWTOVl
NWeqjjmVUOfwS8iYVQkZ08pgLtU7RlXGqco6VxwPy8fz5JNPCk1Vzv3n8+G+
GY/Lsr/J+S/cr+B7wv0Unn6qfH/2i1grLyUzCcGhgQj/wXyqwqVK6MHVjJlN
tYraxm7W27SqOFVdD3UaqN/fQf33W+Tg0jE4UuJRP2Mazn74IY6+/iZ2P/o0
Dj37Rxz/wwiUfDgefVu2wXLkOJxlFcDVK9TxaIeT9iVqmtv11H9WtOkcHl5V
Yuif8snPwaeqNfFl3KrUUOWxAtZNZX6C47F+CXyqwYtP5Rx1t1vVo2R+zG6G
zWQgd4tgMZJbR74M57a5lb6f5FGFv0XQuYfD4Pmc15s9odB2FWS5Ce41W1R/
q5fV681ey5bvWP5b9/ljfpPnHG+j9zoX8Tedv56ucSvzqfsPIyQyDms2RiB4
czTu9vTQOsew35V9arF/vmY2hhMGekfN/CxxTRTODXMqWls2h1nwmA47+9+2
H5Xvz+wPc6kWD5/qcHOeq0cfzeGEpm8AVeUVWOAzD8cOF9CrXI57zbfo+TUT
LAqn6vxxfGqth09tEPGgLlQmOFC204qiWC1tw5ylCXWZJlRnaFCbPYDaHELu
ABr36VCe3YXS9HYUp7ahLL0b5Rm9hD5CPyoyBoZB/Catq8zo8aAbVRmdhA5U
pXehMp2/a0A5/Z5EpYBxiKMV0KM6XefJ8+8j9Ijv837KMltQkX8XFfvu4HT6
RSycEIQv3/eF35erEbBgE1K37cbZYxUoL6lDZXkDaqsv4crV67h05SouX7uG
6+TjtLV34Nr1G6hvoLawtAyJSSlku7cgOGQjQjduwuHCYzh1tghnzpcIMHea
lZ2P7bsSERUTh8ioOERsiUZQcCjWBqwX/Kn/kqVYuy4QIaFhgpfNzsnDocOF
KDx6HIePHMXeffuRlZOL1PRM7IpPFHn3nFcRERGBbdu2CT1BjknlHFDO5eeY
VY5V5faa220eA2UOVcawynxOjj2dMmWKqMs4efJkkWPIdTA4npV51Ly8PJH7
z/m1vC/25bhNZK6wl2x22K5MTF4ciBFfLsCW3GIkn2lGdqUOuWT3UqsVPpXz
/FPqXMi76sYe5lSvOJFZpcWGvAuYsyER8wK3YtUwPtXuYT3/Op/qYA7VTFub
FT5VpDw4FZ5U2YPbw6UO2QgeYzHzmJNTGUeS0icCntzmwWWXUo5KXYqHtfaK
6y8iKiUTKzduRuSORGTvOYg7rR1kd530+y7arxqKvoPoMzCXIzRpaNlq8cBK
v2sbBhfruzicIp5SwKttdKhB662eeHqhU6LaXnImNhtzGg6h1etkW2JnLUUD
LDYjbHbOj7aI9Xxcin/O33WKvHirhWB2iRp+vH8bNRi6ATNKzzciI+Uw5sxY
g+lfLMfO9YdRl6MT719lshblSQw9KhKZW+W6cFZczId4X4vi+1C49Q42TN2H
kGm5hGwEz8jE+mk7EDArGmtmbsGyqSEY8fInmDJuJoJWbUBs5A5siyXEbUfc
tjihh7Ft1zZsj9+O6O1RiIyLRGxsFHbGxCKekLRjF7KSUnGy4Ag67tyDWWtU
bqbXM8Q6oQoHr3DserruBjp/i4dP9WQd0HV2CLBGxJBOjqePZrYrOftdA0Bz
C9wlZ9GXnIj2yC24vXIlzr/+PgoffxaHfvuUwOlX38C1eXPRtn4dNMnb4Lx0
AWi7Skb5DjXMbfSwDSgarUbWFTArdapsHmrTUxrN7OFTjS4F1NODlk6ikxqo
231m5Ba1Yk1iCeZFHMWE1Tl4cmwonv5yC16YHoe3FqbCN7EcW0/exoEbOpT0
ONBkV/KndZ62T1G2cIqxOc65cLulEoJ9MFtC6M/QOyr6ftwHdBqpfWHtVwJ+
XP6WelLn5avz5rifxzlynP8m4+/Z3jHnx3ZK1idV601Kjk8dz6fOZ5L5aL9E
PlXNgfLx8XgZ22a20WzTWWeT+7TcB75f/1mep+wDy9xxdY1iddwj23vWbeM2
hTlVHqtjnk9q1Q7L5fdw0mqNVbn/vxqf+j34VCO9pAaH0rfTEDpsio4qawm3
Emr6XMitbsX6vZWYE1uI95fF4+V5UXhu2ib8fkY4/rw4EjNDk5B4oh4FtS04
e6MXd6hjx/voInTTPgfcMjbF0w/kPrJbGaNzDGoSqEdh7senDvbg8SA+Vc2H
ymsp/Rh+flnrnNtsbqu5xgdr6XEMNvukMv5Y3jc5ZvBdvtNDrvXh9HB6OP1f
mn4pfOr98vvVbSofB9e4YD9M5hWyv8bjoVzngOP5uJ4Ux7W88sorePzxxwV/
+p//+Z+i9hPzpxKcz8/xoBwfyvwoc5kMmcuv5k1lHanv0kaV++Dvy/x+yZfK
+Fb1vnl/3hoCDD4mPmbmgd977z3hW7JPyeO9fK6sGcRjvpJTVY+V/6R86oYf
zqfK2FTOV1H0gOzUF7BRX8AqOFXmVtyst8mcKteo5bwybS8TKtSBuAc0fQPX
14fQHLwODXNnoXTsOOx/8kUUPPEyjjz9R3z9hz/jxlx/aOLTYSs4ClwoI5/h
FlyaTriMPXBZNdSGG6gfreSlSThEdSyr0B+wi3hZ+3A+1Uaw2BTYfjyfKrWy
ZK0p2R+W90vdX5F9Z76vzE1wrBfHY/2cfOrhim9Q1dQNvX04n8r1NJTr4VTy
jpw2Rb+WOVQr5/lYlXxi8gvNTjf59G4YCXr6W0fQEjSuIWhdyme8Tu+B2Qta
fv890LuVZe13LOu8lvXfY1n3Hcs/9DfFOjrPfrtyzjrX0OcaOr9emxPNvVpk
0vO8MTYBARGx2BCzE7e66X2nZ1HruU4G2t7ogYnn9F2DneGAkWDi582pcKo2
p13EjjKnarWyz2YWc9aqHQaHF8TnriFw7XGXRcBFsND7a3Zwvif5hW7FpxfP
qNRPLSuDz+zZOLRvLypKS9B08xocXJOOvstxQ4wfy6cK3dNkoDbFhWr6uzLJ
jgu7yH6lejjMDD0qMnpRmdWDyuwuVOZ0ojqvC+fT7uJM0m2cTLxJf7fgfHob
ijLaCR0oTu9UoQOlAu2EVoEL6S0oS79DaEZZ2h1cSLtH2/WjOG0ARYzUAVwg
lBMqUvsVJPO8R4UuQgcq0lpRnn4P5TktKM1tErGpRxMqsGBCICZ/4IelM0Kw
cXkMMnfsw6lDpTiy9wQO7D6M/XsOo+DgERw6cgzHjp/E6TNnUUn+5bGTX2Mf
+bDp2dlYHxyCdYFBCAgMxsbwzbRtIQ4dPY6CwuPYf6gQu/fux874RISEhmPF
6rWY67MAs+b6YsFCf7I5y7EuIAibNm9FSmo6cnLzhQbFqa/Poqy8GtXVddQn
qEd1TS3KKyoFf3vuXLFog2WeJ8cocW4mj3kyb8oxRezzqsHxqcyjcl+DuVee
sw/O8a3MpbJ+Ko+LMn8qOVn2n1lTgH045ija2tqUPA3WMSTb2W1xY+POLExa
GIj3Ji5A5O4LSCtqQX6dAbsb7UitcSGhyoWdFQ7sqrQjo9GN7Mtu5DbakFbR
i+CcEswJUfOpnO9v9fCpnoT77+JTuR20kq20EJj3IxitbuFvm+khN3veWQl+
h/Uuxe7p2D7aFTtppc9MVgVmK3MABN6H3WNLnYodkPalj9adq7uCyPQ8Ou5Y
RO5KRdbeQ2hq7SS74ILF5RZcnIW+Z3HwfsguW+1C34HbJiXH1jWoCSliyYTm
9RBYh0Adsy5m7iF4p11Les/tiXfnbXgcTq2lqE7adrMtcTD/ZRH8qtNlhbe/
L2o18X49/B08dAc33UatFReKLyGd2r4Z05Zh0rjFiF23D1XZPWQLtKik97Ms
pR8XkvpRlqhFRZJOxKJf3Es2JIe+m6LBkcgmLPxoB1Z9mYR1U1IQMjMdG+Yl
YoPfdgT7RWOdTwQmj54Fvxn+CFm7EVGbYhC9NRbRkdGIjN6CrdGbsTWG5jFb
ER4VjrAtG5XaXSH0LgcEImzdemwJDkXajl1ouvQN9D39cFttw6gQ5iZZT9XC
943vF8d5kg3mZ0U9TifiVF1K7U33INnuSepgMpYTF7imVD/1sdo7gYt1MJw8
Bs2BvehKjEfD+Ek48Qzn//8OB/7ztzj65JOoG/sJbsyZhtbglbCe2gPXlVKg
4xp14Fqoj8Zj36yraqK+mkUJQDUNHRDdMtFtMg3jU13UljvQb7Oiw2jGhRsa
7DjQgODkYvhFFOLlKVF4bnIsnp22HS/MTsafAw5hflot4kq6sOe6BZeoi3jP
McQlKUrDrFHLuS9GmpuE/rAd6nFz5zA+lbejt8UD0/fqv33XpK6rJGMg+Zlm
3pM5P46hZJvGdpFtF4/9sB3kWBDJp8rvy3zp++mJeutR/tIm73pTHJvLWiIc
w8jgNoDPmbm4+/HBkuOUNsG7RqI3v8w+D7cp3L5wrCS3HY2NjUJrgHO71Jyq
PL4flO8/aOMd34bQIZWVF+j4yaYayAZrCRpCr4cD7aZddRJu0GN3ukmDtAvN
2FTQgImheXjPfwdemB6O308LweuzN+KTpZFYl3YccUcqkVXyDRp6rLhL71Q7
7aeTDod1ANiX4veAx+WV8TfXINzDBDDUnOr9+FS1pR4uGuWt4av2TeSzzeMF
3H5z3j/fA77n3BazXyqvvzpuRB074n3vf4nP9MPp4fRwejj90OmXwKeq7a+c
1DwWz9lesy3nOE3OI2Rfi+NW4uPjRVwL+2GjRo0S9aQ4xvPf/u3fBI/KsacM
jv1U/805/cxt3i83X/Kg35W/z9tIHQDJx0pOlSHX89/8OXOl//AP/zDIuXrv
5x//8R+F1gDrDzz22GMivvbDDz8U2nEyv5H7DBLMrarrHv1U+f7fNz4VXnwq
t/mST2X0U193gKAlcJUBG3OqohNuVPS5hK6qR1PV0E8d6Ha4b9ZCl5eJrsgI
3PD3x9GX30TBYy+g4JEXcOSxV3Du1Q/QsiwI2pgE2PccAqorgbbbQF+bws/a
CU7an4v1v3Qe3S9F0dUhuFWFXx3kU13spA3XT/XmU3/IpO4vymdZxhuoYxIk
r8rxC6GhoSIumTUCf079VMmnamwuUVp6MMPO6RZ1bBxOu4hd8g5o5Ngn9tc1
ejN6tSb00ryH/KkuDzoJ7fdBp2ob3r5XhVbT3zfa6BxaDGY0ac24ozfR3ybc
M5rEuha6Ps0DRlxs7UNSwTGEbE/BuqgdCIpLxKW2dtzR6cX2d+l7bbSPDs81
6mbQ93sIfbQvRq/BSNfbAI1BgY5zcE0moRPCsf3M1xu0Rhh1pkGYtMMxtI63
08PIOb8GDWEABoKW/tbSZ1qDjvavF7WLBK9Fv9/Z3oGic+cwfcpk7M3LRfHZ
M7h+5TKsXDNOxBQNRlf9YD61JtmCqkQnKuOBuhSgMY2Q7kZjhgtVaXpU0HYX
UnpQlNSCcym3cS71FuEmTqdex5Ed9SiIq8bBmGqcSLiME0lXcTLpGwXJ173A
n1/14DJOJV0iNBLqPfOrOJV4B18n3sXJBAWnCGfiPdh1F+d2EnY141y8xC2c
jb+Jswk3cDb5Booyb+JM6iUUxlchd+tJ+I5dg6kjF2KdbwQiAxKQuf0ADuZ8
jciwbVi/ZiPWrAzCkiUrERS0AWGbNov40pTMDIRticC6oPVYunIFpsyYjuVk
O4KDgxETG4eCwiPI37cf2fm7kZ6VjfScXGyOjMbipcsxdcZMvP32e3jrrXcx
efIMsjvLEB2zHYcOH0Nt3UXyh2/i6tVbuPbNLbS2dKK7sw8D/VrYbYrWo9VM
sAzVpZb+sHdOq6wtwn4Xx7NwjBHnC3LMKce08pgh55jMnDlT5GWwLirro7JP
zjEx7JPzd3kfUvNmMNecnvkBvRFNfSasjU7DeN91+NMEX0Tvq0L2hQ7sv2jD
gW+A9Fo3EiqciCmxIbrYikSuT1XrQlqNAYnFHVifdV7wqT7f4lNVeQzfwafy
OITFZKX3gOsNmqGj97qb3qcuYQOV97OH0O1BF6GdPr9H61vJLjDadWTv+B3X
EPrIJhJ6tLwfBV2EDlrfTmBbwLajSUt2v+oytqTvx4ot8di8IwUpeQdx8TZd
M7Ir/WQ7NIQ+ep97tAZ0a3ToHNCgs6cPXYTe/gHo6ToOkG3oo+vLc3XNZu+Y
L9Efg6dukkd/YLDuowfMpTq9+FTmQ2WuBt83t1t18QRH4e3/f7vNVcftDl13
6joYrLhQ2oi0tIOY+pU/xn06F1tX5aAsox3VOQOoyhxAWXovilK7UJzSi1Ie
88jUo+GAExcJFbkGHIm9jc9fXotl47cjcGoitizIxPa1edgWmI7YwGREByZg
w8pNCA/cgq3hMYiJJMTEilqm0TGR9C5uEXzq5pgIhEeGIWxzKMJCgxC6bi2W
+vhg4ezZWDR3LgKXr0BDaQX6W9rhMliGaeO6rW6hkWCkd8pE7S7r36hjmdV8
6pCeqrw4GC7syIkLZMdB9xetTUDzNbiuNMJafB6tK9bg/GtvovDxJ7D///07
Dv361yh69XlUffA2rk4ZA218OKyn98J1swboaVY06rXUs6N3DL10BAOewFEP
pyrLT5o9Y6dG5oDpIPTU39ISNG4L+sxunKi6i4zjlxGefgEfLErDSzMS8fTU
BPxuSgL+44sdeDfgGObn3MCW8xqU9Nhxnb7T4ZR5/5yxb4fVZSBoYKH+nZlg
oTUWMVJv9bCqNs+YOV8pgwo/HZ/Kk+T45Fi5jG3gNpb5PY77YDvHvBOPNXGd
JtYn4f6f9Jt4LvX02a7x3Jt3fFAdn1/CpObM+FqwDhuPl3EMI/tn7KtJTvV+
58B2xSg0QvT3PW91XSMJjqnhuFceU2MtNP4N/j3+HV7H11dqBdyvJtJ3x/ne
h0+FfSgQW2B47rwSo+qE1uKEhtpDWVOKtVR7CR2Eb+jRq+h2ofC6DitSTmNi
cCbenBuBF6eF4IWv1uGVKWsxYd1O+EbtpnboDE7e1OG6wYkW+qk2+oFW+tl+
j54A+1Qi18lO/jq1wzqrw8OMqoVi7sejPohbHYpVVccI86SOPxZXx/PMsy/O
91dq+PC1v3Pnjmifvf1Qb90+9b2X3OvD6eH0cHo4/V+Yfql8qrdmNbfTHJ/C
tZo4ho/j91hjlGNSmUN94oknBmNRmbdUx5vyXObVy9x6mdPvncuvxv04VO+4
VAkZx6rO5VfHpvJvqjVWZXyqXC+3ZZ6Xj5FjaH/3u9/Bh/rizLGxFjj3Ibif
xj4ma7RLXaaf4l4M41P/WnyqOqXENXxUVPKpsl/RB65byVVhHQImwWbaxf9O
N/ctTQq3yvlkzKkau6nz0ATH5SpYS09DtzcPzYtW4NxbI3HsmTdx6LE/4Mjj
r+DEq3/B6fc/RfnEGTBn5sBVWU4dl4tAO/kOBtqHrY/2S70a1wCk8gBzqi5R
T8Es+NTBkxA1c1V5c6ox1b/12qq1Ub21sNTLan0ovnfcB+S+CPdJOAaLtVM5
PsvX11foI/7cfCrn7A2rC8HnwDoGRgP0ak16s4V8Aj3qGi+j8MQZhEfvxIrg
CCwLisCSkEgsConBAoJfcCx8g+IwT2CbgI8HvsGEoFgsCI7DgqAYgYXB9J2N
9LcKfmEK/tZl+dmPXf7Bv8nzMDqvsDjMD4mGb0gUfDdEYiF9xufmuyEaswMi
MGKKH14aNQm//3A8Xhw5EXODNtP6WPpODHyC6TvrYwV8Auh7gTHwp2u5NDSW
5hFYFBiKOUtXYarvQixatQYrg4IRuDGMfPwYbNwYjpCQUKGNGRy8ERskgjYi
NDgMoTz3YEPQBlrHCCEEEQI9CKB9BCI0nNYR1qxfh5VrVmHp8qVYtmwZNm+K
QET4JizzX4I3XnsVeVlZuFBUhLu3b8Hp4Dg4o8jpNVsMP4pPrU40o3ynSWim
1qe6hQZiY44bdVk2ZKyuxPYFpxA+cz9Wj98F/7FbCRHwHxMO/883wX/iJiz+
gvBlGBZ8HooFExgbxHz+hI3wIywYxAYPQgQWTgiG/4T1HgTBf3woFo6NJtC9
JfDc3wtLxjCihyCOZzNhk8DS8WFYNpFAx7Pws0CMeG4sXntsBN565gO899In
GPXuRHz20RS89Yf38PKzr+H3T72IR3/zBB57/En8938/g5defhkfjh6Jt957
G6+/8zrhDYwc/TG2xW9H4cljaLxyEW1dHWhtb0ML+7rNTThfWoq8ffsQs3MX
wrdEYmtUNBISU3DmTDHq6i/h5q1mdHb1oLdPQ/6RFpoBPYx6E6xch9xiF7Vz
DLRsZz/O7hb1zXmSPCrzC8yZctwQ8wfs77LfyzkWnP/KebB79uwRObHMNfDn
bPc4h3DLli3iWWJeletMcT9k/fr1AjxmGhQUJNpCrlHF2qrcD1gXEIC1gcFY
tWk73p0wF8++/zmeeudzRO4pQ0ZxG/JrDchvsCGrwYn0eheSahSk1ruR3gAc
/MaJ3Q1abNpdhrkbEuEbuBWrI7YhKe8g+chWuNQNnjef6uELOTa7r3cA2bkH
EL09GWFbtiOI3vllgeFYsi4ciwkLAsLhtz4M8xmBEfQeM7aQzYvCotA4LA7d
Bn+aL6F32p9soD+950vIRq4O3YWVwTuwnOAfvJ2wjWwo2REC28uFmxIwfnEI
Xhvvg2c/mIQ3R0/Bh1/OwbyV9LwGb8UKsjMrCStCNgt7vDJ4M1bR36vIXqxe
H4rADZuwiZ6BNeuCqd0PQ8z2ndDojbByXoIYO3tArqYK3hIhdptbYHh8qhJ7
aTZz+6eMwzmddqEDKnRJbCayBcqYi8vFHDznj3Lcm2Oolo+DjoeeORvH7Fqg
wEytu9aKitLLyMk4jFnTlmLSOD9EB+SibHcrGg9q0FCgRe0+siF5PSjO6EBR
egfNO1GW04/a/TqU0+eFcVcw7pUliA84ir2xF1B24Baa6trQ3MBoJdzFrctN
uHH5Bq5f+gbXr1zFLY69vnmD3plruH7zG1y7eRVXb1zG5ZuXcYVw7Trhcj0O
5GQjKS4G0RtDEUTPdGNZOQba2umCWL8VNsYaBg4VR81t76A2DBQuhcE6MSZv
3d1h4qtuRU+Aa2ty36qvi/pGLXDdvAbL4cNoWrQAlyeMRc37f8LRR/4dx373
nzj+9G9x6g9Po2ziSNwOWQ7DnjS4S04pOqwd1Dfrpneg16WQRbqhg6FunChL
aWddBjoAqxg711F/r4/6fr30Vz8dihu3O82ovanFsap2+G8/h4/WFOCNRXvw
zIws/OMn2/Do9By8teY0xkdXY8vJezh0TYNGrU3wSgOiB+cS3KmFrgiDeh30
GfVDxD8DDG6T4FX/J/hUtTaTdy669zbM6TE/yvUdOGafc6PZznE8JdtGtpGS
s1JzknJs3bv/KPfrXePn55jU+ffq2E+pT8rnxvoGbN8554C5ZI7XlZpX8vy8
udgH6QF4a9XK8Tn+HeZvOU9R1jvk2FgZpyr3p/4tOX2LVx00Zp4XaFh8qjef
aletV/ZhprZQb7ZDa7IpXCc8nCrtroUew7uEZno/rutdOH61F4mnr2L25lyM
XrYNb8zeiGe+WIPnJwfgjTlh+HjFDqzPK8Ghqz0o67DgosYhdAN6wL6UqlYV
7dsobMDQSJRkeYeMwF+B13l465+qY5pk7j6D/+Zrzzw2t+88VsDguFX2Z/j6
q+Os1WNz6vvsHcf6cHo4PZweTn/P0y+JT1XbW/X+2X4zj8g2m2NZOB+ac+HZ
5+KaU88++6zgH5mHZG5ScpsSzFUyT8mcKkPm5N8P6lx/bz7VWz/VWy/1ftyr
mlP1joeV+f7MtUo9VqktwMfL9bG4ttbatWuxa9cukevIuS5Sh062Wz/Fffhe
9agewKcyvONTNdRRGaCNtHAKXpWjRE0iQ0vJv3dJ9UmrXsn/N/eLWgjuthtw
XauHreQsNFHbUT1mCs6+8TGOPfcOCh55EXseIzz5Co68NgJdEVGwHj8GZ0Up
yOGhH2ZfhXogjl4Pn6qBouyq1Kd1wSx6/cPyYgZr0jv/R/hUGWcgYwV5zrEM
fB85joHzZJkz53osEyZMEPFZ3X09PzufqmHdOvfweBj2KTimQNZwVWBCX78W
Z0vK6RnKx/T5SzHqi5n4dPJ8fDZrGcbMXo3RhFGz1uDDmWvxlxmMAHwgMUvB
h7PW4eOZa/DxjNWEVRjF8FHwyTwFo+YN/S2X7/fZ4LLX9weXfR6wPO+n/83R
Pqvxqd9afDxnBUbOXoaRc5ZjtO8a2o6uybyVdN5L8PLYmXjq/c/w+Dtj8Lt3
xuIjn5UYPZ+uxdxVtJ6+R9ds5PR1+HA67WfaGnxK13Icrft05mKMmjIPb40a
jxfeHoGPJ3yJidNnYYavH5atXotF/kvht3Ax5vstJNu5CH6EBQKLsdBXDf5s
AcHPA1+CD2EeYS4WLJiHRUsXYuHSRZjlOwfTZk/HpClfiWd2+dJlWEHtxqwZ
M/DyC88jNzMDZcXFuNfcLDTvmE9lLtVk1v8EfKoRJduNqE934WKOGxdz3ajN
tCJm/gkEfZUL/092Ye6fQzH7L+sx+8MAzPl4HeaPCYTfhGAsmEj4IgjzPluD
ueOGMGvcWswmzCHMFeDPVxNWEVZi3rgV8Bm3HL4C9PdYWj96AyFUYB7Bd/TG
b2H+KBVGhxCCCesJgfD9ZC0WjguEPx3ToglrMfr1SXj/hdF45/mP8N7Lo/Dh
W2Mx6v0JePMP7+KV3/8Rzz/9Mh5/9Ck8/viTeOqpp/H8iy/g3Q/fw+vvvo7X
3n4Nf/zTaxgxcgRSs1JxoboM97rb0KfpQ0c3c6qtuNl8C1+fPYO8/fuQQLZm
Z2Iy9u4/gDNnz6O5+R566f01GM2wkr03mqzks3I9FNbycIj4S6FjSW2ATmOE
yWChdRaYTRYxnsK2gONT2JfmXH7O02eelLlUHgPl+FNuu7luJPML/Dn7wGz3
2C9jO8j8anR0tOBOOd+fNaQ5Vp+1fGbQc8Xjp6wJwJ/x36wzPWfOXMyeNx9z
lgfjtVFT8NTb4/DkWxMQubsMaefvIatCi+wao+BTMxuBdEIazxvctOzGoesu
7G/UI2JP+TA+NdnDp7q/xaeq7K+HL3TYHeho78aG8DjMX7Ie0+m9/WrOEoyf
Nh/jps7Hp1P9MGrqAnpnF+CjaQsxctpieo/9MXLmUnxM7/WYeWsxbt46epfX
Ysys1Rg7k0DzcbPXYJJvMCbMCSQbGkCfBeDT2eswctZaYUNHzqblRaF4a+oy
/PdHM/DouxPx4odf4PXRU/HJ9EX0/WUYP3spgY5ltj8mzFqML2j+1Vx/fDFj
Pr6cSf2ouQvhs3gZxn4+GZOmzsTipavQo9HDwpyoJ4X8vu0dhrhUtxfux6cy
7Hb20x1izt90OGyw2ck22BT9VKdriE81m03fzaeaFS7VQtBqragqu4q8rELM
mbEMk8cvQGxQHqr2teJy4QAuHdWgvqAPVXu7UJzVhqKse4RWlOZ2oebAAMr3
dOLIjksY96o/8qLP4UzuZdwu08DcS8fXZ/eA/jbScelN0A9ooCOYjHo6TgNB
D6NZB4OZPjdpoDVrobPoYCIYDf0oOX0Ce7PSkBgbhaAVy3GxogID9J6AY7nU
6bdSw0DVn7ofnyoYQrcC1t/l9tmlviHDBBi4/0J70VFPjPoTaLsLd2U5ereG
496Shbg55QucffEJHH3833H4sV/j0FP/jhPvvIzGeZPRHR0Oy54cuK/dAe72
KYKOfZ7u1H34VCfHnIkKbmQ7qNenQSf930k9r25Rn7Jb50JTtx2VN/UIza3D
56FfY8SKw3jBZw/++dOd+PevMvHc/IN4a81JLMpoQEJpC8626HBZb0c73fcB
OkmjUOG3Cv0oI/Ud6arT/qkvwgyu2/i/wqeqNTm9JzUfxTaR4/eYV2Q+lcG2
jjk/9qtkPfu/JYbyl8anyjhQdT9Znjf3a5lHZn1TyalyTKPkotUcp/f5y/6y
2vdTx0yqf4vbHb6+/FusrcBtCccGyzhJuS/J5cnpWxzuoPHyxHYOy/G/H586
tJ41nrkOqMFig85sFe+jwRNLymHc9+jdaCNb2Em3rZ2+0tDjwPHLPQhMO4HZ
4dn4wD8Wv58ShCcnrMazk9bhj/M2YUY0tc9Ft3DoSh+KWoxoome/g/Yn6lRB
ji14cv+hyh3zYHgxQ3XgujefqvInvO6xjA325lPVWrSsvSDbem7L+W/OIWU9
W/meqLUt7hejrN7m4fRwejg9nP6ep18qn6oer2XbzPEuPA7JMSwckzp27NjB
/H7Oj5d6qN61oGSsqMzNl9swtymXvWtNeceaSo5TcqPqeFT1tt+lsSrrUXnz
qTJ2VWqqquNW//Vf/1XoGHDdY67zwe0Vc298X5hTVeca/diJ+dTKukokMZ+6
MVDkq2Xn/m18qrr11gptSDWn6qZ+NfOpLjHnGIOhzHu7YFaZU3U7zOSuGuBm
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
y9eV2xMee+Pf4hhgHsPj32v25P6r413lPu7PU4ve7HfwqZYhUH/G5eQ4dS21
zQQDwyBiVE0cp2pzQm8ln5psqI7eR50nb4/9oB6yZU0aMxo79dh/qQOhJ69g
9IZ8vOm/A3/wicIzXwXhzfmR+GhVPCaH52FzQTXO3O5HXZ8VN0xutNFhdTs8
ca/OoaENmfevmMfv4FO9Ym7dLtu3tG2976X6usltJJ/O7TKPdTKnys8114vm
PBSOFeb2Wj4vUntVrVvxMD714fRwejj9X5l+CXyqug/irb8u217O4eB2metZ
MNfEOfDsw7G+6DPPPCM4TOYmmYdUx5lKjpJ5VOYn/+Vf/gW/+tWv8Oijj+KF
F17Aa6+9hj/96U9CN4Dn77zzzuCcwZ8z5PLbb789uP2IESPw/vvvi+Wnn35a
cKvMxbLuKcecqmNUZdwqc7pSL1WtI+Ct2Xo/PpXbK/ZNWUOVx2S5PfPOifuh
kzefGrolFJmCTzVRt4L6dHaGY3jqiDrJxOM/yXK10g/QkmPFnOpwLlXhUw0e
htPiyb63ubk+PH1b36/UphI1qnQskAa03AO+uQFXRTX0O9JQOmkODr47CunP
v4Gs19/DuZnzULV8Fa7FxsLafBUuHcen9tBx9Q/yqU5Ri8qTU8h9JZd7kAd2
4vvxqd6xqLIfyH0LjkdlDpU5BY5H4DrWPGds3rwZkZGRIn6Lt5F5UMwR8Dgv
115h3cAVK1b8zfn+dlqnIZ+yUPCpBZi0OOJH86lHKq6huqkHevbtMHRfTVZ6
T7kP7FK4MKGXR/1Djd6Mu529OHSiCLGJeZi+KBBfLQjEppTDOFrXgcOXtDjY
oMW+eh3y6Dczag2DyKwzIqveJJBNyK3VI7dGh9xqLc21yKbv5RLy6vQC2Q16
cdzqZYZc5nXq5Ty5XP/9lr1/4wf/JiG/QYf8i0ZkVPYirawTaeVd2HPFjPTq
fqSWdyPlgrK894oF+wh7aNv0ql5kVvXT9aBrVqdDepkWmeU67LtoxcErVuyt
12B3VSeOX+rB/srbWBWTiZFTFyBh92GcrGpA/e0WkXtmpRvF9UDszIcwnCo4
vCA+d9F2TgWCN7IL7oDrxVgcVpjJkba77UokltsTW0i2ob+7F+WlF+BDbcfR
wwWoqazAvebbgk+1OyywMeyWB/Opl3tQeuIaZo9eiwXjHpTvb0Z5ggnFO830
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
0HH+fo1BaAtElhsQW0/jt8GJsGoHQisJVQSa90JrHAij8RxOc2FUjQXRNUaa
p+n1zH3W0d9VepqvR2ku0CO+3oawciOCS/QIKqW5tMGBqDoXHdOJkAoHguuB
oHoX/Okz/Okzgum58AYgtsmFWHptNMe2lg3RufUjubIPqZU9SLpzHx+s3oNf
fbQM//bxMuw8EQ6/yCQEx6QiNDYFASGRCAnj3yICkfSbxEbSbxIShDD/0wjx
O4WYUH/EhgUgNjQAMSFnEBEWJl77coRrwK8PURGqIgyRkREib5d//8jIKHos
EmFhrEMRSX0jBlGRsYiOjENURBwCz4Ti5IkA7Nt7EDu3+WL7Rh9sX3cAPluO
w3frSeyj293ex7BjwxHsWH8UO72Pw2erP3Z4H8VGT1+sXLwFr/zsHUSFJuJ8
3jWatzphNVnFuFTWWoeS6++0qnobVlE/iyH1T12iryiLo4hHpHE8ajfi2p2b
SKJxdSY8CFt3bEN5RbngfQQvZpe6Q0osu93sUMpUqTkzFptL5NMzf8qsh4G1
GS00w/C67HSNb39ZzTSHmWje4b1ozvk3W5U9aYNVIW6k0BJzqnaVTxF8ED1o
GgH6nwJPH4IGN5w0Pi2lVRgrKsPonQq4evrhGtHTWyxCL9dI10MvYkKVQ/Nh
RXi90HlwKN+J+S86BwfBSu97atGjl67VIF3DYYcVeppX73X3oabtIQor7iIh
rxjpN5pxruYZ8usGsC2hHJ8eysGr68PwoyUn8I9LD+OnHsfxm33hmB+QglNX
KlD4ZACPyMDkuunMpxpdajyoU81BMDomuNTvCZ/KjflBti3ZrpT7UOzPMO/H
dj0/LjlGGdMn8ye0eXuyuetdan0CyTt+F7WttByuVn9Tfg5/B7Z5mV/jNYDn
eKl1wByrzMPX5plr/UCtvqq7zirDPS5W2uzMSbO9zZ/JPDVfW/5cXoM4LkfW
SHKPx5T2gXBCpK4L2yw2I8EgIMYM39poQNnHlPtCC0Byk5MT9qbeIVVtZkI3
oYlASwBuG2wo6B7F4fx6fHZAR2tUAN5YfQSvLNiOd5bvwQzPA1hAa4xf+nUU
tz9Bx7BBxLh+fT7VnVP95nyqrF/Fvylz5dyP2V9iv5XXcd5XZduAf5+p6qVM
t+k23abbn3r7Y/Op7k27bmo/j+do3l9kTpXXRfbL2B9jbos5VY4VZS6KeVKO
LfXx8RH3Gfw361Yy5xkQECB4VObAOLeQbRj24xi83vP6y1wY5yUyb8vg+/w4
rw8MbV0ouf/Jx2IfkPebT5w4gRkzZuCf/umfhFYr86Mck8p8qbbmlORUJa/K
caqsE8CxtBxH+/rrr4v4Wz4m21ysr8l7r2yLsC7QVDbMH9oEn1pdjnDdVHyq
TdSIsAs7HFPzMFozQptrprojL4rJkqFw43Fz/L4x1+Silcy5WM2wWYxkm3PR
XfJh9NQvh4fgGuiDi2wk6hgKHtHfxiF6jV4RJ3QpNQqsguVQ8+Rcisuh11sx
OkJ+yIhdCMW7DGR/Gulamp3j/CZfb87PYt+d+xnXkWItKB4jHEvKcVMcV8Ux
Vzxe+Hdhm0Huu0vdP2kTy9+K/2a7TpvPxTYg/94ea9fCy9tb/N4G1gmU+/NS
9/Ul+qn+0XlY4HUCs9ed+E74VMdEKI2inar8zMI27Jd8alQaFngfwGfrD8A3
+gKyavqQUccaomMKv1BlRkS1jeBABBmSUbVARK2L/iZUE6o4b5Uer+E8Vici
qzANQlQ1EE2Io+ulo2vF2gjx1SNIqXyGSPJF1xyNwutzPRCcznxqA2o7u8lv
5Zoy5JPZFLgcePn4VfPiXWq++QQHqcAuojId43yq3aXufVFnGB4cQumdYixb
/AUyUlNQVHgd91qa1Fx/pYYL66iOGUcEd+lwKrmx7L6IfP86pR7Vyg93wfPj
A0g9cgeFMQ9QHN2P0uhh1MXbUZcAVMW4UB5lVflUC6qTzKhIHYLPkih4zzoO
7zlHkR1xFd1tfTAOmpV5RFAWNqEBy1ykxTkGi8sgOFCFq1S4Yt7Z4RgnA/Vl
w5hJxOU/zz27hN6hRURdTYZVqPgZRI1ru4thHodDW5frK0F9veYYEsylWsjP
04+N4HH3AzS31OPytfOY+fH7SMtIRH1DFUbHhuiaj6Gr6x6ammpRUnoL2TkZ
SEyKpXkslOYxP2zfvpnWzO3QJcbjwsV8FJcU0bEa0E3H5BjW4eE+mscMol4Q
w851g+yc48h53wTz2HM+rzt4HpQ6mFIDVVtvStaHlvtXHMcv6/lxjJHkXXmd
5fWYc/+ZW+X9LJ0uEdExcTjiH4/fz16Nn/16Jv7HT9/CD179CP/49nz8+Pcr
8JOPPfGTWd74xw888Ve/moP/9rOP8N9+MQt/9eoc/GzmGvzy47X48Ttz8Y//
9h4+/WI9Nu8+jKj4VDon8+S1yjaR6881PFzQ8qm9mL/TH/P2hmND8Fn4ppUi
vkoPXZ0y14aXmxBd50RUPRBSAwRWAkE0loNpLIcw6oBwei62kcZ5rZnmPyPd
cr6+mca8nsa/AtZIDS0fQ2CJHmeK9TQ/uui19F46VijNEUH0/gDCKXrsNN0/
Tbdn6DXM2zJnG0pzfljZCM0dw0iuHUJqzQASix9gxhof/K/3F+Gnv5mLdz5d
jjnLvbBgtTcWr/bC/CUrsGDRYixc9AUWLVyIRZ/Pwfw5n2DuJx9h7scfYtnC
WVj5xWys+mIuYR6W0Ou+WLQEi16IxYRFKhZOgUUi34d1lpYtY52lFXS7AkuW
LMfixcvouWXi/qqVq7FmjSfWrllH9qoHli1dhYXzF2P+54uxeMFKrPjCE6uX
eBM2Yu3SLVi3fAvdbhuHx9KtWEXPLVm4Hp99sgw/+edXER4ch3N5V3CvtRNm
mgO4vpZrnCPRJrNYRbwq2yQOjgfkvRe7c3yucKn7yGPU/y/cLER0ahKOB53B
hs2bUVpWiZ5nA0LK1H1u4dpXTlWbWejR25VaT0qZKRf0JquoIW7m/R6ez6Xt
5FCTgkSOO/VNGleuEbKRRgxKEZxJfKqGL4LCGYk6VUZ60egw0NMPPH4G14PH
ZFs9pveP0nNGwSfbXZzt4xD59XxYGR/H2k125vpYG8qqigCwNjTZU2ajHR2j
/eixmzBMX25Mrdx1/+Ej1DY248adMsQm5aPgZjUqu/rR2GdDQkUvNsTextvb
YvGjpUfwgwW++OFCH/x41UG8ttUfGxLOI6W+E+0GC3qdSr1Tk1OpWTZ+PVmw
kr/v9yg+lZu2binPbbyHJOP32ddge5PnQbYNZT7Ui2IqpY6AnF8lV6j9LPad
tBqW30Vzr0clz03GyzK/xrVZ2e/iOBX24QbUeqvcpOaVttYUXx+tfczf78vi
GrWfyX4SrxucH8H2O/t4nI/O18O9/oECttEtYr9z6npUKjjv30pjguNVn+NT
J2tsj58XJlwnCe6SfYQOQj09QGY5illXuN2EnYk3sfxEKmbvDMGr87fg1c+8
8B/zvPAbmrPW7A9CQXkjGmkO4Xz/r82njvOq3w6fKhv3PdasYD+dfztex3m/
gP0mzkfhfi5/c+3vO92m23Sbbv83tO8bnyrXNu26ybfSruD5WtYHZr6J/S7m
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
TNnVZkaVNVVZF9UlnmFbwKHu24nTskudVaeiDeC0wDjaS/NrHxzmXhhHHqL2
zkVcP5+F7IwkZOZkoq1vGJ0Wh+CYmmkM5rQNIbriCQIKOxB88z6NgQFU9Nrx
jE5txKVIGljl/pcklOyYIIony4r+UZuWd9LuwTPvyTWUWO8kOlrR6ecYfL7P
/gzbhy/jnbT78jKvTujuY3Je/DdtL+JTtc1dT1WeGz/O8zbb11zLV+b9S25Z
y4VO1bRa3Pw9tfsu3KSWAkPazvI6sx3P15fzz69dv46y8go0NDbhUfczDAwO
wWgyiz0j9VuC60Ny3QbBqYqx5B6r+iJMwaeOF5KYgANKXbdndK9HBf/9lEF2
yGOaX9r1JhR39CD5aqnYJ485exW5hRVo6e7B0zGjGG9yhpJbve5ZMHKKeHEh
0m+uAyF9Ynntp4o35jVbap8zp82xwqy7wH46Pzcdozrdptt0+1Nuf2w+1X3t
fNFxpZ0tYxS08aqypiDzqjwv832t1ihDW/eCn9dyqVreVMujuvOp7pqYWk6X
1wS2C3jfjfNZFi5cKHhRjk3luFSuM8U1qZhDfRmfKuNTP/jgA8GrsX/Jx2O/
Uqsv8F3wqZV07vGxsTi43xfHjhxBciLzqSZVV8gm9LXU4A83QGPXu9xiQFyK
rpjNpRapdSiBBGa7wqcKLlXRHXOqoRTSnpe3DBk3waaxwq9ynIOLHnMpdbnJ
13OZLXCNmWF4NIChu0/QU9+F7pp7aK9qRm1JNS4UXEFGTh4Sc88iktb0wxFR
OBgagVAd+fm5l3DjWjnKimpQVVqHJrKztPn82lpS7nv+st9q9e0l9yr7srbf
uo8fbb4/107z9PTExo0b0dPXC6u2XqvTOq5ZyDpnoh9Y7TDZnBgg3z/vShlO
hGfhM8/D+NjjMALPtyL1G/KpJrtzkhsq4pQ096fiU09EpWG+t6qfGn3xeT61
eppP/UP41Ai1bpeoC15uFzVuoipG6dqOIP7OA3ieTMSv53niUEQCdOev4UJx
BZo6utDR1YVOwoOuTjzs6MAjLdrpMUaHggf3u9DVSa8n3O9U3ts+CR1of9CB
joeduE/ofNApbGKORSwrLUNWRiY8aO3QxUbjXF4OiotuoKO9hV7TRriLjo67
uEv32+/TMfj4nQ/RfvcB6qvvo/h6CwpSSrD0gx1YO+sgsk9XoiyxB+XxQyiP
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
jszzqS1GxOtnCWYkSD61xYKkVjPSW2aQ1TSM5Mq7OJlTjW889wucU+NT23pH
l/jUTwo0fKqiJ+tFdJMdCQ0m5HA9sco+bDmRih+t2Ijo9ELcqG9D+90BmDk+
2+MVOViPh08NzGvKzX1IaXz/M5/66opXkZ2TgeraSvTcvy341HkE86kBYfTb
J52YuDWLzvJ7eO/pHdjwrMKnGjLG0ZIyg5akWRGb2hRtQsNFIxoi6XnsDJrj
Z6BLpm3a6ByfuuHlA8hLKMNI/wQcXPDEr/CpLg/5MuQX2dwmUa3ko/jUxL2l
KDt7B83RMzDEWtEe5UYH5+ueV/C/gk9NMEGfNoPSc7ex5/Wz2PCzAzixPRZX
kyswed8Ir5HmXbtyrQOqrhrn+jpp3NLyqVq/Vptb+ii9PtHN1DzP+bFt4Zyv
zSUJzhmUr2tzA4M5XMnDSsj69tJG0PKvHAvLMa88965bt06AfTPWJmC/ntcD
ObeW5ysG+/nMpbJGAceFXS+7gdTsXHz/tbV4Zk0IVocmIiSpFGm6SWS3W5DR
6UR6pxspXV4kdtB9y3xqoxVxzTYkNplwsqATB5OqsOF4Bn70+mZU6jswbVf5
VO/DfKo/MK9fyvGpFta7UeNTZa04rpnl8au1VQLzVJgIh9LwqnPUmJT/EN8X
ELoCfq5NJdZC7PQHDXxK7SrOUXWSD15fUYNzJ07hvTdX4tWfL8P5c6eRlZ2G
zOxUpGemIC2dkEaP09IEMrgmYyadx2wFuYTszCzk5WTikkAG2QxJhARCnEBm
diwhDhn0WkZ2ItJo32n0HanZmSpykELXICU7jx7nIT3rEjIzcuaRmS3smczM
DEKailRCShBS55BN+8/NyaLjyRbHmZ1K1z/1Ei6l5iMv9TLyU64gL/EqsqOu
IDEiG7veO4Q3frwK6SfzUZHegoaEMTRHekXOv+6iX9yvgk+96EXDBUKkBzXn
raiONBNMqIoyojJmFBWJD1CZMojK1D7aTxfO7UvDey9tw2vPrEJa9CU0VOgx
NjgO44wJVpMVFpMNM0aLqEk5MWvCOL0+SfbAlMWOWbMNtlkr7EYbHCa7Ul9U
hMkF5uD3BOZ4We5iHF/G8Kj8zPwcsEjHCfjn41K1fKrZBCNrZuma0XeN7pUn
vojSr30WRf/2WVz56ueR89V/Rtu772Ew5ADM0Ynw6jrhvzOEwJBRcKo+oxO9
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
voz4f/w0Lv7dXyLt/3wahV/8N5R8/T9R+9QLmDl6Go68Yvi77gFjM7APDpHN
dhuG1hZUk01XUFyC61XVGJ2ehp2OddZkxdjoFJwOzrcPKOsEdJR2P/kIfl6r
VtZ8ZI0ofiTqUXG+v5/5JDequ4ZQ2tKHK409uNrci7ZRJ/osfox5lPhV5l8V
ui0g1ijU6lKYF9wk+K1z+hfg2D3JzTBvw3HjIhNi3gR8nE2OlTJ/mWMbOM+L
/R3mIlkbmvNFtPH50p/T1mmS46vkKWV+tXZM5c/Iz/PfP67v91G1gfl42Sdg
f4G5Yd6yfyDjaCQWOx/Bzx8Ze8hvlZIm2lJLfjVeUdTYZf1bO8YdE7gzdR+N
9/XYcfIDHIo9hONpJ3DxShQq7leirr8O9YTaPrr/uiuQVZGFs5lncTjqCEIi
PkRGYSra7xkwYx2H3WeBm7Wn5ZcG/L8anxrEoQYLuHBtJ64xocRte2j8pnmA
7gunb17OQGj50jkZd3pwf9qKqq4eXG/pQpnhLqrvjWHQ5sIMDZy85iDDdt3q
6VFOjJrAwEIYHo4dUeJHuEaWiwb4iUkzenofoPtOP8anZ2G0kq9O44uZ7lEb
18xzB9R5zKfsmbX0HdQfbSZ4rSbqX5Y5zpPBPmnw3M59gXMcd+3aJfx05lW5
r/DnuKaZyI969VWhz8dxO/w39lN5X9JGCe4nwZqtS22pLbWl9uu0/wl8qtSU
5nmcx0aphcYxkbwGy8fMvChzecwDMk/JMZ+vvfaaGHM5xpS3r7zyyqJYvnw5
XnzxRXzve9/D1772Nfzd3/0dPvWpT+Ev//IvRb0o5lJlvr6sK8UaqNqY1D/4
gz8Qr0t+VXKvjD/8wz8U8a28f+ZRma/kvByO1WT+VNYvZpuBdd/4N0p7Qbt2
Jueax8GfBje2tzjmhrlPqZ/KcaXMW8taUrxuzFwv867MXTNHyrYbx/MyD715
82bxOa7twdww89kcn8p2Ha+dM+fN8ag853H+JOsAcM0Pfi9z4NlZWbhyuQBN
tQ241daBO51duNvVjTvkn3W0t6O9rU2gu/uWWK/uJduR19+Hx8cwPjWJCZpP
p+g4WfvByJy7urWZaS6lud1LfoPfwbn4XpVPDSh1Gqxe+GccsN4bhknfhdnC
65hcux3t3/8ZGr76BCr+4d9w6f/5NOq+8j3ov/sT3Fn+FkyxUfA0VMB/pxUY
vQu/a5T8rwnySyfoXE7BzzUS7LRzu29hgVfVhPIEVGU63nJMCK/jPpjAhb2h
CF2/Cyd3HBB8qowR8Qlf3qnEwLL2EK8N85q0sPvIpyP/u6iqHmeTcvDGtiNY
sTUUafU9uDFgx+UeN7K63UjtdCKxjWCYj0+91GZGXtsUshr7EVnYIOpRRc7V
oxolG8i/xKd+AnBBH8DJeg/BjQstfsS0BpBg8CK91Sn0U5OqerHpeDJ+9NoG
JOSWoK71NnoGx+BSNTkcamzKx87315IgvvnAN2nPchzaxs2bUHDlMhqa6nC/
7x68fiUTWZIRfs7v8qv9SOVTLcN2DBkm0FJyG1teOYxdK06i+Gw7DDkzMKRZ
YEi1oTvDg1uZPnSne9GZ6kFXmhudGU50ZTvofbOCT93ycig2v3IEl+LKyB+f
hHWKdYwhuAFZcZnxy/jU+JBSlJy7g4bYGeg1fGr7BQVtF//n86lCPzV9BiXn
b2HX8tNY+8w+HN8cjSsJNzF5f3ZBvr/X66ZrrNSY51pUrFUiNUuCY4Fk/IeW
B11Ms0fOab8Kx/pR9oa0X4Kb1pfW8q7Bcas8v/H6Hs9JrPPD65usR8PziIyf
fVTeDDfmUwdGJ7Bq/xmsPBiFrefzcTCjBrHVw0homBK1qGKbzIhv8yChw494
g0cgicbCJJ0V4fnt2J9cgQ3hGXhm5U5Ut3Yv4FOVY/UKbo/5TBEnLOovusV7
bPR3I53zWb7PIaUdA0rMqjo2z3GbfiXuToJTKAQ1SE6zw6NslVLwfvqsX2wZ
Mu7VozIB/DkbfXDG4kGjrhsp6YU4cPQs9h04heauXoxZ3VxaaE43MrimNH8n
f97GWh8uJZ1jQVmWgMKY+tR1EKHPMcenen41PlXLSQSC+5RfGQMWwL3wuagd
4xckr9Bwp9/ksXmV+k0sX0o/0DHtxWyfFXcaB3H+YDxef/o9pJ/OR2V2C+rT
hmj8sKAp1oqmGCsaoq2ojaLn8U7oEp1oSXGhNd2F+N31OLOhFCEr0vHuD49g
9bNHsPaFo9jwyjFse/so3lu2Fct+/CZ+/sNXse6djdi5+QPs+WAP9uzZi71k
S+7ZG4KtO3Zi0/bt2LLzA2z9YDc2bNuBdWSTbSR8sHUbtqzfgF3btuMk9W0T
2ZesFaRwxT7BxXBspwBX7XM54Ga+hH6/osarqEj4/G6VT1fPsqo7JLhULnIm
NVRVXtVDtpdrjOagvl7YLmejY9sm1L/xOm7+9FkUfOmryPn7LyD7//sC8v7x
q9C9/AYG9x2GIysbgcoq+O92wdF3B7P9PRjuvYX62io0NDZg0jirzGleHxzM
4/gDC+uYizx7JW7eLzR+7WQrOeCj38NxpyNmB3onTND1jOBEfBF2n7mEDaEZ
2HA8B1El3bjaMYHmMSduU6cdofdPgWNafbAIPVSHUA0IiMpW04QZ6qxGgqaG
lVcx7oSWAtlOLjrHbtYhCCj3zuNqck1Hjp9Se4vnYPYpOBeMfQxeF+Jcebbv
JWcq41Tl+Bw8vkluKTg3TuZef1xtMbm/R+Xb8f5lrAb7duwncKwG+0bM6cpY
Q+1+PmpuCNYDmGs+pftyfLbbTnORm3lw6vEBpdfzqqHZZ0V5azUySrMRkx+H
bSc/QHJFOvWTYlQN1KHDfBt3rfdwz3Yf96y9aJ/pRMtIK+r7G3CjqxwRyRFI
vZKMypYKdPS1Y8Q4glnHrKib5hMjqv/hXvGQ7fURXKrKp4r7mDWdeI4LKDVq
2ceYq0lF98kMDfAPjDY03elF5vUq7Ag9hTX7aJw5egaH0kpQ1TuFbrMXvfSB
UTo3UzTIz5CfZOL4dT4UHi+4HoRX5vwrNhxrggwOjiDn0hUae/bj9bdWY/3m
XQg5RPNoVgFKb1TB0NaNEZojHXT93E66H51WBJxmOkCCh242r2Mu3pr9fKnr
q72O3C/YV2a/mWsY//jHPxa+J+eWcN9g7pR9U/ZfuRYlcwPafH/Zt7T3TnDM
81Jbakttqf267ZPCp36Ufomcy3ku5ZhU1gZi8HzLHKAcXzm2hHP1mEflsfYH
P/iBiAf9zne+g+9+97viMXOawXjiiSfw7W9/W+Thc10o5kZljr58zNxpMJ8q
a0vx36QOgORU+XPyOfOpzNE+9dRT4tyyjihzkZzXzzqjsi4G/x7mLXlOkbkH
Wr/zN8mn8ncyV8q2C8fMHjhwQHClrDvA+vY8N3HeDfOj/DpzplxTkbVqXn/9
dcFHM1jPhq8D10Tma8J8qczxZ3+VeVjmV/l1XluUsawcFxsTHY20lFRUlZWj
Xd+KWx2duHvrNvp7+wR3PkAYZP50ZHROE3eUMDI+jpGJiTmMsTYe6+Kq75kY
n8DUxCRmJqYwMz6FaZrXpx+MY2aYno9MY/bBJNnt45js7sVkUwemrtyE8YOD
6PjxMjT8+5Mo//y/4fIf/C0qPvMl1P7Tv6P1uz/E2Ac7YctJhauyCJ62WthH
O2i/nRh50IGhgQ5MDt3HDPXRmaEJwjRmBmYwMziD2XEjZqaMmJyexej0DB5M
TGN4fBpjwxMY7erBmR0Hcej9rTi6cRf1h37l+Ok3TQid32GMEyYIk/x4bAQT
k/Rb6Z7oezCCrCulOBaZgFc53389Xb/reuR1jCKlZQrx/z977x1f1XWlDf/x
ffNOySSTL4njyTjJuPc47t2JS2zHDWxTbNNBAoG6RK9CIHqXUO+9dwn1jpBQ
770AEqh33V6eb61974GLDM68MfOzfzMc++FenXvvqfvsvdazn7VW+Sg8L4zA
7fwwzhT240xBH84S/AovIbikG345jTgWmYfX56+GR+Q5ZJa3kP03fDfe/0cC
5lNPl6oISnhUauFdo0NgjQZRtSok1k0jvOQyHI6F4v1vbHA2OA7nCi/iYn0r
rg6PoO/aNfT196GfMDJCbX90BCM890AYljBiwMjwKEZvhSEjpL/pmTJgGCP0
ynFV3IdlZWfB1sEOEdERyMzJRGVNBQaHrtI+BwiDGB0jDF/D2DA9j7SdsaEx
TPRP4ErTAJqKulAYWwGbhc7Y+PVRxB8tR7H/ZRR7X0OJ5yAu+k2gwn8S5T4T
uOA5gVKPYZR6DaLUZwDFfpewY7krbL7YB9tFzoj3y8bl1mHMDEt8qvZ6Hea/
xaeumMOnsia2xleFem/9/1g+dfuS07D8bA8O23siKSAbI90316P6Lj51rh0g
+emS3246bs3lU03zp36f5fvyqRzXz7YP5w7n8Y/nAnnsk/pfnktkrsIUvJ7t
kWsDg6htaseqncexyskTjm4GPjWg5CqCqd/1L58QfKo/PasB9dobfCr9HVw5
i+OJ9dgbUgBbwaduv4lPNaSJkebU1Df4VCPYA5xSqjA4NY0+sh36aEzpJ1wd
GxfoHzVibEKgj8aeK8MM+i699o9M4hqvH5rElaFxgb4R3o70OwOumoDXX6bv
dV8dQ3PPINJzKuDuG4PtTqexefcJnCttQM3lEXSMTqJnfAo9Y/Q6OoFeIy4R
LhN6rk6gm5793quT1E9NYoC+x/k/x+hcVDoDY2pQFzKvpzTynSojn6q9zqfO
TS8ofP87wKfe0I8Z+dRpav8zdCwynSCGVZM6yEbUGOuZRmt5L87u88Oyj9Yi
6mwyzsc3oCyyDxf8xlHmO4kLvhM47zOOIq8xlAVMoyJoBlUhs6gMn4WrfTZc
zGPh8IU7Vry9E1YL9sNh2SFsMTsGJ7vT2Ga1H3Zrt8JqjT12bNoNpx1O2LV9
J9m627CN7N0tZIPZOTrAyt4eNo6OsN1I9rutHcytrbHO2go2VhuwZPEirFy2
FFs3baR+d5DaPeu0DPpTvfEq6o1XVKnkPA9KkVNCa8jGKyDa3i35VOXNfKrW
AC1rHMfGoKPxR1dWiv4zrmjf6YSa9dbIfPNdxD72LCIfeBKRDz6F3Hf/isZ1
GzBy7BjkEeHQ15ZD290E5dUuTF5px8XiPJSWFKLvaj+muJaMMU+kVBaK5w3k
fI/omJRGPlXPHKdqVkCnkgs+9fLYDFr6xlBc24stRyOweps3Prc9g/l2Z7Ez
sBg++V1Ia6P7NaRCJz1cfbRdzsE6LvStcmohXMuQWdZhOnd61YwTJg2cENdA
55wAKv11qDnHk8g7rRPx03dqMY29l3wBqS/jeD3WQnDuMtYpcAwY85MSFynF
P0vbuF2ulLl8qikPdacX6bmU5uL4GLnPZT0i+w+sU+U+mv1RPnapv/9efKrI
X0T7lFObmeWcwaz914l7pRbzR1pMamYQm5uI0xFuOBRwDDvcnZBcdw7n+8tR
P9mEVkU3ejSXcUnbJ9A23UnoQNtkB+qGG+CT5IvA5ADE5sQhozQDNe21aKf2
3D/UR/3dAAZHaWwx2mNiXBkx4rrtRf4KjTPfhbER9m9oO4NDBl+Hfj9EGCBc
I/QTLpP/03rlGu2/F0n553HULwSL1tnhw6Vm+MTcHmsO+JEf0IzM9kEUXxlD
zdAEmq6Noa1/DJ3Uz7PeVPghPB7S8zxG4x4f2zBt91r/NZSVV4kagB/PW4xn
nn8Db7zzMT5buBzb9xzAaTdfxMal4EJZBXo7O3H1ci+G+y9hcuASFFND0MjG
oFVOi1si8alzNdASB8BxJNwmeL6A641s3LhRxPizRoe51MzMTNHuuR4Vc6z8
G9NcgaY51aU6mKb+9d3l7nJ3ubv8vcuPgU81jT253TZN85VzP8l+Dr9yXjPu
O1lTwnNSfOxfffUVPvzwQ8GTMpf6xhtvCHDOUsZbb711Hcyj8ndef/11PPbY
Y0JHyppS5kmleH3Wn/LfzI1KulPWpZryqVJdKqkelSm/ytzqb3/7W8Gncn42
zi3A15nzvTCHyVpL5guZk2B7SPJB/ys55O7UwuMYX0vW5VhYWAiOlOtysD3G
8RWs22E/c/ny5ViwYAG++OILAb7WfF4cX8Hc9JdffinyGXC+BB7v+PtWVlbi
vFmXy/wp+6x8r3hukfnYLVu2iFwLh2n98SNH4cE1pHwDEREcgqiwcFGrIjY6
1oDYOCQkJyFRIBHxiYmIiY8jxBsQF4fw6GiByOgoRMdEI45/ExeP5LgEpMQm
ICkqHgkRsUiMjEVyZBzSCOci45EWFIkMn0Dkk11Qt8Ya+X/6GBnPvonUh19A
1i8fQeF9T6DkP59C2ZPPo43OsW/PVgycPoSBQFfUx3mjONaTtnUW8eHutI8g
JEVHIDEmnpCElOh0pEZnID0xB2mExPgMxMSkIDIiHpHhcYglJAdHY/2CpVj2
Pl23T74kuyCU7JA4xNF5MR+dmMDnEWOs2xGJ6KgIw+eJSYig89rhcgyrbLbh
jc9W4+XP1sDsgA8cPeOx4Wwa1rmlY+3ZTKx1z8bq02lYfSoZZqeSYEXY6p2M
TWfjsP6ALx57ax5OhyQjo7wJDZeGob7Lp/4owNfGs0ZDUMOzWgPvKg38q5UI
q5UjpWEWUaVXYHMwAK9+tgr2u47hiJs/PALCEB2XKJ4ZA/j5ibleV0dCjID0
nXgDYiRQ+5LAz5ER4lmMikUcv8bEIJyeU44R4HxWn1O/sI18/QOHDsDtrKuo
SxMfH42EBGq7ifTcJRCo3SbxsxibhKyEHCQFpyPsdCxcd/vj4xeXYv6r5nBa
6Q9X+xS4WmXizIZseFjmw8uyEN4bCuG1rgCua7NwZu05uFlmwMsxAyve3oLF
r1lj+V/sEeuViSvkG8yMkT2tNMRM39BaqW/Lp241P4jlHzjCX+JT/Q18arW/
CrU+etQxl/o/hE/leP/6mCkU+HTStT4Lm8/34aCdJ127cxjsJB9nQgcuRTSX
T9XoDTlUJczNnTq3NpQpl3qruH4Jt811919YbqdxnVvX6lY1TZhnkGIzHBwc
RAwJ2xHMSXCdFwn8rCQkJFwH/83zi9ExsfAOCMEHqzbhC4cjsD4ZCefwQoRU
DCO8hnOrzCKgRkZQw5+eYT/q//yqDX0h86knkhrgHFwIu+NRmGe2FcXVN/hU
IQHXGPSoGrXSyGlproP51KHJSbT2XkJ5YxMiUtIQkpCMiKQ0RCefQ3giPVcJ
/JpJyEZoQiZC4sjnjM1EMCE0PhsxKXn0G1on1mcQeBsGhNJ2wmg7YcnpCGUk
pSOEthkYlwbfqFR4hiZi5yFvmNntw/yltvjsGxvscg3FaRrrAtKKEHiuEP4p
BfBNyIN3XA584nLhR/CPJ0TnCATF5iI2hZCchaRzecgrKcOs4Ms0Rk5Ve10d
ewNaoe2aGxp7nT69hcb+b/Op6tvyqbxRtYyOREa/M8a1aGf0UI5rMN47hZaL
PTiz1wfffGCGSLcklMTX4WL0FVzkOnpBk7gYOIELAWMo8htCWRCtC5nAxdBJ
lIVP4pRdKvaZhcNxkTu2rTgL74NxiPLMIFsiH1nxxThH1y0pOg2J0Sk4l5qJ
jPRMpKYkITklkezIZKSmJSM+OQFxSfGII7soLjkZkQmJCKd+OiwqCoEBfmSD
rcN6CzPs2L4Zk5OjotaYgU/VGrh5oxpYRLXznInG8KxzbglJnXxbPpXjDdTf
5lN1chl0U9PQjY0DbV2YSsvEENlYl46dxfkvlyD1pbcQ9/QLiH7iaSQ+8yLy
P/wratesRueOrVDlpEHbUAFtbxumLjUjNyGSbLUQlJUUobm5ScQjKej5lVH/
PUuYUeswqVBBJfhLjaibJ/IzamYFWKPKsUB9YzK0XplEQdUl2OwPxRfWp/Ha
kn144et9WOwch03BZThV0I3g+mGUjqvQpNLjCrWBQbouE3TTZfQvV7fSYYBs
nwFANUzGz4QR0/S32pCwWMDI4Zkw1ndqkeaipHkrqX/j91IOLs6txdo9jg1j
3Qb7GRzXx1yl1Geb9rumfalpXzy3n74TdXvmcpum+5B0hKwt5Lg99pW4XiDH
70mxe7eqkXWr47pVvu3rn7Epy3yqQgOlnPap0gjts8qYFUhBd3pcPU19VgD2
uO/Ddrc9OBFzBrmdxagarUezrB31M61oV3WjS9OLHm0vmqc70cqc6mQnGsdb
EFeaANfos3A644Rtx3bBPdSd+tkgRCRGIDIxElHxMeSzkA0Vd7NNFmcCUQ9P
1MUzQUyMAfR5oviO4bvS76MJkTQuhZF9FkLvA6kv8I2Kg3tIFJxOuMF843a8
9sE8PP3mX/DUu/Op/W/E6sMB2OidgN0haThBfY53Uh4CkvOo389FVEI6IqIT
EE4+U3hENNlwZFdGxyM6MgahwZFwdfXGqjVW+MNzb+De+x7C7x5+Bo898yr+
9M4n+HT+YvrMAtt37ISPlyeiw4KQnhCF4qxE9LRUY7SvAzOj10SfbBrbMjev
L7cL9vnZZ+Z2zX4qj9UcF8m+JcenMhfAfjXzrszHS9zsrfTZ0lzEnaqzdne5
u9xd/ncvPwY+1TRHtLTNueMg94M8jvIcGdsLrE9lDpLnYrmuH3N9nFOFY/2Z
02MulTWpzJ8yVypxqgz+2xT8nVdeeQUPP/ww7rvvPsGLMk8qxfIzX8p/m+ZL
5fh/Xi99Zsqt8m84RwBzqqxN5VfeLvOOnFOU9Z08x8bzacxhsv6TcxiwrcB9
/63qe9zKX7yT/T+PN3wtmRNhXe9LL70krsvq1asFN8qcM6/j8+fz4dpcnA+B
88tK15Wv4eOPPy446V/96lf4+c9/Lt4/88wz4l588skngovlHAs8FlpbWxvy
oXJM2vbtglvdtHETrNeth4O1rYhRYzgQ7G1s4WBD7+3ssWnzJtFGN27aCPuN
DrC0tYGlna3ABjsbmFHbNVtrDvN15lhrsQ62NjZw5P3YOwpspG07rN+ATeut
scXSBtut7LHbeiN2Wdpj3zobnFq5DsmfLUDMC39C1FMvIe7R53D+/udQfM9D
KP7V/fT6n7jwxJOo/+xDNC1bgMYNyxBn+xU8rBfDxWoRdlotxhbbVbSv9djk
6EDYjC32u7DV3gk7N+0nuGCLnRPsN2yFpZk9rMxs4GBhj522m/HWMy/guQcf
w7MPPw4zM3PY0XE7btwoznfrFjpvB7omdtZ0fTZgg8VaWNO52W/aDBvHLfhk
0TK88pf5uO+P7+CeZ97DU5+tw/NkJz23ZCf+uGwPnlu5H8+vOYznVrnQe/Ih
Vjrj1ZVO+Mz2EOZZu+CDNdvwq8dfwzH/GGRcaEDDpZG7fOqPBD50bYJagcBW
PbxrtPCsUMOnQo6gymmkNskQdaEP6/d646k/f4lPvjbHEnM7rLZ0hJXDJmof
m+BIz4ojtcUNG9bD0nKDwAZLS2ywIlhaEazpMxuCHSwJVgK2BGtYE2zoWbGl
V3srAj23NrQda3qGbDZYwYZ+b05tdfmy5fj8i8/x/Msv4NN59Kwv/hJLVnyD
devNYWO3AXYOVnBwtKZn3BaO9Ew72tAzabsRzltcsNN6HxxX7YTZ57Z4+Jev
4Il7/owFL9rD7O39MHv1ANa8fAhmr5yE+atnYPGqKyxePoNVzx7EymddYEaf
WX5wDO8+uBRvP7AInz67EpEeGejrGIRswpA/VYwpxuhgA1+i+U4+1ccpC+fO
tuGC/xgucs5WfxVqmE/1AmoJNT8CLvX78qmVwdNoT1GjLOQqnM19YP/lPrhY
uyL0dDwuNw5ANkJ+zST5uArWdbCmaZZ8zlmhSVUKbaocCrVc2Aimmqdb8Za3
i5eXxn6pTsrt6jH/V2yNv3eukcdc5h943pBjW3icYhuC/TSubcE+G9tD0njF
65l35c9sbW1hQ215tYUVnvzgK7yzehvMDwbDKTgf0XVTiGtRI7xRg6BaNfxr
NdSfUd9XIYM3IbBaIfjUkymNcBb1qKLx6ZqtKKpuus6n8lmoVWwPyKBSygSf
ZWjD3JZ1gk/tIduhkGy1yJRU8pO3YZm1A1bbb4XZpp30ug2r7bbDjMYec4e9
9H4vVto4YZnlHqywdMIqm31Yu/kwVtD6pda7sNRqB5ZYbsFyGouW223BKtrO
at7Opu1YTT74CsftWG6/HUust+Or9duwwHwL3l2wAS+8twSPvDgPDxLeWb4R
n9vux/Jtp7Fixxks2XQMC20PYIGVCxZaumCR1QF8ZXMQSze4YCWtW217EFZb
jmK9vTPsth7AwZNemJArBF92I7Wh5iYYKqXob5ue5NYrb2otxutoCtP8qRJn
aORT+fdS0gTpY04ZOqPF+OUptF7sxpm9Xlj8/kqEnolHUVw1LsaTfRo9hqrI
CVRGjKM8dBSFAddwIXQY5eGjKIsYRWnEEE44JMDZIhhbV3rA2ykZ9UVdGOoZ
g3qKnj16/viV8wyoZWpoVBqRy3h6ZgJT02PG/LZyyAky8aoU2k3GjFKBsekJ
tLU3Y/+BPdiyzRF7nXdTe5+kcVt9fW6J6+OodCrBQV5XBXM9MrWMnneZ0Abf
zKeqTcCxv0qRTxGi9rfaCI2BY1VwsUE5cHUc+oYeaC7UYyYlDw12W5H3yRdI
/9O7SHj+FYQ8+ADZWk8g6dWXkfvJh5gK9oKmOBtorcV0cy1SvNwQeOwQYoMD
kJWWjNa2VsG5TzOPqtRSe1FhbHIaKq0Ja8nHxTXENTKhHeX452vjCnT0z6C4
ph+WzuH469oTeGredvznh1vw/Fp3zNuXgPUB57ErpRlxl6dRTPe3g8zsK7TV
IboOU/SfSj8Aje4qtJp+Oj/GMGGc2scUQWasRWpMkn9nw8hutF4Tv0iKaZbm
sljnyH0yr+/r6xP+Ees7pdpO3N+Z+g63q9s0t3++kzFxpvWoTHWppjwpa0vY
P2JOlY+dOTT2//j4pZgGUw5W0hvebgyZu0i1+bj2vILumZxzSAge1QDO7jCi
msLRwBOwO+QAu8OOCM6PRflANRqm29Cs6Eb1ZD0a5PRe1YlWdTfqplpEDoCm
iXY0jLaiqKMER4KO4Yt1C/HaZ29RH7sMFlstqM+1oL56LdbZW2C9DdlgNlaw
tCZYWQn9iTXZZjZkozFsaZyxI3vLfoPFHNA6+p6jLY1L5AfYWtnAivwZS7Lj
LNbbwNzCGmbrrLFqvS1WWdphFfk4K8nH+ZL8m3fmf4X7n30Zv37kj/i3R17G
Pzz9CX774Vo8utAezy3big+t9mH59mMw23Uc63YdhcVGss3ot2t4mwRHx020
D2uYr11PPuJaLF+1Fm/8+X38+28fwj/8yy/xTz+7l/Br/MM//Rv+6Z//Db+6
5zd49NHH8fmnH2PN8m/IF7LESZddKM2KR0fteQz0tkFnojnme8j+vqSHluI1
2c5gP5nzBHMcJOt1OO6U/XjO8cd6HdYxS/UmOWcPf1+K+5TyBpjmev/v0Cfd
Xe4ud5f/fcuPgU+dO3fIr1LdKZ5jYt6U86ZwvDhrOwXvxhwB+TWWNJ4sXLgQ
77//vtCavvzyy9RvP4r7779fxNj//ve/F+D3EpjjY72oBF7Hr8z/sZaUOVFT
flTiSyX+VOJZJS0qg/+WtKjMNT7xxBN47rnnBAfJnCPnH+C4dtYZMm8pccKs
tx035vyUYllMc7x8F586N37x+yxSvD/nW2Lel68j86mrVq0SelMptyzzw8yV
Mpf6yCOPiPNi35PvAeep5VzgXFtR8jWZK+X7xVw35wLgeUTmvjm+n3MGSOD4
jfCwMESFRyAhIhpJcfFIiU9EclyiUQ8Xg9goRjSiYmMQERWBsMhwBIeHISAk
CCER4QiNikR4TJTQZEjr/UXsRzDC6Ly4thXrXSNDQhERGIyowBBEB4YiNigM
8UHhiPELQqJ3IHI8/dB95iwuHziK/r0HcW2HE8bXOaD5xT+h5vHnUfKbB5D3
i3tR+NgjKHr2aRS+/hziPnsT52yWoeTEDpQFHkdq4BnEBJ1FcKAvgoIC4O8X
ggC/cIQFxiMyMBGRfnGI8IxCkCsdo2sgAtwD4Ofpgy8+m4f33n0H73/wPk6d
doN/QICIX+H7Eh4WirDgQIQGBiAkwA8+3l7w8w9AYHAEfOk8Nu52IR91k4jZ
f/HT1Vi4+SRWOAdgyf5wfHMgCksOx2PJ0SQsdInEAucILHAKwaI9fjBz9seq
PV5YZH8Yv/njOzjiG4OUklrUdV27G+//Y0CNEQ10bep0cKtQwa1MAa+Ls4JP
PdeiRFzFNdgdDcYr81ZjrcMe7Nh/AgeOn4WnXwACAg3PQGhoCCFYtCUJIWGM
MISE0vMTGoHQkEiE3YRwgYhgRhgiaRuR/LwF+COY/LTwYPo7LBJBtA9/P39R
28/dw4PapR+1XX/aN7XrAF8Eh1C7DQtGeHgwQqgN+3n5wOesN3zdfMWzEOIa
A+8DoTi62QMfPPsNPnp+FTYtcMXBNWFwWRkLl+VxcFmSjANLU3B02TmcWpYB
l6/isH9RNA4uicHRtTH4+jVHLHjJEsvfdUCSXz4GuoYg53pU7Pbr9KIuupQD
UPBROr2hvBu7/7NAV10ftpofuolPLfUfRjlzj/5KVPvqUcNcKuHHoE29E/rU
hrhp5Pt2ivypaz7YCuuFu+BkeQTnInNQlluFisJqlJdcFPVzy8vLUFl1EXVN
NahvrhVoaDXMB7L2iePjGdJ7HuPY72GfnucL2ReWakOwTyzl4pNgGn9xKxvB
NM/Z37I9bvf53Fh/KX8aj8F8zKw75bGI+1zW+XBeGm7TPAfKsRqsWWUdK8dx
cH5C/pz74KOnz+Kl+WvxwVonrD8aDufwIkTWzYi81SF1CgTUyqk/U8CnUiHm
QfzofTD1hyE1MpE/1SmoANb0u49XOKCoqv4mPlXPsdkahQCuc38GfSa35Nq2
NoTGJ+DAaVcsWGdDsMf6nS6w338advtOw97Zld57wtHFGw4uvvTeH9ZOPgRv
2O7zxcbDwbDc6wmL3W6w2HUGFk6nsWEvYd8ZWBKsDrjC2sVNwMrlLKwPeBK8
YXPAlxCA9Xt9sXaXN1Zv9cRKxt4ArD4YAovjkYQorDkQguU0zqzaG0RjTTDM
94XA0iUU1vuCYUPjk81eP9jsdsf8ZXb4fJkNLByccW1chgm5GtNcV0vFXIeh
BpdKa4BaS362Rn2DT1FpxdyfBI1aB63GBFpJh6Q2yZegNIFC1M3TSHXatUId
LHx8Q15CLRQztG+ZGjrmylSGtJmKMQ2GuyfQWNqOs3RtV81fj0j3JBQnVOFC
XDvKIq6gLHoAF6MHUUG4GDuMhrQpNGXMojlzFnXnJnBycyyc1vti04qT8DmY
gObyHoz1T95cK0eQynpx/OLY9UpjP2aITOZ5DZnKwKcqNcZYeK0GU7JptHU1
YeM2O6xdvxp2jtYYnxmlzxXXc59w3g61UOSpjDlR6Pecz0NNzyjHyks5Fnif
+lvzqaJtirzYKgP0Rp0qa1aVBLpO6B6BvqUPuso2TCWlo2OvC2qsrFFAtmMY
2ewhD9+P8MfuR8IfH0P10sXo27sLsuAAaFPiMZCaiI7kOJTFRKA0OQG9TY1Q
M98iYvyN9KVGe7MumY9H8Juz4lVD65h/HZVr0Dkkg1diHRxOpeNje1+8tOoE
Hll6FH9YfxavbQnER4disSuzFj4NV1A6o0ATbfgyXYkxuhEyzECBCTrzcTrX
Mdr2sAGKUUA2yQWVCCrDec9NRHGHFqkGFb+a8pJSPylxq+xDcY4t7rO4/+J+
i/km9jtM86BK/BVvU4opMO0z/5Yv8n+73C5egBeJX+W4gcHBQVEjgY+Z+VT2
SZlj5THmVvF6t4rnu+0xwDgtouU8t1zHTyvqh9EVICjpLisFn3rI/wT1cw6w
P7IJSTUZqJ1oRpuqG926S4JDbVK0o1HeJtCs6ESbsgedyl500OvFK9U4GX4G
CywX460Fb2OP6164RXnBneAR4QXfcPIPIoIEgsNvIDTMgLDQIIQTIgQCryMy
mEHr6J6G02toENlVQSGEMLrHEcKWCyEEhUYiICwKfuHR8CW/ypNsusMevtjs
cgyLzSzx7qLVeP6zFfg/byzHv/xpFX7+njn+/aP1+MPXm7DUyR02J4KxyzsW
XnHZ8I0+B7/IVPhHJiE4KpGOMx5BIbFk34XjwKGT+GLhMvzu/sfx//zjzwk/
w//7jz8lv/ifCVzDmWuK/DN+95t78dSjD+Lj996CtflS5CTHoLOuHMNXOkWO
cClHr6RBNs0bJLURbhvsL/MYzXGO7GtKcZNmZmbXNarMHUiaVKlNc3uQarPx
69y53rvL3eXucnf5e5cfA59quk1epGNhH4d9Ma4VwflGWTvJseHcb7Jmkrk8
5lGZ5+Pcpxyv/+CDD+LXv/41fvnLXwr84he/EPzfPffccx28jsG8J4M/57+Z
D2Vu1FRvKoH/lsB/M3/KOlYJrFdlLpU5Wd7Hs88+K/hInjvj3AOsyeR8opzn
Rao5xbaO5Fdy/87vTbnUv2XDSPN2d4pP5RypbG/xteVj5xh+nitlzQ5zqnwe
zD0zj/rUU08JzpX5Ux7DWMPD45oUe8H5ATj+gjU//MrnzrWqpHpV7ItKOfP5
vnLcZHpaGrIyMlCcX4iywmKUlZzHBUJxYREKCwpRkF8gkF9YgJy8HGTlZCMj
JwtpWRnILshFbhF9dr4YBedLkEPfycjNQXpWJjLJnszOzkZebi7yCXnZOcjN
yEZBRo5AUWYuigkFqedQnJyOmqQ0jJJfLSc7RBkUCrWPP7T7j6H7g3loeuXP
KH/oceT+2z3I/Y/7kPvg75Hz5ENIeu9FnLddgU7vw+hLCkR1ajiK06KQmZ6I
9PRkJKecQ3JyJrLSCpCbXoy8lCLkJeQjIyYD6dHpSItNEzHV3yxfik8+/wzz
Fy4QcTWpaek4R9eE8wLlZGciO/McsjPoOqWnIjUpEWnp9Dkde1JaJg6e8oD1
Nhd8uNQGb39ji3WHg+DglQIbzyxYe+XA2q8ANn5FsHDPNsT/n0nFupPxsD8V
A5tjoVi50xW/f/EDHGY+tagGNZ39d/nUHwn42ngQ3Kt1cC1nPlVuwqcqEF8x
AMcTYXhzwVrYOx3HEdcAePpHID4phdqfof1kZ2chNzdbxP9JyMkj5ObTewa1
zRxGIfLo1RT52fmEPOTn5NArPU/paQL8voieydwseh5pH+y75fC28/LE9rPp
GU0/R+01O4PWG/afmZGO5PgkJEQnIDEqCdkJBUiPyEWsN9nrh6Kx4E1LfPWW
PVzWBMPDMR1n7XPhblsAd6tieFifh5/tBQTZlsPTMh/u67PhaZ0D783ZMPvL
Lix72xHmH29FWkAhBrqGIZ9U3sSnaliHJXgI3W341CM3+FT3VpQGDKM8cAoV
AUpU+/0P41PpvGpjJpHj1Y4tX53Cqnc3Yu2nG+G4YhfCPWORHpOLjHjOT5JO
fXM6MjLOUZ+bSf1rvkDRhUKcv1giYkk5Xp7nCTnOjmsOst6TwXqopqYmkcOP
uVWeQ2RelTVUPP5J9Q6leDxJjzIXUt1p/i6PlabxG7fyzefmGJCW2+Uj53W8
XT5+9tvZH+OxmuNMeR6X9V1iDKF2nWds27ye66RwH+1PY8Ubi63x0Yb9sDwW
iX2RxYJPjWrmPo9j/WfgXSkjyOFbqYA/9YMh9UrqE2dxIrEOTkF5sD4Sho9W
2H+LTwXr/kT9dEOstSmfyhWaKhoa4RMSiu0uh/C5uQ0WbNgE2wNnsOOUP7af
CsS2k8H0Phw7T0Vh16lY7D6dgK3HogW2nYwhHz8JG0+Ew+FICOxpzHA8HoiN
J4MENp0mnDG+ng4mhGKLWyS2usVg29l47HBPwo6zKYQ07HA7h20EW9cUWBPs
PdMFLE8lYe3hGFidTIQdvXc4nYwtrqnYfiYZ207FY+uJaGx0CcBHX9vgrwvX
Y6XlDhGXPSpTY1KpIagxqya/2sipKrVSPPqNtqJSagm662BOVau+AY1aiidW
idyhGq0hlv0GFFDrFIZX4zoe+Ax8KrUztQbyKQVUs6obfOo0oBjRUD8zjvrz
bXA/4Ic1X1gizDUOudFlKIhsQGFwJ4rCelASfgnnIy7jQnQfalPH0HBuEg0Z
U6hOH8GRjXRv1nnAYekheB+OQ3NlN8auTd6shdUa+zAt24RKI5OuvsGnqmSY
UcogUzEPqrqJT23taIDtJkusNF8KS1sLjE4PQ2XKp+o4LyhHN9/gVG/wqTM3
8anM4+r/q3yqzsipclG1SWrJV+icuoaA5ivQXqhBv4cX2vY44eLaNYj849MI
e/RBhD1wH2Ie+T2K33kTHetWY/LIAWgD/aDKOoeJ3EzUx0WjKiEeV2proCYf
QWOiYdbdpEemf/iYBJdq4FO1xjyr0/Smf0aFmJJL2Bd8Hkv2RuNdW288vOQQ
Hll1DE9sOINXtvphfWQhDpe0IGNkClUqLTp1rFHVCzZVQf+qRKW1CboEzKmO
kBFNmBmnncgMulyl6ub7d4f4VO7PuB/kvpP7rNvlAZO4I4775xyTYu6H7G2e
G2OOUvotL9wHcv/Kfpfkd0iLpIO9k3zqrXhU0/OT+ns+HuZ+WVPD8Xxc05b7
ZR5rJM2i6fL38KmivpnOUHfPwKeqBJc6beRTjwScgt3hTXA8thUpNdQGJ5vR
ru4GjWbo1F9Cs7IdDfIW1Mta0KrsRqf6Enp0V9BNr+VXqnEq0g3f2C3F+yv+
itPhrojNi0VcfiLicxOQnJeKjHyym/LJpjJBbh4jUyCP2n3+HBSQ31NAtlc+
jUm5mWRbsX2XmY2cLPJv8vIJZJPlFZJ9V4zM/BLaRwlSC4qQlJOP4IQUnPIL
hd1uF3xjsx3vr9mIn76/Hv/yjjl++q457vlwPR5b4Ijlzr5wOBsLl7AsxJU0
IbmkHqkltUgvrkRG4UVk5ZUTypCeWQgv3xAsX2mBhx5+Cv/wTz/HP/zjv+If
/+lf8S///FP8678wfoKf/eQnuO/Xv8Jj5DP99e03YG22HHlp8ehsrMJQXw/d
T/VN+VN5mcunSjlQ2X/mNs26HM4bx3lUueY056nj3H8878ncAX93bkwMt3vJ
5rjLp95d7i53lzu1/NB8qmm+HCneX5orZXuB5yfZF+M6SVzHydzcXOQ9Zb6S
OVSOL2dtKXOYzJ8ynynlOJXAf5tCitk3/ZzXMSfK2lNJf2rKlUqaVVM+lddL
kL7P2+JYf9ancvw7a2Y5fp45SdbWsh3Ac2uSNkfSV8zNGWOar+h2OYskG0ey
c77PwmML+8Q858f6UuZJmUvlMYvHJp7bZluM4yk4RyLnQOVxi2OJmBeVND38
yvODzMuy/o11PTzm8fc5RyqPfRynweulvOH8XdYFCf+U/NfCrByyF3JRmJMn
XnOzssmGyEMh+bjFZFOVV1xEZXUVqmqrUcu+fEsj2rq70HGpF91XLqOHfPaO
nm60tLehqbUFTc3NaG5pQXtHB7q6OtHN4Jy1nV2EblyS0NaJy23tGGhthbyp
FrqyEuiL8gGybZCUhNHdezBga4+eRV+h9IHHUPCb3yHvP+5D3u9+h6I3Xkbj
6iW4esQJ4yGe6C9MR091MTpbqtHWxjXHWkS9ns42OkZCT8sl9Db1ki3RibaG
NjQ3tqCsugLmm6yx0HwZlm5Yg4rqGvEbSf/V3dmOro42Qiu62lvps2Z00LPR
QedR19wKv4h47Drigflmm/HJ6q3YG5oD18wGnMhowxFGZhehB4fS23EotRVH
UlpwMqUBbqk1OBlXij3eSXjug69wJiRZ1BSp7bp6l0/9kYCvi1uVHq5VOrhX
auBVoYJfhRzBVdNIrJtERGkv7I8F453FljjkHoyIpGxkFFxAPbWL9vYb+sGe
ni7Ba0noEuglXBLo6ZLQexN6r6MDvdQG2+mZam9pRje1TfZ1erq6afsG9JKv
1sPr6Hns6e1GWwc9e+18HG0CndSOW5pa0NxAz2VdC7rre9ByoROVmc3IDC0V
fOj6z5zgtzsLSSfrkXSiHUnHO5F8uAcphy/hHCHz8GWkHexA6qF2pB8lnG7G
poXHsf5TJ1h/sRfJfnm41j4E+ZjCoPPicUXPdaw1Itb1dnzqFvMjWGrkU9Pc
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
/lXUr6uZSVIKnlVjjP2XrskNPvXmHLN6vcrIp6pv5lNZV80gmwdT9NVpOpkp
Opcp1qvSMbTVQ1FRjMmMeLQ4bULpsoVIf/MlJDz5MM79x29R8vDjqH3uZXS8
9xGmDxzFjIcveo6cRNvR4+gKDcO14hIoya7Ts5aNcyGa6DLZdlbw2KRlzoS5
XR3Ze4BMxTH/wDihe0aPgu4xBJV24mBqNT51DsILNqfw4Mr9+N1yZzxtcxpv
7QmEeUAudiRXUXvuRwUde7+GOVWW3PIdUAsGjrZK+5g05FFVTxtytmqMsRFK
E3yPRZwT9Tdsj0uxafw32+SmuUdN+Scpbp71fFzDl+dVWQfB9jfPgXG/yb//
Ibgl0xwD36UHkXLEct/O/T6PBRzPxvNmUk2hWx2vZDvP/ew638zbZg0v2SMy
1r9r1YJP5XvKim3GhIbsq5x4nIl0w7GQEzgR6YrC7vNomGhGp6oH7epeNDKX
OtmAuvF6tM/2oFtxCT3qK2iZ7MDZRE8cDT1Ovz0Oz3hvNPU3YUgxjFHNJMY0
E5ik7c9QW5mdA4URSoJaw36DCVRk+7MvQP2TgFpl5AoJMr7fnAuCweMb5wLR
QM59AYOuxzTnt5Er0dE/hNKWXsScb8IytzS8vcUXL1qfxrMWR/Hkyr2YvysQ
q48lYFtgITK7ZKib0KBDrsMlsg17JrQYJP9llPyYcbkCja09OHXGEx9//Bke
e+wJPPnoI3jluWexdMEC2Fqsw6G9exAa4Ivq8gvobmvG8LU+zE6TDTkzCTnZ
hAr57HfWo+b13NZ5vGe/0c3NTWh0uB3wvCbz7exb89/z588XcaFsa3CbkcZp
aXyfu5+7fOrd5e5yd7kTyw/Np0pjvqmmX+JZ2Q7gfpI1ejyGsq/GOTqlmkfM
p3KsvlQfSuI2b8WTzsV38alz86Oa1qSSfs/fMeVw+TumXOu///u/44EHHhCx
8cz/sqaWeUTmGVlXI+WMl+bObmUTmOZbl/Sp/518Kmt/mP/kOT6+1qwvnTDh
9CQdj8SB82+kfN8MPiee7+ZYIrbbWNvDHC3zqxwjyTHH7B9zG+MYJJ5v5thQ
jt/hnPMcy1OQn4+8jCwkxcYjOjwCoeRDu59xg5enF/x8/RASHIqMrEwUFBWh
pPQ8SsvLcP5iuQH0vqTsArLz83AuJwuptL80+m5OIcemnkdtQ73QrHZx7tq+
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
Wc6xN4O1Uz37zhQzmJVNYmp2DENj3WjtYmNQaw0a2qrQNdKG0dk+zKsmINfN
s1Y2j6mlUXRPdEDcUYXQpEB4hrjBK9QN3hFeCMkMRkJ5PLLqs5AjzkZGTQZi
CqJxK9IT7qGu8I32Rtr9ZPSOdWJ6cZL1CTKz9rA1n7ocJ24xuISPY5PXt0yx
Ws91m8y1DxbY9mmA11cbZu1fusTGhaoBOGZJcVBUgd+cCMfP9t7Bj3fcwk93
3cIfTobjlKgIbmm1iKnoQC+z32blKijZ765RLrFhihlUevYMaufYBebY8ydj
z7ac1yvVsL5jiWGe3fY4u9YoezYnlFrMzM7yXHziRWlNv691TLYthy9wqsK8
gDC/aR0/KrQZahPUNkj3h/gCio2iuFaaN6DrEciOIO6A/Hua2yXbhfQGreOq
rfWEbXXrVjnW1WV1+b+9/HflU63jSGiboJ9G/R7xkKTzQ3NSFNdvrdFG/SHZ
vULNCtpPPhb5WoK/JdTJEOalaC3k+xHIHyMIx/OaE+w8NF9FHCPps1B+AHG3
FJuzbds2riNAOqpUl4o4VCFO1ZpPpdidVT71r1j+Cj7VeiEtsEcgfo9q1+o4
t6ojftVIMHDelYPzrXq+nx9LGnU6go6v1Tpm3WsUzHZRYkmtxCLDlHwRY3ML
GJ2Zx+j0LKbZGD4/MglZ/xjknYOQ55RhKTgRi04+mD9yCV0vroHkR89B/C8/
hvjbP4D0179Ey+9fQNum99FhtxWdzqfQHuyCIv9rSPe+gkiX83A8ug8fvvoS
1rz0Ata99SazE8ORlU15h/koLChgtm4hcjLTkZaciIQ45msG+CHIUm8rICwC
567exO4TDnhnmz3W7DqL63ElCCjshPvdTrjmdsKzcBC+FVMQNSwiksenLiGl
WYYM6QySaocRmFOPNzfbwS8+F3mVUtR3DTP7SMt5U6qhTNqYRh3Vdmd2tYY9
nxqqG8/8IgY5M8om5kk/tQJuoUnYcf4mtp71wrXoolU+9WviU33FJg767kIE
PrVBjjTJAmJLB3DGKx7v7T6L6MxC1JK+39j05/hU2NSj+tyj9bhnbllsz6Lf
y+NUrYJZre13m7euqB9ty6fCfIBsZgkDHWOoLmjC1vfssHfdaaT4FaMmYwA1
qcOoTh5FRTxDLDsmfhJ1iQ85l1oZP4yqxCFUJPfg4l53HN10CUe2XEB8SDqG
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
yyXHeeyqXpaK+RT7xMs6Vor301Li7122YNnUaEx4fT4ipyYjP7oURaZzOJ5x
DSVpt1FilPEr04+GbEGWHxXyuiy5U9COUkGZ8S5qMu6jPrsNDbn3UJZ6FTXb
WtC0uxU1Bc1Y9mE0lnywAYZlWdhhKMSdy/fhtYasOXu0r7Tn/lI1Pt3KRvIq
5dug3RiiVeuRdzXIMUoLV1et1RFUWmShQApc+8itSv+/exu41gxfXRPs+4/h
2soonApbhBPvTUDSjx7B+u/+EBv+7ceI/sUjODhrKm6X7IPzokye96/B5ff2
yDcR1I1U9iJ9ABWXSK7XA63Wl0fpFXiorwFNj0BpPQqueAJotLhx7Fonluc3
4tVF2fjPyXH42fgo/PuI1fjFB1H49dRYvDg/BQsLqrDj0m2Ud9pxIWhGPmDv
huQP6zEi/9XxFTrvFFp3Ss+T5loUc6KpzbJ06VL1SG5Vjwn8uO0Taxz08yH+
FF9C56T1sZzjOMdrxqowr4FjOcd3fg5u/X1Bj9zfvMf1Hterxtzvu1E5bUEd
+RCfgXlu1i5qCriUJj2UBrN4Ap5udNjbcZe1qTw27CnahxmLwzFyymgcrCrE
+bsXcbXrqqAZl1wXcT5wFiftDWiyNShOtRlXcDtwC83WKyg5U4KI9bPxu3ef
x9OvPonnhjyL6fOmyvgo42L4NITNnCp2VJjYXjMxJ1yzxSJkDJwbBJ/P0TFT
w+ygrUbMFtsvYrbYRPPD5P1J8t4ERMyZhGWLIzBvnth/c+YgTPYbN2WmjPWL
8eGsFRg7eyWGTF6GR96ZgYdemYL/8+x4/H8PD8P//sk7+N8/fht//eOh+MoT
H+C7L4bhidHL8dK09Rg6OwrjF0TjozkrMTl8CabK9UyfPlWuawpmh32EqR+N
w+tDhuBb3/qW8pf1Ws6MR6JeHuOUGKNKfVXaDoxTpS4610K5Rso+quuc9tdP
De1zfJ9+N9cI6Idz3ZTzelxcnKox/fTTTyuOlc9pb1BLgP1L5wr0dY/+vO3H
nXNwG9wGt/93ts+bT+2/VjnQHPv7uMb+bXD7pByZ0NjWT2o7lE8luE5Fn4v+
Gddpmf/CfH+Oze+++67Se2GeAuNSQ/lUxqeST33llVfUOM1xnGupg3zqwJum
ZxboQaC/lfNAaYmg7mkQA/1fA/pwon1Be8mv1dTx6L5CQMv/cml5QFo9jCBg
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
PProo3jiiSfw0ksvqdwW2gCbN29W65fMUeFvzfpU5Pb1dQidYx/Ip2afZAwU
53XO6Vx3Zb4oc2Joq7z66qsqT4Wxqmxf14zQ+/JA2hyDfOrgNrgNbty+6Hyq
rlXyh7QRuv74SXyqrr3++/SIQo/nI8dWjsX0ueiLcTymX0Y/i/7fN7/5TXzp
S1/CX/zFXzzAp/7DP/yDWlej30dfjLps5GLJzw7yqb0bbRJNz4z6W//FfKrP
r4H5X6rWQqAHblXr1wkH4028drGxLWI5WcV+sqroBS2CwSrtCPzix4nvBJsN
uCsW+PU78Necg+tINc5sMOD4rBVIef19LP/ZU4h+7hWkDB+NwsVL4Gyqxd26
ErRUF+NCpaapX1ZerqGsDOWlJaiqKIO5qlz6j7wuK1UxWOWVlThWUorNyWmY
GxmNd6cvw3szViPxyClsP9WO1Np2JFfdQ7K5HcZaC1IarEivtyGr3optDV3Y
XtuKnLIriNlZqeoZJeYV4rD5HJqa76HbzvzIQLA8svhBwfgb6iQwnpf+k93p
xj2LA5dutiNleyEWbzZhaNhKDJ05yKf+OfjUGLMHsVVuJFbZFT+y86QFOeXX
MX1tGp58cwIWrUtAYuZ2bNtzCCVljNUoVfEaREVFOSorK4KoREUPqhQqK8z9
UCV9ToNZoVJQATPrkJVXqtfcpw9UW8F2qypRXiV+f9UJhTKzXEPNcZRWHMOJ
8iM4UXZUxp0y1NZUorbajFoZF8uKpU8XSfsltagpaUBNUQNqjzXJYxOqBWai
WFDSCPMJGYNLG1F1vA6rlq3HnJkLMW1yOCJXrcb+A7vl3ilCbV0Zjp8olOs5
hiozaxwVo/TEMZQeL5ZzyfUUV0j7p7E3tQgfvhKBtx+djIwlx1CccAVVyW0w
J1lQm+zU+NQEDf9T+NT6nA4ciT+PRSNiMPm1xVj84QbErEjFjsy92JmzBxmG
bCyYuwhD3xmK55//LR559Bf4+3/6e/zTt7+Kb3zna/j2d7+J737vu3jyySfV
eiFjTslvMpef3CZBP4jvMe6DtgV5T84v5DyZd0eOlTGpTz31FB5//HE8++yz
yq8h30reVJ+PyK8yB486rLNnz1bH8v9shxwrX7N9Hkdul+0yhlX3w1jDgvOb
HldKP4raBPSbONZyPmesC/lTxqaSKyCvSn6VfCvnbProjFUl1Pgs4/KJkhM4
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
SIgF+hS8C/GZGZTok/vZYZGnDpXPydc+Z7e4yhY4bV0K1LaE0lyW+9rajorS
ImSmJWPqxLEYPfIdLFkQAZP0oXSjERkmE3LS05Cfk4nstBRkphiQYUxCSmIs
EjZvRFzUBsW1bs9KQ6YpCRmGBKQlxiHbaEBWihFZqUZkCjJSTUiXcSUtNU1D
WrogAylpmUgVmNKyYFTIkefynuyfkZIg55c2TQZ1HWkmOcaUI8gVbEOqKV9s
ru0wpebLMfkwpsux6RmCdEEaTJlJ0l4Mko1RSEreCEPyFpgM8XL9aXJ9Ocgz
7EVa1E6MeCYcr/9sKhaNSEX+urMoT7WiLseLxmw/mlKok+qWMcGFGhm3zAYX
KsmlJnWj3GBFucmKHRvOImNlDYxLTiBnczW2xVYgN7YEKZsOYNw7M/Hh8JmI
XCLXEJuK48dK0dTQJPfEeTQ3X8JVweXmi5o2bEszrlOXVvrllatXcOniZVw4
fxFnzpxDR1sHHHYHvB4tb5q8qc6nWrossHfLGOIK8qm/bx4KaHao3U4/wq64
WNrxFy9egtlci6KiE4iLS5D76pLK/WZ/JJ/qVJVFnYqX1Pk6mSSDdUPRh0/1
OqkbHdByvgGV2+AI5tr3yHiDcgPs/y55dKv3u6S9uzYPLt+xIq+wFsti8hG2
0ogPFsbgg6VGpBQ24UD9LTS2unFLTLpOOY/TTX0EX7Bfy5ueNo1T9cpjQGec
bCrDwqN0OTXeVI9TDUV3yPV51ISp81BBfFbTcDBOleM/tVPoL9B/oKYqY2M4
5pFTDeVRNWgcqn6FfO502qRvWOCSR5fTrnRk+/KpLvm/7QE+lX2Jcc5et/ZJ
e7oJcx9ddty+dxvnLp9DXVM9jp0oQkV1Je603YWdtkNAM2hC/ZtQDrRX6/WP
83X61ysK5Tz1HE5+Z5xfOIaTe+b4z7lHXz/j+M596Jf9+esdDcSn9h2v/xA+
lbrIFnEI2uX3OHWtFYerGhEZn4oZK6IwadFaTF68HgkFh7GztB418v+bHh+k
d38Cn+rvNz/068f94bYrPpXrbyrhKFgD0OfV9FWVFoTTJfOVG1anGzYx/hzS
b1TNVvIZg77s4Da4DW6fYvs0+f56bb3+NaZ07lPPpQuNXWHcBucPzh30Xxj7
yTp79E0YZ0ENNPo5jE1hTgR9C/od9NEI/XyhcyDP90maBB/HB4eumeq1/3id
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
6l3cnsUvNSLXLuDzy/Pqg99L78zOulDuU+VAlve8/tk52dicvRlHjx1FeWW5
GvNZ4yV1Dq37xdBb8xSx6PW7isXXmqP7caBd5Tzqat176V0fTOH+7r4GX4lP
jRo+wGy1VI40+Q3tcn3qbF5Utzpxqd6GKulTVLf5UWMPo17qO6tHxZfjUy2+
MF8Kxt+EgoY+1fB2Dt/VhAXC5rxJKDGWTZRESZSvXx5EPiprfD+LNZ6fcQsc
Z7CNJU/JtpXtLOPnqSehdxp5yh/96Ef47ne/i3/+53/Gv/3bv+GXv/yl4jCp
S+Hcp5630233F+lPre1PV+1TfO4szhNyjERNKsc2PA/Uv/AYyYN+5zvfwT/+
4z/ib//2bxV3Sv0peVNyqAQ/a1jj/vme3Crj/bU+lVwyx2aMhyTn/HX8Ch50
SfCpj2AJ6oBkwm/oVYmw4atKnzIf9TnyuVmei73FJUjO3o73JszAG6OmI+3z
Cuy63IL8yw7suOTAzotu7L7ow84KeV9hQ35FG3aXt2J3RT1yTl/Hqp2n8MQ7
/bFoyx7sOJPgUx8lJPhUS2GdY+pUOIaKhiLwebxYv3EDFi9dijnz5iI9KwNX
aq6jzeUwM+JGFE/hlefFE5C2yedR+hTqoYwkS0DN+TpM+ugT9HpxDLJm7MOB
FRdwJrMJpWvtqNrgx6VNUZxdDVSYXGZJWvShgvH9FakBAylBA6vQAZNPVTA1
qwaf6hU4ULjGgbJsOwrSr2BKzyUY/EYS5o1ahR0Z+9Fc12bhU3kDGCMqZi0O
mP6DBvxdanCssPr96Hh1apZqamrUnCLbHeo52dZSs8q+B2NBqNUkz8p5Vu2J
ynE6uVBqSck/MnaE/CXzd7C9Jgeq1+H2qFMlX0ovAG6PHCf1qeRi2QehXpaa
V8bMc+6WfRNuj7wrtc7MccVj4DHR/5U+sNwGuVnuk/wo+VbOvfIz+VduhxpV
7YfHV/IK1NWyfSUHTI6Vn9nP4D7JA1Mny31Qy8v+jvYBsmqnWLQ+lX0h9h+Y
V3vDxk2Y99lSvDc1E30W5mHp4dvYJPXtprMBbBSsJ7dKL9UyF7LK7FhXLHVG
YSPWnrqNtP3n8frA6Xi++wi8N3Q6rjZ5YPd1xPvH1wvhUKQjv5DJp3I86vGH
4fSF4IlEY7nHdb4eDc99EL+eNw7xvpXOYBQt7hBqW1w4dKoM63N2Y/q8JUia
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
K/vV6919lA5uVa+vzx3XLysuxfEjR7F75y7s271XHQ/rUbZF6mk14xatfKpV
f3o/7c69+NT4dfSY1JpPJH7OLH6f+tjuFW/5AK4qutKldsWn3ksXzXuZ9zbn
uOwBwuBTybF6ed/LcVKzGu9NQT6VvKq7y+OK3I0v4lNZb4Skbgl28KnW38X7
zoiddSp0lesrURIlURLl65QHwafqtkDP7el5OLarHBdwjMIxBrdN/Qa5OsbZ
Mabv5z//Ob797W/jb/7mb2I6T/KU1IP+9re/VevyOHScHb0DOI6g14z2m9Gx
cBp6nKHBZWzHCXqWcZ6UsXbcJvUxfOXYhzoScp06dzDHXhw7cRyl/VI1n0ru
lO/1Msb2/6//9b8UJ/zXf/3XKr7/G9/4htLa8vc9/vjjamxGTQ1z8nKfjBEk
n9qV/+v/dEnwqY9eiSiyMmx00FVcmoVPDUpv3+9VvkC8f+xyH+37/HMsSkvH
K70+xK/ffB9DZi/GpOVrMX7FZoxbtgUTV2zH1FV5mLh0OyYs2YoJi7dg0uJN
mL58KyYvWY/BM5fhO79+EQs35GFX8XmU1zUjwHneBJ/60JHgUy2F/V/WRSan
Q27H4/Jgw8aNWLR4MaYlJWHMxIlIyUzHRhnD5+TnImfndmzL24bsHdnYmrsV
23K2yfg+BznZO7AjOx/7dxzGuhXZeO+ZQXjph72RPnUvClZexZnV7SjOcKEi
M4izmQaXWmHhU4seEopl/yXMS7UqhMpVQRNhAWKoMF9j8f+M+08PoGi1x8Kn
tuNQ+iVM6bkYg9+YivmjliMvYx+a61otfCovvDGCYjYWMgzkFEJm7GxX4zvr
Z82lWnMdG5cxEovLZFtOvz3mhWIfgdwjeVNqTcmJUmdKXwCC3qtcxjaaGlNq
VbUnAN9zvpYxIPQBIGdJLSm3M2fOHNWukZPVGlhui8vIv+p4fPZVeByMU6F+
lW02t819T548WfkQcP9sJ3lc9BZgf0Zvh3pXalT599wOeQUu47GQ4+Wxar9W
Hiu5VB4bc1H95Cc/UceUnJystsX9U+elvVh5jPxM3lb7yXJbI0eNRq/+g/Du
1HT0X7wby482KG3qOlXneg3vbAUX1pQ6sLHMgU0lUi8XNSHz4GW8NWwOXuk9
Dt1HzkJ1ixsOC5+qHn3GW4dMKD9LmFrVMO40NqPs7AXsP3xMnrH92LirAOt2
HVZgjuc1+QXI2kkciIHL+J1GxzoFyNx5EKvzjFe9bI3a3hFs2C3YcxTrBRl5
h7Fy634sXpuPcZ+kot+kT/Bq71F4rc9ojJqTLN/tlu0cku0clu3L3wvW5O7H
mu0HsDa3AJt2fo7c/UewU7BjzyGs3ZSLS5drcOtOM1xu/11SwKhGLJWW4eGo
NXB3I2R4+SltqqFPVZJVDVOyam3iycMFovTUYO48ci4O+IMGlxpm3nd59qIR
D4JeDwIeL6LyjNrq7Zj80Tz0enEUPh66GjtXlOPY+ls4vakJRZuaUbyhEeVb
2xTKtrTi9IYGnNnagJObb+PQ2mokj8/D9I/SMXVgCj6duB71l9sQaJNjdcNI
B29SEhE+v/I7gmGv9AvccmwugRM+gXoflOVBqR/YNwmxvxhFc0sbzknf+s13
/oDde/Jw6co5tNtblD6VOdxDYZ+xvbD8pojUJfTFNr1xo1EduR5VOYyMPEbx
RHcHX0UPVh4jNZ0+rw83am7i0MHD2Lt7j9IjOpztap9RzbHw5qYoNGjyqeRX
Q6Z2VflD++U6+OCXuo7uq4GoU1azy/HZZBvMiSbXw+8yDLiD5nYChtY4YPJI
jGe+Y3Kpt9lPUj4OQQOhoMGjhi0WrnLT+WUDfjmeQDCieGLFMWrrSK2hjd04
odj8ugL7Z2HNL+kb9cE2v5rf7mrOTGtUdf4JamjoM835JtarHMPRv4Sx19Qg
U2dK7pQ61EhMvx1V/hp+n/Rv5ZoozXgwpDhS5p4K+oMK8XMTiHv+rN/RH+N2
3S1cuXgZxz4/ioP7DqKosEiN/zgG60p/qn+nNU9VV2PhrrjOe61jjZu0bjN+
nvF+ObHi9UMPptwd49/Z8foenisw+FSfnG/GJXjCBtxhalUBp9QDDrl2djn/
drnZnXL81vgD/d7X5TF10RHtlMewM8KhgPJKjcq9Rb9d/Qwo/bYlj1kg0MFn
B7l+1PrbEyVREiVRvl55EHyqrpus88d6DpP6DPb7qSGhrxnBcQPj2l544QXl
Rfqv//qvioMkH0muknrPb37zm8qrlDF+HJNQP0LNB+eZuU3qWTTYJhLUsfJV
60I0yF1yLpLQGlStQ+G4i3oQ/m4eI8dnevzGGENqSulFQD6Vx0fOlxwqeV/t
j6o1tdTY8rj/4z/+Q/0Nedjf/OY3ePbZZ5UvHMdfjCvk/smlUpfDsWTCPzVR
uio8250kMCEdoxYw8lQxMbnfh6jAZWvHbrmHP1n4KZ555TX88Inf4bl3euKV
XoPxfK9heK7XCLzQewxe6j0Rz3cfheffI0bi991G4J2Bk/D2wAl4qedQ/M33
fo5P123HvjJ5jhrtMkRI8KmPAhJ8akeJsj7i2FfxGXJYwSicDhc2btqERUuW
YNKUKfigVw8MGDIAg0cMxrBRwzBk1GAMHTkEw0YOxchRIzBq9CiMGD4KQz8a
iWEDRyNp5FyM7DkZT3zrVfzsX17G8jH52J98FSdSWnFmlQPFKwMoXQlUrDS5
yhSgOB0oekigFyr1qR08asQAj8+KGL9KLWvEyKdl8qnFik9tw6H0CyafOhnz
Ry9DXtaeOD6Vz7qhQokqxZZDRcGSUw2rUVFn/Ux8m3AvDzndpugxJdtBHS/K
+U62z+QLySlSw8m+ALWmjN/nXCzbKcbuk3dln4VtN/VQbNOp2WS7Tk6V7Tr5
SMbjczv8G/Y9fvrTn+L5559XbTO3Sc6VbR77AtST8hjYTuu5V/Kj5DGpSaUP
ET1Z6Xf68ssv46WXXlI8KHWv1NmSJ+W2uC55UR4bj5Mgr8rjYFtLUKvKfJf0
ev2Hf/gH/OIXv1CxOdTEsp/EvhjnYqnZ5Ss/E9Tv0keWnknPPvccnvjdc3h7
cjoGJu/HihNN2HguiKxyN1aXOLC60IEMQVaxXfGpm8ud2KrQhvXHa/DB2E/x
x4FT0Xf8fNyweeEIyJU2dXMRkzc1cml3zqPtl2t29vxlbNm2E7PmfYahYyah
79iZ6DV2NnqMnoXuo2big5GCETPQbUSSYIb6zOVWfDBqFrrJK/HeiJl4a9hM
vDNiNt4dORvvS1vSbcw8dB83Hz3Gf4KeExaq1/dHz8XbI2bh9Y+S8OT7w/H4
a/3wf556G/8h+MUfP8LLA6fI93NkG3PRbfQ82cdcvD9cjmPoNPQYPh39x8/B
iGmfYNT0+Rg+eQ669x+JPQdPoKTyMhpbnfAFowZdZXKd5LbCZn4k5qVXMcX3
REiN61XuyIA/FltuWvUohMyQEw0VhsIcSIw9CfsUIvKcRZR7J0HHTafSRXod
drjtdkTkIrXX2zBhoJzD54dg5qCV2L68GCc21aJoWyOKttbjeNZ1lGbXo0w+
l+U04qR8V5Ir3+XewfEtNfh07EYkDU5B0tBVWJK0Ac3VbQjawkYKJJIdip7j
uQgo/oH5gsJhLx1UTNCdOhjTsVnR1t6Gi5cuokev93Dw8/2ovnkVTq/DmJcJ
eeQcu+ALOOGXV37m/C37HOGIX/Gq1vj/SCQc+2zlCsmd8d50OZymX4Nxn9ra
bNi3dx+yt2Zjx/ZctLQ0y+XwKU5YEeNKT2qaLQSlDvJ6EA14DQ6ceZ/oVRu2
m+dfXsNtcv2a5fs2OYR2eWW+KLuZI9Rn8KqBaExnTI6Iscz1cpi3BXfkiwBj
imIg/xxVNKz2eohlvTcPLWyG60f8BqKmXYGhhzVNAnh/BS0IWTj8SKjT8/qg
e+ua32O9bfVP47iRYwq+Ur/CupXzUpwzo+e02+VWMSW8TpozDSlduKnHZdtO
f1S/odck7xrmAxKb5OhYLwZrvrKoMd9hJf9C3iAcLXZUllTg+OFj6t5gPc+5
POucoPW3WbnPeM/frop13vCrjI2sPGs8h3uvc/5g+dR4LvXuZ7krPpXg7egN
0k8pavinwMyVJtfD5gvA5vHL2MCPFoFTnjXOMxBW75bA1zxOq26VPGlA5SwL
dfouHA4qrjWil8c0ribnSm20RqIkSqIkytcsD4JP7Wr+jp/5t+QtGYPH8QLz
63JMwLEMuUbG+VPDSU9S5mwil6p5yr//+79X31MfyvGIHntQt0J+1gqOuThW
Ijhuon6Dywi+p66DGhFymdR3sF2nJoRtPGPsOC7ib6bHGscvHMs89dRTarz1
/e9/X/GkmjcleHw6nv8v//IvFf/LeH5yw/wbcqgco5GP5fiHuS2oaeH4iudU
5Ti12dS8qNVD52GWBJ/6aBWe1fhcBSqGxSMDHLlvIOMpyHhKvScnL+8vlZXj
8K49WLpgEWZOm4nZcz/FrPlLMHluMibMW47JC1MxfVEmJn26GhMXpmPignRM
EExfnCHvUzBIxpbf/sUzWLRuO/YWnUNVbVOCT31EkOBTO0rUzEVh6FGg+A3G
8508dRp79u3Dhs2bMW/hAsxdOE8w18TH+HTJQixetgjJK5Zg+fJkLF20BJ/N
W4xP5yxF2ifrMH/cMrzyeE88+1g3ZE0+hCOr6nBmtRNF6T6UMP+UhZ/UfGrh
Q0JRGuP3ozi7KoiqlWFBxARiOEvE8allaX6Urpa6PtOOkqx2VGS34lDaeUzp
+RmGvD4Jn4xO/kI+NRjHp+q2Qetr4tuEe3Gt1nbFGgepfUHJYTIGn+0SNU5s
69l2a+91tt3kWNl+M5ZE+6qyDSOHynXJW5LbZNvP2BP2D9iHYPvGv+Pc6YwZ
M1T7zD4Kt8dtU9PK7VBnevjwYdWPKSwsVCBXy3E4+xWcH6YvED0GqJelVpSc
Kv+ex0lulcdCXpXb016v7I/weNjf4jbY5tLbgLEsv/71r/Hiiy/i9ddfV8s0
h8r+BPsm9B8iyAWTzyXv+tvf/Q6/fvp5vDUpBQOW7sGyYw1Yf9aPLKkfMkuc
CnxP/9QNFW5sqXBha4UdW8pakPn5VaVPfan3OHwwchautbhhkwrdreP9o1Z9
qjG+11WCV67XqcJSJK9MR7/Bw/H6O73Qe+wcDJi+FAOSlqH/tKXoN3UJ+k5Z
jN6TFwkWo8+UJfhw6lJ8OC0Z/QR87TNtGXpPTUbvKcnoqbAMvaYuR+9pK9An
aQX6JqWg78xUfDgzTZAu79PQZ0Yqek5fJeuuwFtjF+EPIz7BCwNn4YUBs/D6
yAXoNnm5rJOGfrNWox9fk1ai1wQ5hvEL0Xfipxg0fQmGJy3BkCnyefRMPPHC
O1ibvRsFx0tRXdcCD3MhRay2lfH604iJcGeENTR52qFP1bpUDS0z1AjKdoPy
RVDG9kEVE+9Rvqm+QDt8fnkmo9Ifj0i/0eOE3+1EVC5Qe0M7xg+agXee7Y/R
3edi5bQc5Cw5hfyVZYIS7FxyEntTSrFfsG9VKbYtOo5dKcXISylE9rJjmPjh
Ekzo/ymmDl2CpbPWoflmG4KusJEOPoCY9o+a0bDiOqVPyFzzKq+Tz4zZD8kq
EYNLjBoUJX9Pa2sbzl+4gHe6/RG79+fh4pUqtNqa4As6EQy5pX/hUfpU6lRD
art+5aUa4muUnGrA9D/sgPICiBjaM96PRl6woOLcDA2tkWfMYbPjyOEjyM/L
x+6d+ai+dl3FkDMnfKzjouPnuR2PS+o8N4k3ME94xG+Tz22IhtoNeBsRcdyS
jlmjVIctcrEEIZu8uoy/IY9JDtDUmrL6ZExzm7y2RvhKfs6t8omFFHwGRx/p
8HqIxVCbdG9I04fkU6VDGFVkK+7Bp/r+R/lUXefr2EQr76h5VepFOD/GcRjH
XqxLWYdeungZdbW34HV7YteMCAaoPQ0ZniLUqfK6BI3lXtlWVCdmjxrcaZBc
K70GvL5OfCq5VJ+LuSoDiPBEho05Aa8sq7l8DRVFZcjdnqvqX86Xcfyj4+/v
1XbdSytq/WzlUrvyv4kvXWlO4/3p4r//84y/utKmdt0FjAdbBGqqA6y7LBS2
sneWa+eWe9TlD8IpIMfqM8cLOv2bniL4cuUeHVTWPeGQQryGPRQ05oHC9AFg
fWz1x4iQz3fHkCiJkiiJ8nXLg+BTu6rb2b4yzp7jGG6LOk/G75On/M///E/8
y7/8i9KkUtdJjpI+o4yhpw8peUrqQalbpfZDx/lxzKTHQATHUzrujuMZgnFz
VpAzpf6DYx7qUriMsXlae8rtP/3000oLS8/Wf//3f48dF7WomuflcZFHJTTv
q4+Vx/+tb30LTz75pBoHcbvU0ZBH1nF91NjQQ4h+BWy749vMh10SfOqjU3Tf
hb5CHbk4pE/llzGM04ZoeyuiLU1AS7N00tsMXlUQuNMA17Ua1JZU4PKJMyg8
fALHDx7H/gPHsffQSew/VoyDhZXYX3ge+4gz57H7dBXyjpdh84ETSF6fi1+9
9EcsW78N+06WouJqrYrfS/CpDx8JPjWuxHenpR66c4c5jm7K+P0SDh09ivz9
u5G3Jw+5u3OxY892HPh8Pz4/fggnTh7BiRNHcOTQYRzccwgH8g7heH4hclL2
4MOXx+LdXwzFptmncCKjESVZfpRnBlGRFsHZFJOjFJSvenhcqoKpT61aFca5
lUTEBHBuhYGqFffiU10oybTJb2tDRXZLB5/6h0n4ZFQy8jL2oOU+fGoojk+N
94Tr8nJZPOSsY0jtZU7+VHuZ63gNrW+iR4/OG83cS4xV0b5B5D/ZnpMT5We2
uXwlN8p2jG0/eU2O58mNMtaFfjvkRBnvQo8f6lg5Z8ttsV9AvSfnVfle86Tk
ZKlPZewL41zoY0TQJ5AxreRbydWSvyWXqn1euW9qZMklENTOkovlvqnV4m9h
O8t9sI/DPhLzVtLvlfpT/i7qXukpwPlo+iP98Ic/VPjZz36mONdXX30Vzz33
PH73/Ct4beRi9Ji7FQv21SD9jB1pZ9qRVtiOjBIHMsucWFvuwaYKH7ZUOLC5
woaNJU1ILbiA1wZMxTNSd7w5aAou1bvR5pHzHzA8HVW9YMmrrR+/iFwjj9eL
w0dOYM7chXj9rW548plXMWTGMkxZmYNpKXmYTH+ZFbkYvzwHY5dtw1h5Hbd8
OyYIJq7MwyQBX8cLxi43MGb5ToxdmY/xq3ZjvDyT41P3YEKaIGWvfN6LcQp7
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
fjIflfPn4uqKZNzZuh7+wiOIXiwGqqUhtl0HPHVyHeoRDTWruaYAlcVy3f3M
de6MKHvVsAr4p+7PpXjUUNijcnoFGW8cDMhzFFKcqtdveAUwjD8U6aBIo6G4
03WXIC9igVUbbV1Z//GfXuJ5QvJo1rqc4wbNM+r6n1xlTXUNKisqsXdXAXbv
PICiU2U4f/Yy6m83oa3FDq87AL8vZMSc4O55ulisfZT76fxsRcIdWnDln+r2
IOCR+4N8qjb2VJYV0r92BlB9rVrVvZxPI1jXst615rPoqt3RRefhiudT48dH
1ngNq+es1Sfni/hUqzftn2P89SfzqVGDM/f5vGosyXgSzbFbS+ff71da8ljs
Qxf3pvUY4qcT/PeAlVc1Z1ksqls5x0EZQwWoRfcacyimTlUZaiRKoiRKonzN
8iD8U63LdZ3PdoZ8Ksc31JYyxz15R/Kp//RP/6T0p+RTyVfqGH/NY1rj/slv
cn3mpyL4nrpVcrLkNQl6sXLZN7/5TcVxUmdKLpb8KHlbcqD8O66nvyM3yrh9
7YlqBfdL6GPT3gPcB7lX5qji73nllVcUf0t9LMc31JIw5o/jsdu3b6txkZqn
czpVO81XtiVdncuHXRJ86qNTdM/CbgHj/m0yjvFHPYrPgPTFmZPKe+4SWvL3
48byTOx4syeynngBa3/2e+T89g3ckLGRM3UTokeKgLMXITeljBVkDBRxwReV
/o70/e0yRpIREVo8Lly8fh1jh4zGzrXbUXzgFK6XXEQowac+EkjwqR2FNEbQ
pERj4yfA8O5jjll657mcalzOMbr25AuGmE/ZAz91CRxn8sZlx9tnpBa5VliH
KX0Wos9zE7BxxjEcWXkTRavdKM0IoDwjjMp0oHRZZz61OK0DRWlf/XPRV/hs
3UaJ7LssJapyUJ1bGVWoElSSP7UiLt6ffGpJhgvFmTYUr7HwqT1MPnXkMuRl
7EPLTSufqs46YpyG8jwMxaBj/K1tgXXc9EWF62rfOj0WV155lvFpfJwk17HG
Werxm44tZfw+OUxqS7WPOflUakXJf5JzZXw/3+vl1H/q79n2Ubuk23G23Xwl
b0uOlPOl9BOgtw/nd7XnKWNgyLdSQ0relHwpudKamhqlXyXXSr8B8qCM509O
Tlb713m02P+ixpVcKvdHDoK/if0pDS7TfGtdXZ3iWefKb+w/aDi+/4ch+P5b
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
2WpfvDtnGz5z3Ys62m+nzoheoxn9hDGTGRMEBUFF0BglaA1SrqaOn12CgSDG
I3pvUC9hiDBskDBCz8soYZzW4f1MqA0YU0kQ+zA4QE/vaXUErYBRb6TnQw+t
SgO1UkXjoh4qWra1tqOooBDHyAZdv3YdaqpqaZ2/DJ/q3Kd9M7rVKmrGS9Xq
TeJvyTbFfXyqiX4b63VMKDQoKCyGl5cf1q/fhCVLlsLDYw/Zf6zv4w1fusc8
9+zGfrKxA7x8EOh7GL4ePvDZ7YvDe47Ca1sQVk7fiq/eXop9K+n+3HUe8X6F
KIwfRl7sCPKiR1EQOY7q0zaUHTejlFAeYkZjHHAnxiZ41spIMwpPKVEcrkBp
tEJoAeTF9KM4vh/l5/qRE9uMHYsDsXamJ/x3hiPu+EXczmuCccx8j081SnoK
NmFTS3yq2WqUOGXBpxowQWOFiv5W08pjWjXKyyqRcy0bmamXcDUtAyOdg9CP
0XOuYp6WtheaMAbaJ+vP8lINm3kMUHSTTdUC9NTDWpGHwdAjaPPcgZrVy3H1
d+8h7dnnkPKLXyHtF88g95U30DlvKcY37YDhcDB0t1tgHlSQ/aaXCBy6N+km
lrSa6F6ijptuBRZzkjRszHQceptV8KnMATGnNETopGvZRPd/yZgaEaWNWBOa
htleUfh4+zH8ZsFevLR4P15Z6oV31wZhSXAWTuS3I6VpHLeGTFDQdTdZ7tcO
lcdAERPolKf3IP/nezXenG1Wg51LdeDEzUbJl9SZdFCbVPSMKjGsHkJ91x1E
n4/CodMHcSD0APyi/XC99ioq+spRN1qDxokGdGo7UT9Sj6reatxqzEf4+Qj4
Rfpj7zFPeIf6onWoHSO6MWjoCznm1Yr7j5+PWZ434/PAvi9rwHFcDvtCvOS5
MOZcub+X8y3/JtpTwacq6bZXEZhX1YrVHflU8mZE3n433fvttHr+sBXxVUPw
vliLTRG5+HBbGF5Z5ovnXfbi13P34qPNxzBrXwyCr9QguawXhV1KdJCfMsS6
37QfBUFFUFslaJ8K+3ayTbbJ9t+1PUk+9WF1H5y3ddTk4TGJ+U2O7+DYUdm3
4O9mbpXz2DjHjfP22Z9g34L9Bzleg1/z51zXiuNb5dwM5md5X5yTx0vev1xT
in0j5gnlur/fdm4eZE8486KPy6c+DH/tNsmnPk1NIrA408niyKca6D5T0bVQ
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
Ay+vJkdkFyOPtmIWdDq74Btv0Zl4flIOlZXb647IDXgwokVt5zT8MmRY55GC
91xD8fvNAXhiXRx+uS0Nv3HJwZsn8nAwRYbgil7IFFqeN11Ov3eS6pjcoMCU
fprq4CxdS0Fln2BW0VIjzC1ITfec+dQ5+1RxB/ZwxCgFSr6d9/VmamtNRv5b
hIjkZs6pMvtftVWJYeUA2kZaUNx0B74xXkgojEN2ZSbutt/BiIXaSV0XerQd
6NK0oVPbhn7DAwya+gl9uD/bguyKdFyIPofjQUdRcr8IjSP1GFA9wJhumK6r
h81E12R54/QmwW6UVXuraINBd2IyCM/ZRu/AYsSkQo7cW7mIS4pFdGIkiiuK
MDwxSG0QPRu7CXqDmvoO5tsi5Jxz1tXF+AZzxg7/eNfEfxpZtIf8ir3zvEho
aiH3IBycKrXVD1Rm5LVNIK60G+vOJeHtfYF4aZsPntngjRf3ROAPBxPwxqks
fBFajqC2WaSMGFDMqpzd5qjvtKTPGqOOx/K1WAVfQcEGVS3wpdZZWPXjsOrG
6J3SeMo8LfCsjE/lVrQMgq2qlE9l9yvN+ina24p86pIsyZJ8/2QxTo3xqS4u
Lli/fj1kMhnX0aX7s7EF41LZvlJf8CV8vyHlU5m/v8inOsfPdR5PinHkRPw9
yuq35VMfJo/iU9lveVRcYHEMLJ2P+K74VKsDX+FTnfVYCZ/KNokeJ+LMP/fd
NdD71FC/rxwXoJiEfbAftvudsFTXQHk1FFVrNuH2u8tw6+VXUfbj/43in/wv
FP/8Byj/3VOYPrwbutirMN3Lh5nGXZgdg02rID3SCLlShZQ7ZTgdmYJ3Xc7g
T3vc4RZdgDQaM6c3GZFK4+tkGlcnVemQUm1Cai2DmbZbkCyz8HgALMZqtEyH
qEYdIhtpHN6kRwwdG9v47w49YmtmEFslR2wt41MnkFw7jkzZBEr7dMhvkeNw
QCJe+3wbrqYWoKi+G839k1Ca//n41MW4JWldZHVPtENdjBcV7eQfZWe62HdL
fhVL8nUi5ngWc0iJZfFhfKrzXOPfyqeKfRC7njhfzeYyWaxV5sufmZnJ4++E
hobyeKn+/v58yeICsPxVPT0PMD4+gWlmQ0rt8IxSiymlBqPjcvQ86ENJSTny
8gpw/foNpKWl4vixI9i9Yzs2rF2D999/D//9i5/hpz/5EX7x8yfx+WefIDoy
EgV5+Wioq8fY+Dhm6ZxKjRYaHcvvY4XObIVKb8bEjBp5d8tw8XIw1u/ah883
ucD3WhNi6jWIlRmpLddzO9XIWh3COZ+qQ3SDHvFNJiRTGz/Hp5b1Y8VBb7y/
9SjWHjqLIY0eChoXMy5V9xA+VaOnZ6RVEzQ8v73RZpuLACL0l6wPN/J4yDab
APuCCUjm0zvf77P4OSKVOteXOrhUMzWeFosDZgHMnddkNGFkeBSNjc3cntjF
ZQ+qqisxNjFKz2YGo6Q/sTyNSipPKnq3KpNRWBrZNpYPTAGFTgGlTgmlni0V
0BpU0BnV9Bs1MDhgNGod0HMf5AV6l2EeBuNC8O1aE4w64zz4vgbHufT8/Hp+
PTVdVwktQcch3IfOqIPOoKc2l86pN8GgI2ioDZ42YaJ7BlmRt3Fkkw/ct0fA
e38KIk7fRmnsECrjx1EdL0dt/DSao62ousq4VBXKrqogizagI8OEzhzGp84i
/mQZzqyLwfo/ncTHv92NL95wwZr39mPTJ4ew4RNXvP3KZ/jT75fh4/dWYuXn
G7Bl/U647DqA/Xv3E1zg6rIXe112Ye++XXBxpSVhj8t2bNu9CVt3bsK2HVuw
a7sLCvPuord7gJ4D6UMGE71b5tevp/o2g+LiPNy+cx3Fpfmoqb+HKcUEj+PJ
7VPt9jkfj0X5VNHgjNGGszrY5EpYh8aguXcPXfFxkF0OQM3Ro2j81Qso+9GT
KP7Pn+DOD55E5Uuvo2f1ZijOeMEYHAtbcS3Q9gCQz5J+phLsoDnDKPCoBroD
PcG8gE+l96m0CFBZeCpSJXX6UxorHkwZkVg+CNfgAqw8m4K/HIjEkxti8MT6
aPxsQzSe2x6HFd6FOJZWjzsDU2jXGjBis2Ocfu+oXokx3QwULI62XUttoJrK
PcuRqncEm8LinKoFi/j76x0Px+Hvj4W5oPhvmeNTqXzRn8auxoRmFN3y+yhv
L4VfnA9CsoMReysa2RWZGNT1oVfTiR71fXSp29GlaceAvg9DhkEM6HpR21+B
uPxonAw8hkM+B9EwXIteVScGtf0Y1Q7CaNbxuApmvVAvmD2+EAPHxuOGmK1m
bjtrspl4DAKT1QgN1c2bBTcQlxyL8Nhw5Obl4MFAN2ZV07QPtd16FenCWke/
YfyqeiV19l7iUxfI38qnilakIjepoH3HqZLWjxtQ2DkLt4gCrDqXhL8cCsdv
tl/Gc9uu4rmdYXjBJRqvnc7ByeIBBLVQOzZsxIzZNheRX0/lk7XRerOBz6tY
eEwpxqnqBT8HG9VxvRxW3QTsxim6kRkJnyrNlfpVPnVh9k+BRxUZ2CVZkiX5
/ok4XhV1eTaGYPFTGZ+6bt06zq9J7VOlOr/o//ywMcQSvl9g75nZIzMO1dOT
xfHy5X6HjGeVjgWduUyRRxTxuORR41RpuV0M4vePGvs+avwr8qTS3y3lcZ1/
s/R5iOd4HPI/4VMFNzQr6aQ8girPIsNiiDF92K6bFfz9GTSkA0yOAMODsHV1
wnDtOrpPeqBpxx7UfrkKVb94And+/P8h/8f/B4X//QQal3+InuMHMRIRjKmb
2bCNj5BaoYCJdNLpWTVS84rhEZKAT1zOYJnLOZyKLUR2q4pgQFazHhk0hk5r
0CKdxtrpMhPSG03IaDYhrcWI1BYDkggJrWrEM7SpEUdIcmz/d0YyIa1JjbRm
JdIaZ+jzFNIbJpAtG0dpnwa3mkfh5huDVz/ZhJDUPBTLutE2KIea5V6xC2mD
zXZRZ31UVCuneojHz6eK/Yaz77N0fuJRvvliH/So+Q7n46Rjt8dlR78k/zoi
zo9J59RYOXGOESPtA5z7Aed+6etiB4jXde53pOWUzWd2dHTwvpnxpix/FbNL
Zf10dHQ051gzMjJ4nKbbt++gup7ZOXZgcHQSk7NKzCrUmJyc4XxrG7NdbGtD
U1MD0lKTEBERgsuX/XDyxHG8+seX8fRT/41nn3kaK5Z/hvMeHjxmZnRkFNIz
M1BWXoGGxiZ0PujlfK1Kp4faYMKMSoeSmgb4h0Zj856DWL55H64UtCC1TYfE
VgtiG82IbNAjrFaL0BoNLTWIqNcintr/JMal1imQUDOB6JIH+Hz/RbyzyQ1f
urpjiM47ayK9xPJV+1QGk9nI7dp4LkSmj9psPKeOyHmZ+ciV3ondzGOpChB7
UzHasJ3H0GSwcEi4Mgfm81dJclk51tn+OnoGfQMjqKlrQtDVMOzZdwCypiYo
SJ9SG+n9mczQ0n2J9kgs1qU4z8n9VC0mGHiMToLNBD3j76wG3leb7cxKyszj
I9vnIhuIztROIolhKTWxtTvrCXM+xvOtus1h/SjkmmPQEfScwWMw0n0ZWXwF
xj2ZrNyFm+cSoh80O6zCtbgiHNnsDfcd4fDZn4wo90KUJw2jNkWO2qQp1CbO
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
Msz8ZD1mfboRMz7ZgM/fWonJ767H1Pc3Y/qHWzH1HfHe+1sw/+OdWDwqAQvE
6/Pe3YAv31krtAYLR60T7y/Dez8dgz/++0f47O3JWDl/He43PILPw7yFph3a
1IjS0NRLPuatEuIYxxFwNPzjmoaKfzo07ZTPsakajhnh7zVKjp/FSl8ViW/v
gVv86xffpCXDjp2ggpkaQTFi84tRnMcLze2D6TOG2dHKdW8MDTvgjZKTQ0mW
RMNZzY6fH/BY8luSNs4vGIsMq0/RnzmEoZ/fJP8Nwe8Lwu8NyKbA+yLXxjo6
O3D6zCkcPFyIrL2ZyNyXgYNXC3G06ggOVR7CkeojOHP3NC4+OI99F/YiqWg3
1u1Zi8mrp6Do+jFUPqrAvY57Ymzaj/7QIAZEXewPDKLb1YO23na0dLeipacV
fe4+9PsG0O8fQI+7F3ca7+Ja6Q2cPH8ax86dwu0Hd/BMbOfSfDIulm5/By/i
pc/LCf1tKSN88ojCMVSVvi5Pdca7in0Po724824XfU2Gbq0F6UG/qN5+a62A
awas67w3xWK4UWta0VU5zlPjJV7iJV7i5VUX5S/szDvF4uRxzsLXaBdKO1Xy
TMZmpB8/bUw5p50wYYK0FaIPP+ex5DGMiffb3/4Wv/rVr6Q93JIlS6S9Kv06
VU4cxgsgT+VxOc/mOSjlp0kGRP7z5ptv4qc//anMJ06mw21f2XchqWBEMbnY
89bxR+q0Qw69iLEGtQhT1awxQsRWJeIJ6Ew14BRzNXgN3Rk2zCqOj6Hr5pDL
d5pghNTrpjWXcGDY4cNt3ZQ+eCqOFefbL9rnr0kvzUuH7PT1uP5zWaptx+fM
rSP3GcGe83l2nORAbCu00eNaBRkpuRJtxMmmaLfHdQ7a6b3xxhv4yU9+Im34
yE7ZfrkWQi7KtkpbQfpUK7tXlaeO9wbOp8iiGPuDdq5s58zTzvNy+2gWHH3N
L8oLES/fvqL6ILJ2ipye933yd9afTZs2ybrINTXWKeZVI59nnXz//ffxr//6
r/i3f/s32QdxnYBxe0ePHi3X67iWR5tV2qdynq/WBdkWeB4yVq4Lqtgy9Ilg
36VsWrmdypfIEp0z7ZXwVN7P6VPv9cHn8cLDOJz002bMSCPSVQTFeftFOyu+
cAWL1mzAL//4Lr73L/+Of3/jPfz83U/w72+Owo/++AH+6Tfv4u///Q3879/7
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
iDZS0MRcQgsFZBx5ZxAt09Ct3FnGyPEM/pr0ItrqnOK8rF7MU6OvwyrhXKW2
nfiL6jvbH3kR2w7zvnEtg7alZJ5kpow7yfZFX2q2JdqXso2xrZJDkU1xG9ru
ka0yT8/rr78uNWnSJGmLyvfY1nkOtnsen/sXFxfLdsxj036QcTnU+gjtAzmP
CX/aEXiq8gOP89Rvb1F1mvWBfQvXyCj2Law3rF+sS4yZyrrFdQGyVnJWbs+1
NdZr8n3WUa7hsW8hT2WMijFjxsi4qrSn5loBj8e6r+olbVK5fUFBgey7GJOb
fRv7Fc63OXdWeaxU/8h1RWfcilfHUxmrOgB/wA+fEPOmyLU0DPccDwyR6SCn
Fl9SceN4PZyT+jQd/W4vfLoxxO1i/YYNmDxlimjbM9Hb2YaAR/Q4jJnp6kNj
fR3Oiu/+SOFB5GRmYcP6zdiybTd2p+QgMXUPFq7cgslfrsAH4+dg1PQVWJpz
1uapJjJrTZunakipNMI8NW0YT7WeK6aaEsVUU+xthzyvjHBV5/NkoYRKHdur
gthdrSGpNoSU2iDSq73IrBlETk0/8m4P4sKzEOYn52Pi2t34cPZKzNu4DbnH
inH62g2U1NSiuqEWdUL1QncaatBwpwZ3he7dqcW9enE/vFMnXqMa0FB/F3fq
79m6bz82iP1qh0vsY+m22O+O3LdBbB/RfTTcphrFMYaq/o5T93G7Qdxzo1Sr
dOeekKjn/z977+Edx3Wkj/4D753zznm/3/PP67VsybJk2ZIsyyuHlddreyUn
eW1JVrCoSFFizjnnIOYAgsgAwQQGAARzEgmQBAmSAAYAARAkSORA5MmhZ3r6
e1W3+wKN5gCkJMqWuVM4dXow093T3VP33rrfrfqqrJL67yqUXaX/y6+j6sZN
1PL6AbWf2vpaFJcUIjsnExs2rcWipfPJFhZh2fJFWLJ4IRYvWojVn6zE+lXr
ELNqC2JXxSNmRRI2LkrGmlnJWDIhFpPeWY4//OhDgafGzz6OnSsuwpblhG0v
6W4XSna6UZkGVCQD5UlAaQJpDHA1nt5LASpTARu9LkoMoyg1iMKtfpzfaseR
LbXYYOCps0dvwqJpm3HjWgMCXrLnkCZiznS+RcWwezOeqt7pwxnr4Pp4zpGo
AbjgI//KS+qhP/0/9rpURiA1J+3q1WtDMd8Hn5NP7SX/zMu1l5gPNCTaScht
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
+NY7uPzIo8j/9reR98gjyP3+E7jyyl9QN2cm3OmpwOmjAPn/6LhN53FAIz87
SHNvH80BAsyhwL9lWM/lN09KGDcNhSRWSHeoGLFThppLUWkPmKshbVrmG8v5
sIwrsNr5vfBW/DMK35Oc81vFnPtmjk+VuLKM5TU/n8HiU79KbToqX47ItmOO
2zPzVpjjQyUexXmTEtM01zT8LPGp1muIFOMTKSb9y4pPVWjux/M/81KWWMNi
7jclJLYST9XCqohR5dovy5YswsjhH2HU8I9xqeAiykpLUVFegcrySlRcu4Zb
NTWora9HXUMTqm7VoqK6BlerbqKwtBzb9u3HJxvjMHTMJLwzZirmp+p4alqF
htSyPjw1oSgslPFUwZ9aZFILnprwBZTrVW0ZEE8NIL3Ih502bwQ8NeO+4Klm
eIXFvKYrf3/ZT1ltTmL/8n3Zr0WKPzVz+1o/F30l4+eMhbkDNG03atJzDJXf
K/DUIHMDhnxkL8zX6UKQMVXNBV/IoWvQSeqCV/HAz/nn1vhUlx6fWnTqGia/
sxJLR6Vh0/QDSFlwGpf3duHiLtLtpGndKEzwoTAuILQoPkj/h1DIfKlJhqYE
cSnVh4upThSkO2Hb68HZrS2InX4QS0amYf7wWKyYmoDa8qZ+eGovDaGq46mi
prwWFCp4UpmHNEzPQtTPxGfGU/u1Iz5GEhNJZUyVnjG8dEGegI6p8tbth9bj
hrOmEY35hbh57DSu79yHhldeQ/m//Qx533kcR775MLIffwJH/v15lI8ag/ql
S+E7dgzhQmoMt5uBnk7A2UPnc+icSpwkz5zGalCsgQRZFbIXLST4Iv2CM1KD
g66R4+hEbR+OnfNqKKmox76cPKzdsge/Gb0a339vMZ7+6BP8dMw6/GlhGt5e
uw8xpyuw72ozLrS5cSukoZF8s1YliHbqN3oUDR567VN0LBchL6lLcOgLJVtB
kHFVj9Aw46miH2bOAW0APJVs0kW27ST79ap64LuBp/Lv5iLba+xuRkVDFbXL
K1iRvAYxmXFIPJyKbbm7cfrWeZyrv4z8his4X38JJyvOYO/5bCQcSMG6XRuw
MGYRth3cioLy86htv4VufydcqoOeSQ/ctO3wtOFWyy3kHM/B9n3bsSNzOw4c
24+mjiZ4Q+TLCjzNL7gXlKDOM81tSvdVwzonr8Wm7oan9jH49mkkv+9uay7W
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
468a+OI4fbR+s3a3tHmcKYrOfSw8tWL7b3QdqBJfj8ptitlllteEGLQbb7zR
7/9nbY2c2tgy9fX1Pl6M/xNnhv0E1kHuAOLLyMkanrW5VW0tzmZMOrmXcbZJ
NozZBE9Nuja2bduim/v8UY8O/IvenDxei5cuUGu8URnOMPJ5KnM+h2Upahl4
PCPoHGOZ2IIwbNCXLkkDPZ5aCs90L5R8+8wTZFYoY6weX7Vt8rmwiS4xpLan
vnzaJjGK6XTM5wQ16yXc798ZfNoNTy0FXd/NPwBP9duGIvxKvGpH6LKXefBS
1q8dd+Cp7P9pPSwd3CX30hQsXqrsS6MVf/gJ7b7yJq0448d6/0vf0FtfOFHT
vnySJpx2hpbffou2DRygA68MV2bFAhX3bVXx8G6pvdHZVvFwDxB6MZv3RmAQ
KbliZwhrppwLCiyUONUt7suFB5N6Y/UB/anuPV02aIJ+cf8ofeOPw3TCH4bp
69e9qNP7jtENLyzXM/MOaNSKNk3ZnNBm18w+V4ezDNUk6swq6d4L2KY/67RA
nuZseEZW3tkU5A31CGh4wlQujEj1cX6UfDHE70vu/8V8WOz89jAO0T2dp86w
bgq0WnREmCWWNR/XtsM79Pqsieo38F7dcO8tmjR/hpbuXqNNsd3alt6rLent
2pzaoE2JddrsypbUeo+pbo1v1Or9KzSrYabufvzPGvTCYxo+9jlNnD1Bralm
pQtuZIWUL58Vnmp2jeV1qrQz4G90Dnv72eP/q1/9yu9jYp8+OdLwk9BF+Dt8
ci96D/1CLlTW6smLyu/kX7X4VWQPMoM8OMOHD/cYKs8jgwxPvffee3XLLbd4
ecO+C+xRcg6w/x9ZA85K/7CTzBbF96JPyCbsWnRe1Pep5v9EUoD1gKcG5bWc
3vFUTw/kDSavRvmtUBdH2CXygZKsI5TXEvB/OK+qyZW9rop3HCsOXnxQ/eu3
6A+vLNX37h2rU29+TiddNVAnXfmwfnzbs7rsL3V64s2P9Oq8TWrYl9S2eEkH
c+F5V+C01JkGv2U9M1C3ceWxhUudxfevvNZRPEbtytpVu2pX7frvfKFj0E3o
Rc5lwo/j/3bmdWVOQNvbgc/Hvgzscfw8bPPKs6HMl0bfogMN+6Md/DzDeriX
OtC/6EV8R+o3XNX6aPegV9mfTH3mT6O3eYY4IfqEPrb6be8j42J/JH7Cdddd
53Ohcy4VOdDxdy2Og/7RZ8NrKdRHm9SJv8n95GNnrRV8inrwfem/Yb3YLYYP
m66PYmU2N9gItM0+ZO41LJcriqNGz4mm8Cz30zeK4TGVMXW94akZv+P+KPHU
SsO/fKvFE1m4SCoo2ckA3bDUKJ4aVofvQJxKu7NTW30Jiq5knM0eP+CMkJ0q
Lf5I2Ten6OA9f9Wua/pqw08u0bITfqC5/3qy5vzrN/ThV8/S6t/+Xk2PDVay
brSyM2dIe7ZLbc5/SLT43KxBws1NNuXtbc47DWNpDU8tHXN4quEcvG/eMfQB
xmR5TqO5rnj30Dx0y/e2NgDtQc9RDAhaI8fF1Vdf7fdfsd8K3Ae+p37qoFj+
YesLzxlvwAeGB1JntN/QHH2ET+mTyYcoTXNZbgKrI8oLFPpuWBGf8A/jhL/5
5F7DDqL5OAyrog/MGffSF1uHgIeQA5wZRDwheT8MTzV5Ym3SP8PeTBZGsW3u
o6/MCf2iPfppciOKqfJp8svmhf8zl8gRZJq9v0p/4Fi7etqjbviz+WdGw7wL
5CLjZY54d5bnN4qpGh7K+4EeLZ7O5Jq1zXOGzxqNmH7gPVCieDd10jZ6BXqg
D7w3e4f0m7bRZ7Rn/EJbfBrtMwZ7nvbt/dqef/b3c04xe/7JTYyvaG0bf5oe
NJyVOqEB2oXmqYuxs2cCH5b1DmgVX5U+WB4L2wNp2Ketf1i+CtpkPPi5tG1r
kMavlfG1tm7AJ32hMJ/0qTJvcDeVAH1382OPgKcWC+X9ySGe6ueSZ0udeCo5
WhOZvBrb4nr3w488nnrD7f115S39NGDkdL22ul1vrEu6z5jGrGrXqBXtqlva
5or7f0PM5zAdsyylseVS15BQ3ZJkuaQ8ZkoZ40vGY65jrDTY/1OuJN3frixL
uHuoM+4/R7u/R7nfR61I+jOo6sBzFzVpzJJDGr/0kCYuO6xZ65vU76lR+uND
z+iKPw3Q4y+O1aL1m7Wrxcm9zxBPje7drVwLs/Upw98tBwy0A/2xBgDWQWwq
cWNgF9Auexc4e4Z82+Aa4KzgF5z5zffcA3YCrpGIJ5VJ55RNO7mXKXhcM5fN
KR6L+33/N9/6Rz3x5GOa/W69Nm5eq/Zks8+XCjZ1VHhqGbDwkEYuLLIt5lbc
M34Pbrl4PLW87b1o9kr07x7x1DKqGbDOh9zvtGD+kXhqUd3x1GqlJHXhNea6
I9YbXUg8ZSGCp5KjnrNsOFuqeb+0c4e0YZPy02crO2KcmvoP0JZfX6a5J35b
9Z8/QZM+/zW9duLJmn/pxVrR92ZteeRBxd6eqsLWNSrt3SK17PdnVHXBUzmf
KlIImQVTzZYxVdbXwVQPu//vzZW0rj2nObtaNbi+QX965W394anJOvv2ETrp
D3/XCX8YqpOvf1G/HPCW7n5zo554f69ebmjWqkxJO90Y97p6nGWoJjdTMVfS
3oblXRFHmg7x1EKIp4ZZUMM8U4anYv8VOKe9GAYoh2cM5fwzHnD3Je/zBgTe
ZkT+ZX2BVsm5mimmPZ66u3mPpsyp10N/f0x3PHKXXp8zVfO3NGhLu/NDsgdd
2a3tmS1a37balZXaFF+jHYWt2h7b5PHUt8FTn+inZ14ZrFcmvKxp7vm2tPM9
Ck6vFTO+fFZ4ajQeozIvMhc45uzZszVixAivw8455xx9+9vf9uvurBWS95S9
+uCfw4YN83Yj+gV9jX5CHuBTkZMZH4u1F1vLJNf3nXfe6evpCU8lHhYfCnmC
DsSvGjhwoM8RwFlYyB90mtm16FvqIz8rz5j9FB2nycBPhqd2cmRXPLUQ0oPn
sa54qk9LwjmKpTCnqsc8FcaUkk8Y+l/svnh1U7uGLDmsB2Zu1QWDpuq7f3pR
J18zSCdcPkBnXD9IP73zOd0xbKYGvrlIszc2a0VjXnscqx0qkpc15Cf0B3ht
uoynRuVIHh+w2FlMZhTKpXbVrtpVu2rXp7+iMZL4SuhEcuOwJwN9yloi2B5+
WDQ+xbBU7ic2gfVD7GvWIs1nMywhek42uXew27kH7ADdS3vWBvdaPi/qRD9y
D9gnz9M2n9yP3iQWlOfx98yvpG36TSwFhThU9DnP2Zom/cLvpr+cbYseJ1YV
XwEfnPHTB/Q2Y+ReiyOiTsZs5ylTaAM74JprrvH1kUcAuwFfFhsDv5t6DCsx
PMlwBvxofHzqpG3WZhkXfTHf2mKBGQP1Mh7qNmyYsdA3/G/msvK8LK6e8JkQ
Ty34Ypiqz9gfxVOj8SG9xalGbjdstbf9J52P8wSxu+yra3O63n2qzcepqtga
7v3ft1MlZ+tlR09Q/Inh2n9jf63/4e809/+eplmf+7pm/n8n6a3jvqVtV92g
xgceUszZfMWVDdL+naHt335IirWomEn6NeWCs5uxRyzfa7ui/uw//7JYP4uB
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
/Hv6QR3wLmNmrxi/MwbGAr/AV+RGha+oCxlhsgxsDdse/qFObHwwJXwAZMLT
Tz+tH/7wh15GGAYH3sa+WPgcn4G+Uge8Tv4AfmOOmF/GybuEz8HLkAl9+/b1
80u58MILvZz5+te/rp/+9Kd+rpgH+PdYPBcsaotH+xY9+yuanwAMDvmIzIce
GB/vFJrjXfH+7Fx67mWOkWvMAfcTq4LPxv28I2iad8BcsqcQ+Q7t4KMhX6FJ
6uQ5ZDT0CW1S6Ae6Db3Cu+N9Q/P4X7wncFvwSugKGqEtWzuAjnjP8BDtQdfo
KfqJbAbrtTU3dAL0wPjoB/oLHqKv+IO8b+iRMfCe4W9oAv6Ah+k3OCZtojcZ
+3HHHadzzz3X55ZDV7Bmxye8Aw/DF/TTYtfR5+QIf/bZZ/18wAP0mbqpk+9s
TRN6hrfoL/wBHUPvvDPLhcEZIcwh47SYXs7J/rR4aiVWlndyOZsvKJNzJVvo
QNY4T6bd2SxzPlrq41N/f/2t+s1Vf9SAF9/Q9I3Nmrk1ofrNMU3b0KbJa1o0
ZXWLJq9udZ+urG3X9PUJTV+XdCWlqWuSmrIqHpaVrqzJuO+qlVSkJMslUS5x
X6as5fmEayepaevTri9p1W9Mqn5dTO9tiWnOVkqb3luzV38eNEzX3/OoLr+1
vwYNf0WL1m3QHva/6GjwVHUt0Z+KgYr5Ype9BEfDx9h9rGVBN9hCxJ1BR8gq
W9eAJ5DZ0AY0C42anEYHoQ9YJzl44KDaWtqUyxQ74AXiJdPJjFY5OT/H0dik
iZwL/qLjq3dc3TuVysTU3t7mdHvC77kOuoBxFXhq5VxUklFnkLT7SHoEzXKx
dp7o1B2vrw6rVmKpnxRPjZQjYLi9mVefDF8NyhGb6fIqeXimUSEgXi+pPPG2
YKBpV1qd9bPnkILFK1V6fZpa739Ue66/XevOv0LTvvR1TfzS1zTxq8dr0qnO
tvr9Rdr1wlM69Poris+fKTXvcwZL0sdw+v3xFtKZCfPVlsrhxeH+pcDnRk4T
Y5FKOn5OKp7P+fi6femCNremtHBns/7+1mpd8shE/az/aJ3d9yWdfPPLOu6P
L+rEW0bo1H7j1G/6Zr2xO6a5ibxWubFuc2W/wtyssY65CELss5j19iyUkPOF
3KlV8NSgGp7qCvkinDwqOtkOruoT8wbhjHs8tZhWupBWytHbhj1bNHP+uxo5
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
F13vyo2u3KSzLrpZ51xyq753SV9XbvPlnItv09kX3aazLqDcrnN+R7mja7mY
cru/Nyx9XelTtZztfjvLle9ceLO+c8FNrrh+XHijfnDxjTr30pv0k8tu1vlX
99FZv7hQZ573G/34t5fq7y+N1OqNm3S4tS2yc7waonZ0eGo1eMX2ONgZVL6F
su3Hb7xH5BayCDqP5paOnl3F/+EbeIV8RuzDQYZC+3Yup52HVix2nrNJG3v2
7HN1s79mtqOdWZ7ek8lExxlAuVzWY+pBUFB3w6IX2ulxHgxPTZYx1UwkIrFY
jkrsGUcJC7YPEZ75SInmd7W+Rq4j4qkVpSqq270vnwZPTbt5yHhMFUwx27H3
iJwaeX82TRmVIwaTBeW4o5HDzdK6TSotWKzspOnaf/vdmv+jn2nmt07X+C8f
r8c/97807uc/1ZQrLtKH9/ZT26IPlT98MNw7VI7768wVGXjstuCxwPKclQ8G
Kzq6LDi6KqE3gnA8nIked//ZmQhUv26vRi/arMdnLNWPHnxFX7nhGf371U/q
f1/5pP7jmhf0iyfm6A91q/Tg7D16ryWjde7hvSX2Ppd0INaqxniLcgUiABMi
g2rOo6nhv2K5dIuB7oKndp/wHDnQObMvHgvzURZy/kyrfCmnRNHxSSnj0euW
VLvq583SS2/UadALT2rAc3/TQ889pL8Mv19Pjx3sylN6fORA3f30XfrLkAc0
8KXH9NKE4Vqwep4OxvYrlm/3e/1jWceLeceL+aTS+VTZHj8aHNVIMtDRxLSi
i43PLT82+hybCV2AbkVfYD9i7+F/oeOwt5AD6C3DUy0XNzoa/YINiZ0Fzsr3
2GDoXttbBxZK++h+y42GbWlx78gqZAv6jjrR2djCrDOi2yyXPrrUzo40GRe9
Kv8+Kjy1qoztfX2wazny+4HmySlMzgtiVbc5X2RJc6AZ2zO6aeR8nT9omr5w
1RB97qK/6SvXDdO3+o7UTx6coEufnK2Hp23UtM1pbUmWtL8QqKUUeIy2gO9b
XuNmj3+Ip7pfCinHc+0qOXoKiunwt9pVu2pX7apdn+hCxqI78a3A+8h9hT+F
jYx+A1PEJ43uOca+xg7Gr2O90vbZ4nNxr60HotPw18BE0H2sN9qeY7AFcBn8
N7BD1jjRk/iW+Jxgh/jI5vvRN54Hx8COR38azopvDE7DOMBquI96wCTAavA5
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
gpZmFfbvVWr9Gu0YN1pv33WnJtxwtcZec7lGXXeplr7wjLZOHqdDC95VEGvq
iqdaKCwlpSMYU/81V3S/PzQHbUAP2JHQERgKdAFGZWv8+LzQKnglBWwFGsfO
hGegMTsTDd7EVoXv8Y2J6QSzAdNCJkArtt4AnVEfWBf4I2sX4DrwJLyGvQw+
Cs3hm+N3cx92MrY4eCXYLvEH8BNYErgM/QZzg1fpF3gi9cBf8Az9sJhO892R
T+B24F9gV+A84KlgSNSD7ICn4E+eMzyV8fAceBlrJLRl5/fQL8aOX8C88red
K0Q/LFcqco3+wIO8G/rK9/gM4G7wNDxIzBft4xcwT/SZPtAWPAxPg/2B5/Ec
74m5ZXyMA57mvUX34P2zz2HtiGGvkn/AYluYr46z7Rzdgh8yLsuVit5gLcjk
lekX/s+aFLSHb0TeA94ruoS5ZOxgi8Qsg1OCHYJtg/cxp7wH1hGgKfQAfIA/
x5oBdGX7EqBNw35tfz28YOeZWYwLvAZvELMH3aLj0FvoEL6DZuk7dViMNHoH
uYts5ln6yf3wDnwKRs9zyHxkORgrsdrUZ+dH8X/qgJ6IXUWvop94Ft4ihpwx
wsvMCfPN/2kDbBa+NDwVOqMddBT6ifmD/nlX6AXmF9mBzkfv0RbvACwXPc3z
fM98wVfoR/BX5oo5YX79O/wM8FTO3/aH1pTPQ+f5fCHMnQqmmiqUlAVnCcI9
/63prPY0t6lh7SZ9sGyVPlyxXvPXbNa81Zt8mbt6o95fuUFzKSucjl+5WXNX
bdWHq3dofrnMo6zaWS673O+dpevf/L7DfXaWeau2u8/Owu8frNmtD9bt1YIN
e7XQlz2av9Y9u2y95ixdq/eXrNbchtV6/6MlmvPRYs1vWK6Dzp4ih2SG8yHB
sY4WT+0Fw6vc42r4pBVb34VuoFU7x4/1G94/vAPPIcewm5Bb3I8sRy5iz0HX
0CG8g8yCt5GRlu8Fm2LDho3OJlrh2iAv6/vOrlrtZNoWTzfbtu3wPALdNze3
dKytWOkcQ29ox5Hw1M69/uGZVBaX+nHw1OIR8NSg9y7+F+Kp1fFVZ+cHGV/C
2NRcB5JYDU/1sapF90sm7WyqNom1ffeeAmfbto1yunqws6HufVAzfnuR5jg5
9eEdd2rZo4+pdeFiFfYdVKk9rlK24LFUf954EGbBzwYJv+eo5Kw7Hz1XLJ/p
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
98wYd9Ax5ojmb1s4a9sR2lPQPxD3mekfib59dHwNcw1oanjCc5MwX5V5la3H
V78xvdC4dfRdwBZNb0z1jd/3FhMHt/ihAox91GQw5usvXLWV+h0Sf7yuPx/X
aw/+ctD0rkH9cSAJ7G6wsasup7KNPc2ePPcS2xf+L0xh24idNe1ncn43469h
VEXSjp9zRcejUPii/UVfX5u38yi1N3RMY51X9OxFKUpRilKUohSlf85UPOXx
Wihu7SBegr8yL/gyopKj2chaCmLpi5qb2sJ6DSO5FoIYTp/U/DNjwU1nxSbv
RK6rflD+kdOx6C7zaFzN4SzXkdf8uo28Ss27m5MJbNu5AyvXrMa8hfPRb9AA
vPbWG+j52qt4+/33sG7DehyoPoimWDMSmbTPZVH4ajJqvprJZdWazfbv4bXU
3R1v4vydttn0x8p1AWMLMV4R7f8Z54oxg7hOKC8vz/s7CdvAHc3u7B+V20Jq
7TaI2qFttYMpMzyeTMZIJpa1czJOpMgkyRfJEI3j+G/u42TVuKHHCr2ORvDK
dXs8HivSTDPRf10mQ901/fjkWjDyXM6SdTU1S+H9Ja2XLqXtyu9PSNlsia/I
svNv8lX6z2N9UuTEem+K9yMfDH7X+EqtHY/l+/n68t7qWlJfp9i/Qymdlrlv
Z+7/mhp2k6PQtpm203oPL7xXHK6r1pKH9/zMPWR+fxmyE3PcFO7p5uvG706+
R/Jj3QbB537EzNB3LnEr/az9XOjfJdq0s33lWfHMqD+tm05UPz+SFu/IWe+5
k73T5qcJqleJbX9czZKahal6Mm+ifo5qfOGonCZpd8imXNvLq9Il80z6KfCc
OFybMdITKmdgk9VnPfETRZdPEstHnd+o/qYSj/fzleyuaG89vStOXwBWwvfB
LzlbMp6AZqr0f5DyfKbl21Dp+Z8X+C1g7WkL06ie5Rr1fNeoesWPn5drgKf/
lnmlZ8C9IOe1BcH9OJZoJw35a0HiXNnkq07xdS36bk2qPpRIGvcJMg9lDC72
W5U5b83fyyifS10A93+Cezrs41lLXuXZPIpeNWxLYdr36X+Xst0J89RwKrJr
Cuqt96dYNrPNvHBbl/wuSnyfZlt93+cI8dcWqfRk3CyCE/QbM7tHPNM829eT
yDpGlaVRfY+NlpO37ND7JvkocbQDsY04wLY6Mkc2G2hqnVwhh/3piO7eyI7b
oh2iFKUoRSlKUYpSe0lcA2SNTP8Vad9mU9QFag2m5j0ptWZKBHMRnbU7AfGC
pUFgkYjDKYguisQGAU9Vx7iZnDDVfwWeeixJpp/w163ZIHMd7K99PfErFU+n
sLeyAlt2bMPq9evwzXdTMGrMaHz2+Sh88dU4bN+5E9WHa9GcSkrM1PCa0CJ7
kOzzWs0azPXj8SauGaizoB9XalAZv48x68lRGc+dsX4Ym8j04xnWbbQ2O2tv
jCBqh/bRDieCp2pGagU6zlRWrdmNPRY9FnDsYeZYkTkKT2V/N30nFHhqISaL
6YvF5I5hHxj6eqY/Ff1+2C5BxsqA97Hs/JtazkzAVGXvyPbjA/lc1WSHnhyX
oX2swVNZx4xtydhpBdcMt1t+TEbBdsa0szX9D5n2FFqHprPp07uUfZNui7Cf
Y9OfCHV+/P4ydi6op+MzUlNfCv/3IxfwUf29aj7KttHvaZWzz1PtIDv54/Vv
E9uX7ZMLfqPaQmrt8cERRZzPU21RpibzPDUW8FThm57hl1UL8EyeKjbQ9O8U
9zPPpN9XZkddKZv0feeLX/zAByt5p3r8Yjk/jo/mqbxvEk6Bp4pttZq9ZdV1
M+o1E+KpRlmEp9q+7b+46A8yfbv6njtMnppSz6Sqt12rnulDcBlX/QTwVGGA
kktwqRBP9YJctJdv8FTOM50QT+XxVlr1n0TqqDzVZl+lnwNqVMlOc7boVUWT
yrlsmKfyczLVXHHcC22jUvTchj4PM9cj7bkczR7EPE+O4ViknheWlXUWzmsw
UOpznUBHb34HXvAdnCie2pqJxWFviqm2bVJ1bcoVeGp+7qt9h2tfOW7AU51U
oHMtxVPtYj1rxFOjFKUoRSlKUfrXSm62kBl31uK6WM2NXd+ii3aeWSuj1kx2
3itAkQ0c52Kco5k8NafWelk1J1QTccmhuVspvWqr5zaQNE+1gnUvWUA64Bh6
vpdnIaIts4WbNjO2TzLhZ9r5q3VSNqStckLXbqFJ0lol7/jne2bMa3IW6k91
rHczvl4pP2Q6tf7auG2k1m6DqB3aVjucGJ7qtdhnsYv4ms/SyOjSwiQt0Wya
PJXp+3z4mMn0Gx3WbZpstpQuVdu2mjGskS+7rw0Mj2c6U4OaUOfF1DhpavWP
lDkGkk8msum85lVyYOPenIgLp9XsmYljHH1kM5uJ5dac2Sw366fjiWs9r/Z/
rH3yh6+j438ya5+Qef8x+Xqm1O9BAsmAr5q628J3j/z3Wsi+lpe/Nzo+Pdsz
G2h/ebxofb3i58YKnhG2R1tIrT0++L7o/fihJDW0+6fnVPpXSnoOEny2HE9C
iLLJbG4l50OyuYUs8UYTKsdUblIdrlkdmMjnnJqfMW6PQ47nFKZdGodSA+vb
ETnq37b4GaDHVk8zIursUuqoZEq9ZvjwFAyRCJiSEFezLAbLmVXlS5Opqtck
/fznfH/OEjcv8HvlFVkxqWuLfwEcd6a9fI4xZtOZgK8W2GXRnJL+LOg3gBpS
5whzSh5DDm1w2Jy6bla1g+RUuuQ5eS7M+jJ2ljo2Sf/0qk+m4gn1d1qua/JU
zSLpt4TjghkPV/99JN9sRxsHjjbW6j0ok7EWTlbfJT8z2lKXk0w41tSMdCIl
vheKyq/qlTN1uf/kPFVHcjRdLevQZ+KPwmHbBf6/87HcQtk1/UM7Leus+X0+
Rzw1SlGKUpSiFKV2m/i7z8myFcS34vox58cT8YL5hOtw7p4Q3arLWM0uNUNq
7ujonBMfakVb+oGeQPbCuSdOgzEauAXZiMIqXsJK+l76F+WpIvVlDCpqmUQX
liviqT5PKfj19f38uflztM9AsgNzSucErDQX+AV0UDzlswPtke0ePzkK+y02
9VdhvdaR4rq4bSC3hdTabRC1Q9tqhxZLtR+Qc4ZNf+F9T8YIGSeCsSDn+NkO
jRnik7eELjPsP91MOq6eab8a9lGvfQeU0mLp2IDmeMKy0O9rltraXFb+pr2/
6FMZl5N1pZ/ewLew8OJgP4l7Uf645yKlykTmKvbyATcVnSvPE/2ql9frZqxs
oOv324rJjKWp61Gw788U+UHQ7aD5qdb0mixEx+TUcTmZzPhxOkZW3q94UE9T
m2v+BvB3gmyYfrPJXLOBD+bibOd/S8QXK7y8H1nhpqp9TZ4ubU19ceBboS2k
1h4fmH1fxhlhMpxH0Ycw4y+JFpx24/J826IFZIwyV9vxiEY069vfW8zJQnbT
Mh/zZO6VRYaMW3TCnu9T2SvOOiRpSn1baTjizdXycjJX85glnmnWn/vpbDrJ
z/o4VLtXdbQvVYcM3c8++tXzj1wQ/8qIP3ckzvR3ZLaPk/P9ltIXqWaa4sNU
fA7780wrG8QCzvp60CLGqv8O/PWTmdqZrOhNba0fVa92kDl3dbRP16zvd9Qz
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
WS6COjn5evK4WHOz8F+LGn81djSo8WbPrjJ88O57eOapp9HpiU7o0a0HNm/Y
jObG5rw/25K+D/4JeGrC9c3wtI5UismHlSIQx+Cp3DOw4r7fVCsV+D319+u4
tCnEfPP7T5ipmpIS3/9FxFOjFKUoRSlKUWqvSfZSacrCCUGdmmGsKUPzxFlY
2vkFTLv1LnzXoQNm3nQtVj/1ILa+/jzKB/eBtX0B0LhLTSD2qUlFjdioOWqi
7mTUXC3j+XpXbUTmFNvGqFlenqeqla54UI14aiH5PKDANo+01Ai7OyswglwR
Uy34xgt8rh6B0/4YPPX7Pi/ST4T1qm0gt4XU2m0QtUP7bAfT96Xl5Ip4qt57
0VpU7cPZDuLAOwEzNNfyJk81/aWaTNVkAXyP2lTa9k+bNg333XcfrrvuOjzz
zDP44IMPsHfv3rzOiq9apylxV8hv1bXIWPN8N9hbyo+N6u9YPCZxqeKMgZVK
BkzRzfNRbeuuNZaiVVXv8VjavVO3qmM8OQFvlPE18EUt46xRp1JjGu13TV8n
mo/oduH5Bw4cwJAhQ/DCCy/gyiuvxDnnnINvvvkGO3fuFI0qfZ7u27dP2qS8
vFzaQsfy8oI9tESaLDWGZtUmWm9q1jOnubDK4iMhsOf3gnKW9KMb2tfTPJX3
Ywwq3Z7trW8cV7+ChPWExwkPwU1jGqhqRHreEtSPm4gNvd7AlLvuwqSbr1ev
f8PCzg+jakR/pFfPQ277Kjj7tqpzqtW8ikzHj0Xl2p6gVUuHp/KKXSmpnqVm
U7a8kq269LmasXx/9XSsSj9LZKjq7SSz5bOf5iA3qdygvv8kuNftqtkZJ24J
X5dqk6HWqmupeV6Wr+rvLDWqaV8wa3sF42b3x+Sp6TxL9czY84EGl4yPNv76
OPMaom1VlSfj5N+ac2qNa/iemtOK/1V1PfJY85q8J23mY80xv08HHFHejydQ
R9t4ctbgfVPHzz6rmafOpfyp6r0WprAPZs1VNT/VYwH/rX2EaD8k+T2s/MBY
qD/1/k2NjWisrxedalyNM7U1Ndi2dSu6vPgS/nbTzbju6qtx7933YtXylWis
a5A2+WfmqdSmalv/0jw16/u0sPzYcC7jQ2TTcoxuQlPbzX5k+t5g1ssfzVQj
nhqlKEUpSlGKUvtNnB/Ifqrtuw1CI3nqDjSO/RZz73oY4y+6HENP/w36/ey/
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
+Qj3vjkGfSZvwNCl+zB9TzM2JFzsU4uTavhx25rh09Kc2PM7EszXsZpUVmsm
qwE+ceXuA314Z5C2Mmo8sFVfcdE2PE1HKUpRilKUohSlE5rIUamh4Bopo37/
MzF4ar7OObsbr0F2x3o0Tv8GO3u9ig2PPY5Vt9yJeaedhwX/fSYWn/Q7rPrt
Rdjb4S4ker+D3NDh8L6ZrOb+u9SUolriwHp2I1LqWpaa9xfxVHFg5GfHPj6e
Wir+dHvjqX+PbWUpbhnx1ChFKUpM4f5qao7CezB8jwyNtv7UgpFtkG2SSWq7
da7xyS+pE6PelLyTmi/yQjJLrtV5PjkguQCZH1kFWSg5CNfp5JC8No+lbow8
gr4FyBS43ieLuOOOO4QjaJtcMl3yEV6T/IFrfurCqMMkNyQLJM8gMyBL5T3I
Vlj2P//5z3I+2SbPYznIRPgZdZosH3kLfRCSv5BpUDdLrknmQE0rz2FdyTXI
KshU2UbUebHeZJw333yz+Deknpa6MfJT/k32yfqQEfFarCvrTJ7K98lRyFOZ
2W7Up5J1kqeSEVMvR9ZKXkS2w7YmNyXLIRumhpX3Id8hvyGD4ndDLs425ndI
Ns7vkMeyTVle1p334ndDxkuupX1CRDz16MnkqRZ5KtvFVm1nqfZKJoBmNa9S
/cDbuQuJqdPRNPwL1PT+EJtuuhtTfn0Ovvqf0zHuZ6diytnnYeXtd2Lz451Q
1qM7cnOmwdu9GajZq65R5c+rLDU/c5Kq7TNq/uTHFfJsVzL4fVlZn6fyPccT
P/ZFPFUVdtO+GOZursbXS3fhybc+w9WPvoHLH+iJvzzQC/f2HIz3xi/BiLnb
MW1TDfZlXVSra9Sq8+poA824Vo7vw4lPh+XYQWwy+ivK+nz3B/JUPm+0e+dz
yb0Sck72c3JCZjJUPq/s29zTYP/hK/s49xDYp/g39yfYT6ghZd/WPJP9mX2Y
feLUU0+VPkreynGHDJTPPrWZ7NNkiuS0vBb7G/mnHjuoRSXfZR8l0+Q1eB7H
CfZ33pt14DkcD9jnyDfJMzm+MPPfHEPJMtl3WT6yTK1B5zU4fnEfif2a4wT3
sHhf3o9jj47fR5bKsrBteC9+pjPHAI5dzOznHIfIlDm2cvxkncmhWRbuL3Ec
4/jB8ZDjC8dI+l7QrPxYeKr4wW9r44DBU3fva0D/L6ah06sDcE3HXvjjnS/i
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
8h4c0zjecBykjpzjGHklx0LyUvZH7vVwXOVeDfczyFfJSjkesM8xme3FOvGe
vB7HMfZf6nXJU7WvFe7naB/MZK8cX7kvw30T+vzgv3lfjoFkq+SstPHnWMI+
z3tw74v1I/s17f2PxsjN+bn+rttcokbUJf/n829jwbZD+GjySjz83le46vlB
OOfRfjiz46c4u/MInPvcF7i851e44+OZGL25DotrXWxo9vXZTdkM4tkkUlnV
/+wG1alqVVZ9Mlej7kFPq1Sxqs+QkBhxWdUrdOyqKEUpSlGKUpSi1I4SQWay
Uc3v1XzAaoSXa0TKbUKz14TDXjNqVY57STX/TsOrV8eVHwDWbIU7YCyqbnsK
ey65HdvPugJr/p9TsPkXZ2Hbmeei7MJLUfN0R6S++BS52V/5TLWxHE7iEOxE
A6xErMBTA5ftnB4fiafKXDLQofJV5mxOKZ5azABL/e2G/jaPCa+NWosj/j12
+T9WbgscqbXboK3oKVq7DaJ2aF/twP5sZbNFY5znFurH1zxPpS/G4Dyys4ry
Cqxf59uSc81ObSi1XWRw5KN8n6yQ/gS5Viff4Oe0sSfbJNMgZyS/43qfTILa
MvIErt2pl6IWjfyE636u7ckNyTPJ+3gfsg2u7anlJP/4fNTnvq3sK71wycWX
4PXXXsewoUMx6euvsXbNGrxLX6FPPYWOj3TEhK++UsePwgfvv4/u3bqJXows
lpyj7nAdRo0YhR7de4hGjByB92qor8fKFSvkemQe1KGyjtRqkReRMZCnkqXS
r6KOU0X9F/kNOS51b+Qx5CHUl1EbR07EtqGelH+Tn7AdaGNLDRnvTT0p6897
sX3JU+n3ldeuqKjI89Seqn3JlT/68CP5LB6LS52okXv3nXdF08rrbt60WTiw
jmnDtu7yUhe88vIrePP1N9C1Sxe8yhhfAwehfG850qm0PAP8zSXbZn3NZ0P2
OgOm2hZSa48PrufAUvOlrBeHLVb/Gcm2yjkrhVyWfhazap5FgaiaUzU0A/ur
gcWrkBk0CvE+n6D22R5Yceb5WHbqmVh2yhlYcuoZmPPbs1H26IM49HoPJEYO
hLdtJVCzB4gdUnO3Jt8/q5WDm1Vzo6xX4KnkOJ7mqep9O8iOJ76VGJuqNm6j
vDaNsTO2oXv/uXii9xTc2eNL/PHBATj3wUE49+Gh+NOTo3DbOzPx6uSNmLDt
EJbXpbFHXaMy56IibQtTrc9lEXdUPcXjAXWq/rMSjjkZjkNJ2yOddeI8j8/2
u++9i1d6vYJu3bvJ88u+QNZHH608JpX24+TNm++PK08/87Tw1K8nTRLtNrkl
n1lyy5mzZmGw6msdbuogfYtjEZnk9TdcL32HvHbO3Dk4WHUQY8aOkb7+7HPP
5vdD2M84hpFhst+++dabMmatXrNaxoCP+/bN+xPo0rWLXI97GxwDaOPPPs7+
zXqRk3KPhOfxmuS9mqdyz4j7ROy/7Pe6ndjP2Ae5H8L9HI4zHFfpD5r/Zl35
Ps/leMi9Lu1bloy4scnX0vOadWpM21W2S9r15r/djCuvuhKfqzGKe1ssH4/j
2MpYfpq3fjtlCnaqMTmmxuQMOXnASs3fFc3HSzHyNpPYN9TvHeOpNWddbKhJ
YOyKPXj1y6Xo+Mk0/Ln7aPz+6eE4reNgnPLIIJzVeRgu6zkOfWbvxLhNhzFz
TzMqUjYaVJ+Lqf6cspJq8aH6oKPWUE6dyod9fapaO0GNA5DxwI54apSiFKUo
RSlK7TXRLixZq+bkKlv14us04zYi4TWh3ovhsJoPxNRagPurXjINHFbzhj0H
4X2zAM1d3kHtvc9g35V3Yv1Pz8Cmn/0am35xOjadcRY2XnEZDvfujvTn/YH5
k9SaYZuabhyE01wLO66ukaYzL0+Hv+SSvSRPNXUfnD/rLHPzUFXcFmub7//b
fC/iqUdui3/VdmgLqbXbIGqH9tcOuUB7quvk5JyAnUKyMLOslbcVVgfKWrmi
ogJbNm+RdTtZBP0VUvfINT05AHVd1I0yU6NFzshM7kptF9f9fQPuQPZIfSbZ
I3VV5Hv6WuQb1G/RzpWvXNvTbp0+AXkNckZygmVLlokWbdbMWcIu7rzjTvR8
uSfef+89DBowEJMnTUL3bt2FpZLtLpg/H99Sv/VxX3Tr2hV333U3XnrxJeEt
dbWHMXL4CHTr0g03deigrnUHxowejcO1tVis7jF+3Di83bs3rvjrFZg/b568
n0wkhGNQU0ZtLH0IsHw6fjiZM7VsrBtZClkQtWJkntSsUQdLVkM9L3kN60XG
SW6qfTbyfTIOrU+l/1SyGvJmat22q/ZhW/fq+Qre6fOOMGEyW+pLyY5f7dkL
f738L+j9Zm9s2rBJWMkM9d0NUd8dmW7Xl7oKQ379tdfw8Ucf4TNV1infTkHt
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
fBip/Ngcij+khcubXocWi5n2tSvbXU5Y6DiLzSI0WNZsuRxxuWRtsZHapM0G
PXRGvdBpG3VNYsnn4P35vFYqV806HRqpvjG1mIQPpoPqNy7TBtq3rqFeXM/F
39DUb4s8/xRfh+sorgvYx5TLulZXahop13VanarViVrsVP6N99HqTYNa5zH4
/rW4G6Io0O98Pa4nRN6aaT/OG/Ghp+NYD9V443vkvJmpjjFTPnnuKh1zQOD8
8TaOk8r7tX8+fB7OJy+9fQbt2bXTV38PiWdic5D9WcgOTWSXHMuMeiHC7uug
2O4tKh6FzTJOVFjwRdJlDFl6CN0mfInIYQsQOXQeuo6Yj1dmb8HYVYfwyf4s
nLzRjJsmCVUuD+opozqqKvm8/E2ByxWXdwu9N1qoLjZZ7NDiIviTP/mTP/mT
P/nTHyN5xBdUfsdTi5/glriPJCm+SsLBQAF1CyA7qIXkoN8c1Aaktr/broPb
UksNktuQr+RDKoiH5eguXB87FIXPPY3suDikRUYhObAzCp/+G869+DqujZ4E
x5HvIPPY/7Lbyhg3btBrvqYuVR/11UK9+ih8ILceI7W9V68O237d8wPrPyP9
6v1B2ee+fod+eN972782D/iZ9+3n4XfBA6c/nu/Zz7vt32MdIep31ko1HdWD
tjqq0IWo5+lqnY9K0VcVfVLTT331Ye7jazqAphXyPto81pqvru+c8KyxsgbA
8NVbNX2R9QLWG3x/16BpohL/xjE86R3CMT2996tqqaz9aXqqiGvAWqtPXAOP
iAVqg9VshYv1QVfru4//dtiVWAi+8zK5fPKp+R3z/XF+Ob4ha6k8XpfnoRk8
eLCILZuVleXVUXg/zgNzoukmvOR8ahxYVa1Wg2/8CE3L1vYX4+8txLWxRcwj
JfGcjSLOuEd9ZhIaGxpw6/oNoalu2rABK5cvx47tO/DNga9x4thxpKWkCqQm
p4qYCRwjt6KsHDrWf+lZWOke+DziPpgzW+t4f+fvYCyvSL91/SDaKPxtmG2M
bImWTlkSc1A5yXBcAh4BSR0RLIloADayORM9KyonrKvamoDqMqD0GuSL5yHt
3IvKSR/g2mvDcPqpF5AWGofkyO5I6toTqU88jeK3x+Laoo9hSvsOuFwANFQC
Lc2Ahc5lJdhNAPuouuzUVnKI++O4SU4X++vJIo4Tj33WtCX216skU7+gcyG/
2obj15vw0Y4MDPn8azw/dS36TPoSPcZ/jn5T1uCl2TsxfPlhfJV5DYdv1uOc
xYVbsqJPKc00Txv/VA1Cf/O0fht5mJaqjP/3CB2PNTvWShk8VxXrfza7je7f
ofi1gj/DS4o9SsQ7/81xn7n+4DqDr6n6yir34BI+k6ynskbKWiyfj7VSHp/O
Pox8HrvDLvRSl3q88phbyy2Pe9d8M9mnluOFWll3dSrH83W1byZcR/AxXK/x
kte170NclnmbiEtK61p9wvUng//2rSMYXA94v6mouqyWtHM6VG2Z88QaL9+b
mcDHcd7dqp+p4IU547H5TrsA/y3qZ5fLqwEqGqzyPUwbx89LzvfD/FN/b3oq
f8ew0bM30nPV24kLWfGlNqioo5uuoiJ8iwrEBYOE767W4/OTF9H/0/149sP1
ePzdlYgatQi9312Fv87YisFLjmBx/DUk321BcaOEqxag1qOUI01Ttck855um
p1p/vbahP/mTP/mTP/mTP/0ukgvKXLBuZfSZ0giWfKAN+OfhOi5ZiV3q5rmf
ef5fHTXPeT6rampAX4d87zxcF7OhX7cEN8YMw9mX/obcPo8jITAS3z0WhsMd
w3EyugeaP18K1+EjkE9R2//6ZchG6kvwpAh8vTZap6aXelSg7T4/pp/+m/XU
f0v6KU4b/278HtJvzYGfBz8Pf0QePBD6l0fV2x7mr8pz/bF2xn6eYp4q3/nd
PbJXF2jvb6v13xmazxVrAayNttcMNGi6oe+5fH1b+VrerPtoBAzt3jySp9WX
1icf/Lume9ipH8s+law7sjbqzQ8dw5opa6q8v1dPZR7ovKxNto+D4PTRUzkJ
bYHOwb5gFy5cEOP8eV4pnqeqd+/eYsw/xzfkMbnsA6f52XI+WQvhvPI52jzm
h+jw2t8av95+OS342uy3WldTpzwv7Z7V581+tvW1dbh98xZ2bt8u5uOaOH4C
xo4eg6nvT8Wi+QvFPFSbN23Cvj17kJOVjYb6BuGvy9zom3VCs2ZONDtgfdpm
tsDC8X9+D+m3rh9Uvr3aKoHHt7tYf4JHbWG5lXlqYBfgmarYg9UjZv+0QKg7
biNgrAPqK4GKMiA3D5b126BbsAT3Jn2AjO5PISGiK05GxOBkVAyOPtEDma/+
HY3LF8FzeAdw5ypknqOK9VQeR2QzURuONVX2UbXzYCMuZHBR28pBbTq7S/Gd
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
OBzUAZeiInG7cxRqojujoW9f1KxahvrE47BfvwLPvQqgvlbVVFuoLadqqlxu
ZbcW7UnoqTw2WdNUGTVkO/fI5irMZlTTMz5b3YwjZ29hTUIRXpy+Bn0mLkPs
mOWIHbcWfaZ+g+fnpmDYxmv44OsKHCyqRkVdIyysIao+ur5NMNb0WIdzsNYp
u1t/V7U3XneK3+Q2TTVeZ+3T4TO3Fet2DrdLGcduMonffK/Fuir/7lS3a+us
G/Lj4v1Z72J90Gi1iL+drKPS0+DfWF/lv/l+OLZqk74ZVoe99f4I7KNpomNt
HBtA+CO3NjE5aX76mq++7zvD19+cocU40cqPFpdaqxO0erf9+0b7rsN1BV/P
G6ua7pPn6rJxflVtVONVgP42EXdWHrdP+zK/DTod6pubhebaJswWHhzC1r55
7VaLgdBaWZ91K/il6Ye+1/wUsC6sp/JkdFphcdP7xkPP29wEs7UJdoceDqdB
zCPHZdUuvm4omirronlNEo7cNWP9mRq8vjYLMdO/Rcd39+G/JuzE/zF0A3rN
TcALK/Mwas8lfH3bjmK9GzfsMu57lLneXMI3XVOa/cmf/Mmf/Mmf/OmPkvjN
rue4VNxm0/RU1lA5mBY3JrghwINVhJ7KE8FSK8nFe9npXwus1CewQk/gmHBV
1FSvgN1UDtlUAefVU7DmJ0F/ZC+uvDMJ+X95Htk9eyE9PAr5HQJxLToONf1e
RNOg0bhz8ChKz5agubIa5iY9XC10A05Z0VXt1Oc0UxvVZBH+q7KN+nk8Jxb9
5rFT35vW3dr2nwmPzSX6nr4+BO1j9v0ndEXuv7JP0W8J9kX6Pt8xDf92fZV9
Nn4HPGj+YL5gLtrbxffpar9G+q05+D4eHlY+fkhr/Z/Mww/Zw0Nje/4beRBj
8X/h82QNUbI7FV9LAZeYy4jHdYtx7+zb6HB5/VJ53cHxRW12Ok7RVH31PV+N
UNMJff0ptZh/vuvtedGO0aBxx0nTbrUYA5oeIeIRUD74/pzq+H8xBxPHGuQ5
E1nHYv9UhyT2E3NNUf6Ejkqwt5hh1+KmCo4k4XNpt1hg499of34vaOBzW01m
Ot4m9GUtjqr23Dlf2lxSHEe1oqJCaKjl5eVibmyef9t33/ZzUml517QU3/HB
vnz6atmcb74f5kLxH3bBZjbDQffhtPIzs8HD/PP9W3l8Pr21m3RorK1HFd3f
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
RMfR33E4FdNqD/9KuWAUEZ9pdI5EumYicZHU80nEP/EMjj5F+Rd1xNPY1O85
bHu9P/KXfonre/fjflq6Yg9ibLfVqyu7PD6xhX30VK9m5KOncgxZXU017pRc
wFWyh5I581H03H8TB48jh/KbTeU9K6Y7sum+crhe6MJlg3jo0luUBw1cLyjg
Mq7WEW3KwU/jgnnIjmQNtSsyuz+JrN79kPHEs4h/8lnsffwpbCe72PrUM9g5
cBCKV63CZfXbk1RXSy8JHmNsEe8G/vYkqTriQ/VUKg+yRxLzkgk91WKFvakJ
5Rcu4npisqgjzvb9K4rINgtjews7zYvqhrzOVA/Qsy+I6YUi2v4AujL6iGUh
8VJIXJz6GSjguojsLIOQTveQFvckUns+I+qIfVSH76CysfWpZ7GT7CF5xgxc
2b4N94kHV30tZPG9xSZ48KjfnhQfXY94Z2j+qXbh124X8xiK+KluVVNtMeP2
mbMoSUhE8aYtOE31UHFcXxR3fVzkMZ/rws4q1HJcRM+9mMrIabLd4m69RB3J
+f85eW8ProfTqAymxj1BdWVfpPR+GifJHg4+SWWjL/NAy1dexZEJE3Fl61ZU
JSbCdOUKvT8N6vcW1Zef60tZ80396XpqFb0/7+bk4MyQIcju1w/JcT0Q36Ur
UrrSu6M73V+vJ3Cq15NURnoik94n2fwuIZyiZ3eWODtL93+W7OUs2c3ZqIej
TbvBW1+q9UmMwjHbUl5MZyqDUciO64LMXt2Q+HhPHHu8F7b26I61vXpiTb9n
sGngAGStWIEr336Lypw8oadSpUDPmN+NrTqSNva+jZ7q5B047rpdmZuK57mr
roG79A5M2Tlo/PYQro4Z/f+z9x5cdhzJmehveGdX+95q35N03jlPOruSOI7S
GD2NtJrVaFYrabWzksZbDs3QDD0JwhsakAT9DGdABxIgXAPt4AiPBrrhve8G
0N5fb8tXfS8iMqtu3dsX3QDJeTviudknTt2qe7sqMyoyMuPLyAh0/dWX0fKZ
W7DmU3+EVV/8Atb83d/hyJNP4yL3x81b4QyOyrgreCoxOO96KNCHIsliOeC9
FEYVnsp7jtin3KYxyzLKkifN1nXMU5VGrQCXMw52XEhhzaFhPNlyCrf/Ygd+
+EIbfvraZsxd1YHNZ4cwkDfpOcoXXd4s+6ZyfCi3SNOodISn8pyJMbQT/WNY
ufs4Fq/8AF994AV8/vZn8JkfPYNbfvw8PnPHS/j0HS/iP/7wWfzB95/EH3x3
Mf7j9xbj8z99EV+67zV8/t5f4nN3vonP3/UuXXsPn797JV1biT+9ZzX+hOjW
e9bg0z9djU/d9b6iO9/HLeFnpp++j88QffrO9/Cp21fgU7e9hc/8eDluvW05
/vzut/Dle9/CX9xNn+94Dbd+6yn86befxj88sBx3PduG5uMTODrs4Fo2kP5d
HbkinuA1HgMgiPIyxbFE9gHuSeaxcsdBLHmnFX9370J86XsP4Qs/mo8v3rEE
X/rps/jivS/gsz99her7CtX7VfzRXb/AH973Bm65703ccs8b+Mzty/Gle9/F
n/1sldCnfvKG8OJL968hWotb7nyHePEuPnvv+7j1Z+vwuZ+tx633r8efPkBE
x8/es4q+fw+fufNtfJZ4+rk73sCtd/wKf37Pcnz5vuX4i3t/hS/f+Qq+8N2n
8MXvPYW//MkLuGNpK5qOjKCzzwCJBYv4tKU2DkAtppqn/x8sGHh53Qd45KWV
+NH8n+Mrty/EX/70GXoPz9M7WYZb73yBePAq0S8kFsMf3vE6fv+21/H/3PYL
/P5Pfk7XX8Nn734Nn7v753T8BdGvhD4jtByfpvf6qXvewafufQe3hHSfJv58
z9v447vfIP68iz954D3iDR3vpfM7XsXnfvIi/oTa/eV7SfZuW4pbf/gkPv+j
J/Hfn1iOFQcvYO9QAv26XQ08tVEapVEapVEa5ZNT3MgzRs3rID4Dnpq/z4Cn
Sh5mqDl11rNp3mfR0aL5j6t3cPI8nOf8KZWfiuOpMqUn4F86D2vPHpgbW1Be
9CzKD8+D8dBcIjo+OAflB2ejeP8TKBCVHpgt18zHFsB6bJGiR+fT9Tn0m9ny
m/ID/D8hzY19nvm8RM9NPzEXiblzMTpnLoaZFi7E4FNP4cKSJThNdPSpJdj/
/FJc3dSGEbLdUqdPITCK8DnPDmOIHBNQ8k+5MBgz822YPmNInt7dFcMQOQ6a
zfFTywjSWRT6+pE7dRrZNeuQmbcYqcfmIfXIHKSJMo/OQe7xecjPWqBpvlxL
P/wE0g/NInocuYeIBw/PQf6ReepIVBCai9LD3L7p+DC3ig/5R+ZicvZsTMyd
h/H58zG+YAGGnnwSFxYtwunFi3BsyWIcWPYsepqbMLxnJ9KnT8LPZ8jcKpJt
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
tsC4qMV6X+Kvapl1eJ2B6mpRHa2UOvfK6nvOieWyb2YgPolFVNbsQ0pRFRJU
1aTL8UV5j5TGMQNFjLeRhpTnMxVRwWZr7xXdExqbhcIV6/0mPs+ttM8jLrky
16UervO82trLVjMlpFosNQjx1Ho+q1a0AunrdZYoZwG1OUknaY1jZjSFbRhH
BefjuAM54n2WKOdbVbhn2KZ4G8dJ54wRJfT9wnvX8iHLWHKgcpKVJOIux2lw
NNlElvxxdJepPqm1OKqlaSq+Guh1ScMw1B6GQLlY50wPWZY15gFj+IGqb1K3
e8yvYMQJVPDukGrbnUE1H5N1iL9jLJuJZVD+z1XE7ySv5VXkgvlTtlB2fJFl
qwGkNkqjNEqjNEqjfOIKz/oUpuoK3Sie6uuPbA9nyS7mOVW4Ds1zlAzdM02z
qDTNo0qC2Lr6Oby3r6zJkL2P4fw5iBNd8+PkMU4TUrg36mMins/abPORDWin
lc8Ek5UTOyLQeIXn86xZZVHhtnBcTEvvUw1zL7HNEJK4ltTFU+1q3zONI0o+
+GAq+TUURNEGw/pbMbKrybsZMpXNaKZU+x1FgZUlO5gpJ7EbgkDt1BVe0DMK
ZhFl3t/OOXYCxQuT5rwlx0XJVnmI2C8l4kWID8Tx1NAHj4njR9bKQw3N/E4/
BEV84PrwvlotB5wnQyiv7O3Q5vaUn5Xgh+xzRjwwTAMFslczuRyu9PXj6KnT
OH+5G1d6+zGeSKLIcQ0cR/ytPCFH7ffn/a6esjE4/irHmuSYm7ZEzjDFLguz
1fi177+q3Zay2fyQrJuUgThP2OGorPoFU5wPQgWNM5SVjS24siO2D/sqh/mn
JNYD145scEuTX2tXiI+V9kHTebki/zuOgRBoHgSMm5gcnbeqH0QUyYjSG1Uy
81H6BudZMzJEKfrXtO4bIS+KSl48lbOd+zGT73LuKUdhRkFs3yLpVpttK09d
D+Ik+cnC3FwxPJX974yixDBUMmDFaDo+1OkrH0lHWKq9Vhw3jPOBcSbltx6P
Lc1ogOmyPiB7nmziq0NDGJpMIFUsyTXL1XrCU/0iWl8Ifdd1TN0QOxNZYz7o
sUGND0ZFB36c40M9kn5FbTQSSk8wWWH/CDFdJQ8e/c6hzxb1EYvkSNYYYnqS
Kdrty2tzRD73EU0CdkU+mdov09aYsh3Kdox+3W2vIpVTyDfTqv12yINCBX9j
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
UhpPZT92jlPAmJnwQccH9fX9vZhdG/IlpLjdyj7Mvh9UwVDMiwoQq87ZFjYN
UyiUoSk+utrEZZ8g1hHZcg4Z3lNr5FGmuvWPDqKn/wq6e68gyTHjqE38PhSO
7CNXKGEymUb/4DCaWzdj164OnDt3CcODoyK/kss+7HskA7ZF9TENIfHd5hh6
HEubc7W5Skc4HJ/ZYpvWqehCjX+WymZkcwf+VDy1Fld0Nb5Si7nyvS2L/ayc
KRhfGC0nRBLZT9v0GGu2SC4shNGOQ3ZHQ2hQTdfTlYp8HdNA5ThjTEHikQS/
KXhqGDeokn3Glv38ejxlPgRhRMnrwPQVcazQlIGkFk+t3iM8FU+tx8sK8zmf
ks/rGLWuatNQgOppUO1+4XCfeHw/eu3ecLX+EcZM9mvWVjWeGo2FU/HUUI6m
4KqB2o+cp6sKU3VQ4PWe6+GpVVvOgxonWhXBwI127qi/MFd7JNXhol20sKrI
JX1iMbYUW5yRWNZRu+I571WeJsc2dDwn0uG8DsP88wOJD5pnn1QvjFMZSLyU
omGgUCwgm01hZLAXH2zaiCfnPYZ//NpX8D++9le497bvo2PHViTHhmGWCuLb
zdi1iq1jqqPnVUI9+BCd5ej1wNgSUpQKLqY2tYzWmX/ymMm6lPSPbdoyX+R9
O5yLsmgyFs1/FX9VjrEZxcDmtXuL3hrHWyAeGaRjD3Z1YN3aVVi8aB4WL1mA
s+dOIZNNEH9N4THjqrxHpmiaSGRzEkNlXUsr3luzjmgt3lu9GmtWvIWf3Xk7
fvitb+D7//JPePnZpXhx6TNY9swzeGXZMjRv2IhTJ08hlcqo9Uitl2Ttz3Ir
/AhihMo8w9VjSBDrgIGMu2FMbFd4x7Hjy8STkmlV7TVRy2FhJ6v0cZ4jSswv
9ke1DOKNIWMDz5cEc6d77+vYjzXr1uOtt9/BwkVLcPjESQyOjCNfspQ94ocU
KB/pIFzhUL2Y17SVz6sp42sQ++Mxidesq1VDpSPxnF1iuobrH24YC6MUkeRe
k5xwDTy1URqlURqlURrlk1Z4VDdiOzetGJ5a8aPAVCOiDrYa1Plpbayi2rX9
eD3+V1OYMdtGmOUlmFLvem6P0950Sqm2HhWqXMkh42t7czqfnbp1uJkyk73I
c+gYH2z4077DD8eH0KiLEKcqPtTzWr6R8+l48WFkogpHpnlzNpeTmAaWzq8k
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
+rMHMPeRx/ESPePqlWtIpbJkN5YwMZHG2jVNeHHZq/jB93+Cb33je3jlhdew
tX2b+KDaZbKFxtPoPn8FO7buQktTq+DNLy19EXt27cXBA4ewa8ce3E/3f/XV
X2D16rXYtm07SuUyctS2yVQKV3uvYX1rM5554Xnc89D9+Mldt9PznsOqd1fg
/JmzmBgagUntYrtGkhFznDTTpGeT7Vbm+GWca8SeKteeJ/hhcmwC1y51Y92q
9/H8k09h4ew5mPPY41i6aDE2rF6Dc2TH8TP4nv1Xr2LPzl147613iHc/xj/8
w//AN7/5Hdx2252YP28xVry9ChfP9xCP+nH0yAm8sOwVPHjfQ7j/ngexaN4S
fLBpO0YHxwRf7qPfLFmwGF/9yt/gj//TLfi//sPv4I//8BZ865vfxj333Idn
li7FxcuXcKm7WzDU3R378MaKd/Am0d4DHeg8ehgbmzfi1ZdewKK58/Dsk08T
j7dicnQEpXyR5CuLqz1XiN9v47EHH8ZdP7kDt//wx5j72GNoWd+EXR/swLmT
p2ESr4vEh3wqg1wyRTLuCBbNsf4yacZ8t+GdX72BhXPm4dEHqC1334OHSc7a
N7bgxKEjGOIcWsTnU+fOY9vOPXjznffw7e98H7/3e7+Pf/tv/g/89r//Hdz2
g9upjkvw/NMv4L03VxI/J3CF+HT6yCkc2HkAb/xiOZpWraXPe3Hu1Fnksypu
K8c+5XULjk3B+1y379qFVWtW46nnl+KuB36G7/7kh/jRHbfjsVmPo33DRgyQ
bKbHJmFw/FmOR1EsIZdK0/OGSSbb8c4bb+BXr/0cb77+Sxzev1/qf5RkcC/x
Yt7jszDroYfw1PwFeP2ll9FN7SnQ//q2iufqcE4Z4pNP9YHFAXC9KTJ1Q/6o
QUxP3ejaY6wENf9S61Z4Y2PAdGPC1DHgZs9nHDNq+XA9mgFPnW7Y+TjGvinn
NzJmxCta054Q56mtc3XcVV/WshWFeUErf16tQNRiqbFBlFPt8D5q9ksN4w2E
+02qZHBGPLX6EaZgqj7KMTKuM29Uc0c1b/Q0dioxSGK353jbZY4dw3ggx+YI
NF98lXOxTPpolPdzZHNIs698oYjRRBpJ6o+c14nzw0t8GMarOC+TVUQmOYHz
p0/iB9/9BunYL+P73/6faGt+C8P9p0nfDcE2J+kJWdJz4ygXh1EsDNJxBKMj
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
geFBmFBO2LAM2+kaq1foQEdbB5vXb4bVVSs42TnB1ckVLjedBc9lYXWNPq2F
n+nL2FjksQ9lh4Lf4rYzB9ZK+KmNPju6Ff5QCu6tEVl5eTh49Ah27NuLXfv3
id/NrS1JZtb0aYWrdO0LhOUvmZniirU5bG86ID4tBWWE/2Qc+wwKLoH3o0dG
RuHePU8cOXIMCxctEZzqsWMnceWKhYjnUMe5QmjcBW8wwO+fBtDV3ye+4/gL
l01NsInku0RjmcB2PKacq0zMa2p0fW0D4fh0PCEctlpzFbSWasLj9l2kJKSg
mnAmX7dr0O+rk2MHdrSLOLMRhBlZLumEJRPpmtFxcQh9+lTIbObcufhxwgRM
mjJFxOqtqCO8T2PdSDj8uv0N7Nc/hJVr1wgeOSYxHo2tEnTSvO3q57zTvUK+
0k45pO2taOvqQGdPL312iWuUV1UhlLAm8//TZ8zCvAWLEBIahqrqOuE/1d3d
K56Xgvx8xERH44HHffztr3/FCsLJri6uSEtJhaRZivqaBgT4BcLGxpYwqxYW
kWzDwwnjV9WirbUdvb0KxrKP839Tnzknzao1Opg4ZTK+G/MDDh7RR3JaGmoJ
/8oIlyemJkNHdw1GfT8Kn4/8Ap4017PzciFplQl+vJWukZL+GnrbtojYGrtp
XrCvMnPvnbw/efBdX09/n8iz3cl8alenyLv9Pn39UTX4K+hR1fKvtp3D2oyP
dFuV9htOfsNe5ANE5G9lDz82xm8V1Xa9E491GN7y1y5DO65ccg2oHvLunqO3
yscWKoPUsPLfSvuqyqfye4g+0iH8yStFzrXO+dj5U3ku60Xeq3/T6SbOnzuF
0ycMYGpshIbacnTKWzDQI8dAtxxyWSPKinKRnBCN6JcvUFiYh+qaKvFOra65
BUUVVYiMT4SW7gaycQuxUlcPDz0DUVLUiKbGLjTWd6G4sA4H953ESq2NWKuz
FQlxWcKfUtLUitrqBri53MOOLfuwcrku1bVITcpBcz3HL++BtF4ChxvOOHH0
HA7tPYqzJy4g2P8JWhqa0dnWifbWDjTRMVXlDZBLSU+0U1/lHairrYYd6ZWz
Z07jxImjeOj9AMXFBSJGZ3u7HO1yOSrInvN707y8fBG3k3lS3qdeTzaf4+Sc
OnkakyZOwkSqwcFPRGxQjh/TT+uSHuYWJVI8e/oMt2464ZiBAb766kuynbcQ
+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
BO/FGIb5Ko79df78eYEXGHswnuD+MkfHGIfvxdwjH6vEBNyXmJgY3L59W+AJ
5j6//fZbwX0xPmOswTww95s5Ue4n/4/5LOYXmRdVcn3K+yn2YVYLDpIxD2M8
7sOIESOETNlPhNvCGIcxk4ODg5A741E+l8di6Ngox1CJ87jNjHO4/4zP2PeE
fVT/8Ic/COzLv/M9GLcx1mZfHcZnzF8yLuT2Mp/IMuex4RxKjLmUfLlybJlT
ZdkyV8s8NPedsR5jXyWvyG1lDpF5dJYfY3fGy4y7uT98Hf6duXP2o2J+meXL
92acyJiZx4Hlxvdl/pHbyXiT5cacKeNz5gV4rjE+5DFnXpbnBsuUx5w5WOZJ
uV1cmVdm3Msy4PYzr8pzksdNOQY8J7ntzO0P5VMZJ3ObWXac85j7xX63zJPy
/Vl+3G+eqzwHGKMyRuf5vnXrVnEsy4jHkq/Hc/7hw4di/jNHy7wr3/v/tnc3
t5Y0RR7GbUB8SCA2YALOYAASLoAbsENixQ4bsGeW48BII0a/+xKjmFDV7UbM
hrefRzq63edU5UdkVWbFPyOz+NOuddqLOvP3zQk4zr+1Bf+aFiE9Pjx99xe/
+MXHR73ZQn35vnx67aOd1JP96CF0EHm4Z0YP2vd9RHzO7BPiPhvt846hc5y+
TL9nPHOvz5yafswYqq83BrofHacf1y/rk41VE6dpDNPf6IPpZsZJc1L6H32K
MfQPf/jDR19o7NW36D9Hn9Vv0PBoYfow+qW5zDmfLqvPVx59sHNHk/O7MU/6
8jVO2cuE9qncyqU/Nheojxq7OF+/qG/67W9/+zHWzvyScunTrDc3ruqD9VH6
MBrpjHvGAWXXL9N0jd0//elPP2wnT/n/774t//1dnLDvHGdspvnRUyddZdOn
K5d5OPq2vpqWS5vUB7OlNmBzz0n+mi/TTtrFWGiO73e/+91H/6zvnnlJuiR7
sL++1xiorzamjGauHOY/7UvkGBq5+siHzXxm7PX8ZUwxfhkrtblrZHR2NjCP
bOzyPCNfzxqemb57N+F/fXyk6dlFu3mWoZUaFx3Ddv6aX6TNGmfZwzHqxa4+
2oxdPMcYU375y19+jE3GGmWPiIiIiPgWGD/Pcza/ZXSViYvw3Mxv8JzOh/r9
73//4aPRnsZHoIfRZvgY8+4f/qBndHodX0E8inNoeuJGabGe9f/0pz99+GK0
H74N/4IWKfbEnl10Qc/1tDh+FK3Vv8WMiq2h2dJ4fS8NvgCfjz8nfpaWKh3l
dsx//GMdvnp57qef8vHEDEmT5qWufCn+pH/TbGmc4oCkRb/961//+qHl+d25
9DU+G5/Mvpx0QhoW34uvwx+auB/n8WXEI9I82WZ8OemIH2Rr/hO9TDknRlC7
TKzO+DY+/j+xUo5ne3qsuvGJ6G3s7i8tm321jXbjM8uH78fGtFS6JR+RpirW
iX/ID3Ps3/72tw9/WAyociszP1EMlHT4sOrLNmzF9vyuv/zlLx9twA+jcSoj
W9En6QI+fG1ldiwfX57qO34sf5sP6LrTLvRufqUy8RH9pmx8Sdel2E35KRO/
VDwPDVO9aIq0hLG9+E5xvXRm1wXt1DU5cWbO5y/SNmnoyqoNtTMbqZNrz/Up
fTam7dIGaA/+z//mA8+6StoE7VidrUt1Pbve6R3KQFumabOlOrLJxAe5lp3P
v6bD/+pXv/q4v9hg4nyViT/tWmATZeEf0w/+/Oc/f7S3OqnbjbG7mlBEPDO6
4Y4DnA985zdjgXFF30oPNZbSNPVF+gf6pHGR5qpvNh80MfP6QP2YPsx8jXvZ
vJF+0znmC43B+gSanDHL2ELv0wf4fdYn/PGPf/zoD0a7FMs/c0L6FVonfVP/
oM9SZunq4/V31mQYJ/Qz/q+vcZ7+1vjmO+O4cZjOZ27S98Zqmqb+Tpr6QmO+
cYMOaCygFdID9VmzBn3W7iu7vpEG/etf//rvP/7xjz/+bTyVp75en81WtNeJ
3dcvWitAQzYfK+9ZY2JMkzfN0PhIH/zNb37z0RdrJ3GeNE/jFXuwg3OtDZg4
YWOOZwPPOrMGhyZpvDPe0rYdp421n/bU5yqrcd446DhjKduqp/Rprz7GPt8b
94wl5unot2zqWLZ3DP3XOKFt1dVYIO1pP9cA/di4wmY+xlrPO8rj+lJ2mjMb
eGYzLkpLGyqTvOj77O35xTw5XZudxj7a6mn+NyIiIiLi+8a8N2P8wPluNCTP
4OI1rO3jD3jmp9HxZ2iJnqPFi3iO5hvNfpb8Cb6YZ3fP5vRPvp3YnHmfrLhS
ftxoobOGnn/Dt+TT0OM88/MdaFx8JD4CHYn2RbPj/zmf9uUv/4wPxB9yHD/H
+fzN8c9oj85TDvolfY4Gy5flf/JN+B70M3GDfnMcX8P3yq5udFi+EG2OXdiI
LstXkcasGRyfmj/Fz+ITS5NtrKuj5fm3MvuNzsYWtN/RukYz9XfabeJxtgZO
R2Mr9VB/Phi7sz8tjf458aJ8Oj4lX5lvR4Omp/LFaHt8eu2pLHw3fjZfWp2V
m67u/7Nu3nHsy0dzLHuqF+1zjtHmYnnYla+mbK4PZdMO2l++o2d+t+/rf374
/X5Tfv4vTVgb8HX5kXxMv7kmHcfP52dOOnxBsVfK4Tg+sPLL34fOz9+m8Sun
es+6y4kvo5XTS7UdPZWeq6zqJC866KTtemBz6bKrcrqf3Cd8fvor39Q5NBHl
1l6ufdc43WNrIRMD61zXsrrQdrUFndRHPnQLGqx7hf1dj+zs3lVf9616Krvr
0TU6ManpqRH/HFtPnf54Ppj5rtk3xL3nvqV7mQehW5nvoq/qU2fdOU3VWKaf
cJ6+Qt+lr7A2wPoG8fViMI1l5kb0W8Y683J0PHotLU6fpj/wMY6Nnipfuqj+
X5+ij9Ofyds4ZO5Qv0U/M7djHsZc1awP0AfN+gZ6mmONI8rjr3P0/fppGql+
2V/9pbopMw1SevQ5sY7WDcx+QvTEmU9TdmOS8UTdfvKTn3xomTP3N/NV9Eq2
kqe+kY3Yyn4n+tbZY2jmX41T2kSa9FQ2MT9KazYue17RH6u7/tJYRHukGevn
rXeY9frqb36N/sjm6qQNZv7Zs4PxduYolUXZ5xlCvdlf2myjnGMf47g+no5s
7KQtKzvbuD6MvdrfPLS82EnZtaX289fzjue10cKVk81o/drD/43Nyj1rUIzN
vtPW0jceeb5RFu1lDYz5RW2tDZTZ/dAYEhERERHfIrMPJn+DLuY5eTRMsYZ0
L2u5PavTlOg+jhO/MOvG+Ar8Gr4A/4tO5hmf/2Hd2uznyZ+ZdyV5Budn8EP4
k3wfeip/bGIxPM/zCfgS8qUXyUN5J96WX8G3oyOJh6Fv0Zf4HeJW+A7gc/EN
+Kj8GL6aNMX38DHokvxJcbRswHfh4ziPvyhvMTViYMSf+EtbpN+q8+wxML4F
/5rfoxx+o2myBV+ELzb6MC2VPq2cW+ca+8y60qd12dqOLWlk6jC6Mp3NunNt
yJ8aP0pa/Gi+Kq2QL6Y8fHTlof3Ou8CUmf9H95Oea4DPJt0dK+MacDyfkH9F
m+WPaZPxx2jkysJm0pCWa0u6dFFtMrGuo2m6xuRDf+Rf8s39+/rvE9vJ/1MO
1yLb0zO0v3prV/nQNeSpHdWZZkuHpQ+w5dh+9hHm64px5Vu7Xlyr6qhO6uaa
8L06u098aO7uFXnyp5VJWqOPs73fxN8qg4/r3v/9NvFpo61PHcR/udboo/QT
H/maA5DerP9077oulUPbsjtNg71m78TRUGf9cr5wxNex9VRsPfXuB4BZ76FP
oFmJN/zhD3/49x/84AcfcZS0N30IPXHi2fVHxgT9m/vX+vWf/exnH3sG6EPN
8+l/jKni2GmyYmDNE+lPJuZV/0k7tN6CHiYm05ijDzMujZ6qb6C5GWf1dT50
P+OauVWarr5DuYxp+jRzWvrP3ffow9RFHsZxY4xy0Nx89JvGBc8G4mntWSLm
UfmNxbN/uLrR//TX6kULto+Q+ulj2cRzgTlMuuC8o958Fk3QsXRrzyHKJ1/j
gjFW2sYb6bCHY2mEP/rRjz5sLA9jhOcJY5xzfGi9xkgauLKbP/OsoJzawzhh
Ls354oX108Z2zxWzj4xxmG1ppXRX/T77KJ/2pjsrm/7bfBiNl54qLc81xjp1
VRfpGTO1r/FRf09v1tcb833Ppv4aj6Xt+tL/O1+exjPzlLRnccJsN5q8snvW
ohertzYQI/3zn//84/mHxkpPNi7teeCIiIiIiO8rs9fY+Hx7raLf5n3zntk9
3/NV6ImzHk2snWf4eW/E7NM1a9PH76DZzUd69KTZu3Xe9zB7gfLR+Hby8lf6
nvfperNOznf8LH/5m7OOf/Yqdby8nM9nmD3Eto/r2Nl3VJ7KxTec/MaPVdfx
OeZdQf7tOOmPbyi/scloxPMeLJ+p37x/2PkTSzNrH303drn7L4xtr9Z146Fm
P1U2Vnbpb9ury9hr9kOb93SN3Z1Hl1aWsZfjZq25GBvXBN/Qh638PuWbuiuD
fLXZ+HzaUBnYavYJ9PFv+bLd+LrzfjRpstm8M0M92Eq6ExPtPDaUrjqr0+w7
ODac2Gu/qZ/j1IVO7iPtebfK9QmVQZkcM7ba9WJ3ZVAHNlSnuV8mzmr2Fdzv
G5HmaKTuMX9dd8qnbrPHw+wjOO+wVk62dfx8tIm85p5gj7mGHTv37bx3a67L
XceZm4iId2aMu+90vO92c5/OGOB3fcS8t87ch/kp+iF9lU5Fc/SbfmPereS+
NhdDBzM/Ij6Rtmj+a2Iu6WH6G/c+PY/2SuMyp+jfjjFXREczZ0jvpIvSM0db
0z/MmEY7pM3SKemiNDVaHK3Ub7P2Qhn1xcqrDzWP5jx5O4eeutcLzHnGkZkj
o9Gqkw8tkFZIc9Yf6qv8VSfzj9atqLf9th1rTtfxNGB5qwc70Bqly76On33B
2UH59cfzDKBM7Gf+UB7StS+BetO15W3d/OxnOmOhfOiV6mhui24sDZqiWFba
Lb3UMRPfOu9bdP3o92nA5hfZyDE06dm7VvrKa82BOV96K+3ZdcI+2tX1NO/N
mvdcmUu0/oAmzjZ0cHWnq7qOpDv76cz6CzopGyoDe9GotQc7qJc5cGVVN3ZV
FsdYk+MY14lriW3380tERERExPcV/t3Wmu4z8KxT5G9MjNzE2uzP3stzYt1G
qx2taY6d91/NuvXRuMYPHd+TzjRr8/f5W3sdffKmKW++z8SSPNVr70O6059y
zLsyRtMbTVGZxn+Z9wvNZ5dv4mUd4zPlGr1657nX8N/9Uceu89ma9/5+Pvud
0FsbvDaafMb+U+dp43vM/oyuPJ8bM7s1+q2z3++nvfl2o8fO7/O+6NEsdv5P
19/YenTXaaM3W861feuxy3ffz7av8bkOpu7jm+/3XG/bj32mDrudJ73RgCfd
e53ua2Teeb2vI+09ec11Pfv3Ttz52Gm05ukH5p4tPjXiy8z9ePuI3edhjxFz
z85ac3H19DIxibQssYgTV2/Mnb6O9kjjpEmKf6SViQV03sQz0hHN87jH6XG0
O8eLOaRv0sJmbbg8xEbOntbzPirzQ/RYf+c9kbRdaVifIXZVOjS70eJmT2fl
dd7sTeBYdVNO9fLdrBWAvo6uR5+jqaqHfKZ+vmMHaSqHOvrNug7HTtpznnKy
E41S+exhQAedte60TTG0sz/ptMf0efIx10QTlL/z1IEd2XPeYzXjw7wLij7J
NrMvAu1XXZVlNGm2nnUPyjd66mjR2sO1QNNUD7afOU75K5M6ymPif31H45w5
uhlbpTv7EfjdOT7sKQ5Z2dR1xiXXi3FjdHBrIsbG7DD7d7u+1Intxu60X/+2
Lw1t3NyqOrZnTERERER8C1xN7uqO4zOOBrPfW7P37hydcP6/f3/Spa7+t3XH
rZ8+aXKT19XVtk6F0ZJ8Ljudqef+bL9p9DrpTnzlxB5tbU65rw+xy3fX5999
a3eb7Ha5ZbvvMb6fKfuUf//2lN7Va/e7JLZ++KSXbk18zr1tfPcUvLrytPuc
O/afa2LvS7jT3GXYtp42v3vM7vPHzvf6urYcO0x+9xratrn66o5Bvevp93vF
dll2vPbWb+89uq+Re73tcu/6zv/3dbJtsa+pfOGIz9ljHe6YNP3SzGHsGMKZ
+6Bv0rHEh9IL6VE0PXrX7Pcye43Q1uh6NDofOptz6Fg0MhrcaLA0u3l3kONG
35v9bmheszZgtLt57/zMLc077R2nfHRCcbJ0xdlbevqgPUfjPOWfNS3OVV55
O2aYd9yzwRzn78RA0hhnLYW6Tzl8r97bbuooHeWdNSH+by3/vIuJnZzDvlvT
nH5v9smZd2lJ27/HbrTgPeZMO8+7oJTLeWw76xbUb2J+lV/5JsZ171PvnFkn
4VjlH1v6TT2mveXBnq4Vae75tHnW0X6z/kK5fKY+yjbz1NNmsw5promxq3ym
TdiAffwVq6scY/vRqOWpjr2PKiIiIiK+RZ725Hw7bq9D3/rP0++faYbjv00s
6F0/uWPpttazdbPLXnf5tH55a3pz/BNXY+Xf8JO2djp+9N7v9M1mX8ObtnnL
tGOhrq68dbTx/SZOcaf5pKHfskxc417Detka3ZMtd0zttNn8f+KL97VzddFr
F1y9fJfhKf97Pe5r5NrqttXbOvhJ0zl7/eT+ffIYv/3OTTzZcq71/f+nev2z
PMXdTjmvfSPinemDh+kj9jwT9n017ybc81VPY9NbH7Hz3OPnnn/8V9dZT9/4
WT33nM6X+vvd5+/x5q2es7eL8XTqNJrfneO683S7PLu/3/Ofuz+e+u0xda9L
UY5t7zvfhj2+Po0BT/N4twzDrLt5mpd9mxue38eW1zZT79H15/vZk0eZffa4
eG2y94Ly3bTNnjuPiIiIiPjWuP7dWzwknmIJdzpb+/rM18J9jt/5Xvb3VwO7
ZR9/ZHyved7fvsKUd2uQk/ZbGYYbx7t1xqfzrk95/ecd//nG1nPHxjtW9Evc
thiN9M3H3LGfb3W677S+5b02++x6uLGgb+Xe3991/Ld9J9+rr+5jnHfjjXcd
blzvfD/pTnzT1ge2zvBk20ljX887DnfO2dfyzDco67WD73dM92Wu6e2P72t1
fpv7etK479CJiGee5iHmvtt9/syl7Fj4J+44tMe86a9ujP3tI9/WZswYvvVX
zN41+pPbf1+Nb+trT3bYx+9jlHv2BNj7n0xfu+ft7jzfjsW/85f7+eTGaT6t
D3gbh+bY+wx07bfZOiNumXds8lP/vO215/WmDncdzJ0PnPa5c6i3DHc/ninr
jGejWWuj0WQ/m7+86yZ2ev+qnh8RERER8e/CaCtPz+ZP68tHd7nPzFvrw/Vd
7rP2xKPSPZ/0t7dYue2jPJ33pqdef2rvH7Dfy/xZfOOtx/jL2+95ikXZeT7p
qRPfuONR7zG7bDfO50sxOlcXv3rq6JHbT9t7Bbzpmbssbz7lLd+Tr3XrfT/T
rtdv3nV60lN3bNKTLz36xtM+omOjJz112vjqqbusOzbtaX3/TmvPRew05p7a
+7Dedhj/d/vr+zq9MVpveureg3hsl54a8WXe9NSJHZ15Fuw4zaf5sD1ft/uV
6QtmrcbuR+54eeP7J435PO2jPXMqO+03DW/2tr7a4R779vHT346eaj34xPHe
fVHe4ud3HjPOjfZ7x7U7pu8+ec/B3vFol+P262867K3n3Ufo7pH+1N67fx6b
XM392vbGj97xdddva+fbDns8nfFMu/o7ee5nhz2GPP2enhoRERER3xpPutRT
jMY8t7/pqXc/xnvuXbO834tz07qxo9uH2fF8n+mpYleunrq14ad18RNz+LQP
6tWWt062faUb1/eZr3XzHB/zSXPdfuH1t7cvuveEm/Z92oth66lXs9zxUG97
NVwfePuaT7bbx1/e9NSp492bdnTQ3f63DPPd3kvgyee86/339brjpK5vPX7q
9R93nnPc1Z532+/rZV+rWxf4LNbsrvXd9t5p770QtjY9Wsq9jv8/9xiI+D7z
pqe6h2bPzekjnubDNlfn3HlsPevOy+w+4m3txR37Jo977tMYcPdnMV/5FOu4
+887j+e8mUe9czy7f3rTU7etp3++2uVdi7/HzrHL9LO3zebYXaZbt1uuSWt+
v/r53ZP7sst39+V5mseb8XA/u+znkj1Gbq127/k6dtjj9W7vPc9623TPN9/f
3zTniIiIiIjvK1tnxF1Pvj+j7bytbd9cDXCve7tcP3TvXXbfgeXfTzE6k87W
FXe9tqY3x+3fR++cNY9PftON/3mKkZ2y+fukK152nnPe1qW3Ld/8lL132uyf
sP27vZ/C1GXHmVzkM7711nevr7TjWraG+8SNbdlc214fk13Ua/vB827mfd1e
TXfHcz3p0LfOo4FMOXe9nur2pCNPnk/X0J4fmGP3NTR1u37tG46X1/bfx56T
9sSivd2vc+xu490mn+1DERHPeurocmIxvzRe7jma+z7Gr9WmjJezf87e23Ly
fYsdnPF2+rpd/unH9pyK7/Wn6nXXM9yx4TMdEnuN+eS95/WeeOobJ6/Z6/Qt
tpVd9l5Fe03GPm7qfdfaz3l3LNzPHRN7+xR7vM99++1Jq77s/QHexvA9juxx
bdLfNp+x9q2so6V+VvaneeCIiIiIiO87N25zv/dpmJiIu1Zxay433m0/Vz9p
kffZfMemPOm5N75ux17sNYs7BmX7c0/7nO0857u75u9+htG+tk48dtpxfW/7
UI6tnTt6547TvHa7ccI3NmXHruzfdnzqjUcZP3jXdbfB9hPvuvcn21wb3fpe
+9/43lu+rd/vfSSeNNw5ftK8drplGa1x12f7hNvHnP9fO0xZxkajS2w9fLfN
/PvaeJd/9hWc479k2x379HZv7jx2vXeb7Htpt296asQzcz/v/+8+4sbuz+9b
57zceMN7P09/t/vNGfum/7v9AfZYd+eI7jPAnsvanzlmzzk9xTrO+oE9btHw
dt53Dfo+72nPgaexcP9+43nHRlvju+sBdtzlHn+2nW4Zdjozd7btd/Pc5d3j
7dj67kc/dt/X1N4HYac/6d695KW3x5eZl75r/qceez7vTTPdY93TmLDPTVON
iIiIiG+Fq6uMnnpjVcZ/eNJ5rp5630974xuf3lWxfZT7bH711O3XvempNz7m
KX7xxkxefenNh9v12nuOPWl4b3GZNy7oyRf5Wj31lumu0du+1uXqqU9rz5/W
H14f/0t66tN195lPPr7p3ld0fpv2vHWast94y1vvz/zYG6t083zSlcdGVzPY
526f9d5L8/3sYbht+CU9dceA3xjcp7x3va+m8qSnfm17RnxrPOmpt698+v0z
PfWzMWD3K7vfvGPEU3+8x9d779/x9o4zd9zdY+pbrOj0MZOOuNmd99hp12nO
+0xP/SyO/vbzT33sju28c0k7zR3z/5ktZ+3DjgPefElPnb2x7/zbtufVr++z
1Z2Dk96+ziYud9t768hfo6duu7zNsaWnRkRERMS3xn3+f9Kptqa5fZ/tc+30
rm9zn6+f1o599qz+ltf1s67fc/XR60NuX/Hy5KM++Qmfabif1Wv7lG++9c37
+rtvGuk99jM/5/qoU9bdzjf2cZdt+5FPmvMb2597i5+d36+mt9tzszX3L/l0
d2/eHY/6xPjCT/FRk+/T2vs3nfyp/G9zEZ/Z9monT/fuk+b8pku8tW9E/F/u
vbX7z6d4Sfyz66Lv/f80//F0j342Dn1Jy30ab57m/Gau8Gn8vHG5T/uK7j5/
8t9r1N/q/1m/tdka47bLk356n2H2eU+2nM/T3PBTO8wx9/lk98dvvM1dD/ea
mtjUyXP2fLn2vhr91+ipn82xpadGRERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERExL8j/wMYGTW5
     "], {{0, 492}, {1364, 0}}, {
     0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{858.08203125, Automatic},
   ImageSizeRaw->{1364, 492},
   PlotRange->{{0, 1364}, {0, 492}}]], "Input",ImageCache->GraphicsData[
  "CompressedBitmap", "\<\
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
EypqGxFNODh2Og89+/TDH26+Db/49Q14/KlnMGfeVzgghmX3nv3qorjGv2jx
EhRfuKCVE1o/LRHjjp07MEusALd59+8/AO+8M1JYs0FTm/yeBYnc1MeC3B6C
9ljyTjfIokXWOnMP2berV2uJPHdMXL6EdY1beGiWq0zpjh1MFasUXXOZB1O3
Aje/19qV5fRicPq968Qo8+lzgfd2MLXu6ZRf+JTWIrMm67us5qjPXWGOuwFS
MAx0fD2w/VPGu6nm+ucC7zUVodc4gSouF9M67mpzc6/5P3nMgF7rarbjpHGB
fQmJVzUnJ80t0+iS5gyEuZSJSVbCM7wKN8UQFzCWdyIfUyZNQ5s778W//Oxf
cMdtf0XHDh3FXs9FRWklmkJh5OUXihLv0B0Cw997B0PffxcrN67HwZPHkYon
tPkmUaC14oYnffqJ2PY30aNbVwknP1Q7zAXi+rpaLF+2DH379MG//dPP8F8/
/088/fjjmPiRSJ0oXT/xB91f64IlC7lhsgxVlbVY9vUK9JaQsHvXXpg3az5q
5VxFSSU2rNmEzz/9Ah+P/hib1m/GujUbMHrUGDEGc3Dy1GnUSn9F585h5tzZ
6Dd0EEaMHCZ+czlOiaJHJTYBS8/FYKX4RD7RIEIEspHVgJa43ioBvd8J4Jwp
MdQHI0big+EjsGrpMtRKHFUr2rRUaHzlpVfxGEF5l+6YNPFL5OYUYv++Qxgx
7F283asv5mXPR3V5DS4I2O36WlcZ76/wW9Hobt3ewJiPxuLAoYPYLIZxqvjL
2fPnYr0EAdOmfImBffpijsSt1UJDZWm5+KZlcq4fer3+Bob274+Fc+firMCe
cIgLKPUKFbhAsX/3Hr1v5JBheLt7D4wf85GA/L0oLrmoQH7W7Pli0O7Fj3/0
DxJqP4Jxo8djftYC5Bw9g+3rt2HGF9OweM4C7Nu5R3EBiyCaJLRnrmbeoq8w
cMRwvPJ6Z10827xuPc5JIBLjg8LkmmIBxAvmzMHYUaOwSOjbK4B6swDqEYMG
Y7CMZ6XM78Vz54VWifv4UKJIVISR5YSWqwiWv4YciAE9Xfx/cbkmFdJK851p
kBvUyVaBc5fq9JX0PHDOcY2HV07iJWS+dwWN9rtNr2qYbk2Dl7ftpO2Wp6lw
Aot++rC4tC/30j6ZWtv2Y6349v47Hluu4PTJ5ah569VZeqRnmJqVq9JDcNIx
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
M8wg0ygpkYdH9u3Fj0uXYt3Dj2Fl47uwvNHtWH6L0NboDqxpKLQKTT/IDK+p
cyvWyxhxnHS86t5uhvBaHVJHIod4HR9LZmLJrU0wr3ETTGtyNybceQ9GP/R3
fN+2PTaPGImTa9ciOHnCWDCMJOCutRwp9Q3bphcmNwGxY0U4KHba9o8/xVph
ntVCps42ybuFw3mHDOdtOpwrhVS+rmlwmw6jDCA21LtNpDdp/R3W1W2MPJmG
hfK7hXfeh9n33o/R9wozPvCgDF9P7J85CxW0CWX46HtmUFVKjqQ2avFdoUkD
r/E4jsii2L1kCTa26yi0NMGKhjJ8MmSkb/XNQpsskNUyXcKK2eRFWY5rLSda
0nQU+c/tolNzZFfLSC+pI0x9231YcvefMfXu+zDi7nsx7olm2DBkMA7MmS1C
4KS6kRm5awK2rc4QhlZz9VSjSRYX48CmLdghWuqGO+7HeuG81XLvH+TeaxrI
Gl1/cxMhaZ1Qul5GcZ2cXnfT7adjzU2Nsy6Xf2/jO6yWwfxBjiXylbzb7sX8
u+7HOKFq5L0PYParnbFz9CjEaEyn4qrx+4IgJrmLGUpM2TcuEBc9eKKgANtE
nOU/8yLy5ZaGKnlyYaS1nDQZvA2N7sR6maS1N99enYTIDJIUR5J9L3NCUs/C
Uhn3XOGLRcIf04WsMffci9EPP4JVn32Gg7NmIX30CO37dCLrOvXHO1GiwRlh
GIV0pmLlKD50EAULFmBdy5bIvaMJFt58C5Y2kvsKNKyQ+y+Xpbxa+GyDjNqm
Brdjk/D9Jpm4TXXN6wY9bo/WBZc0J31NA6JUPSxvfBNy77wNE+5ojMG3Ncbw
5s2wrF8/HJAhCSmvfYWVbFYIzWpk2w4FRn+Iy3IpEynN1OF167H/vXex9pG/
Y2rjhhh/z11Y8trr2D91Giq279bdLoJRjP2wGLmkkt3suHO3nflf1Igpsugv
2FPmYfHuUgzM2YXnvsnBy4MWYvLaAhyJe7o1ZPYqxFpKlCmycInuLS7H9NXb
0eGT0bjvlb5o/EI/3PbK12gor/U7fY5bnu2N+7oNxt1dR+CuV8bi7s7f4e4u
E9GkyyTc3mUybn11Em59ZZKofvJOzOLGL0/ErS+NQ+PnR+HeV0bhwS6j8cBL
Q3Bn+974Z9dvMWzhbqw+qAXKTLQQc9NsGK1vd5cTdgtlz4kyfDZ2Nv7ZuRfu
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
C/mYP3obDiwTg23xBRyYfx1H5jWiYH4zCha34pD8fmC+HAvlWFqLI6trsHD0
DvTv8hrG9J2BhiuNJhicMv2wPS9bw0exnFBees81NXF3YJ2HRm59SdsK64Mq
hNG6Ijm/6Hwxdc2rpeVHZH9euoLUts2oHDgAb//oZ9jw+W9i91d+hLJf/RHX
R42Fd2AXcPmE8emlIob8NmFonqgBUfiRC4P6KVmOG2oaUXXyAgYt3ohf9H0N
d3cejm8+/Tru77cc47edwd76FCplp1Z7hvE2AUVhrynnC3LtFuNm4XdoloqY
xSIkE76x7jSNJi7PFUurdsAFwnrhqFhaNS212FH8DhZvXY6JiyZj9NyxGD1v
HMbNH49pK2diZ6lYk7HrqIvX4uDRA1i5eTkWr12I3KUzMXH2eAwdPxj5y/Kw
v2ifDI3sbrG02AkgmUw4x34bZv/3BQvuRiyTgf54c6CqOuRqp16+K3jwLpXT
nBd2zoRMrVB9mp/J6ehMLBu1csW8jPFcFdWnsLoFgxa+g7+OWILvPTse/+uZ
iXig71xMflvU0BONOB03zkSer+4t3RKySGgOM5GY/G2KUPqu8aV2gods3fEN
kzw6hiWebXlxS3sp2E7ppMHUqY0wbZNG2IbPNzDMPMd8flO7MJjXoT08mbHx
lE65xVXPeqKZxBqM6R+RBX/5PNJHDqE+Px+V9/8C+7/yNaz5xKex6s6v4uKA
QUjv3AL/dAX8pqtIMkQOXiulG0M3pOl6nlCT2GpXbOGcMZpDzu12JFyHYdrd
IeewXQBZ06UtlHUMR2ODkpeQiRMkqsrPTiHoCY2ZcetmPZXasdRmXLgSEb7n
0hRtseitASpl0yhD6ThwWpRdn3ERZYmMxSA+kOfaiXhszliHgQP64dlnnsKs
GdOxYN58LRVau+4trNuwCYuWr8b8pSsxfspMPPFcDzzcpTsmbq76vwdABQ14
VgDoYQtAVwSAEr7tG6zt5EJdZOBy5H24hika1iWEdApqL1xhi1EqOA5fDNQB
9x/XQkKEcZxCOMGeORl178RF444m2H6EgZAmhZuUautpZ6bBZ6pedQLTX12K
Ic/kYe6r27B74SXsmHMe+/PqUDQnhuJ5cTlSKJyXQMECORbGULA0gtI3WrFk
7F4MemY6JvSfi8YrDAZwP6W1N7Lv+ianNWk+oWl2GYc24ZLyENrQBvYDj61n
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
64hIM11CzSKZidhyyOcb5d/70Bghf7YsmIYWNDZFEEvE5XubBblXonefl8S+
6yGaVH+17UYMfRXDB4zAsD6jMeqV1zH8xal49F6x/Z7Iw9IxB3B4RQP2LaxB
4dyoAFQKh6fFxZ7LoDwfKJmdRsGsBArmRbF3YT3mDd+FAc9Nw5iBAlo1BrTS
6kW1rS8ytnJMVRELF2kTf0n5KeV/S2kn+IjxZjIuxXYYWm5IzUt0XybOMdTS
2owzq1di5+BBWP/7h1Dwpz+hTrS/1oJCsecEcGQMRO82kUqyHVOqeL5mi3lO
PBnfkvUrqXZq0y595ZttVjEVR5ypV6Zr6ntB1qeDVHDqy8yiZ780xpMMZAl0
irHnyYMnY2LNxBjPSar5cy1yBflvzsLY+SOx6tBSVEZLcTJZgeOJo6iMleJU
awWqU+fx5u5VmLlkKtZuX4PyE6VYunoxduzaoa4dqyI6hlTZcTcCKYdPKhtM
z3PXDD3gGTWyj6XCsPhFh7K5UxrGvvanU8e0l9TtyHzOtNZoKNW0n+S3+vq3
QlSaVWRpDXCq9LaA+GgYsTq1SYKzPt0gTOK4h6kYU3ARdagwUw66pgm00iik
2B+J7k4q12TMdzy9juuEDi6iFZkVGcnIItYtRsA7LcZmOlrE0nC+R7IkBH1G
7HS73K5M8CH3vulK4kqes2legU3kOZfWP5mVSJIjLm2mo125hAtb3sa+SZNw
ZMRoXJm3COnCMvgi4PxwYms2ahrYVP5n/y5o3fKeUPVxHX6XZU8MoJ1C2W5J
u4LcWv7t+i+Sx4x2GY1ivu7Cepwm2l2cGpdLb3tvtC9NsrN+o9z/+/XfTwWO
ft6FW/KcfIIjv52AysVBNKLXko1b2RmSqo2Lc/J9fpbX4N+MbfLpaC3ytRBZ
SNZL+w+gFlUON9axtK9JG851RR8leVzjzMJIpwJrP/u+j+q6BvTq0w9dnn0O
8+bmYW5eLubOnonVy5dj81sbceLkGdQ1iO1QWoVXXp2ER7oOUItrgaJWWmyp
lOEFEWvKlQTMdHHDG6LWDHl3ipw9vVzOLGdBQQT5R2qw6MhlPD18Bv700lAs
27wDF+XOWsnLl2aT65jajmnRs9nuLC22RDpJnE8n1bvPKBXtybSpTY1rSljS
5d7JCpTzxJzVk1OpjLI1y8E9Kv/eJf8yVZalBGxPENeq6MZIo5hbeejc5TF0
f/E52dtDMHrUMIweMRKvDhyOoQKv4wZOx7j+s/D4z1/GoM6zsWTcPhxYdh3v
zL2EA3lN2D+9FXunRHB4RhKl+T6jhjicG0XRwij2L64V2NopsDUVYwfloaG2
SSc4bWWewhbDBYmUIX1P+Ibl7eMms9M3udF+kG3n6I9t2jAPD7ZCJqPkHVdE
aBeLYXpwUH+cHTMcSUHljOhifkOjQS1ZmWC0gp5QL6UeL41S0NByUiYk0500
SWjmk2dbbjLXJ35D1OqYRa1OgY+TOdUJKlXaMIChmY8YpU3uPMGwJifRT6pT
syFRh7V738C0Va9jzpZcFF4/iBOCUqcSVaiIlKLk6hEcu1aKOW/IMl6dj3eO
7ED5yTJs3LERxWXFCAh3/u/DlW/jpmlrVlivKh2ISiVCH29MqVIy2vwyDFd8
wDQ/K6vT13zG94KrT7VJK3Dyrn3tlpOvJD2kv4pSic5AGk/UlX/729/i/vvv
V/8RZaRrHcPPU0pR5afviH4qUsuTTCELVzcjLN4D0WRKG4KOnmoYOaez7Qtm
SBxyXIWYpzlJlLi2+ATa3tuSDbp5YL7SB3U/RBmgtgNrlB1ZNU1igVy7iqSY
E5naOvgk06Ubqh0xiw3imFQ4L2sdM0iG9/FtE6fNVniH0MHaNLcGjBphfYG4
TkuWTrQTJ07Qto5Gcz6gxgx1AbLp01NLq9bliTjD3g60fEZMHhkM5qEQAkLf
HY4nd8gaUiZTjKDGI0xH45pAsTk04YUcUgy3MqB39913awMwQhYNKPkuk9Hz
AX00rgUa1eS0JZ66flUuzK35aiZF/j18gf+i8ofFtDr4NsUzxoIfn7VJSVy4
VouDZZU4UHYMB4/Kz6NV2FtWhR0FZXLdPSXHcj6K1W/vxsRZ8/DTB36Fe3/x
ayxevAQ7t23FmZMnEBWLQ8P4nlkjx89eQr/hk/DQUz0xYWMlFlaRfzEpdlPC
cDBa/kVms5BKOK/Q5K6Qq4p4xNTS2YVifxVnMLXEx+slwNRiZsDEML84gqUl
dXhuVB4e7jUSK7ftCTVKdnnDLs3elNT4ga4VyAuT36OaUyBIjLPa0BLa2mLr
v7aCxycTnNvrnmeEfWNzHebMn4Fer3TD2vXLUFd/SY5qMbdqUHu9FrVX65QG
+MrZWkwaPBdD/jYL88dsxaHVV3Bg1VUcWtKA/XPqsS+vHsWCQSWLYjg4pwGH
5tXj2JoWlLwhQDxmm2DSRDGlpqOhzmASTaSEl9CfGdsaJ2P2apZ632UPqCpq
QkqeFf9UOWhIx6xRrbmmtEoEczMNtUhdOY/khQrRPSvhNV0wNKhsnkcyYEuk
oWE26qgZk/pCfPAymvjlw2ztTlYh5gZlVi7ZN1QjQMpE/eFZyQw7xkYKfc5k
iIqNx0NppkyBj83HyZAKCs2tjbhw9Twqz1bi8NEjOFh+EEUnC1FVXYnqyGVc
brmEovOFGJE/HC9P7KUgtbFgAzYVvoWFG+Zh4tzxmLbwdewp2oPCykJs378d
Z6vPya5oVfxwEXmnVTtdOhzjspWQTs5m7NJL52Q76DmrwKKU9sOmjWYOBjvZ
mocpjkkV5Tay6N73NdHINt/LUsq/BxrdiNnCCUe+5+o0qS+TppzuPBpAFEgU
mhRG9957r/6k8cQuwK6DumsbwTFxTZ2ZWUDt3nD6I3B2mqCcGRTDdeIgKOSf
M6zzxiXYwUan0tab9z6jKaUtENncdSbdpIwmZmpI/kVXeauX0ZdNpEv949rw
AZpaZLdHxmTlGdIiz+Zi+za7FIbIiL5zkwia859B7CoAV0POnWXJyaKWqi83
2aulre0QAiVnkWVMgglNTFodHHXXw5HynTrB9OnT5WwZWzEF6fZjHIu4T+vE
ZfQ464V6AM1f5oWI1eIKocMoFXJbP2jnx2kjhjmGK/ufNdeTrU3/8Ic/qJ3E
K/KbCZTk2Ge3SXr9GNakpzCbr2tquNnwhe/TS8jwqCUKtQlabRt0h1DKmE5f
VGp6tiGj0y/jmWZqPPXs5WosW7sBnbv2xBMv9EKX3gPweM/++NPzvXHvw0/h
5488g98zg+LRv+Env34Yd3z5m/iJgFSV4HZDYz1SDrvNmtBprDh1Hj0Hjsav
//o8xm84hkVVwNwSct3HkC8gNafIwxwBp3w6+wSg8gtkZvNpNckr/McTlMrX
Vi9ibwlKzSj1BamAaWJF5RWnsLg0jpVlLfjb6PmCUmOwYsseXGmOqMvESDvL
caMZXRrINn6oNq1aZffYbj3y261WKfDtWtTk9oxnd5VxVjU0XkNe/lT0HfAi
du3ZpNOTyPmJSiA1TZXAXWR+bQqzxy/HyF6zsXDSFhxed1mOqyhZ14SiNyMo
Wt2M8jVRlK9qxRGxiQoWX0fF2kYc3XANKydvx5BuEzCq/2uor23QoU2Sh4LN
w9TD42n3HcOJA8OWYGP+zpeiVMU6ACZ4xA0cs4FJQ8Mm78XEXCGVNuvIWK2c
okJ8TVT3qyIgWywGxdWdpzjE9AW2csqYiumkPGsylQmEplGQPmCkM7PeM1HD
6cE0oQCGHE+jLtCcNnjESgJS/ptolBilrbFQP4q02OR1WoWwfP1yjMkdg+cH
Po9ug7thbN4YLN6yDPurDqIuXYdriWuCP5uQu2YWxuaPRtfBXfHSqy8id9lM
LF63CPtL96PoeAm2H9iBdVs34FLtZdkMQbp3uJ7X4FE2+GBbB4R63RODUjaK
YoggNMjuh5qZJcW6TMVbyXWhVcf8R2FIaQZT5lAosjXERtF0jU6IR4+HEej2
NjHz9oUSVLWphjN+T1WcoQ2X10ZCd7ZwI6qQE585bHyfSEQdmLYS4wy0oeiL
YiyCnh1KJgaxbBtNk7X5PhXbhtks7KXznTRwlq8rXb4pqyqZw6DQre9CoYyG
VjMwnM00s311DHN3Jtzq15Iks5kpzViry80ftYlCnrN9AjYf3xHpeaYc3IDk
34Ugte78EPDcwI1n1sUn2syHi2dy9dL84ZhzrGlrUAPgfHBcaWfSRKKGQATg
HLj6elfVTEnPnsbM86N9ajOHnE/P4Y89fmFXSLhakjPKb6YHkTmpzCBkxiJn
mFjTtWtX/OlPf9IUHFrOzERkKJLfTD8do1WMTtG7SKcvEZOISI9lONPR6XGZ
7Bp+twvvy+rI0trutEmzZsognTak4J21YCl+/fATeKx7Xzz64gA8+Hg3/Pih
p/DVex/Ctx78Cx56vh+e6TsGj784CN/72S/x0KNP4Xp9gxZLEd8ol2ANMC6q
8uNn0GfIOPz5mV6YtLkKiyrb41BGG6jk0yAyOKQ9V1hzl+9Y6gWScj4kv3oB
IuUXppBbnMZMQaUZpdAExDz5e2FxDMuKm/H08Dl46MXRWPb2HlS3QSWzZYyI
vDEqdQoAyaaEOTVPdQ7B8QCfuJBThqjf84y0ID7lz52KfoMEn/ZuUsnPRkKk
1E2SyZYJCbI9mq/F8frIuXj+L4MwqOsU5I/eiHljt2De6B2YN2oX5o/ajQXD
d2HJyH1YPGwnFg7ZhmUj5Ri3BaN7TEe3R/pg+CvjUFfToPejafC0lxhHThm3
gW/NHnW7IjCVHJ1blnvuoyYK4JvEftUNiQBx2WjxlHbhIoV72m+VcaxH1Ks1
GYhK4CFCIUWGE0s9pRn4xppJ0v42cUpD1vqBLOM4lQJmdbD5BAm7Be1M5MBz
KVWBe9937N86bcxKtKEK2vtRQSj+JNw2NzehtKwEb2/djLyVeRi3eDz6T+uP
YXnDMGHJBExeNhn56/Nx/PpxXIldxdn6cyg5U4qtB7Ygd3Eu8pflY0/hHpSe
LMPJS6ewr+gANu16GwdKD6GmpV69bH6WH/bdJUmu+aCzmKwoNha64hSdb65F
lz0C0PIDEUk1PhW4nb1Mkt5Q9hbxEvx8G9DKdPgHESuc6RW6aZVPdADR+8Is
ZsoXZoxRPybiML5A1KIGT8nJIBID+jyfNhMDVcy45ueYFf3qq6/qe4yOuB7J
AWLdopswYdElE0YsY0hn6BBLB+kUgZ4Ibdml3WRtJULaZkjEueBbNbU+ZlPr
004Bpd8szjr9lEEpG1iPaFldo24STRwjcHiGmFLRJWMaHlNH8zzSK9q7Q8hf
Yu/ZzNwt4dfa/u768YY/705yFpZ6sTqa2QR8a2772mkErjCQ/4Um0BJHfVLf
c42oXTdKggbB5bHHHtM0B6oTnEAawzSnmFLPFELCHd+j986S8uv1aDhT5WC6
PdUYxwVrF867si0s9N5vtwFfdhyHRFNqQ2yUQFzj+iCSuigbcY1aEm+PliET
PXjLRGxX8EaMpA1OzCQ+MoOQRXHOCx1qmmkw0OzS9/AW3qMi0FjDnqX1FhUn
bfoaFh07gUkz8vHLPz2BF159Hb0mzsPzo2ah2/h89Hp9GQbmvoG5W4vxdulF
vLnvGB7v3h/PvTwY1WIoRGJxed64GiIKsqm0ksaWVpzEwOHj8VSP/pi85QQW
VdBbSE9hTIAwgXxBrnyxsfKYSWi8hS6Wpb/nuiJ0bTzmKRLSe8hOL7Pk57QC
H9MLbX4+23EWRLHoSCOeGj4XD700Bsu27sdlSw+cjfN6lEWaf2Q6j6m+pZAX
JCep70DTj9WQyVi9O1DNXFbSv5ngmPafMNKtsbEG8xbMxIAhLwkObgQNJKY5
pMis6CXUr0gB1togZvWcN/FilyHo8eTQDuj77IScf8Ejv+6Fx3/XDy89OQ4v
d56AYc9Px5iuszD8mSkY8tR4jOo6GV3/2AvP/rEbpoyahsb6iBamJdQBlWCY
JAaa/FGZ5wjVsKQf2GZKRm8xsQXGdNMseqMXWEq3DxonlQXEhGrDPMjPHZOf
fJ5WE34i9w9jSQRLFmOnNO5FPJRrxTwiX6v9LtPw02Q9qySnbce0/XjcNCAz
pLnOJvuI8RFmvOBIpwy9eiweRUlZMWbnz5aBnif21kbsvbIXRQ2FKGkuxt4L
e7Bi3wpMXDoRK7evxP7KA2jOtMoIpe0NmD1C4cWbKSwrxdpNG7Bz/x7UtTYa
Y9dLhZrQfs4Csi1TSVsvnrpI/LgSarSBN/WEGA7BjoHbOuGUDhKQG4ofz/RF
5MLJpG5yHkU/cEBaB1bHcLDsRujmNO726EZJwZgT0YnaN1GMejzRiR4caueU
RAxNUPBR6vB9l6pGLyDtA9oMjGNRSvH8kObdFt1sMUM7dOsY2GG6ZzT9gpjm
2RJ933QyJ4hFHaZ9WEOa2cxROVjORVKCeNIoRL5Zu/+bufeOr+q60oY1uMWJ
ZyaTzCQzX8o4ie0UJy6J7TQnLnFix3bihgvGGAymGEzvAgGiSKKILoQK6r33
hoQkBKhXUEFCEiDU69Xt9XnX2vuce6/AM5O8f3zv2L/NPTr3nlvO2Wc/qzzr
WQLXIHW3rELjXeIaK5VbRQdgs1jqZJN3x/9/kCYIhva/FdI4miYhjc8uXwXV
x2GvmiOI7LUxVjCXgW0TZvXxFePXccyOrwzvZ59Jrc/nWcD7GUPeeOMNURPI
+90UEP97SJN5L3dxaoY0hjIOH7IrxiYSfwWeQDyR+GvxR/I+nkj8lehrzuIZ
RcsSRxK56pAPZwDmJmZ8qJrzEo2KFY6+CG7+t4j2mLzbRGyXKQac2raJWstJ
nQnFF6qwxdsHz7zwKt5Zvl30pNwUkASfuLM4XdiEM8VXkFzdi/ymW0ipaMVH
n2/BonXb0UeIZhSi9zbh2pkY3Wja8fLZ3HYVm3f4YO7SdfDPb1P6j7kQjX2x
kNsQLfhORJMNyL6uNCBjIS6bqOc+Xu3AyWrglCj+tiC8zoC4hmks843BBxv8
EUeAdmNSIxrcGThUrNCmuWDjHsIVtrPZ+rOxKKcYrIBhEbUl3BmXvBaLnePC
/C+tf3aD6BXGz9mENL1VygObhTy+matyTXyaLSa6k0xm2WPZyqID7O2dwjav
dShVUI7VsLnTluh4JfwcFr21orKsAREBKQg9moSgg4k4sS8GCz/YghWLduPA
zgic3BePsEPpiDucjaj9aeQFxiH+SCr8NhzCztXeiAuJh25ar1ixzriMaOjH
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
nzqVj6FUQ7IIay3ouXQeQ/m5cNYIsLffAHpuCbfpUB1kvD7BT/n5bEJut8oC
Z5MAD4nGqNLPmcZhE25ulYVv130MVQFOZU9WsO5SSfwK9I12El6/a1AFrf9p
eCfI/Z1fFaahtb6uHufPncfJY2dxq/EuRofk4+UzbfLTfIa/h0judhm2NJ+u
aqwq2VNs/Q1sw6OwDo7onGRaEK0uXK27govGYiPnlY9/1IBRlR47Dt8DzK7J
phZqJhK+q0mKCYnmLr71Q3+E6y4W+BYwHWGlQ4XrCmP5spOeEq/XkLC+B3Hd
X+dUnwX8YaZ516u84nTbU4NXuC5bEXiOUU6LhzTH+03Z6kjmeDA3g3ouA9KY
7kv9l2BOEDfBlq5shqdSCtKHSOnGsBvaH/fs2aNr+HxOReRQh6DbkLuY2kHc
p52d2jkxmmo1P4KYTo3erOVhetLpoP/JT36itHgKT+pH1Ito0mTyn9HJ+uFD
0wi3JrP3cmmNMPm9V9TrPvhEKRoU8XetSKTygUPIzjyCpIyjSMg6iZRjF5Bw
7CISjl5EzKEcbI/NwNTFa3CyUNT1ju7/HYCude9Pwq9sKx3cixuNN1FaXoHM
7CwkpiXKSMCBw5k4ciwbRw8fQlaqaIapJxE0bxcmPjkTBzaVw5JkFwXahdpI
oC5SObYF02Np7xdkR3WUFw2RHhncgrCO+sg/Ber9SA48i4UTNyBmi4B6830d
tO3T2Yde1YpgSMXQj+utZyzYz/mR22TaZpdas4gMH9MHzroZVHaJvlSsac/h
xOKWE4YhZNwSXukDJ4pTaaYCTZv61q1b5TOFngY8ruCXYd1EapJL1r2inZ2+
cB5PJT44OFitDyI6/eIm8lM5JztgqDcnNxcEFwahnMSYqfUkvHSN0Wb105/+
BM+8sQArUssRVdyLuPIhxFuGlCGcmvLBuhHEXropinggXpm/EVfaBkBwcqvb
7jM6S6t7f+tuM+ISU/H7lyfj7VXBWLwzFYtkLAhOxtwdSZgn2wXyfOHONMyX
MTc4DXNkzN2ZiXmhBzA/LAsLwrIxLyybl2LXQRHjs0Oz8Pa2NLy1ORWzdmZh
4Z6jWBxxRM6Vijmb47FoewKW74jHtKVb8f2nX0Lq4XO41z+iAoM8Rj63xm2l
Ofm0pmj4i7yG/qM1PI+K10fAZKMAt1sZz+yOXozauuX4IbgdI6qoxaGU45jy
+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
VlRmWpEkUnv+i1uxf0uWgHmfH8x9Km7KrdQWVVDCUNDNrDTOQd5kIji9fbR9
0+5OpOS8p82JRVuI1ERsM76Nk4PoysdUnPmcivrUqVOVXZyZ5VSyqZybBdG4
Nc9D9KbViE4oxufR1kVDAT3wVL7pqCKq0xBApZ2Bc5yYpLA0XDESgHOY64r6
jfl7SKXHrykiepSst7dXh2F5iiB6OYud2VWceYI8Ti7rQVpFD+Iv3MSri7Yq
G/219iHV6taYDgGPGBHezKJlVWE7bcQ+NS9Z38KAVjZTJ7qrxAefbhiv0p/c
Hqbx8iV+qUbh+cEhO7Fk6VLkFRTiblOrCIsWEQgd8sPa0d7WilYRHm1sR97e
ivamu2hvbkKnvN6hRpuMdmW5a2/vQFt7h3yJtvZO+YJ8b0frHXSIDtshF6i9
tZP7Wu4J7Le0dKG5TQYvXkebjLtoabuB1rbr8j55T2sb7jfJggw9hneeDUTs
ugLkJfSjOGkEpdHDKIoUvT2edf1GUBDbg6ytDVj8UhTmvxyGVW9HYNara/Db
n72KV56fiqULl2Pj+g0iRQIRuGk9Ngatl20QgmSsk9eXr1ipnD1t8n1tVqta
Vz4DR3xj8dkszK1lLAyo4j12qmSugYFBVFfXCHSekZ/WKvJhhJXIVJS+slpQ
bXdoNznrfTsZJKdIlkfQxEETloompMmbTTIZFWuT0SswX9rcizP1bThdfRfX
u4bRYXXrFtVMuJMlzVwpr4Oxh6OqXYSq5ah4jMqDY7FQHSoGMxjBH3FnBMt/
Qv1UGmMpfzl/TT8VC0xzPWptmVOGSYFO7fnXMYZKLaW5gL4Qtkjwab8FHdcO
pyCrz9C2HSKX2bu6TabV0WNHkF+Yh/u99x+IeTfaH2s93YgmG5/6Mj6m1sQm
E/JNzKORj7/FXHfjjv9bcwH5a+CbLOmjRrKGPwhexYmqlA2fDu7qE7bV0NKJ
wvqbuFh9A1V3u3F30KZquw3o9/k9DGZqHC+xqh1Hge1UCUpupcKzmIEyTnh1
y3fl+Pf4Hqq9pKFljwUv+aMQPuS/nibFI0Zfu3ZNGdYpxyjDqNrzeo11aIY/
CsNMENTRhx/2G1DfRbFUyyu6bhiSRy2LzTzMZHvZap39/f465NTdKXKpSNFy
YOD5w8O9yt1yabcTc9zsNqXK0601LMvxbPVVLI/OwOTwNESUtSGu3oq4GjtS
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
990S3ne+aRCLUmswcfsF/Mu0ZDw+PQW/2nASe/Nu4IxwoTb5DqJ0qu/iUdTT
5TKiQ/9I/X7QhaHZy8cVXowvu2ayFT6mR5drhfWGCGgjuounH5XfXfNEBQD5
86Me7FKivWPv938eE6cZB831SNOrPzOI1dPe629rqkpreAxl3asa6PgCPqeD
iTlvnLoOttfLZHNakEQldw2h+d4tbN+zFSuF/1Q2VqB1qAW3R4Ur2a/ghuMq
bjkacXPoKs5YTmJd6GoEhW/AmcsnUXuFNfkq0VBXgysiLa7W1sucuFJTL1yp
oZaCe/yoFwEvuCXCuKiiHJera5Fbew3nr9zE/txazNl9Aj+asQP/9Jt5+JqM
5+Zsx6qIg8g8Z0FJw12UN9xBac01lFY1oEzAoFTOmS8q/PqNgfiXr39dVTL/
+7//e2VGevrpp1W1KUYhUsqRONhV6w9eaWXu8CfRUZUz0zzIRWnzZkwAy1iw
U6PwUjO42DTkGQR59sMwJE2uH3u3qWc8O1IThtSMW4YJMBWW5itKVVFG5RsI
sZNPIummlOWk4ESTrfw07vuIUlwpvGm+Z1AmtVQ2nTALspq9Uk2uRIGu6vf3
9f3/yJXGdbF7zxhLMsOa/IzqP/SkJZNn207D8MllwvnLGkt2Fh+hj7ynD7jT
DFd8Gu7+5mVUf+PfUfSZf0ThP30DdyZPxVDkXtjLizDQUIPg5QuwN3gbbt2+
g9sybly/hvqaSpQU5gnu5eDoyTPYEibK8pwVeH5uEJbtP4l3Ik5iUvARPLsu
BT+eG46fzArGlMAYTF2/D794bQ62Rqbi0KmLqJAZV1JYouoWW8qECly9jrbO
e7KCuhF14ARenLsebzHty3LvIYxGH0RMHRB/VQCtxquMRmmWQaQVNglNEk0j
/gAuFleh/V6P3KZ+OU9vb49MBs5eFq7okWvT09snL/f0i4LVK0/773P0YKCn
S7bdMu6jT24h6y3Ioept93t70N3XLaNLrq6M3i7c77qHjqZWlFwoxYxX5mPd
vBDkplfjYlodzsfX4kxcHU7HVeNUggVnkyuwdt4OzJ2yEsezT6OzvUO+Shd6
+zrR33cPA/IZA9396G8bQvqek3jrN8uQGpSPwrhu1U+mJsGD2ngmC/9XAUBf
+rNU6cCWAqyetAsbZu1EeV4V/j/a3gMuruvaHuYnJ34pTm8vzYmfY1tJHMfO
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
/h3EH7uL7cfvYYdsd75/C4lHb8h1TThWK3/jj9dyDwnHa2Vm4LG/lNfrY4mn
65F4qg7RB8ux41S9fFa1vK4GO8/UyxRXh4QTdfK5fG29bO8i7cx9pJy8iZSj
FUjcfw4zV0cgKnkXik5fxJ2mVjTT7O+QBa/zUXfAt/C4owfd7WyPZb9T5Xg9
7mxHV+dDdLB1d6JnoAc9/b2qO12X9X3mjDdRuLsAj7va1e1TgvwfhZNe/QBO
UnW0nKjO9uDGbqAqz4GwGbsFJ8XjUFIJHlzvQcetIXQ3DaO7eRg9LRb0tLKN
oLvVKluretzXOjxR/rDYQ1+rDb2tTjbpwX0tMpX0NcufgaaxgCny14n+Jjv6
Gq0YbLFj+NEohjrtGHpsxVCPFb2P++QydKmSflbbCDp7OlBRXyZYej/mLXkP
+QeykbM3U/bnYtrbU/H2e28hcmsk9h7Yi8pqMWnr69CoKje0oeFeE27fuoum
xkY8uN8kM28ZMtKzsW1bNBISElTQiv2UBACOT/Zj9mfyrjQQGvWtIIyQm1Xg
TQDFc+QNYHZy4ekyTFoYigWR2QqtZFzp1m7Wejey6MystaNA0MrapIMClrYg
RsBSvwJL/tEFlxlywO6iY5i5NBQrN6dh+54zSDlSiuTj1Ug8Vo0dJ9j/bmL7
Sel7x24g4aj0ySO1VDM6WhcwFQmHarD9aD1ijtzAtiP1SDjThNiTjUg804DU
s7dkDNRhx1HpuwdLsPPQNaQUX0Dy/jNIyDmIabOXYvayIDSzxrBDxpZL6xv6
UWLg8kkSMcHMa1SeMPyTHlPtjgaz5sqxEqRS8faOZ6h7vRjnAsi2pakdwUFR
eP3ld7Br6yGcya3F4dQy7E8swcGUShzNrMPx7BvIiDqBqf/fMhzbfR3DXSxO
6iWEV05T15iuYQalnzzmE53nQHA6h3HqeBG2R0egaF++YHmb5nh7NJ+KWkkO
l6Z+Eyapst7c92o/ldOgdnjdhlX8NZXfosjnfR0C92rgvn4KfdFBuPTrH+PQ
176Mo9/9Di5PeQsjCi31+jSYVdKokjNwq0LsdsE6FrRjxNOFUUFwg7KylzYO
YXl6Od7ccgE/XXEC//B2Hr4yIxWvhRdjVe5VXGgbRKPcnk75DEoqDcpEPaxS
gRwKMSk7xaF+on/OIleeT/nWbpPJzXvKPk9kRIFDLsJEKdpv4vHVezfXbhMp
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
KXzXWQ4zlxtbO+z/cySR9xWjcI34GO89luMfHvwQa4+sQUbVGVQMlqOivwy1
w9W4NVKP0wWp2Ba9lZyGg2jsbcSoe0SKllUvKVloEChQ2GPkr/joCjn5GDCI
v9BLF1fa5UJCXiv+ujwC//vOZrKd1+Dv5AutiM3CDZLXLQ4/hjX1egGJ653p
OXfA+51XPANAGGnJ9jLbv1ziwDbzvYTO/HewxFmXtbxb2H7moCy76UYVMDeW
4QQkuxfBRhn3hVqpYSeVaF6qSysBzmKYvlwPrX/FiMhdn7nz15CXGxyzrUIy
jzSBt6AAw9t3oPaPzyHvq99C3sPfRv2LL2OUbE7/zUKgvQ0+h10yMN6AofHu
H6dV6MiPQkS0AX42FkRIjIvcGZVZDY19hQCm5d1n66af8V6hSUZaQEqSf0xk
MJeKsIXMLjzre52LS/+WPwvK3z76lvPD92LSxv04lNNEMtOGo1UaDpK83Utj
D48qekzjAMnfiCofDpPMPVpmRzSXlpT7EF3sQdRNH8lYILkOOFKj4XBVAIfJ
sD5W6UZ0lRsxlVbEVpiQWDaEM9VkMFf2YFPkGTw7cTZem7YQ0SdPIzH1DJKS
TyH1VDLS05JxNjkeF04n4RxTLZMbacDneC2wWynxj1On5DEf0/8O+zj/RfPA
z/GxtLQ0Jv4OfV2Yatp+v5TccG9o9vNIIivr+c8yXXrtdzDIzwDhivJKVBfV
o7agGdW0JW5cqMaKmVuxevYOXEooROXVFtTlNaOuoAm1+U3yu66QRnEj6stu
oam2BR6n0FsKfNHtJtHrNsGk9ZEYHqYtZBO2T95KbPwGweqMfCGBiPpbcKSn
ouX9+cj83yeR9oNvIuOnjyH/ry9iMOIw3Hn50Lp74bU5JHcsVIh+VbchEJqA
RcLWbFOYaPV0k3DMbB/CtJgc/G5jCr46bR++Nm0v/rj5FI7ebEJRvwm9bDr6
PbD4vWKuORnWL+U+JDC4YEAq/dzS7pUxGTcLc3Hs6AEU5F+nObRCdWLnTqtf
DLafddKW7xvtR8KVOOxN3IWsykvosLeh1daKFmsLOlx3ccd5FxV3K3Gl/Aqi
T0eJEB6w9jIpk/QZ8jEQ2usQy10qrlQ9tB52HvNsx7JVnwma0KElCUbLd4Oy
x0jiMNW1LnonsOylbcsUYmxFsqXI0ViVWGTXVso+Rcdfy7uGJdsWY+3hNTiQ
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
7d3tOHr+GN6aOALf+Om3MfLjsbhaXiyGXlx0dARnL1zG4mWrRbJMxdRps7B2
wzZcvlqMzm5ZT0I7ZVqIfUmWm1QuD2mVZMPJ2rLE9fnK7F/ZDjlfCoKc4Bv1
GdPGZqziH9XfUcRtv51UjmkI/i1bujRtq7abBtPUouzjS3czJVi+ePY8tou+
X7ZwCXZu3I79O/aiUDiuVaRgnHviDIJkcQKR4b1dbaIJl2PMqOFYLLZHc1Md
5s7+GPf/8j68Nux5nDl5RIzpLlOmNy6uedstHD28HyuWforl4tfs3L4ZBz/b
h6qqSnHFO3QrgRsbvuskQV2hRSpvL4VryixotSDmX6S17Swr4KYGq8UwUKsI
ab8ebZfCfwdlX+PnO/TyUAV32jM/OrxnX5uMGcfc1E4yNfmTzs1NfdEUtDRP
YLd80Sz6X7tL//2Kuq9a9NQU7ch0E0/btiBaIdzWyNTO0rT82IksFckZYrVx
0rqfCd1rATthIXPQ+y+8glBflyipWtwoK0GZuPqXxKVbuGAuli5dhKLiQnT1
dIlgKcRGMYy27tmB0+KHFN8sQ2HldTT1tqM92YPONL0pIXOZTFVTvSjf3Vjy
6SJs3rARI94ajscffQyLFy4SxVmPPlazpAPPtt1i8NdX16KivBLXr5eipLgE
WzZuxoa163Hx3EWEeyPyXQV27NuBjXs24dj548gryUNRaRFqGurQ0xdRpaG1
t2jQ2dgFL+1qvt1hmtAyJ95jZZ6IKjdt7OQl6YKIyB6iO03aFVKFsu3ThRT3
fjBQG05/yXb45K6Kq5nmI+MGJWx95bgqAfPeH2opm5i6u/GgTjCTP6MxcZBq
6vDZgcPYtmkHTtABKjS7+nVi7p8+fQqjR4/Gq6+/hi07NyO3OBcbd2/Azx68
DxOmTBC49AkdsL01f1KoranHpg2bsXD+p9i4biNGjRyFV15+BZ98PBt5VwsE
5hFNiU4lTLJec1Mzzp85hz079uD0qdMoKitCfmk+yuvLUS4G0dTpU/HE00+J
Av5YDOg8XBQH6Z03RuL1l95A+fWbQnumDH1a06dN9E9CLXQHB3ZOSRkw3KWH
z6botGsJbTtMarWfoGqcabz5P11fd9ML0Ddvj9uenQnbV0wbbKZdRz4R/mER
sKfOCqU9gVdeegV7dotq7xDF3duDxto6VFVUofpmNY4dPoqf/Pj/YNS7o7B/
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
ncOunXuxd89enD9/DrcaG7QzdDIe1mKIp44ewq6tm7Bry2acPX4MHeLRJLkz
JUyR4A4XTSYR2zH5zN42fSn2vEuJ2eppfTxW+aelp+dLVJsyfI9QVlVTG66W
VmLzvkNiRu7FkbOXUN/eI8/6+p4WMWROXbiIbbt3YYOMvWf/PtTW1srcEtox
CNrAQNzSWMyULDdb5IEH6FsYZ7kvSp9fyxxTDs520M0nsyWiforh3uzjDD3q
0grIt71Y3ymGnK7TysvsMzRuQ/T09YmYLsfhI0ewdu067BA5VFlVJeYFE1Pj
6BIzp1D8nO0H92PLgX3YK6ZIcfVNNHZ1DdAD4KGmKqn8hISQWdGaYZ1hOpQk
RF9rVllH8q+Mg8kGPAzNFVTfqG7A0TMXsXzDZqzctgVHL59HXVc7usVyaunu
Qv71YnwmqF4nWmH7rm2orrkpU+vUgg5ahxauUpevqdOZ+tCe/uaoX83yBLOO
qHW3yLntGQ1rTzCCY8TBxh2xUtU3Z81B5TwXAqH5I/JFu6ypuPymOPQnkVtU
gtauHttD18HCU0vtVmcPTl28KqC9KZ+7GQZkPdavKgPHGNbMDuVMVU0kVXXA
RpiRvJKMrxUfjp2lTeJDCr0Cr6qbldi/by+OHz+OsoobhLsw3VCN9TLjA10i
VE5evIJDJ8+JK1stuEq5fXHfv8tyfOZoPUOFRjx6vjuzcPCyx6eGvL/tYNQv
qMF5jQx3Ig30yZra+sIoEuvp8OkLOHr2svwdsYYL0CuWR0t3CIdPncfmXfvl
nvNiVdehSTwZ9icOyfNhsZaTGk3naxCm706kKGAoQLUCe8qEYKXTNmAzqenC
4d5eLYV74sQJbBI2rhArmzCiPu0VDdgViYsxeh2rN2/D2q07kFdSjqbOXm0M
FtX8SxhI3Zm9jdGfnNTAI1RSPveQnBuf6RZgIeX3O9bxDT/73mDVMV8xZMcl
2rLIUONBpJuQSElpCfaKbbdy3WrsPrgXeUUFmv6jGosmwWCdRTie1JRXmsOh
uIa7JpmYTzvOCSHWsOLJSyTJE5g02gTSp8/lYs367di4ZTtOio9/vbxCDJEY
IvITZ4aSJtWmNMuADVOTGryVZpoKY2AH6uLcfrt6DPeazUZPaSzbEzNlj9Lm
4TRMjovJXJD/c7JfmNn1cS+0Vensm1QcGmrUzaiBVt2TuNEvfMKqJ9qElMvU
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
qC6U0L0naYPCeFqwc+dOzJo1S6lj9+7dSlECDzOzuwKTTQWdBTn/dgRnr5nz
8Lv0a91NybIjzYwUHm79LqorEBq6qyxj2CoF1n401paB++AAfoawUha+nOaX
LbyDw/Z+B/CZ0oSZbkiZZzPvzYayTiPnj/rZwNkQdGF1Zq0JFRWG0C0Ve85U
vFNp5cyZM5gxfbpS8aZNm0SRVhhpl04PDPh6QIYkBjsKyl6RfeMgXanBv2/I
hAAaEkyOuDJkwcnbr+8xCj9rnfzP1/2YdLAeR/ba39DcYb43HMLvHO6C+FRN
OFU8pbROv/sii0MtcodmcJM09zCuPRqJqNgzsFfrPcmjBL7nxInjWLVqFSZP
nozly1foHl8ymbR8NTSgKcdzbvlZssu+784Az04IZWgpaVBgKN6BwzGRFSjB
EESzSgPePjS4LRtXTh7Zx3lsL8R8byCvXBx79swp76xUzcKOb5r82GvZGLLj
WHmQyfU11wjzu/tJG1Im55WXd1X5nZS4atVKhSjHVtJLa9sVJ0KyGcMB1BKB
1qqCgcHfB9zW3dWFzz77DCtXrsScOXOwePFi7Nu3T7UQX8Df5IT58+dj3bp1
2LVrl3LD+vXrxawsRXFxMdauXavPnT59GkuWLMHrr7+OV155BQsWLFBKOHDg
gKwhT2UXsxe2b9+OefPm6Tsov7gTzLDniooK1Vhbt27VMc6fP6/PaMkQ0x4h
KIpi4Ztz0WgzE0F6Z/ZXAdqy5KHB6h/385+dBiKR8G9e56jUZFwtQ4+/973v
YfPmzWK2dBLyhpS/EogZPsLH+Rh/OwQ6ieukMe+VJ++z63C0Y7iNM7sjyJVw
+HE0ZrhC5idSgdecJnN0myUlPyf5srRblnRPGDIcEsgdBycLBENag4OnsiiZ
idPKHdnay+059LGIv12szbMLPjv49vb2imxYjtdeew2//OUvsWzZMhQVFVk5
kdIWDm46lnmDsfis4UrVDXcFYthaB1n6YwBBJUzFx5xMcEznku+zzTA7pJF8
X1WZnbKB6w7G2aLFoTXb6nJE5xjRkkeOg6aDjMNHUNjHMOYdAVIdqLLmaF9y
5+eQ7SZgBzPS88t6mbz39NNP41vf+hbmzp2nUHY05R7J0vJGKuX8ZTadBN9n
5/M448Kt19Gkuycb886ScMvJhl9mWYP7caS9XzVnysrs2+U1wRJh1k0/+/G/
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
EjL9FsakJW5S1vlq0Ya7/7HuxFphknsGg/a6jvnU2zPq1O2tLl9kuTJ2u3c0
fm+1fbnpzq6PrgbJhrhvHPrGZAdrMj8IqIa2jsx1qSChp1USi398fumaPtNe
y+HueD4JkRepcV0Vv8k/Hnqg1mMPPatq7t+zmlBdkoz09Peqy0edYNhQNUqB
5bRfrWRSCtHmk7x9+JlI00Ob4/et9jzjIScoj2o5yNKWWLva1SqjdayrCq8v
wilRQbXuCfPHaPdysV1lRU3ViVd7sqzypBBhUX7xpF5OqzzRvbuSuZ40ZqPL
cYpelnlGNeVnN7+6XRi+wcOB2PxXxC38j3xsMptBrCYrlM3f3th3Wj/XU7uj
tadT94UHk5UKDAs5M6keOV0yS2FMxoTbzJPMrKwpcWvB5fZo0Q2HEDYuR6KH
4SJupMwYczkszxyqqkmot5mmV0aKT/4dfvlUvFQResrizm7c0ykFFPZkE0bo
E0m/wJnFL6zfKJarYS82Db2xLdHFaGMzMZliZKTX7gsxSxzSW7o/+WwZaQx2
fSND7ita5EkXngqWDviuYO43O494FiG4+pLfPM4NCi0vMmuiTsV40mkzOPhj
XkvQGb0a1Xo2JcysHvpVbzdMKBuYxjsrVtt/Myr23JtMYtHBVWyLipjUxkzV
N0ewnFkHLwXSQ3f7K9zhxFnfEdLLHJUtXclkVE+mM2s4m1+lfm9u9rr9gyd3
L0VEm8rYVipfm+CdqWfINQ8QjqQPtLzegTvXB6iu7mQFd49yv/Wm5RUicpZS
5CWZoRQHWoLpjszXBomr1+KeBJ/LxKv6G2Fj1EpM7mDFzXjp2hJGpVjGn8Y7
NfLpaqS3/WjAo+ZFwtfQto/9rJr+i7z7JK8UKt7GIb9F/x0TDi3EvS7ivfgV
1Zd+ZVA4/1UPtqiTqzLI6N13Sh9FxHf65S0e6+zTTxeuyeDsCbRqEIP74DSn
WQfe9wDxNuVts5JVMLypw55Xj65dR5Z7t1WhR4OE0cnJqUc+iht2WLMt9frL
npK4KgPuOK0rbFdjwkPfVNezOoiBZn3lQYlEogkWP3GPri5J5XXRRNV5GD5L
3eqT4eeYWEFljTm2ib0xpIIyTJXbTHaV5KqBqhQXOuXS4PiSTdvu+/rqNq4h
3oii4iOUVMPoo4rFSB31pdiiQNah7bfOorMN90Gl7vS9D2179NHwjZP0TwXX
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
APl148HhOH/+9f/Tr4c/+z9i/auy\
\>"],ExpressionUUID->"5ba08963-2dd8-432e-ba94-20eeeffef9ed"]
}], "Text",
 CellChangeTimes->{{3.722302064147718*^9, 
  3.722302073742407*^9}},ExpressionUUID->"c092710b-33a1-4425-bd7b-\
e4453b14d3cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mCNNChain", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "400", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.722273646993524*^9, 3.722273652040366*^9}, {
   3.7222739884009*^9, 3.722274050035054*^9}, {3.722274165237458*^9, 
   3.722274208766576*^9}, {3.7222774815023193`*^9, 3.722277600808674*^9}, {
   3.7222920205785313`*^9, 3.7222920220959883`*^9}, {3.7222920959913054`*^9, 
   3.722292099660532*^9}, 3.722301412268037*^9, 3.722346013628776*^9, {
   3.7223471159575653`*^9, 3.722347131257634*^9}, {3.722390136294454*^9, 
   3.722390151109124*^9}},ExpressionUUID->"78e0de04-6239-44bb-a6cc-\
8f7241498857"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{20, 1, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 20, "$InputSize" -> {24, 24}, 
               "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 12, 12}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{50, 20, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               20, "$GroupNumber" -> 1, "$InputSize" -> {12, 12}, 
               "$OutputSize" -> {8, 8}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 12, 12}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 50, "$InputSize" -> {8, 8}, 
               "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {800}, 
               "$InputSize" -> {50, 4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{400, 800}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {400}, "$OutputSize" -> 400, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {400}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 400}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               400, "$InputDimensions" -> {400}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
              "ColorChannels" -> 1, "MeanImage" -> None, "VarianceImage" -> 
              None], 
             NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
             
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"12\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{244., {106.9169921875, 112.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7222929038616133`*^9, 3.7222967120673428`*^9, 
  3.722346019468939*^9, 3.7223471324480352`*^9, 3.722386097948572*^9, 
  3.722907429593995*^9},ExpressionUUID->"2534d886-1f27-4b8d-a614-\
a03cde27fb24"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"mCNNtrained0", "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"mCNNChain", ",", "mtrainset", ",", 
      RowBox[{"ValidationSet", "\[Rule]", "mvalidset"}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "5"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"mCNNtrained0", ",", "mtestset", ",", 
      RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.722371256860162*^9, 3.722371308410001*^9}, 
   3.722371594352681*^9, 
   3.722371804902177*^9},ExpressionUUID->"89e33cb6-3235-4ab3-bb87-\
defd7daabac9"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{20, 1, 5, 5}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{20}]], "Parameters" -> 
             Association[
              "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 20, "$InputSize" -> {24, 24}, 
               "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 12, 12}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{50, 20, 5, 5}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
             Association[
              "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               20, "$GroupNumber" -> 1, "$InputSize" -> {12, 12}, 
               "$OutputSize" -> {8, 8}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 12, 12}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 50, "$InputSize" -> {8, 8}, 
               "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {800}, 
               "$InputSize" -> {50, 4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{400, 800}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{400}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {400}, "$OutputSize" -> 400, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {400}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 400}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               400, "$InputDimensions" -> {400}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{400}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
              "ColorChannels" -> 1, "MeanImage" -> None, "VarianceImage" -> 
              None], 
             NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
             
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"12\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"400\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{244., {99.9169921875, 105.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7223714876344337`*^9, 
  3.722371773666016*^9},ExpressionUUID->"41c31062-a559-408f-abb6-\
fbabca23ea7d"],

Cell[BoxData["0.010099999999999998`"], "Output",
 CellChangeTimes->{3.7223714876344337`*^9, 
  3.722371778531518*^9},ExpressionUUID->"caa3efc6-8846-4bab-bcea-\
0e87cf9bd35b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"mCNNtrained1", "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"mCNNChain", ",", "mtrainset", ",", 
      RowBox[{"ValidationSet", "\[Rule]", "mvalidset"}], ",", 
      RowBox[{"MaxTrainingRounds", "\[Rule]", "5"}]}], "]"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"mCNNChain", ",", "mtrainset", ",", 
     RowBox[{"ValidationSet", "\[Rule]", "mvalidset"}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "5"}], ",", 
     RowBox[{"BatchSize", "\[Rule]", "500"}], ",", 
     RowBox[{"Method", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<SGD\>\"", ",", 
        RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.00001"}]}], "}"}]}],
      ","}]}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "Pour", " ", "les", " ", "donnees", " ", "de", " ", "MNIST"}], 
            ",", 
            RowBox[{"on", " ", "va", " ", "constater", " ", "L"}]}], 
           "\[CloseCurlyQuote]"}], "influence", " ", "sur", " ", "les", " ", 
          "hyper"}], "-", 
         RowBox[{"parametres", " ", "traditionnels", " ", 
          RowBox[{"(", 
           RowBox[{"Taux", " ", "d"}]}]}]}], "\[CloseCurlyQuote]"}], 
       "apprentissage"}], ",", "batchsize", ",", "regularisation"}], ")"}], 
    " ", "en", " ", "fixant", " ", "la", " ", "taille", " ", "de", " ", 
    "neurones", " ", "couches", " ", "cachees"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"errset", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Do", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"mCNNtrained", "=", 
       RowBox[{"NetTrain", "[", 
        RowBox[{"mCNNChain", ",", "mtrainset", ",", 
         RowBox[{"ValidationSet", "\[Rule]", "mvalidset"}], ",", 
         RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "5"}], ",", 
         RowBox[{"BatchSize", "\[Rule]", "50"}], ",", 
         RowBox[{"Method", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<SGD\>\"", ",", 
            RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.0"}]}], "}"}]}],
          ",", 
         RowBox[{"LearningRateMultipliers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"_", "\[Rule]", "3"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"errset", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errset", ",", 
         RowBox[{
          RowBox[{"ClassifierMeasurements", "[", 
           RowBox[{"mCNNtrained", ",", "mtestset", ",", 
            RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", ",", "3"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", "errset", "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.722354716897462*^9, 3.722354717227394*^9}, {
   3.7223547487720957`*^9, 3.722354773511971*^9}, {3.7223556375221577`*^9, 
   3.722355654695869*^9}, {3.7223564036615973`*^9, 3.722356405617536*^9}, {
   3.722356906675658*^9, 3.72235691149747*^9}, 3.722357266097829*^9, 
   3.722357308308465*^9, {3.722955548979622*^9, 
   3.722955549980337*^9}},ExpressionUUID->"f1194439-08ea-4f7d-8a19-\
b68e2799b2fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.010099999999999998`", ",", "0.010399999999999965`", ",", 
   "0.009700000000000042`"}], "}"}]], "Print",
 CellChangeTimes->{3.722356879455909*^9, 3.7223575654085197`*^9, 
  3.722908005454193*^9},ExpressionUUID->"7473d007-9bc5-4196-a1cf-\
c199df387eac"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.722292993940486*^9, 3.7222930368416357`*^9}, {
   3.722293069689041*^9, 3.722293075398614*^9}, {3.722295575611167*^9, 
   3.722295576668559*^9}, {3.722297266917914*^9, 3.722297271328426*^9}, 
   3.722297373686508*^9, {3.722299517614408*^9, 3.722299540894041*^9}, {
   3.7223460278822737`*^9, 3.722346040760524*^9}, {3.7223471779956923`*^9, 
   3.722347180473688*^9}, 
   3.72235476987451*^9},ExpressionUUID->"2176689d-12bd-4467-86e6-\
f56d51da6329"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"pour", " ", 
     RowBox[{"l", "'"}], "hyper"}], "-", 
    RowBox[{"parametre", " ", "de", " ", "regularisation"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"errtrain", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errvalid", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtest", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mCNNtrained", "=", " ", "mCNNChain"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"mCNNtrained", "=", 
        RowBox[{"NetTrain", "[", 
         RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
          RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
          RowBox[{"BatchSize", "\[Rule]", "100"}], ",", 
          RowBox[{"Method", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<SGD\>\"", ",", 
             RowBox[{
             "\"\<L2Regularization\>\"", "\[Rule]", "0.000000000001"}]}], 
            "}"}]}], ",", 
          RowBox[{"LearningRateMultipliers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"_", "\[Rule]", "1.8"}], "}"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err1", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtrain", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtrain", ",", "err1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err2", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mvalidset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errvalid", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errvalid", ",", "err2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err3", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mtestset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtest", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtest", ",", "err3"}], "]"}]}], ";"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", ",", "30"}], "]"}], ";"}],
    "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.722274508472042*^9, 3.722274549069087*^9}, 
   3.722274586272192*^9, {3.722277307578903*^9, 3.7222773187004232`*^9}, {
   3.722277626083543*^9, 3.722277703245228*^9}, {3.722290215528664*^9, 
   3.7222902640782413`*^9}, {3.722290377336994*^9, 3.72229038194059*^9}, {
   3.722290515661981*^9, 3.722290537105488*^9}, {3.722290864370579*^9, 
   3.722290898627488*^9}, {3.722291220935452*^9, 3.722291222570413*^9}, {
   3.722291605624115*^9, 3.7222916099660892`*^9}, 3.7222916704926558`*^9, 
   3.7222918297935867`*^9, {3.722291918544032*^9, 3.722291949129957*^9}, {
   3.722292030960552*^9, 3.7222920669443903`*^9}, {3.7222921050694313`*^9, 
   3.722292106803149*^9}, {3.7222921452772093`*^9, 3.7222921456570063`*^9}, 
   3.722292190424306*^9, 3.7222928897540207`*^9, {3.722292922177825*^9, 
   3.7222929340312653`*^9}, {3.722297230318598*^9, 3.722297234241726*^9}, {
   3.722297649437554*^9, 3.7222976596670847`*^9}, {3.72229799333934*^9, 
   3.722298056996819*^9}, {3.722298181866406*^9, 3.722298196753615*^9}, {
   3.722298244016877*^9, 3.722298261670019*^9}, {3.722298435065864*^9, 
   3.7222984381984653`*^9}, {3.722298563863275*^9, 3.722298564923264*^9}, {
   3.722298681010853*^9, 3.722298701471019*^9}, {3.722298793991342*^9, 
   3.722298794243541*^9}, {3.7222988912412243`*^9, 3.722298892904804*^9}, {
   3.7222991487638073`*^9, 3.722299148855255*^9}, {3.7222992576079817`*^9, 
   3.722299257715228*^9}, {3.7222993583312798`*^9, 3.722299403662281*^9}, {
   3.7222997494372387`*^9, 3.722299749907535*^9}, {3.722300056146634*^9, 
   3.7223000564736547`*^9}, {3.722346029985878*^9, 3.722346048391138*^9}, {
   3.72234718317621*^9, 3.7223472617899*^9}, {3.722347318822115*^9, 
   3.722347328627914*^9}, {3.722347404397118*^9, 3.722347508919107*^9}, {
   3.722347930720945*^9, 3.722347940300853*^9}, {3.722350461241745*^9, 
   3.722350461847713*^9}, {3.722350582816216*^9, 3.72235058379755*^9}, {
   3.722350740754136*^9, 3.722350744225481*^9}, {3.722350857760771*^9, 
   3.722350858001957*^9}, {3.722351453471246*^9, 3.722351479064321*^9}, {
   3.722351940819374*^9, 3.722351948694408*^9}, {3.7223529575577917`*^9, 
   3.7223529850860023`*^9}, {3.722353116944489*^9, 3.722353119942663*^9}, {
   3.722353308385325*^9, 3.722353309525009*^9}, {3.722353437060766*^9, 
   3.7223534638382463`*^9}, {3.722354564453753*^9, 3.7223545647376747`*^9}, {
   3.722354706876966*^9, 3.722354709462655*^9}, {3.722354777057625*^9, 
   3.722355031994789*^9}, {3.722355082293635*^9, 3.722355138757957*^9}, 
   3.72235534510131*^9, {3.722355601572412*^9, 3.72235560179075*^9}, {
   3.722355974508111*^9, 3.722355996353094*^9}, {3.7223561507264214`*^9, 
   3.722356183245229*^9}, {3.722356367867496*^9, 3.722356374565939*^9}, {
   3.722357808471727*^9, 3.722357816132512*^9}, {3.722360452712812*^9, 
   3.722360465204195*^9}, {3.72236051755269*^9, 3.722360552673332*^9}, {
   3.7223732447464037`*^9, 3.722373248142976*^9}, {3.722373436161087*^9, 
   3.722373436839167*^9}, {3.722955557172242*^9, 
   3.722955561028961*^9}},ExpressionUUID->"d177f09c-1a1e-46c5-bb7e-\
0ade4a962a7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"grande", " ", "variance"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"merrset1", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain", ",", "errvalid", ",", "errtest"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain", ",", "errvalid", ",", "errtest"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "->", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.722360471059915*^9, 3.722360499599824*^9}, {
   3.722360554328539*^9, 3.722360554938759*^9}, {3.722360645831687*^9, 
   3.722360672153698*^9}, 3.7223619515353727`*^9, {3.722371654578476*^9, 
   3.722371664703115*^9}, {3.722373279356852*^9, 3.72237331872329*^9}, {
   3.72237343935175*^9, 3.722373441462553*^9}, 
   3.722955569121216*^9},ExpressionUUID->"41546604-b241-4eaa-ab0d-\
5bbd6a1c41fe"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQEf7A+EHFyxxG+CPVTAocGwXFdRvgXK53Bg8Aj4
I1FcDuULODCc/x78eGk2lC/iwHBUYUNRRiKUL+HAoJMq+SgiHMqXcWBYwriH
VSgEyldwYChYDBRwgvKVHBgcZF4/MrOC8lWgfCkoX82BYcPHS75JClC+BlA+
1EBrpTCUr+XAgAJ00Ph6DgwNIPN+2UH4Bmjyhmh8IzS+MRrfBI1visY3Q+Ob
o/Et0PiWaHwrNL41Gt8GjW+LxreD8wGqTTV+
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQEf7BUWdG54+HKqPVTAoaGr78kn+UlQPoeDQ3j0
xv1v+qB8AYeG7Q5Nj453QPkiDiDejN1tUL6EA8NcwaV7D7ZD+TIODRpvefcZ
dEL5Cg4NV59naX+DySs5MHwQ8wj4AzNPxeHArh29bB9g5qmh8TUcDqRvflW8
tRXK13Jw+NwXXKICM0/H4YAnD5N2O0y9nsMB7VTJRxEweQM09YZofCM0/xij
yZuguccUTb2Zg4Ogmc3eIBjfHI1vgca3dDhwI77MXw7Gt0JzvzWavA2avC2a
eXZw9QCbX30d
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQEf7A+IqwWzLp5kDxVwaKioWqrj3APlczgceDPP
RudKF5Qv4OCwoHPDw5etUL6IA8Od643Fbi1QvoSDw8EVS/wcmqF8GYcDP+uy
9pTA+AoOEPuaoHwlB4Zs7W/T78LkVRwc8hYz7mGFyas5HOi4dO8BN0xeA808
LYcDpmet/S42Qvk6aPJ6aOYZODgE/JEovg7jG6LpN0JznzEa3wSNb4rGN0Pj
m6PZb+HgcN+/d3oejG+JxrdCc581mrwNGt8WzT47OB8ASnt35w==
         
         "]]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 30.}, {0, 0.021399999999999975`}}, PlotRangeClipping -> 
     True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, AxesOrigin -> {0., 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0., 30.}, {0, 0.021399999999999975`}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7223604818677053`*^9, 3.722360673214834*^9, 
  3.7223611564299307`*^9, 
  3.722371821756268*^9},ExpressionUUID->"9a31df3b-b3cd-45e6-bd0e-\
2f6468955050"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "errtest"}]], "Input",
 CellChangeTimes->{{3.7223716729572077`*^9, 
  3.7223716832692547`*^9}},ExpressionUUID->"c68cf146-d332-4c56-a372-\
8d946c1e83a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.018199999999999994`", ",", "0.013800000000000034`", ",", "0.0131`", ",", 
   "0.010700000000000043`", ",", "0.00990000000000002`", ",", 
   "0.009399999999999964`", ",", "0.009499999999999953`", ",", 
   "0.009099999999999997`", ",", "0.009700000000000042`", ",", 
   "0.00880000000000003`", ",", "0.009299999999999975`", ",", 
   "0.009499999999999953`", ",", "0.008700000000000041`", ",", 
   "0.009499999999999953`", ",", "0.00880000000000003`", ",", 
   "0.009199999999999986`", ",", "0.008700000000000041`", ",", 
   "0.009099999999999997`", ",", "0.009099999999999997`", ",", 
   "0.009099999999999997`", ",", "0.009099999999999997`", ",", 
   "0.009099999999999997`", ",", "0.00880000000000003`", ",", 
   "0.009000000000000008`", ",", "0.009000000000000008`", ",", 
   "0.009199999999999986`", ",", "0.009000000000000008`", ",", 
   "0.009000000000000008`", ",", "0.009099999999999997`", ",", 
   "0.009099999999999997`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7223717787134*^9},ExpressionUUID->"04e1fe09-6de9-46bb-8106-6a2a08e45b92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"errtrain2", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errvalid2", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtest2", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mCNNtrained", "=", " ", "mCNNChain"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"mCNNtrained", "=", 
        RowBox[{"NetTrain", "[", 
         RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
          RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
          RowBox[{"BatchSize", "\[Rule]", "100"}], ",", 
          RowBox[{"Method", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<SGD\>\"", ",", 
             RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.05"}]}], 
            "}"}]}], ",", 
          RowBox[{"LearningRateMultipliers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"_", "\[Rule]", "1.8"}], "}"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err1", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtrain2", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtrain2", ",", "err1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err2", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mvalidset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errvalid2", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errvalid2", ",", "err2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err3", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mtestset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtest2", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtest2", ",", "err3"}], "]"}]}], ";"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", ",", "10"}], "]"}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"grand", " ", "biais"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"merrset2", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain2", ",", "errvalid2", ",", "errtest2"}], "}"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain2", ",", "errvalid2", ",", "errtest2"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "->", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7223608370800133`*^9, 3.72236085723709*^9}, {
   3.7223608886813917`*^9, 3.7223609449188833`*^9}, {3.722361007326375*^9, 
   3.722361017933537*^9}, 3.722361127517578*^9, {3.722361162129179*^9, 
   3.722361164566925*^9}, {3.7223619559546957`*^9, 3.722361958669607*^9}, 
   3.722955574625222*^9},ExpressionUUID->"d76e176e-67c0-44dd-852e-\
2778777987e6"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.05602499999999999}, {2., 0.05600000000000005}, {3., 
         0.05625000000000002}, {4., 0.05615000000000003}, {5., 
         0.05282500000000001}, {6., 0.055625000000000036`}, {7., 
         0.055300000000000016`}, {8., 0.05377500000000002}, {9., 
         0.05502499999999999}, {10., 0.05102499999999999}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.06120000000000003}, {2., 0.060799999999999965`}, {3., 
         0.06059999999999999}, {4., 0.06110000000000004}, {5., 
         0.057499999999999996`}, {6., 0.06120000000000003}, {7., 0.0605}, {8.,
          0.05910000000000004}, {9., 0.060799999999999965`}, {10., 
         0.05620000000000003}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.05400000000000005}, {2., 0.051899999999999946`}, {3., 
         0.05300000000000005}, {4., 0.04949999999999999}, {5., 
         0.04920000000000002}, {6., 0.049900000000000055`}, {7., 
         0.05059999999999998}, {8., 0.05010000000000003}, {9., 
         0.049699999999999966`}, {10., 
         0.046499999999999986`}}]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0.045764999999999986`}, 
     PlotRange -> {{0., 10.}, {0.046499999999999986`, 0.06120000000000003}}, 
     PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, 
     AxesOrigin -> {0., 0.045764999999999986`}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0., 10.}, {0.046499999999999986`, 0.06120000000000003}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.72236095490851*^9, 3.72236098657638*^9, 
  3.722361109253057*^9, 
  3.7223618058783073`*^9},ExpressionUUID->"2c3fb588-e05d-406e-a42a-\
64792647a6d2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"le", " ", "bon", " ", "choix"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"errtrain3", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errvalid3", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtest3", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mCNNtrained", "=", " ", "mCNNChain"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"mCNNtrained", "=", 
        RowBox[{"NetTrain", "[", 
         RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
          RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
          RowBox[{"BatchSize", "\[Rule]", "240"}], ",", 
          RowBox[{"Method", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<SGD\>\"", ",", 
             RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.000001"}]}], 
            "}"}]}], ",", 
          RowBox[{"LearningRateMultipliers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"_", "\[Rule]", "1.7"}], "}"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err1", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtrain3", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtrain3", ",", "err1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err2", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mvalidset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errvalid3", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errvalid3", ",", "err2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err3", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"mCNNtrained", ",", "mtestset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtest3", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtest3", ",", "err3"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"err3", "<", "0.0099"}], ",", 
         RowBox[{"Break", "[", "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", ",", "30"}], "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.722362083771845*^9, 3.7223620916586103`*^9}, {
  3.722362125997707*^9, 3.722362131425474*^9}, {3.722362178604651*^9, 
  3.7223622965131598`*^9}, {3.722366798289439*^9, 3.722366798726149*^9}, {
  3.722366829773703*^9, 3.722366834103053*^9}, {3.7223676926887617`*^9, 
  3.722367692855606*^9}, {3.722368263252062*^9, 3.722368326781892*^9}, {
  3.722371894311112*^9, 3.722371896419956*^9}, {3.722371989003133*^9, 
  3.722372018002603*^9}, {3.722372111036474*^9, 3.722372115131445*^9}, {
  3.722374930034256*^9, 3.722374939120405*^9}, {3.722374978871715*^9, 
  3.722374987783661*^9}, {3.722378543434288*^9, 3.722378588678508*^9}, {
  3.722380627021771*^9, 3.7223806449154053`*^9}, {3.722381153060111*^9, 
  3.72238115720955*^9}, {3.722383195009404*^9, 3.72238319540563*^9}, {
  3.7223859343524113`*^9, 3.722385964194515*^9}, {3.722955578507596*^9, 
  3.7229555793294673`*^9}},ExpressionUUID->"c0c3b525-a473-41ce-959a-\
0c067ac6a5e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"la", " ", "bonne", " ", "courbe"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Taux d'erreur sur test:\>\"", ",", "err3"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"merrset3", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain3", ",", "errvalid3", ",", "errtest3"}], "}"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain3", ",", "errvalid3", ",", "errtest3"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "->", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.722385842601619*^9, 3.722385863005845*^9}, 
   3.722386023594462*^9, {3.7223877652270947`*^9, 3.722387766829567*^9}, {
   3.722955585037874*^9, 
   3.7229555859854507`*^9}},ExpressionUUID->"b31172e0-6222-47ab-9da0-\
ffb4e3b6dc56"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux d'erreur sur test:\"\>", "\[InvisibleSpace]", 
   "0.009800000000000031`"}],
  SequenceForm["Taux d'erreur sur test:", 0.009800000000000031],
  Editable->False]], "Print",
 CellChangeTimes->{3.7223858657599363`*^9, 3.72238773753756*^9, 
  3.722387768054438*^9},ExpressionUUID->"ddffe2dd-e006-4480-bd83-\
44728fdbf2fe"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQ3T37GPPOTAaHDTJRKdb3l9szgAGHg4LVpNP1HvOh
fAGHhF2ePEza06F8EQeFQ23Lw09NgvIlHBT+K/79VjoBypdxaKioWqrj3APl
KzgwfPWKbLNog/KVHBr2lEyWYIHxVRwa5FpfB+6og/LVHBocE55eUKqG8jUc
GE4ddlqbCZPXcmi4JV2TaFQK5es4MHwQ8wj4UwHl6zkwrLsRX+afB+UbODBM
MCzXVcyH8g2h6jOgfCMHBs23vPsMMqF8YwcG6XlxmqcToHwTB4ZVHy/5JsH4
pg4MAX8kiq8nQflmDgyPj8/YPQ0mb+7AMEdw6d6D4VC+hQODDMi8ACjfEqrf
yR4AzhJeKA==
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQPadbb9eLRUwOG2SiUqzvL7dnAAMOhwWdGx6+nLoI
yhdweBAhvv0iwzwoX8RhAZebainTLChfwqHBbco3tvgZUL6Mg0PTo+Mzdk+D
8hUcHgh9cjyfNhXKV3JI8D7BbjsbxldxYDicsiohZBKUr+aQsML0rLXfRChf
w0Ghx+sViwmMr+Ww4IjChqIMGF/HweHYna0tNROgfD2HA3KtrwN39EH5Bg4O
lltOlO3rh/INHRoKpXkf6MLUGzk4gJwTCpM3RpM3QZM3dTjAcI+JswvGN3No
iLq857FIL5Rv7sDAEsanuwnGt3A4sPZGfJk/zD2WDg0v1Qw51vTYAwBi3WPo

         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQ7bXCt/yr3X/7DTJRKdb3l9szQIDDhpaaC5sjl0L5
HA4Odi9urvk1B8oXcHgwR3Dp3oPToXwRhwV3J7e3Rk2G8iUcDoirBbMungTl
yzgkSD6KEN8+EcpXcDgg1/o6cEcflK/kcODc9+DHS7uhfBWHBhudK7Oe9UL5
ag4OW06U7ZvfBeVroKnXcjhQ/WlDQDZMXseB4VJ+PPu5Tihfz6Hh6vMs7W/t
UL6BgwPQt/69ML6hg4Ogmc3eoDYo38jhwK4dvWwfYHxjhwM34sv85WB8EzS+
qcMBLjfVUiaY/WYOBzx5mLTbYfLmDg0i69wfVrVA+RZo+i0dGhYz7mEVarEH
AHCvbuo=
         "]]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 25.}, {0, 0.04662500000000003}}, PlotRangeClipping -> 
     True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, AxesOrigin -> {0., 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0., 25.}, {0, 0.04662500000000003}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.722385865748282*^9, 3.722387737523369*^9, 
  3.722387768142785*^9},ExpressionUUID->"139a074a-7ed1-4768-bdce-\
51c62915c32f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\

Conclusion\[NonBreakingSpace]:
1.\tOn conseille d\[CloseCurlyQuote]essayer quelques valeurs sur certains de \
hyper-param\[EGrave]tres en fixant les autres hyper-param\[EGrave]tres pour \
obtenir des exp\[EAcute]riences sur la question r\[EAcute]elle. \
\[CapitalEAcute]tant donn\[EAcute] que le nombre \
d\[CloseCurlyQuote]hyper-param\[EGrave]tres est \[EAcute]lev\[EAcute], l\
\[CloseCurlyQuote]ex\[EAcute]cution du programme peut prendre beaucoup de \
temps. Il est conseill\[EAcute] d\[CloseCurlyQuote]y aller par combinaison d\
\[CloseCurlyQuote]hyper-param\[EGrave]tres.
2.\tSi on a un ensemble de donn\[EAcute]es assez grand, on peut \
entra\[IHat]ner un mod\[EGrave]le avec une plus grande capacit\[EAcute] sans \
avoir peur d\[CloseCurlyQuote]\[EHat]tre dans une situation de \
sur-apprentissage.
\
\>", "Subtitle",
 CellChangeTimes->{{3.722440730405573*^9, 3.722440734926293*^9}, {
  3.7229433637685575`*^9, 3.7229433976328487`*^9}, {3.72294343486346*^9, 
  3.722943481559044*^9}, {3.722943519345518*^9, 
  3.722943604734894*^9}},ExpressionUUID->"f693a5eb-bcd1-4c79-9899-\
d76ca8640249"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"mCNNtrained", ",", "mtrainset", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Error\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"mCNNtrained", ",", "mtestset", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Error\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.722354318282771*^9, {3.722354464725803*^9, 3.722354503181295*^9}, {
   3.722378182277834*^9, 3.722378195265952*^9}, {3.722378235883922*^9, 
   3.722378238084519*^9}},ExpressionUUID->"7d507978-3b53-4396-960e-\
9b4259946eee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0005749999999999922`", ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggmIQGwI+2NOKVrh79bKx6jv7BboZ0zROvLHflG8gMffu
c5LNaSxL9Dpf8c7+ZvrfI2Is7+yNS8+ZJwi/xqlelS/tz+uFb+yLyybOYDz5
wN7v7dZlF0tLSTb/4krpfkb/d/Z7Tm1aK5/21r646P/yuoqXVHMnqXRtXePM
dQdf219Wf5og+uiRPUfO1F+7WjdSLTxp7X5ctHZwqt421vf2Ot1Stl2X7th/
SQk+KPMmgub2kkqTmh7ePy2+m7rvrX1O087aKzH37Vv0foVcP5gz4P6glL7D
wL98ouwb+z5XrsWvip/Yn1tyVP2k9NEBdxel9O2f8c9Pdr22vzNjhy77p4f2
CV/eHynSaBsy5QYuc+4dv3/7SuQ7+wuan0+zatyzT/GY6XaIJXXAwplU/+JS
7zihaWW66Bt7+0fqk6eHPLTX8Qnd4vO1YtC5n1z6YZXIOveHt6B8BoaBKp+p
Ze82rptxS43e2u//HbLR1vKBvVMI4/6224VDJh2SSgMAeN1NRg==
     "], {{0, 0}, {10, 
     10}}, {0, 1}],
    Epilog->{{
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3996", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3996", "\" examples of \"", "0", "\" correctly classified\""}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9997498123592694`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9998748905292131`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3996, " examples of ", 0, " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 0.9997498123592694}], 
           Row[{"FScore = ", 0.9998748905292131}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4490", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4490", "\" examples of \"", "1", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9993322946806142`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9995547640249333`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9994435169727324`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4490, " examples of ", 1, " correctly classified"}], 
           Row[{"Precision = ", 0.9993322946806142}], 
           Row[{"Recall = ", 0.9995547640249333}], 
           Row[{"FScore = ", 0.9994435169727324}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00022256843979523704`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000253613999492772`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.00022256843979523704`}], 
           Row[{"Row fraction = ", 0.000253613999492772}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "7", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00022256843979523704`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002390628735357399`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 7, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.00022256843979523704`}], 
           Row[{"Row fraction = ", 0.0002390628735357399}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "8", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00022256843979523704`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.00025906735751295336`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 8, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.00022256843979523704`}], 
           Row[{"Row fraction = ", 0.00025906735751295336`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "1", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00025342118601115053`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002226179875333927`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 1, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.00025342118601115053`}], 
           Row[{"Row fraction = ", 0.0002226179875333927}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3941", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3941", "\" examples of \"", "2", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9987328940699443`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9994927720010145`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9991126885536823`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3941, " examples of ", 2, " correctly classified"}], 
           Row[{"Precision = ", 0.9987328940699443}], 
           Row[{"Recall = ", 0.9994927720010145}], 
           Row[{"FScore = ", 0.9991126885536823}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "3", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00025342118601115053`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00024515812699190976`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 3, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.00025342118601115053`}], 
           Row[{"Row fraction = ", 0.00024515812699190976`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "7", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00025342118601115053`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002390628735357399`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 7, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.00025342118601115053`}], 
           Row[{"Row fraction = ", 0.0002390628735357399}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "8", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0005068423720223011`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0005181347150259067`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 8, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.0005068423720223011}], 
           Row[{"Row fraction = ", 0.0005181347150259067}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4077", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4077", "\" examples of \"", "3", "\" correctly classified\""}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9995096837460162`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9997547817557627`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4077, " examples of ", 3, " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 0.9995096837460162}], 
           Row[{"FScore = ", 0.9997547817557627}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3889", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3889", "\" examples of \"", "4", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9984595635430038`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9989725147701002`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9987159732922446`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3889, " examples of ", 4, " correctly classified"}], 
           Row[{"Precision = ", 0.9984595635430038}], 
           Row[{"Recall = ", 0.9989725147701002}], 
           Row[{"FScore = ", 0.9987159732922446}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "6", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0005134788189987163`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0004977600796416127`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 6, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.0005134788189987163}], 
           Row[{"Row fraction = ", 0.0004977600796416127}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "8", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00025673940949935817`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00025906735751295336`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 8, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.00025673940949935817`}], 
           Row[{"Row fraction = ", 0.00025906735751295336`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "9", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0007702182284980744`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0007562389715149988`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", 9, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.0007702182284980744}], 
           Row[{"Row fraction = ", 0.0007562389715149988}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3568", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3568", "\" examples of \"", "5", "\" correctly classified\""}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3568, " examples of ", 5, " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "0", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00024888003982080636`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002501876407305479`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 0, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.00024888003982080636`}], 
           Row[{"Row fraction = ", 0.0002501876407305479}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "4", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00024888003982080636`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00025687130747495504`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 4, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.00024888003982080636`}], 
           Row[{"Row fraction = ", 0.00025687130747495504`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4016", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4016", "\" examples of \"", "6", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9995022399203584`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9995022399203584`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9995022399203585`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4016, " examples of ", 6, " correctly classified"}], 
           Row[{"Precision = ", 0.9995022399203584}], 
           Row[{"Recall = ", 0.9995022399203584}], 
           Row[{"FScore = ", 0.9995022399203585}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "1", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00023889154323936931`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002226179875333927`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 1, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.00023889154323936931`}], 
           Row[{"Row fraction = ", 0.0002226179875333927}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00023889154323936931`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000253613999492772`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.00023889154323936931`}], 
           Row[{"Row fraction = ", 0.000253613999492772}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "4", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00047778308647873863`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0005137426149499101`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 4, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.00047778308647873863`}], 
           Row[{"Row fraction = ", 0.0005137426149499101}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4181", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4181", "\" examples of \"", "7", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9988055422838031`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9995218742529285`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9991635798781217`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4181, " examples of ", 7, " correctly classified"}], 
           Row[{"Precision = ", 0.9988055422838031}], 
           Row[{"Recall = ", 0.9995218742529285}], 
           Row[{"FScore = ", 0.9991635798781217}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "9", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00023889154323936931`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00025207965717166626`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 9, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.00023889154323936931`}], 
           Row[{"Row fraction = ", 0.00025207965717166626`}]}], 
         "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3856", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3856", "\" examples of \"", "8", "\" correctly classified\""}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9989637305699481`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9994815966822187`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3856, " examples of ", 8, " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 0.9989637305699481}], 
           Row[{"FScore = ", 0.9994815966822187}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "3", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00025220680958385876`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00024515812699190976`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 3, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.00025220680958385876`}], 
           Row[{"Row fraction = ", 0.00024515812699190976`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "4", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00025220680958385876`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00025687130747495504`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 4, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.00025220680958385876`}], 
           Row[{"Row fraction = ", 0.00025687130747495504`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3963", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3963", "\" examples of \"", "9", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9994955863808322`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9989916813713133`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9992435703479576`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3963, " examples of ", 9, " correctly classified"}], 
           Row[{"Precision = ", 0.9994955863808322}], 
           Row[{"Recall = ", 0.9989916813713133}], 
           Row[{"FScore = ", 0.9992435703479576}]}], "Tooltip"]& ]}, 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3997", "\" example\"", "\"s\"", "\" of class \"", "0"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9997498123592694`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3997, " example", "s", " of class ", 0}], 
          Row[{"Recall = ", 0.9997498123592694}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4492", "\" example\"", "\"s\"", "\" of class \"", "1"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9995547640249333`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4492, " example", "s", " of class ", 1}], 
          Row[{"Recall = ", 0.9995547640249333}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3943", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9994927720010145`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3943, " example", "s", " of class ", 2}], 
          Row[{"Recall = ", 0.9994927720010145}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4079", "\" example\"", "\"s\"", "\" of class \"", "3"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9995096837460162`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4079, " example", "s", " of class ", 3}], 
          Row[{"Recall = ", 0.9995096837460162}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3893", "\" example\"", "\"s\"", "\" of class \"", "4"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9989725147701002`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3893, " example", "s", " of class ", 4}], 
          Row[{"Recall = ", 0.9989725147701002}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3568", "\" example\"", "\"s\"", "\" of class \"", "5"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3568, " example", "s", " of class ", 5}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4018", "\" example\"", "\"s\"", "\" of class \"", "6"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9995022399203584`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4018, " example", "s", " of class ", 6}], 
          Row[{"Recall = ", 0.9995022399203584}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4183", "\" example\"", "\"s\"", "\" of class \"", "7"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9995218742529285`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4183, " example", "s", " of class ", 7}], 
          Row[{"Recall = ", 0.9995218742529285}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3860", "\" example\"", "\"s\"", "\" of class \"", "8"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9989637305699481`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3860, " example", "s", " of class ", 8}], 
          Row[{"Recall = ", 0.9989637305699481}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3967", "\" example\"", "\"s\"", "\" of class \"", "9"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9989916813713133`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3967, " example", "s", " of class ", 9}], 
          Row[{"Recall = ", 0.9989916813713133}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3996", "\" example\"", "\"s\"", "\" classified as \"", "0"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3996, " example", "s", " classified as ", 0}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4493", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9993322946806142`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4493, " example", "s", " classified as ", 1}], 
          Row[{"Precision = ", 0.9993322946806142}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3946", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9987328940699443`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3946, " example", "s", " classified as ", 2}], 
          Row[{"Precision = ", 0.9987328940699443}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4077", "\" example\"", "\"s\"", "\" classified as \"", "3"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4077, " example", "s", " classified as ", 3}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3895", "\" example\"", "\"s\"", "\" classified as \"", "4"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9984595635430038`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3895, " example", "s", " classified as ", 4}], 
          Row[{"Precision = ", 0.9984595635430038}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3568", "\" example\"", "\"s\"", "\" classified as \"", "5"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3568, " example", "s", " classified as ", 5}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4018", "\" example\"", "\"s\"", "\" classified as \"", "6"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9995022399203584`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4018, " example", "s", " classified as ", 6}], 
          Row[{"Precision = ", 0.9995022399203584}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4186", "\" example\"", "\"s\"", "\" classified as \"", "7"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9988055422838031`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4186, " example", "s", " classified as ", 7}], 
          Row[{"Precision = ", 0.9988055422838031}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3856", "\" example\"", "\"s\"", "\" classified as \"", "8"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3856, " example", "s", " classified as ", 8}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3965", "\" example\"", "\"s\"", "\" classified as \"", "9"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9994955863808322`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3965, " example", "s", " classified as ", 9}], 
          Row[{"Precision = ", 0.9994955863808322}]}], "Tooltip"]& ]},
    Frame->True,
    FrameLabel->{
      FormBox["\"predicted class\"", TraditionalForm], 
      FormBox["\"actual class\"", TraditionalForm]},
    FrameTicks->{{{{9.5, 
         FormBox[
          RotationBox["0", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["3", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["4", BoxRotation -> 0.], TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["5", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["6", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["7", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["8", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
         FormBox[
          RotationBox["9", BoxRotation -> 0.], TraditionalForm]}}, {{9.5, 
         FormBox["3997", TraditionalForm]}, {8.5, 
         FormBox["4492", TraditionalForm]}, {7.5, 
         FormBox["3943", TraditionalForm]}, {6.5, 
         FormBox["4079", TraditionalForm]}, {5.5, 
         FormBox["3893", TraditionalForm]}, {4.5, 
         FormBox["3568", TraditionalForm]}, {3.5, 
         FormBox["4018", TraditionalForm]}, {2.5, 
         FormBox["4183", TraditionalForm]}, {1.5, 
         FormBox["3860", TraditionalForm]}, {0.5, 
         FormBox["3967", TraditionalForm]}}}, {{{0.5, 
         FormBox[
          RotationBox["3996", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["4493", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["3946", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["4077", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["3895", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["3568", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["4018", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["4186", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["3856", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["3965", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}, {{0.5, 
         FormBox[
          RotationBox["0", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["1", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["2", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["3", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["4", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["5", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["6", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["7", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["8", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["9", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}}},
    FrameTicksStyle->12,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->300,
    Method->{
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]},
    PlotRangePadding->None,
    ImageCache->GraphicsData["CompressedBitmap", "\<\
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
7HFG8D+D9SfQ\
\>"]]}], "}"}]], "Output",
 CellChangeTimes->{3.722354495934181*^9, 3.7223545312508783`*^9, 
  3.722378217376355*^9, 3.7223782590360317`*^9, 
  3.722388142225404*^9},ExpressionUUID->"3a05afa5-6ded-4dbc-8a00-\
6d2e8d3c4bc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.009800000000000031`", ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggmIQu4SR8duzxHf2z9pe/2xb+9b+mHzVegujV/bBSlf+
Oja9s393VDL7lPo7+3unu61tC17jFGcAgw8YdEPel9v/77+1d/T9Xb/i0Gv7
lV7ZB3JNn9rjsheXOdfntd+7yvDO/sLJhGV77N7Yt0i7cmtXPMOp/vCqvw0R
s9/a39dK9a1YdN9+gYxg68yGPJLtnfpA9123I9Cf7ns7nI3f2q8rzlA2+fKC
5PAh1V5c5iz/lx4tbvvGvnWOqpG27kP7r2Vxyck/yu237Y96ZqD4zv46R784
w8439jOPh03X3/Ycp/m41GvaJd7U3P/WftOFqZFT3F7bn6ucWLrh02OS3YlL
PS763BM3/ejWd/YrGNPO9Fy8a2+xoLqe+VYS1cKZ1PAnNT3gEj/6YFfK2aOv
7X3zvC6tWvzQ/k/xpb5pH6pItpdaNK5wIzV/5TVrObHvem2/aIr0+zkHHtl7
ZFrv9n+3jmruGajwedQT0MWn8tbeLP36sd3uD+yDuv+8rbcoorm9pJYzpIbn
nqJf22UE39nPfeaTVL/jnr3K14m7Zy3OINk9pPqLWvULLvH6dSFLN/x/Z98w
f+fDhnt37FWYWqTntEZSLV1Ry53kpouHVSLr3B/egvJx19fU8het2wMLj6VM
ur3pjX1K1cw9ejse2Js/nvfvMWfpgJV7uNon1IpHAE0EW+4=
     "], {{0, 0}, {10, 
     10}}, {0, 1}],
    Epilog->{{
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["971", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "971", "\" examples of \"", "0", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9918283963227783`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9908163265306122`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9913221031138336`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{971, " examples of ", 0, " correctly classified"}], 
           Row[{"Precision = ", 0.9918283963227783}], 
           Row[{"Recall = ", 0.9908163265306122}], 
           Row[{"FScore = ", 0.9913221031138336}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010214504596527069`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009689922480620155`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.0010214504596527069`}], 
           Row[{"Row fraction = ", 0.0009689922480620155}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "3", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010214504596527069`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009900990099009901`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 3, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.0010214504596527069`}], 
           Row[{"Row fraction = ", 0.0009900990099009901}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "6", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0020429009193054137`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0020876826722338203`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 6, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.0020429009193054137`}], 
           Row[{"Row fraction = ", 0.0020876826722338203`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "8", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0020429009193054137`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.002053388090349076`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 8, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.0020429009193054137`}], 
           Row[{"Row fraction = ", 0.002053388090349076}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "9", "\" misclassified as \"", "0"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0020429009193054137`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0019821605550049554`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 9, " misclassified as ", 0}], 
           Row[{"Column fraction = ", 0.0020429009193054137`}], 
           Row[{"Row fraction = ", 0.0019821605550049554`}]}], 
         "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1128", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1128", "\" examples of \"", "1", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9929577464788732`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9938325991189427`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9933949801849404`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1128, " examples of ", 1, " correctly classified"}], 
           Row[{"Precision = ", 0.9929577464788732}], 
           Row[{"Recall = ", 0.9938325991189427}], 
           Row[{"FScore = ", 0.9933949801849404}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0008802816901408451`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009689922480620155`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.0008802816901408451}], 
           Row[{"Row fraction = ", 0.0009689922480620155}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "6", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0017605633802816902`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0020876826722338203`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 6, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.0017605633802816902`}], 
           Row[{"Row fraction = ", 0.0020876826722338203`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "7", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0035211267605633804`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0038910505836575876`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", 7, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.0035211267605633804`}], 
           Row[{"Row fraction = ", 0.0038910505836575876`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "9", "\" misclassified as \"", "1"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0008802816901408451`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009910802775024777`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 9, " misclassified as ", 1}], 
           Row[{"Column fraction = ", 0.0008802816901408451}], 
           Row[{"Row fraction = ", 0.0009910802775024777}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0019175455417066154`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001762114537444934`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 1, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.0019175455417066154`}], 
           Row[{"Row fraction = ", 0.001762114537444934}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1026", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1026", "\" examples of \"", "2", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9837008628954937`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9941860465116279`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9889156626506023`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1026, " examples of ", 2, " correctly classified"}], 
           Row[{"Precision = ", 0.9837008628954937}], 
           Row[{"Recall = ", 0.9941860465116279}], 
           Row[{"FScore = ", 0.9889156626506023}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "3", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009587727708533077`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009900990099009901`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 3, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.0009587727708533077}], 
           Row[{"Row fraction = ", 0.0009900990099009901}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "5", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009587727708533077`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0011210762331838565`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 5, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.0009587727708533077}], 
           Row[{"Row fraction = ", 0.0011210762331838565`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["9", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "9", "\" examples of \"", "7", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00862895493767977`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.008754863813229572`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{9, " examples of ", 7, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.00862895493767977}], 
           Row[{"Row fraction = ", 0.008754863813229572}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "8", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0028763183125599234`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.003080082135523614`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", 8, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.0028763183125599234`}], 
           Row[{"Row fraction = ", 0.003080082135523614}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "9", "\" misclassified as \"", "2"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009587727708533077`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009910802775024777`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 9, " misclassified as ", 2}], 
           Row[{"Column fraction = ", 0.0009587727708533077}], 
           Row[{"Row fraction = ", 0.0009910802775024777}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009910802775024777`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009689922480620155`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.0009910802775024777}], 
           Row[{"Row fraction = ", 0.0009689922480620155}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1002", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1002", "\" examples of \"", "3", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9930624380574826`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9920792079207921`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9925705794947993`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1002, " examples of ", 3, " correctly classified"}], 
           Row[{"Precision = ", 0.9930624380574826}], 
           Row[{"Recall = ", 0.9920792079207921}], 
           Row[{"FScore = ", 0.9925705794947993}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "5", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004955401387512388`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.005605381165919282`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{5, " examples of ", 5, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.004955401387512388}], 
           Row[{"Row fraction = ", 0.005605381165919282}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "8", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009910802775024777`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001026694045174538`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 8, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.0009910802775024777}], 
           Row[{"Row fraction = ", 0.001026694045174538}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "3"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 3}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["979", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "979", "\" examples of \"", "4", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.987891019172553`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9969450101832994`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9923973644196654`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{979, " examples of ", 4, " correctly classified"}], 
           Row[{"Precision = ", 0.987891019172553}], 
           Row[{"Recall = ", 0.9969450101832994}], 
           Row[{"FScore = ", 0.9923973644196654}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "6", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0030272452068617556`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.003131524008350731`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", 6, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.0030272452068617556`}], 
           Row[{"Row fraction = ", 0.003131524008350731}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "7", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010090817356205853`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009727626459143969`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 7, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.0010090817356205853`}], 
           Row[{"Row fraction = ", 0.0009727626459143969}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "8", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010090817356205853`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001026694045174538`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 8, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.0010090817356205853`}], 
           Row[{"Row fraction = ", 0.001026694045174538}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "9", "\" misclassified as \"", "4"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007063572149344097`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.006937561942517344`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", 9, " misclassified as ", 4}], 
           Row[{"Column fraction = ", 0.007063572149344097}], 
           Row[{"Row fraction = ", 0.006937561942517344}]}], "Tooltip"]& ]}, {
      
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "0", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0011148272017837235`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0010204081632653062`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 0, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.0011148272017837235`}], 
           Row[{"Row fraction = ", 0.0010204081632653062`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "1", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0011148272017837235`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000881057268722467`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 1, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.0011148272017837235`}], 
           Row[{"Row fraction = ", 0.000881057268722467}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "3", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0033444816053511705`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0029702970297029703`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", 3, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.0033444816053511705`}], 
           Row[{"Row fraction = ", 0.0029702970297029703`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["885", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "885", "\" examples of \"", "5", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9866220735785953`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.992152466367713`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9893795416433763`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{885, " examples of ", 5, " correctly classified"}], 
           Row[{"Precision = ", 0.9866220735785953}], 
           Row[{"Recall = ", 0.992152466367713}], 
           Row[{"FScore = ", 0.9893795416433763}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "6", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0033444816053511705`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.003131524008350731`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", 6, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.0033444816053511705`}], 
           Row[{"Row fraction = ", 0.003131524008350731}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "8", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.002229654403567447`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.002053388090349076`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 8, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.002229654403567447}], 
           Row[{"Row fraction = ", 0.002053388090349076}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "9", "\" misclassified as \"", "5"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.002229654403567447`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0019821605550049554`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 9, " misclassified as ", 5}], 
           Row[{"Column fraction = ", 0.002229654403567447}], 
           Row[{"Row fraction = ", 0.0019821605550049554`}]}], 
         "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "0", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007306889352818371`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.007142857142857143`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", 0, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.007306889352818371}], 
           Row[{"Row fraction = ", 0.007142857142857143}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "1", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0020876826722338203`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001762114537444934`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 1, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.0020876826722338203`}], 
           Row[{"Row fraction = ", 0.001762114537444934}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010438413361169101`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009689922480620155`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.0010438413361169101`}], 
           Row[{"Row fraction = ", 0.0009689922480620155}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["948", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "948", "\" examples of \"", "6", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9895615866388309`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.9895615866388309`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9895615866388308`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{948, " examples of ", 6, " correctly classified"}], 
           Row[{"Precision = ", 0.9895615866388309}], 
           Row[{"Recall = ", 0.9895615866388309}], 
           Row[{"FScore = ", 0.9895615866388308}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "7", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 7, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "8", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 8, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "6"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 6}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "0", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009794319294809011`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0010204081632653062`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 0, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.0009794319294809011}], 
           Row[{"Row fraction = ", 0.0010204081632653062`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "1", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009794319294809011`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000881057268722467`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 1, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.0009794319294809011}], 
           Row[{"Row fraction = ", 0.000881057268722467}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009794319294809011`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009689922480620155`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.0009794319294809011}], 
           Row[{"Row fraction = ", 0.0009689922480620155}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "3", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 3, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1012", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1012", "\" examples of \"", "7", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9911851126346719`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9844357976653697`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9877989263055149`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1012, " examples of ", 7, " correctly classified"}], 
           Row[{"Precision = ", 0.9911851126346719}], 
           Row[{"Recall = ", 0.9844357976653697}], 
           Row[{"FScore = ", 0.9877989263055149}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "8", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009794319294809011`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001026694045174538`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 8, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.0009794319294809011}], 
           Row[{"Row fraction = ", 0.001026694045174538}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "9", "\" misclassified as \"", "7"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004897159647404506`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.004955401387512388`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{5, " examples of ", 9, " misclassified as ", 7}], 
           Row[{"Column fraction = ", 0.004897159647404506}], 
           Row[{"Row fraction = ", 0.004955401387512388}]}], "Tooltip"]& ]}, {
      
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "1", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010351966873706005`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.000881057268722467`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 1, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.0010351966873706005`}], 
           Row[{"Row fraction = ", 0.000881057268722467}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "2", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010351966873706005`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009689922480620155`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 2, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.0010351966873706005`}], 
           Row[{"Row fraction = ", 0.0009689922480620155}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             TemplateBox[{
              "2", "\" examples of \"", "3", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.002070393374741201`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0019801980198019802`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", 3, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.002070393374741201}], 
           Row[{"Row fraction = ", 0.0019801980198019802`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "4", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 4, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "5", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010351966873706005`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0011210762331838565`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 5, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.0010351966873706005`}], 
           Row[{"Row fraction = ", 0.0011210762331838565`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "7", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010351966873706005`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009727626459143969`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 7, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.0010351966873706005`}], 
           Row[{"Row fraction = ", 0.0009727626459143969}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["960", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "960", "\" examples of \"", "8", "\" correctly classified\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9937888198757764`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9856262833675564`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9896907216494845`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{960, " examples of ", 8, " correctly classified"}], 
           Row[{"Precision = ", 0.9937888198757764}], 
           Row[{"Recall = ", 0.9856262833675564}], 
           Row[{"FScore = ", 0.9896907216494845}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "9", "\" misclassified as \"", "8"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 9, " misclassified as ", 8}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "0", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 0, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "1", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 1, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "2", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 2, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "3", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009900990099009901`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 3, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.001}], 
           Row[{"Row fraction = ", 0.0009900990099009901}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "4", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.003`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.003054989816700611`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", 4, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.003}], 
           Row[{"Row fraction = ", 0.003054989816700611}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "5", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 5, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "6", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", 6, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "7", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009727626459143969`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", 7, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.001}], 
           Row[{"Row fraction = ", 0.0009727626459143969}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "8", "\" misclassified as \"", "9"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.004106776180698152`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", 8, " misclassified as ", 9}], 
           Row[{"Column fraction = ", 0.004}], 
           Row[{"Row fraction = ", 0.004106776180698152}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["991", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "991", "\" examples of \"", "9", "\" correctly classified\""}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "0.991`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9821605550049554`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9865604778496765`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{991, " examples of ", 9, " correctly classified"}], 
           Row[{"Precision = ", 0.991}], 
           Row[{"Recall = ", 0.9821605550049554}], 
           Row[{"FScore = ", 0.9865604778496765}]}], "Tooltip"]& ]}, 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "980", "\" example\"", "\"s\"", "\" of class \"", "0"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9908163265306122`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{980, " example", "s", " of class ", 0}], 
          Row[{"Recall = ", 0.9908163265306122}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1135", "\" example\"", "\"s\"", "\" of class \"", "1"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9938325991189427`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1135, " example", "s", " of class ", 1}], 
          Row[{"Recall = ", 0.9938325991189427}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1032", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9941860465116279`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1032, " example", "s", " of class ", 2}], 
          Row[{"Recall = ", 0.9941860465116279}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1010", "\" example\"", "\"s\"", "\" of class \"", "3"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9920792079207921`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1010, " example", "s", " of class ", 3}], 
          Row[{"Recall = ", 0.9920792079207921}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "982", "\" example\"", "\"s\"", "\" of class \"", "4"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9969450101832994`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{982, " example", "s", " of class ", 4}], 
          Row[{"Recall = ", 0.9969450101832994}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "892", "\" example\"", "\"s\"", "\" of class \"", "5"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.992152466367713`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{892, " example", "s", " of class ", 5}], 
          Row[{"Recall = ", 0.992152466367713}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "958", "\" example\"", "\"s\"", "\" of class \"", "6"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9895615866388309`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{958, " example", "s", " of class ", 6}], 
          Row[{"Recall = ", 0.9895615866388309}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1028", "\" example\"", "\"s\"", "\" of class \"", "7"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9844357976653697`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1028, " example", "s", " of class ", 7}], 
          Row[{"Recall = ", 0.9844357976653697}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "974", "\" example\"", "\"s\"", "\" of class \"", "8"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9856262833675564`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{974, " example", "s", " of class ", 8}], 
          Row[{"Recall = ", 0.9856262833675564}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1009", "\" example\"", "\"s\"", "\" of class \"", "9"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9821605550049554`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1009, " example", "s", " of class ", 9}], 
          Row[{"Recall = ", 0.9821605550049554}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "979", "\" example\"", "\"s\"", "\" classified as \"", "0"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9918283963227783`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{979, " example", "s", " classified as ", 0}], 
          Row[{"Precision = ", 0.9918283963227783}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1136", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9929577464788732`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1136, " example", "s", " classified as ", 1}], 
          Row[{"Precision = ", 0.9929577464788732}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1043", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9837008628954937`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1043, " example", "s", " classified as ", 2}], 
          Row[{"Precision = ", 0.9837008628954937}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1009", "\" example\"", "\"s\"", "\" classified as \"", "3"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9930624380574826`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1009, " example", "s", " classified as ", 3}], 
          Row[{"Precision = ", 0.9930624380574826}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "991", "\" example\"", "\"s\"", "\" classified as \"", "4"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.987891019172553`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{991, " example", "s", " classified as ", 4}], 
          Row[{"Precision = ", 0.987891019172553}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "897", "\" example\"", "\"s\"", "\" classified as \"", "5"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9866220735785953`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{897, " example", "s", " classified as ", 5}], 
          Row[{"Precision = ", 0.9866220735785953}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "958", "\" example\"", "\"s\"", "\" classified as \"", "6"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9895615866388309`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{958, " example", "s", " classified as ", 6}], 
          Row[{"Precision = ", 0.9895615866388309}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1021", "\" example\"", "\"s\"", "\" classified as \"", "7"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9911851126346719`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1021, " example", "s", " classified as ", 7}], 
          Row[{"Precision = ", 0.9911851126346719}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "966", "\" example\"", "\"s\"", "\" classified as \"", "8"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9937888198757764`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{966, " example", "s", " classified as ", 8}], 
          Row[{"Precision = ", 0.9937888198757764}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" classified as \"", "9"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "0.991`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " classified as ", 9}], 
          Row[{"Precision = ", 0.991}]}], "Tooltip"]& ]},
    Frame->True,
    FrameLabel->{
      FormBox["\"predicted class\"", TraditionalForm], 
      FormBox["\"actual class\"", TraditionalForm]},
    FrameTicks->{{{{9.5, 
         FormBox[
          RotationBox["0", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["3", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["4", BoxRotation -> 0.], TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["5", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["6", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["7", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["8", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
         FormBox[
          RotationBox["9", BoxRotation -> 0.], TraditionalForm]}}, {{9.5, 
         FormBox["980", TraditionalForm]}, {8.5, 
         FormBox["1135", TraditionalForm]}, {7.5, 
         FormBox["1032", TraditionalForm]}, {6.5, 
         FormBox["1010", TraditionalForm]}, {5.5, 
         FormBox["982", TraditionalForm]}, {4.5, 
         FormBox["892", TraditionalForm]}, {3.5, 
         FormBox["958", TraditionalForm]}, {2.5, 
         FormBox["1028", TraditionalForm]}, {1.5, 
         FormBox["974", TraditionalForm]}, {0.5, 
         FormBox["1009", TraditionalForm]}}}, {{{0.5, 
         FormBox[
          RotationBox["979", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["1136", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["1043", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["1009", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["991", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["897", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["958", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["1021", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["966", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["1000", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}, {{0.5, 
         FormBox[
          RotationBox["0", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["1", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["2", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["3", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["4", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["5", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["6", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["7", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["8", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["9", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}}},
    FrameTicksStyle->12,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->300,
    Method->{
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]},
    PlotRangePadding->None,
    ImageCache->GraphicsData["CompressedBitmap", "\<\
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
KM2JNsH0xGggB09UqEjk5qXBHRLFi54a68nGgA7ruRY4s6ew3k7qwxrRZb2g
TwhnC6h/mzZT97WgbZroULpJcWiLfNJEEPXxJf3Uj+vPptWXxrrn+ydpe1x/
9n/vlM/fJP37JEURkkrZW9EJH34XD3x+Od3YuszlbFsZeo+9gV5Vlkx1lkwt
GfArY8k+sXM7S6SQOfw/JfPB/VhkZsQRqFaRW5ET6VRPeQx6im/TjZBJP0lb
cSh6z36MHosF9DgrWlOnx3oJeupSaEjG6Ln8SskJfkYQxkHjU8hGrjfMZhEa
IkMRnwaItBfSRySfguAAvjBoZNVfexzxNE3cdAQsCL+I1gklVqVRYhMOKT+B
7qIbNPphNLyjJUtUK0mcw91CDs8QI2lcaAiNvvib9L9J/5v0v0n/byOdk8M9
Xe1oaGqVqFf5v+lxRDYJuUdTQwO6evpFz9HX3Yn6hhaxaYspNJUbyooKkJWZ
g+r6Fm6+orerDQW5OcjKzkNLV8+Tkkx6EOUJ0+PObPr1x2USuaEyPVjAKRW2
kf31D/qLTmDS38pkUxVuysJjxLjKJZehAXp9nXno78yjAR3k80k22cy45DKT
cF+k6BINfFzghliPjCa1yR533572bKn35Y9JatMndo8ZEm1/PZjj+BED3L5f
IOyEl5GTGAyDo/ai2gUD/Ca4nLZgU9sYG+mz86NBMQ9Yh29jaRbM9DWhpqUH
fR11qOsdRWZxveSElqCvj1ifZ7OdS+trbsVCbVkmoqOjUVzbIlyx8NRo/5Ou
bCI2Y91B9vsTbL8/hSGyq/QPYscoMhhWYJBPzMvMX8nutJ9paaCC3QwLlH5y
VvwPDOJ2EGtTQQiMUVBwi0soJtprk5GaGICkOF/W0ZlAtoz0MHS2ji4uEYME
F6BRlpdCaI9BRXOXCLslOfcRHXMX1W3dYgEao9AZDdAoQlFuDKrrcmn3SkOP
+CLFpoo43E/wR2LsKIX5eTHgt0lQyB+Tkqa7vQAFOTGoE4SBiNurNOYjn+yq
F4SCTGyvjvTiYXIcYuOT0d43PFExX7F5U2G/TyfwCoKhmb0oM3xamBv+OKiE
1OI6NtFnZMBF7JfXQWldM9xsTaCka4W6jm70dTXjvKU+dMzP0EWKMo+HsJKS
Eg5HoC62jAhPLJ/7BjZs+ifmLvgAUVnc6q3Zo0gjguPkuww01wuFiJIAQy0E
Wp/OZVAlRwzdPxnMf4rBs2RbOV2w+HDnSoLOvQy+mSlwna17mcGmxaRNjp4/
BmtPk07PQ036Vcx6msFzL7yM5csWYP5bb2LH/j/RSvqju1W6DOLCO2I87LBw
zhx8vmEtFizfiIdV7aLwjnDX41g4ew7Wr/8Yi9/eipy6LrHwjlEAjhZ0LsEA
kUG7v/0I52+EY7i3TKoME60j7CpAeog5pjAMZrw+E8uWvMXSrm5+hOClUBoK
R5MaCKJFftz6IbykzbTWJWLb5seb6hIsH9uNxYuW4v3VK7DhB1W0DEwQLSIN
kk+Ng2RNcQbik9O42VU+DRL58yDiM4vJeJaB7JI60eV4mVGQUzVEaVMfMykk
BTWgaGwBzdaQkpIyhXsaWuTps3ehZuXPEnBS7l/Y+MtRVoHgEq2PRafWGHQ2
E3R+RtBZKSv4bU+Oeek5BlG/MBgkwrGfSLxLaxm8PYtIQHLe4CEGWwhq3YhU
hNoYdE5lu66/7SHM9m/BS3NX4fa9aHQ0paO5NpV5WgoqOb/tSG8zdixbCGuP
ZNA1q2rffY5dmqKCVENdddi+8C2cDshgn1puy2c4YOTxWNjc/hGcJ8XmVHZ8
7a5PwO4vVmHeJ1uRkZeMtvpUtNSnS1AuFZj/oRCApuxYvDtrCWKLOjHYVoqP
Fy7HxZBM8XATCgEqM+n0v6ur62i4iTSMPimOUUaUALuHj6amJoT7nMdBeV0U
1LYTqdJKdM82EUBTwj1wSM0IFS39YwGacmc8QKnMzM3NZYMUyKvDAXSki4c1
azaISqXkRbhg08Zt6Bj5iwAlYBwh7abvMJhN5N+tnaRNi8GFjxl8MIfsU2fY
a31PROjl7yUAyi3Fo+tAe5ruQ3P/V5g9YwVuxJDxpzv/0dgkmK5KwaJVXyK/
WRC2c/fyEWz/6QCdKxSV2GgtTcCCVVvBE869RpzXww+7VcYknPnrKBWtJOzI
RWtFFH7cvAaLlm5AWm4CBrpy/18BNDnECSs3KooSBVjv2wR9e09RoBeRmhQC
3EZjoiSSZnaMA2hu0liAPsfGpWipKeOP3fsRFPmADbuLcLeFrLwKPANDcPO6
FxRlD+CEsz9dEjtmOiwzPgJxKflIjvTC0Qm0x3HFpLKFxaTiR4tJPS2kiAUp
kYbQYGA7FqQEdO27JED6BN1JTvP6gMHMaQwiCYbbyBD/BRGsH85m8MmrBK9k
uG+SHOKfEhOifV35GO7KgrPqDsx8dTbCku/SdcqMNF2SAyotVfUmLVXVML5U
FQfUiaJUJgIq9amjOx97HguownQv3YXoa0qG/raPsXDp+8goTUNvWxYz0ThP
FyoPkwFkxyNCWgbJu/sfCWmZNiakpQk3gkJQWVOBk4KQFm46LT85GncSs5CR
EAwjseF+hGYv6idA7+1EUXYqrEx0YO8SxKI1O9YPB5RUYX3SBqbGJrjsewut
Xf2cgcNBNTXKF/LyCtDQVIfFKZfJocon8vS9DYjMbWRJKAh3wRefb0LbsJg8
tVqNoh8ZBG9nYEHkpDaFqhrDwtd3E4N7RC6unyeEKoFv2R6ilioIjjFZTmC8
hGB1v3B29xMGx1YxeIcM/g3yUtVR2oedRLpkp0WgpSmbYCQLajvXYf0vSujp
LgD/ESaxSLjWpLLCNVeYMiv+kim+3rFbUrjy7rHCtVQoXKMcaWDLwUdidjRm
oRRRPg64fdsbvxMV9YIAtxNpqBS2bbVJyEy9g66OfAw13cOmNUsgb2YrkelC
DLnicTKhV88gMtwTP371IXzGB8L0dxfjxpXTiAq/iu1bHlPk3jqPFRsVRPXY
Tu6lgTCXpYF4uLsFjtbGUFTVgKKiCg2E4Upc5STcgKKCPDS0NHDY8pwIxEUP
bsPCxoFm52L/Yn3OQtf0FBt2U5efBFUVQ5S3DgsAKIpq5mXfg57qQRw+4UyP
nLCGFbnV/o9WQ8PeW0C++q/4cpeZWBYXAWRL/0WsnxeJ7jmVgdFGIWTJcG+2
msEcIkLfIpZRLRWXBKpbCTQdvybftRmc/YjBmjcZ5BHILyDt9QTm3UTcvkau
lU6DTlXHQ7Y1h4zpEVi/cC4cvanqXAJzje1Ys2EnOvlFk0CW6Ko9jdhGlFGb
gATKdKj/8iV26bqKdNXOamyeNxcOt1JBoyjlftiAA6bXpOmqHHRonMDtK0cx
f+YMPP/Si3APj54MqFQRqE53x4pZbxFhRQgZzMbOzW/jN2VDouBJNaXE7+bv
oIM3X3sVz8+YieB7SRJhMn1luHZKnex+BS/OegNhKamTBS7UZdzBytmLkFje
TrSRSny6cjWcb2ZKwygrbInEDPV2IuP7XkSlFAqG/emoLkyFiZY89I6MCtnm
ymxoyu2HpZ0Lbl0PgJq8HBw8I1kh29dcBiO1QzAxP4GzZ8/C7tQp+N5IHONE
4mXFw9335iNlK2fip4e5YPWCBdjy1RbMXfkJQjOqJE18Aqy2P4huOYOB7hgd
NfgTQUbOykOCdu9PGSwmANxO5OzKlxg4byWGE5GffxA5+hkZ/9eRa+wksrZb
0p3EjZ39HZm4YPQbFi1cia+3fIplC9+Ak7sX+vm5Usd/zrSPvGKOZYuXYvOW
TZj3/hakVIya9rcumGDZ0mXYvPkLLPh4GzJr+ROa9jSqoyDKFe+9+SpcbkZO
atpTwdnbch8Gv3+BlSvfw1ebPsCyZUsRGhNF9JaciYZ8mgfhYbA9Vs2ZKYqi
GR3yK/DA1xrL35jDRdBMbNoP9+GEyo94572P8M/PPsban9TR2jdxCM3IAK57
uSG5oFIEkJrCFLhdC2RrMQqOew5VhRm46GCPk2RMD7odh84+LrKaj9iIEFy7
5glPT094XHVHRGzGmMgZaX7LioJMYs/dRHF103i/JYFRK4Fb4R4xv+V0ViRm
/SR0Rgq91kXEVA8m4jBb6LSkbf0EiVFEA4giYrFPcZzjkjMn2F5rz0T6XQ94
Xz2NlLQo9HbmSrOGuIG2MOMBrt8MQ2VTp8hhmZ+eRNpu09CYCR2WA/3lKEgO
QVFJBl0rOZGhw5rjzWmID3WB97VzyCu4R3E0kaEjiKDhIefedUEEjZTomiyi
xJVX5UweXUNwlHw3CqFRcXQtxWNE1zzGJISKcBJi6qjwUBoVIuyIp8IIu/pJ
8QkJsbbRCQnulaIZQgeJptXXkcM8I6XjJpp8oOF+vV2PnnzgMpuwkx7EIqH3
Ec9sIm2uQeySormG3nLR2ti/GGjzv2ki7G/S/xtIz8hCUXGZJOlmywE6ESTH
ki7Hkk4epbvwOiE9h719Bnv7zH+DdFpYgk3Y0cIm7GgZTa3yGv2kH2yEUEch
m/LlMelPTbiN3KQbGKynSUMG6mjSkBHnbwn71wDH11D6ySeh3/p99FbEUdrI
cd3t9Fbd7cVsDbHJ6S8kxtsDtoDWDFEZrRQR/aPHlbCRQ2SjEUd8usinh1+B
vu66x32cuHM7cc/gJdSbU9bXHKOsrzFjMNDEVrVn9kgh81Wx23e15RM70JeQ
1FrmTdpay7zQVh7E8naGBEIEHH7nMUhy+Bn3DF9BvSVLkgWtWFdjTkhqzPo3
SPJjSfJhSfL+m6S/SfqbpHEkiVZD84qRSszJYl4VdQBM+f9K6Xi7tKu1Hhnp
acjMykNH9wA3kUfj5qvKBJRn55egd1BsmSQZJUoLcojinI7K2mZhTVVRLSdy
ZnKkL5QUFGBiagJFeQU2ycUwOGf3NPGHp4+OOisZNFmT7bgMai1knhDyo5H8
rLOUYX9NEWsjh3Aceyy+SYSEjFPJRnk5TcjLNp4vuqr80UZ+PSOFv8+IX69T
moonzvPXJHjeyMuCqZYqtPWNoaelDr2jtihv4rNMve3lzKZiMT1yBOoqSrA8
fQkt3UPscprrl89AQVEVJsYGUFBSQ3Ra0dOSjO9pLoOBihzcb8RhmDx98q1r
OKSoi5JGvpDxz0swnjK90FAGnntlECgvg0pLIbfNZRCrKoO8w4TTlhyXp6DK
jLRryoB3jO0Baczn7KXSnCTcuhWKvKomkR5SlJnAthXWtEjUFyp4GMe2F9e1
iRdNzk29i1uhYSht7JgsHCQ3IwIVNax9I61Xp7I9+A+2Vxvy3HDvlj3qS3zY
3n1aSu9yiWxoDEj2w3BU1+XRoCFpHTwa59GD+3ERCAu/g0b+wGi2TD6SYsJx
OyIGzdxyhdcl4HDH0wEGZufQNUTrKNfD0kANdu6hqCt/CPn9srgek8n6fWqL
06CpIIuA+Fw0ljyAoqwiIlNLMTzUhyDXE9AwsUF7/whXKZ3DROnDaIIoffCa
BCtNh9orYaQhL5bsR4CJRMPpaD7OoFSfwedvMHh7EYMVMxj8/AmDKvLGNRFM
bJzOwOmgDDmOVo+mnf8PFkP5BBMfLGSQaCyDBkvpbyXnrUkMcMLCOW9g81cb
Mfet9xGdUy3y1tz1tMOCOW+SfRswd/7HSChqECvHfhzzZ5N9W9Zj3qJ1eMBr
ESvHfpTd9+WX67Bg+RfIqO54rACO37d9AKeQ26yXZyLctFcEoDT6KFbNWIy0
DE90lPtKxQ1XRI6L2vh+8/uiqA1p4BmNzBjEKbU9bEn5zz58Fx9u3Iva7iHx
QuyW8j9jydJVWLtmNT77Wg6NnHfndfHADfDbW1FRXoGi/FyUVdYgLdIbeoeP
IyEuBLJqRqjq4JJ5DOKchR5O+8Uh5ZYbtExOoEu4q6GYgEtBE1kVbWPBlJdM
l9cfQ22XcPjoa8RRIzUEJuaIwBTv8BPOqn4KH4MPcHH3W9j/MYNqGxlU6Mlg
+YsMvJRk0HFCBn8uZqC8QwatJ8aASUMGHxPwJU0AJtG6t+Eu7FmzAiZOkSw5
lgd+wNd7rESM62/HzyuXwNItgRU0Jr9/gx8P2XO7R3qa8P2ShbDzTWMFjvaO
TfhNzXnUo12Dr+e/BacbuSy/lLetxz79K/9u9MWEAqncH/Wpp/HJ4lfgHeaM
7kq/yYE1ZlJ7ImC1FSbhvVmLEJ3fAfQ2YOOKlbDzTOKesCEzGu/MXoYkXg9G
uirx2eIVcA5+KODunEcFXrCcbq8twgkTLSgoq0FfTw9GhvpQ0TPDg9RUaCsp
wC04Gg3NzchICIOKgjzuZJUj3tcJJpbOosXN7RU50JJXR3ph01igZcT6QdnI
khbxEhxLiD9iqIagpFwh0F5lpVa84atkJHoC9VZPwOtXGfzzLQY7P2Dw9VwG
5rtkwLeVwdmtMlhNwFY5qjdIA9qjcTYVQ60FWPnORiQKi05khJzFlq920KhP
0XRdX30Wlq7+Eg9rBLGg932s8fV3v0tMQ9OYioWrN6OgWcCDODcaU7F/XEzF
/NVfg9cp4HSksz5+2K30l2IqJsJea5kveio9sWvDMuzTVkNPXdB/FHsZkZex
dL0shAkOcFZpG9StLnLYSw5xxMpNyqKYipMHaEzFNQ57FGdUqHH/2ZgKFnvD
8DtvDSXtwyiqbkZHSx0cLY2wT8WQHeKSIq5h15690NLRwf79e2DlEsDeIszl
JA5bXwan9raVZ7PYe1g0DnuFqeGQUzVBRasQqD31OKynTIScJPaoFtVygkHs
fhm8Oo2B9ncysNoog2lTCPb2yKCNCL1cNRnMf46Btwo7arLYazkpgxKtx8be
uFo+EY746ltBLR8OM70NGZj/9jfIrhLMIGXdsME3O76XwOf/9TCJngLs+XZi
7E0TYo9fE4Qwm1/JIP82CvN90cnzEane0rDX3zc+PGIi7KVFXcLCdcqi2WN3
g2+gZHGaw96EERL/EGhnLNS6cOqYLs75xTPcjHJhUiDkNI1R2dAC11PGOGrr
iqLCQoR4OEJF+xiq2/qRFOhMlPpTopjw1vIsqB5SQ1ph0xiotZZlQE1WkJuB
/tXmJUJJVon0df04qLUTqNltk8H77zDosCOijcDo+9cZmP7GjqFoI5sOEX3r
VpHxllhS9URhc/heBv5/ymDt4scTc+1FWPX254gvFaSVzAg8jU2bt6NLXMw1
5mDZqi+QWi0Uc55W2LxtJ/rExVxNGhav2ojcJkEHxLnQ6IY9EmKujZeIhas2
o0QY3RDpoEPgKPtY0Q23PewRFOyO37Z/iAs3IijcHi3pnmIlXUdlADqKXLBl
+UyoHzZAb32QNMBN5e7SU4KQSza4EeKGH7Z+wEU1TIS5zOgrWPLZn+Bz8u7Q
V1A2dxTJu1vOWPGFnAiSJ/ZsgLatG6fECTBHWTGAiydMYXTSTTRO3vFxhLbZ
abQRWWeqdoBqWwJc8aiFoIyHZa0oTQvDIWUdFDUK5G16lDfk1WkFpr6x8o2t
KHLaAgqaJvAP9IepjhKO2ruhe3BEKugu/0sGcwjQHh6RQbmBDFa9xMBVjnw/
KoMCUxmkEkvx9WcZHP5ZAMLD6xnMfJrBrNkMHphOCjqieWD3muXQOUdjEoZh
tP9bfCdnJ5G/CgNt2LlyEUwvhYIGF2j+vgU/qZ8XV+S+W/wWrLxi2HlNxR1f
4A8Dt1FFrhZb58+FXVASa0jv374Oh456TxSa0N/LQ6SnJRbNnIFnXniBC014
NMqmoqXkGsozXFGd74Hr9nvx3IyZuHX7PLoquWOkQ43GJQRfMMS8117Bs6+8
xsUlTAS11qJkvD1zLm7n1KK/qxrrVq/C2cA0kVqXFYNVs+YjtrgJvW1l+Gj5
KriE5UhATWgvFCaHQfbgQZxwvAI/r0tsWNaNhDyWix7nrCCnZkgwEojjh7Wg
ddQGjd1DxKRtxEkTTeibnUCAvw8RbbI47xcl9uaKIr16O1pwy98Ttjan4OF/
A02dPcLJ5lGINVoxqCCyaed8YnC+IciP8d0/GZSbyWDvGgafLSAG6WJBydr3
lzIoshDIO28y3NLqW8kmj4QYZ3Om3rqItxcvwoaNGzD/vY2IK2oU2Y6JgWex
aslibPjicyz4cCvu89pG7VGvk1ixZAk2bFiPRZ9sJ6pd56g9esUcK5Yuw+ef
/xNL1/2I3IaeCW3OATKElcZfxdoFr8NVGFkgDU5PsVCZxtqcxXfNsGXdSqz/
bDXZVuLlF5/FAU05dFQHSUMUN1oO9lciJ8wJa+bNEUUWTGh+EsHsbLSXiP53
8emnH+KTn9TQ3DssXnbmtPavePvd97B27Qf4fLcudTQI4PTiGHfiMAoeJsHp
zGmcdnTGvfQ8kcbV29WCsECKBRu4XvVDVWO7KCVbe0M5fK64wNaWCPbb8ejq
HxIyU+jXfXWc36qKSJ+ggzK4rki+U78VgUWypgxiiMZ1l2zxRLtP1pVBpYVA
628k58QTLazEbFLfVXVJLsIj76BKbK6/ojAbEZExqGnhi9p4+ZmIiLqLurZu
UVtp7kNE3IlFQ0fvxDEBfeUoSQ9DKS+TOiQnQgL1WjXmX8H9CFui3toiOeIU
Uu7YIzflEp0bkoaEp0V34aEwJRTlldmSvjEpDizSUVkPEnEnPpmwf0Q8BUhG
cgJiEh7Q+t+TRgQ8M86zW2sp4dll2+qtZJ5AgxXtgAbSTL6x3cF5fRv+Bx7e
XrGJ+AmVAsLVzkp/0dZFto5yX2lKgcjZ2/Oo+fy/NDvxtPDJ6iwY8rQss8hl
H+9pOZJ6iVHG5aaeKuVpnxU+Tnu5L/0mHKrGP+Kz3PUEuUfGXO8vP+I0oeO4
gWAhyXQWUSGmo85S6lNyL0tBQQGbup3+4l6qvLw8NDc3S7Tl5OSgtbVVoi07
OxsdHR0SL/N4jExhvfa0tHFjHZvUWhrjBE7/Keis8EXMrTOozb9GXkQfabwb
nQsoQ1xsCC1BLBUe3Ltz//59DA4OSlBO2zh+cqPIv8njRsLjCKOFSDSdTdsn
4nFSUhJ4PJ4EBQkJCaiqqpJoi42NRV1dnURbTEwMu4xmMh4PkJeF1havrXo4
GY+JhgS/q8dRleMxGY9pafUAfzc0NeRMyGPqturv75egnLZxfH8MHt898yMS
dJ9D/TGWx2Y04U/jMcJjvTmss5y0C5oJj48yGBzD4+TkZJSXl0tQcO/ePVRX
V0u0xcXF0Yz9Em13795FS0uLBI+p/7JH8LbT5ZCdlMeDvRyP06lgmso2P8mm
cue351NeEnLayrxonvJKH8JjS8Jjd7TzvKayzU+ST08iGwLIKZTHgtMHegU8
bmZ5zF2yiMgGSR5TlyBd7iJOuTA9qwSPxdvG8DgzwBhuNuoIOKNCbuV/hoaK
BZ5RwRU7XXjYa9F2QfOT8D+tgpBAL+oIIpTSzyfh4eEBPz8/9tcMsTZ/f3+J
tqtXryIgIECizd3dHYFEs6W/nha2XQ/2RXCwD90IOfRzCkKu++GS6wVyTU+6
fyrb/CT5JIcGeSPIz4WQE+TrQg4N9nOB64Wz8Pe6QNunss1Pks+L5Kcre+Iz
wtPpVV3JVQMDvMjdBW3Xg9knkXjCy5cvs/wTp1y8bRpHOcE2fRpaLEhYfWYe
/fcMNaOeEH1jBOXSaCk0euTT9JPd+5rkN4EdKDpuhpQ29tzn6OW4HexOsDvw
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
LSpZBw==\
\>"]]}], "}"}]], "Output",
 CellChangeTimes->{3.722354495934181*^9, 3.7223545312508783`*^9, 
  3.722378217376355*^9, 3.7223782590360317`*^9, 
  3.72238814748314*^9},ExpressionUUID->"7c5db925-a554-48e1-9f7c-d93dc2056735"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "\"\<Est - ce que les examples \>\"", " ", "difficiles", " ", 
    "\"\< et \>\"", " ", "faciles", " ", 
    "\"\< d' une base de donne\:0301es sont les me\:0302mes pour tous les \
algorithmes choisis?\>\""}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"mimages", "=", 
     RowBox[{"Keys", "[", "mtestset", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mentropies", "=", 
     RowBox[{"mCNNtrained", "[", 
      RowBox[{"mimages", ",", "\"\<Entropy\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "choisir", " ", "les", " ", "images", " ", "qui", " ", "ont", " ", "le", 
     " ", "plus", " ", "haut", " ", 
     RowBox[{"d", "'"}], "entropie"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"mimages", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"mentropies", ",", 
       RowBox[{"-", "30"}]}], "]"}], "]"}], "]"}], " ", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "choisir", " ", "les", " ", "images", " ", "qui", " ", "ont", " ", "le", 
     " ", "plus", " ", "bas", " ", 
     RowBox[{"d", "'"}], "entropie"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"mimages", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"mentropies", ",", "30"}], "]"}], "]"}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7223881648735933`*^9, 3.722388195886985*^9}, {
  3.722388389035665*^9, 
  3.7223885585226994`*^9}},ExpressionUUID->"d9c7ddf2-c973-455d-89d1-\
64b288d3b3f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9a4AgD4+w9SOAOkpwlEyqwvYuQO8uJJqmNpPGknwBIyMiZicnTTwLI
QrFycT8QXHvX3//9vw+6HBz8ng40Yg52uQlAXTpXsErNBDmrFpvMSTU+Jiax
q28wZW4vEAZq0r2ARdNbG5A/pp/GkPhzM1OKiYmj7MlfTE3zQHpcGrAYdyZU
ECjl9ABT5tkJoOuY5C9/wZR66AqU4S45hsW8/+YgqzjasUn9ZwRHC6vOEyxy
MSCp9NpT2PS92wcEn7EaSQ4AAIWEj9Q=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+UoIjB9iEuuY++TAI3cEme52U6+f/vz39YJZuAchuYvuKQq/wfjlMu
7os+Trnil0w45OKYTh7BIfdTVOZxLZPRL2xyK5j8/9cyTcRqZDD7kf9hTGLf
sUjNZOWqVWdiz8di5nclJhCwxWbinwCm6BVh2OX+//j6738mDjkQMGdqwyO3
Erec+F88cjil/qe64ZajDgAAjofVIA==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9GYH42ExAwWH3CkLmexcbsm5dnysRs/w5dbiEzc+r3//8/Pm1lvvF/
p1s1slwF85ovYMaU2p8vDZjlkOUcmE9BGC9+vnRl5puPauaCj1DmJGa+CBT7
HrZyr3h87dq119fi+Zkno7tmUpECMzOzMRDbPMfwxosGQQEuJmZmo5eYngeC
H8c9mJmDsUoBgTsT0w0cUseYmGP+4pCrYmLGpe2zKBPzUxxyH5mZ5N/glsvD
5co7zEwnccnlMjNhRi0RcpuYHX/ikkMHAPpBwJY=
      "], {{0, 28}, {28, 0}}, {0, 
      255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x984IEYo1b1mWvYpNYGMTMBIY+JSexaNKkzTIxMjGImCowgmglV9gxI
187/r8/WaIF0X0cxkoeRSf41hC3KJPoQRaMJE7MJlJnOzHQWVY6RCS7HxIgq
F4vQ149FnwfCzTvQ7ZsJZS5mZspAlgKGCtxX25kYa5DlvmozMcPkgPahyP2/
ZhILY6aj6UMGdsxMwTEm6KH6ZXF6eroYJExFz6DKgUMVCsVQ/fj/lQlED6MY
gxi6mf8PZew8uwSopyb4IboUBDCihycSYEIPT+oCAPzcjCY=
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x964ONkTxA4hkXqlDgjGPAfwdAUKwsUrz52rI1T8z6q1DcfRkbJ2toz
QObc7ahSb0OBUkexO2Mx0LxaKHvqJgw5r88Q5hI27hVocs4voczZjIxaKHLM
jDn/ccmxIOTmMTNq/kY1Ey53Q4ORMfATktwaDhloaNRpgMLmPrJGT0bhwyD6
pi5juAMj4xRkuYsSjBKGQKDIpHXipTojqjdOl0BCOh7k1BZBj+/Ikr/u32+x
WnD/C5ijwOj/6j8OsGgqpysuuf//P7TglqMVAABxN6zA
      "], {{0, 28}, {28, 0}}, {0,
       255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x924NdlD8Yc7FJX3Bg1HIuwybyZKeZ66cV9bFKrXIVW/vn/8REWqWDl
2yDq0HLPm+hSkzq/gahn1QmMc9HlPsMYG+bcwOrOTxtmbJhxCIvEj/+LTh36
f1bgPKaWVVf/v/j4/39uKlYTQeCK3wGcchlGOKWWMmzDJfXAxA6ntrWK93BJ
/dAPwantwbbnuKQObcCp634QttCCgCNSOKWwAACJhvUL
      "], {{0, 28}, {28, 0}}, {0,
       255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8w8PlmgRyT/Z67fzGlLtcwAwETM3PraQy5KJCUHlCOmaflG6rUMjZm
ZuUVP78emenreXQKqhwvM/OsuzDODXQ5pY9AagU2V/Iyc238fzNMB7scM3uq
O7MyNjk9ZjDAKvfOHywnsvYcFslt8UxAwMDEtPQppuQyaLgwC+9Bl3ppBhSO
A8kxC71Fk9sHFNR+va1NGUiXo8mBwrMeSG+UZWYOwyInvB/ICGFmrsEix8wj
nqrFwszcgCaXywxzJ6ZbPvjC5dZg+O/zykJ5oFxc4Y4fmJ6nCwAA6B9+LA==

      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzN0TEKwjAUBuDkkcHRAwjiLaxOjq4V07nFWlwqpBHxEB7E2HPYe9iDxBfq
4PDHycEHCYQ/Hy+8zIpjuichRDPiLc3PK2Pyy2bMh23dHKq63K1rW1almRfh
2uS9/H/W0xl763G2UKRoCaOHIEkJJUhmrE79klqQaXZ35l3EIfPhYH11krR2
LuayjpRGbwnOJ7gnm8y7SE8ZZqKlRZkNhruizBEb7ooynqXSU+z8lV9J2A0y
4gaJfzfI1sZm+pt6Ad9tt1I=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4NS8GiCojqyp6bm09y+qnAQTCDACMRsTk8WUP8hy+/z8/Ko7Vq1e
vfrU6kw/XkfcNrx/C2f+qc3/gEvZTiamdTikPtgxMb3FIdfPxBz+B4ecLVMQ
TlcxMGbilONnsniCS66dnUnYynH6F6ySCeAAE8XqjyCm3qkdAkzy2ORqmHQ+
/PfFLndKlMl2sQR2uf/ntEAW5mB36pemMvm+n9jl6AIAx47Heg==
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cDqDfGKfVZWeDEaxxy20IZGTfgkFugxOiJy0xdRo7tOKS2sjO2Y5f5
MVedMeI3drk/9oxa+3GYWMfINgu7zHVPQcZVOHQtZ2QswyF1sDxu5i8Q4/W6
Q9/R5Iqr30LUSDAy9uIwuZSRgRXd2iM/QOQ0VUZGxUh0DY5AI58oMDIySj+5
gSrzu93u+/eFaoyMnGmf0TS9yVJ6vkyXkVG14TKGC9oYldTTdeUDsMXBc1PG
mM//H7zC7vbBAACHw8/D
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8uYL0TIxAwMIKB6vr167ci5BiZ0ABn4jmYnJ0DMlAAyfJit+GIFFAu
BavU1woOJtbCL9iktmUyMVm1YpN5ayXOJGD6GIvM76mmTEwSO7DI/PtWwsTE
XXwCm3nLgc6z+YXVfWtFgFIPsUotZmNi2opd12oBJqHpj7BKLeJlYtqFVeb/
fyEmJqdnuOVqcUht52ZicuvZg1UuhxnoN+U7uMwUTr6Pw9BtG/fjkMEBAGx2
peo=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9y4EF1ev+DM5r92OTEmJmYgTgDmxxjxsyZ/wsZz2KTA+soFHuITc4u
GEiYaH7FJreD+RpQDru+M0wzgXLY7TvDPPP/KwUmrHL/114D6hXFaiZELw59
YDux20eEPqzhCdWHNTyh+rTw6NPGrY8Bp1u+BuN25/8Zootxyh1imoBTjmgA
AG3l3VE=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6c9OCOoeBO7zNcYQWZmPaxSl0yYmZiZ87BJPU1mBsnxLsEil8sMlmNm
LlqI6QwmJiYGJhARji6XANRh/GSrK1Azzzw0OaBxls/+/z8GlBPbiik35/2n
RyAHRaCbCZQTMHEAuYVpGZpUEcQZIGIDmlQGP9j5YAJN6pIoUFhgZhVYruIn
ilwmUIvNPqD/2UCaW5GlzsvAXCDHjO7OlUAXGH/4/6kP4qCpyHKrgKr5cuWk
IW558gddDuZOrk5UZz7WgMrJKSi0oQdKB1guqR9dfNAAAFxcYrE=
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8wcEH6BU65bUy38citwynXz5T+///N+k2/scjNAZp5T9qM/yQ2My3+
f5ZmeBuv/wpTLsny/xumyr9XmLZjysVY/r/P9On/TwPscpOYgLQFdrkiXHJO
Fv/NGYG0eTmmnKjlK0ncZt5iCvj//xIXDrnY/7/NxN9jytUC5eb+X8HUjyn1
fxvjFpXaC3zGr7HIHWOTkOTQ4LuLRer//z4mJibJbVil/n/e484U9xG73P//
P8uVJuOSowMAABQnzgY=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x/MQFpnGS6pRBZmtg7sUpNYmJmZOduwyPzKFGMGAW0sch+ZmcBy/phS
PyshcnwHMOU6mMFyfPOw2BYGkQvBYtt5ZrCc0UtMqUcaELmZWLSdZAICBia9
V1jkvJnB+u5jkZrIBZbTfo9Fzhzsa41HWKT284Hl5mCR+u8LlpLHJvVfCyTF
cxOrXD1ubf/vKjIzs87GLgdyZyoOKWoCACvhnoE=
      "], {{0, 28}, {28, 0}}, {0, 
      255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9AcDtR7g4uOTMGRgtccrmMjPm45BoYJa/ikHqgwJiHS9sGRsaqRY+x
Sj0yYgQC423YbQMD9i2YUk9kGBmFV522Y1yCKbeLS3TVlf//NzPaYzHzxCUQ
eYFREZdb/2/FI+fHWItL6rYUNrdAQBmj9j0cUmdkWDfjkLohzWiJRfjnum//
zwcxqt7FIjePUaNUgpF1J1bzFIBhmXYflxvpAgAcVdFs
      "], {{0, 28}, {28, 0}}, {0,
       255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9wkMGUehOH1FJuZuYK7FLX05mZmdnTsMr5MYNAJTapWkWwXDumzJ8m
JrAU8yJMuTvMEDmTRxhS97UgcqqYUl+jmMFy7J2YJgYxQ+R6MKVOMgEBAxCf
wpTzZoboO/cHQ2oiF0Su4zeGVCk32PVMizGlDllDPK10C9MyWYgU8x1MqXeS
YBmpIkyp/zeEwXJTsUj9/5/PA5RKuIRV7v/NDjWJy9il6AYAVreUtA==
      "], {{0, 28}, {
      28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A8LI3myGw5MozLFKPwpiZmZiZmWXrXmHo0uKVcMmX4AUqaPmLJlci
cQZEXZ2gwcTciSbHtB7KeKvHzH8HVS7gAIz1Vo3JEVXuy2E4M4XZCadnVuGR
62fuwCnnKPIRwbl/A1nqu1kogvNBhyMGSWUS8xIE5wozN7PDxJ8Qzs80pta/
yHLVE3iZJtwHS6UwByOH5xXmxv93cmR9QCGTxqyP6jAHcQj9NltGvAfN0Skc
c0DUSwsm+dXoHvohx5H/9nu9EHPodUzfzmJmFrBi1p2FKfP//+9SYJTP+IhN
in4AAGgNuyM=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x/S4PCcc/9wyLRwMTLOxybzcTIPh2lJsDcWqXZZRuUN///fqMeUquRl
LHoFYuzBsMmOgZH/KTabPiwX0KmtVH+DTc6NUfzLTzkrbO6zZSr7+f8gYzOG
zL9j2kye3///CXB5iS71d5UIS+n//79yOedjaHvGyLvy//8fixmzMaR+2/Bu
AlK9jOGY7ljG6PT//5lwwdK/mHIa/I8OhXDI78PmM2FmOUbu6GfYpP6fs+fw
O4BVBuSHD7hk6AgAHqfUgA==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+E4MdxIDiBTeZYsTojCLi8Qpf5U8vDCAXG6HL5jEyigpXzK1N5GJnb
UKV283lvfSG9Eci6I8Mohmqqc9m3/3uYOT/9//+Ok5HRvfYlktxjEGHF6OSW
qwmx8zianQ+4weKSPQaMjJqH0CQ3sQGlbM///7mEg9EVTe4MG+PyX39BrI2M
jCdR5RoYtf5AWD9MGCtQpN5IMR6GsR0Z1VDdwsi4F8q8zcXIiCL3VZ/RDWzb
/7UajGhy/+cxMu56BvT+FjVGRtZ+VLlnQJOYvL0lQb4sRfPD/6Wc0Lhgzf+M
Lvf/bBFYKgE9yMDg75Kqpomv/mCTogsAACCRkWk=
      "], {{0, 28}, {28, 0}}, {0, 
      255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+K4KMd21YcUh8U5FQ1Xh36iU0umfPSW/U8lhlYpM5xLv3/P4SR8Tam
1HexsB///x9gNPuFIfXbk/k6kKpjdMHUNotxMZD8YcDYgCnnLPkHSL5lZKzD
kLortxtE7WBkvIgh12cJppoZPf5hyiWDyA/yfIcxrYPIbWaMx5T63yd////L
Il7G+VjkbnrKhjqFR7GdwyL3//fOuRv/tQphk4IAvHIJeORycMt1KT7CKffK
GjPESAcAWZHbHg==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4FGtLhMT00psMmXizEzMZge+YEpt0WJmZuZirsSia64qUIr5XDHX
HAx9czmZ1LiZ9f+f5WZGt+8GE1P4Zi6eO///72ViWo8qF8vM/KSNay2Q9UGe
mec8stQVXub+PA4JMPuaOFM3stwqZmY1JpgTi5mcfiLJAV3AzFT2G8J5y8Q8
CVnjN//mS3BONpM4Fk9C5Zgl6Cm3noFpEg6pY3JMTr+wSdSvqeBkVliNTeoS
EzCeLNZjk/r/f7pnStsPnI4kFgAARQm0IA==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8o8OLIFtsjR7BKvQllAoHF2OT8wVJMQgswdfmzQOS4ejDsghgIBG1g
/vc5l+ByR8Di7fPmzYPwi5jMbyPJsYn1/4Sr1WBiOoYkp4VkxTkZJLkoFLmT
ekxIcowocnOYkOV0GBk1YOyrSxkZGBkZjyLZJ74NNRCQ3cKksBusy18KLJX0
FiZ3VhzI5RUBAj5oGJR9g1u/TQEqxggLILiZcFuYGIDY3g5V7omKGBdYH8+8
my/yWVHkgGBSoKVuYMBC9DCDgtunoAwscnCAT46GAAD8LWMH
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4MuOT5X7P32qV66qqvqJJpehyszAxMTEC8RMXzB0Lp43f/78GCYm
gSm/sBn8oE5SYMppbDJ/tskyeWGV+f+/hIkn6R0OKUbRazg8YclseR+7zK0U
FrPP2KUWKTAVYPoK7MAdjKyLcVjVwcQ0G4fUT0+uprc45A4z2eGQ+f9WlncZ
LrnDTKG4pP7nMa3GJfVFECj3eO7cb1jk/qYwCUoKRc/5g9UtBpLVc7HKkAMA
ThbVUw==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9y4PmjhQlmjrexyKQrigoxsjkwKj/FkMrmYgQC3kw5xhUYciyMjAk6
JZGMTIx6r9HlrEXr45nav68Aal6JLvfuy3xmkf//f81iZ+zAMPSDHCOjxvf/
/9UZ5T6iy/3KYGSKAMrNY2ScjqFxBaMFiNrCyOiCIbeDifMykCpmZFT4giFp
DHLFLxV2VsZjGHJZjFa//k9hbA/DIrecg1FImI3jchhjLYbc/+UqjIxcR/9j
0/f//+OVa4FkGOMqLHIQEMaQhluOkTy5ZAYBnHIXOVlxyhEHAPyKrh8=
      "], {{0, 28}, {
      28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6ccODjglmNgwC2Jz3Zy5erxyO1nYNiPU9KBoZ4sQ4FyODXW4/E9UA6n
JEgOp4379+MLU3zOAQXcfiwGMsAApmQ9XA7TPQh9WKzcXw8CWKUGNwAAEQDF
bA==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+CoCnUX4yRYRJWuZmB265MYjyIVe4E4///O3HIvRX4/7/V5S92CyX+
f9eNw+EY/f8XhE7jkFv9L3kGDqn//58HbsEpN930J0459jKcUhs57+GUS7fF
KdXGfRWX1ETm2bik3qub4XTkDcZ1OG0r13+HS+ow11Kc2nwkPuGUC5uDU4pU
AAAqufO7
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+E4ACD4jNccn1M+p9wyzEvxGkmE7MRTOMZdMnNhr5MEMnzkRg634Qo
OYPom3u/YTE3xgVEhom+xOaevlln/h8w3PQHm4M+XX5ULyCYid21NczMBji8
8kKUmbn4AnY5H2ZmZsdg7GHHyGT46f9mrHKbc63XYTfw/56Q849xSP3/+jgS
HCIYwQkEN5+9/wqiK/iwSC6fvvrm0x9T5pVgM/WNvKiisfXxB1itXFjiKI0t
FqgHAI2638o=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9AMNuGweQEVplPXmwqBmxKWOXSmLI+/c8V/4FF6i6j26f//y8w7cIi
5yb8DkheYIzDlNrOUQmiLrDvx5RzYFoEok5IYjHSACIXjE1OnxFMSWDXByL3
s2jhlNvJVIdTrlz4ERa5K0dApJIBFikIWMWYjFNuEeM2nHIJ0h9wyrm54ZT6
H6EIcuaVC70lBzDkVnNJV3frszExCUzD1LhLh4mJ0TR91zPcZtMQAAA0HtQ4

      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+0oJqh5y8uOXsmpiu45DyYSt/gknsU/Ay3hY9wasMLXuKRC2nBLedX
gltu/4nbuKTOb3r7GZfcgbm4jWxehVPqQvwhnHIzmXDLrWldiUtq25r/OF0Z
aIXTxJf1s3DK/Q902ItbkloAAABxA7w=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.722388565538931*^9},ExpressionUUID->"129e0d74-38ef-4f67-bd8a-\
f9429161cac0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8Y8O54PRsjCDgfxJDrYIIBtr3ochOAosaazs7O4kxyn9Dkvqw0FDvx
8f//T7xMTK9x2LuaCafcHn4mJrOvWKUmSjMxcZ3FInGzy4IFaGIiFqm9rBA/
PMQiN5kFIsd/GYukCDt7eLYtE1M2drf8///Tj5HJ8QYOyZ1MTJw9OOSeizK1
owj86D8HZ8sxCR5DlqtgEodK/srlYuJFcekMNibxmSCPfVvOxMjUgGpLHtBj
PE5OTkZMQLlLqHK/JmuCREHA+MY/dPf9aNADyZie/IHDA3QAAMeDl5E=
      "], {{0, 28}, {
      28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+M4Pur8hRGRgZGtvLz6FIN1kwwsBxN6pwgVEKSmSkcTW47UFhr8r59
+9KYmYLQ5D5duHDhFZAOZGPiOYrdQR1sTEyB2CT+PU1nYWLiPYlNahbILWZ/
sGn7CXFo8lvcckw25zDl/jb524IleZdiM/brtWvXpjIxOWP3BFB7EhM7RohC
wY+5TEwxWGWerTFlYtJ4iSx05yqQ+HX+/HkloFu456IoLzFbsbfZEexKVmdU
qf8h8MhTP41uzU6ojMLJ1xhOOAkUZ6nofvcZl8+oBgCtXpTj
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8gsL+egQGIGOr3Y8qBxCHAAYtkPUgLSDtuw/HI4da33wFncIAdVI9V
ph6HM8GuwCn13wEstx+HQ4AAl0aoZnySuHUCHYvdSoih6HJQ/n4GzICpd4Ca
x4CpDRF9WJziAJPC5hCwTQ71ON1PBwAAJi+wQw==
      "], {{0, 28}, {28, 0}}, {0, 
      255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+c4CmU7pX8ii61hnszhOHEuBpdzpKpF8KQxZB7qsB0ACon9Q1Nbicj
NBzO88qgSf1wZpKGsCYwyaLJPWJiKobZiy63AbfcJyNGg08Qw40YeS6gyJUy
MsmFJq4NCwt1ZmISfowsNY2DkYmJCYadUbRZMiHL9aLIWfBG92b4y8iW9j7l
YmSciSK3F2470J9M/3EAoD+j8MgV45RjZCwiSx+T3BXcch24pKgCAKKxr9M=

      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A8PlTMYPQhN9YZA7l8TAxMjEx5fxEk/hxq04EKD5vvi0T02FUqQd5
TExCRgtW///ljyGXxMRksANI/yljYtJ9hyrX573wI4g+DzR3Fg6XBjIxBX3E
LjWNkUngNA5tQYw8e3FIxTIxMmfhkmPk5mXV/4pdcvr//7ttZS7i0Pr//zkm
2Ye45N4ZMdXjkrsjxhSOKvJx21sI40sUE7rcVxu19SD620RgqOmhhWgFE1/v
3LlxSkApuQto1vzMAYqC4zbgEoYbfp8WZmJyMPU9jS1N0AcAAL11s6k=
      "], {{0, 28}, {
      28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cGmM7kg0vqkjCzHi65WczM3TikbvIz677CIZfBzLwKh9RzJiYuXNou
MTOvwOUSRWbTTzikrjAxF+HSFs7EvAuH1CImhnwgtTmBScdhK5pcLzPblv//
c7SZgYBrPaqcAbPF//9PhZmYmW04mQxRpGZzM2/9f0yemavk0rcKJoVnyHLu
zMz//+9kZt4GZCujucqNqQwox8T05f+PTh4G6/+o+hKvvATqs9vtyswscA9F
Lo2ZmUMjk5mZCeTOCFRnfgqCCAMJ1cnofv/2skxHqcyprOvlRxyhM3gBABVl
pV8=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cY/D4laPoZu9TPJUxMTG3Y5cqBUuG/sErdk2Rimvwdq9S3FCYmsSfY
TbzFxCR+AIcjK5iYvHFI/U9iYqrEIfXFgonpMA65Z0xMNn8gzLfX0ORyGRlr
QfRnS0ZGBkblRX+R5PKYmLYDqS1sjExg0PMHXe6jKBOjuMV8Dy4mpjkocun/
/7cxMUktB/L6mJjyEXJHmJiEt/9XZWJqBXIuB6LI/fRmYjLbJg2S+zJPmIlJ
7hKSYw5D3MAkaagFoo4ie+LnEVmwHNid+bfR4upiAFwuDCNsfn85Wl0NlmvB
GnaDFwAA3aWOQQ==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cK+LaRzeMxdqlfcYyMjOexy/UApTJ+YpXawckokItd1y1+RsZ67FL/
MhkZU7Eb+H8DI6PkVuxS/5MYGRfhkDrPx8j2GoecIyNjPthFJ3KuoUnd4WNU
//T//91sYUZGvqS/yFJ/LBkZrf//v6nICAYfkeV+AgXm/f8iz8ioYSPDyHgV
TY7zzX87Rkahd//LGRl/ocmV/L/AxWj0/kc3J6PzH2S5U4yMFf/jGBlc9yYz
MnqiWAfS57GOC+KQIlQpsFuYwDJii/+gSv3/mw7RIxX4FDNYfpiz5uYuuvkc
U2bwAwCPtZ1D
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+U4MunnVX5TECg9QxV4u2RPCFmZiZmMND5iCLnBRYUVVcCUYKvUeQS
gRLpq6//PwyS24JmZkzGJSB1QY6ZWSTjKzbn/A4A6srD7lR9oNTUz9hkrqYC
3RmN1cD/8UA/iHQ9wCa1iAXsP+6sF5hyF/iYGJjA4fIGU3KuwqTJkyfrMDNP
w+7S//+bmZlTcMkBQ68au8y3InFm5ttIAv1RMNZJM6BLpZHjKI/Lcx+QurUq
WxwkdRLZoDlAX6mpqYmD/ZeKGrN/eiFxCpQTPvADzQV/v8yVB8lVH8AemlQE
ALiXjTo=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x904OPh8hKeFEZGBtPy3T/Q5JyYmJhVVUVVVVWFmSK/osodbM5c////
DSCrlonnOC7TY5gMcUlVMeOUW8rPxLcPq8wvoC6uI9hknhUqMzH5nMAmtUGb
CQheYDWwCSTF5H4fm9yjJv+FWUZMCp04nPn/fTYzWwcuyf/LmNj245L7l8nk
ikvubzyTMy65fiamCdhlngUxM/GdRhe9Y12x+lK7EhOT5BUMHfvYmJiEgJ43
W4/FuC1mTExqFY+/4XIIlQAAqL68AA==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8o8KrPTjQ9fccrLFJrFZiYQVAhFlMXA5PJISDdwsgUgy53iIn5NZgR
zGyCqXEmhE5nwpSDATEs+qAghlHsGlaJgzNjeJgmYJWaycjEyFSI3bzXNSD/
teKybqYJI1PQVxySr7WYmWpw6VwMtBOX3FdtJmZccv9NGO1xSa3lYdqJLlbN
ZNcPpK5pMsm/RpcDxV3M/xYeJmbMCDxowsAEgvLrsFj0ul8cqLcWw0A6AgBl
/r67
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8g8OPt5vLyaEYGRts2NJnvTU5MMMC76SuSzO+dYBl28+C1a9fmMTFl
Ism9Bck47jwC5lxkYhK6jpDrYWJy2f0TyglmYjJHMvQ+U/J3GDsLaMRqJDP/
ffkNZf2dysvElP0Hm0fegXRpYZH4dypeDiglewNT6lk7xHuaSZhyU2B+5+g4
ii63hw3kk2vXZoYy8SxDl1xf++IH2EGaTJz3sbkUBJ6qMZl+g/NeNX9Hkntt
z8T0Ds57JJj6AMb+c1CBCVnufwiTVNVdkJa9e91Bbs38hZA7JM7EJG1mZqYG
8UYWshX/n27mhcdt+m4UKSD44AySSK3Y8gGX+2kOAH0ghyw=
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8w8LJXmJGJKfkKNrkGZmYmZiAIeoVNTqShMQ+ooBtT7ozTR4jmuVgM
fQvEIUC5A1id892MiYmpGrtTW0BuwSrz86UZMzPHHKxy+4F+0MZu2VsloNxa
7JZ9c2FiUJ3/EbvkFRNguOjk4tDZ0OjNzKx+H7vs/x/WzExVOOQOCjAzhWOV
+d4CDBgGNG/U59a9urJqlRkoXASuosrFMzMJ8YLjj0NiKpphr+rzhJhBchFY
w2VCTlBbzm4scU4/AACdMa4n
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+M4JE6UxqYcUmK6ROanDozswyYEcbM3IcqdZOJmXkGiPFClJn5Gapc
DBOz3x8QYwMzMzOakbIMTFPBDGMmpmJUqWM8TMzHwSyg2SWocquYmfQ/Qe2V
v4IqV8nMNB/M6GNiDkeVui/FxLga7EofRibfRyhyNczMTNZhQCDKDLSPOSwf
yfdA/4LEELgAj1wnQm5zn5asnJxcbykHEyNHWV/v8v+Y4JMeM1MbFnEQWAA0
bzUOuTB8ckxQf5KqD4/cQmncctQBAI0eins=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8g8CiSiYmBiSltw1dMuSJmZmYmEE7AlLvswuwXXng8mYl/Habkj8d/
QFQas9EnXPYWMTE9xinHzIxL7qYUTrmbckzMmh+wybyvZ2JitMIm8yZJHeQ/
/ZtY5FogfmcWPYIpl8PMV3L6cRozMz8Od/7/H8bE1ItTjpm5D4fUVyvccj7M
mHKPQOBkER8jExMfmtQsJlj8Meuj+0EOJmdYiBFFz4o1gHIyJSU4I48OAAAa
m6qB
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8wUM/A4FBfj1WKAQIc9mNK7WeAAaxy9fvBKrAbCzUZl5wDHjkGXIbW
19eD5PC41AGHVTi01ePxIESyHp8HHbCbCteNSyM2uf1Icmhm7ofEzv79Dpge
ZEAC6EY6IKQwXbm/3gFXqNANAACYOpRb
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cKOGqThktqlRIjyzvsUvflGBmd/2KVuqfKyGj/Eru2BEZG/c/YpR7K
MAodx+GQZkbGbFyOdGTkvIZD6g4vYzCY8fc7hlwNI2MHkFqfZ8/fii6nzMh5
9f/jSkYg4L2DKnWaCWjkQyWgjAA3Yxmq3BZGxpL/HYyMQks/OoENRwLFQLmv
Cow6p//vZRV9jim3kJEx4P8uQUYTNKfUMzJmTGVk1MwRZmRfgyZ3ipGR3Y4R
DMzQvfBJCSzOwMgY8hDD72tFwZLyU39gSP3/f7PTVDmyBFPT4AcA7s6hfw==

      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x/EYBOTL4bYQYfHYDqa2Q9DbjWz0TcgdUMJi5wCM/NHIHWYGbecAzNz
FbrUKh72wt8QuUdoUt+dmBXBjBJm549ocsnMzGFghj5z9f//548iSV2UYGae
/f/9F4jc/RSJSwg5oOuYBbLcckFyJlmKzBbPEXK31ZgggAFMWn1Htu+WPRCw
MzMzAQ0QDXyF4cP/q5cvXwb05jpMmf9Qd2L4j6Zyu5mZbZZexS73MQnoC1T/
IcCPGTmi53CZSgUAAFNqquE=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+E4E9ZlCsDIyMDY+8PDLkfooxQYP8KQ3KjsbFx7MYlBcZsak9wGf5V
hPEcDqnL2oysl7DK/N5qysjYi11XGdAtLl+wSLzLDGZiZHT9ik3TEZAP5D5j
NfA8O0gy7zdWyc6q+RfEGTdjdwoQvOHgfYxL7i8n4x1cUhWMuOTmcTIy+v5F
FZthByQ+VauxMTIqPUOVeipqUVenJgP0AVPaOzSjzsLizmYbhjWfVUASSp4b
P2Jxw81cC/nJP3G4naoAADjIsz0=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9AcKLCV4MhctUvdPGfl7NcmZgYQWjKH1Sph8ZMMYwa/E720oxMjEvR
9CkKvLnzcc//8yeDGBmj0eSuvYQympkw5KDg71EBJrap2OXWAt3Sh1XmTQwL
E2v/Xywy21JVGBll9mGR2cnNBPSc9x8sUv89wB6X2/gPi9x9584FAYyMTN3Y
Hfn/3wqgWw7gkPzfxsRYjEvuPSNjEKrI6XXr15+EyDGhy0UxMjJyXAM5SJmR
cS2mHCNPb12oESOTxRs099vwM0IAS+F7DDfc3JuWJimalrYHlyPpAQBJ+KXm

      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+M4Ps/MCXGjUXOZ9Z7EKXBfR9D6o04Yx+I7mWUeIMut5SRaR1EjnEZ
phzbfzLk/mYzcoIZ3YyMK9Dk1jAy1oEZ4oxyaFLfzBgZT2CX+zaLkZHxC5gJ
NPsgitx2oBTjBaxueS8AkhPRBAFxRgZnZLmvuoyhXgZWpowQwCpetgsh+efX
379//vz59evXWSFGRmYWRqZ36P4Hgs9ujEIrNuW1/MAiN58Rw39wsIMNt9z/
Mjxy6njk2vDIUQMAAAyzq64=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cYrGGwxiW1gZtxKi65ciatz7jkMphscEk94GNKwiXnz8i4GYfUVx0m
A1zazjIxNcLYVzZs2PAcSa6aiekohLXBmJuJkYl/JVzqhRST20cQ42YiNxOT
RkqKAvcamFw7I+MxEJ3AyCA7F+K0FJicGVPRH6CDcliZMl6B+H+9mCbA5BiZ
NkIclArhdzIlvUWVC2WSeALmXhDhP/QfRe4iN9N+MO+mBNNshBcqGRU+/z/C
yPgGyL7WL8GQgeS9+yJMWa+PMDHdOtoZy8fE1fsTOVxSmZiYbIEY6G2mqPOo
Yfa3SwQkDJSre/P3Pzq4P7+qOIWLifEGhsygBwDJqZ6C
      "], {{0, 28}, {28, 0}}, {0,
       255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x984OPbtzWmjIyMDIy2LR9Qpc5KMyGAyGEUuRwmZCB+G1nuhggTk1vI
6tntkzyZgZKnUDTeuXDhL4i+W4QpBwVr1EBm5v7EkPj3NJ0FJGX0B13m69p0
iEtCb6BLHbOAudJiC7rcMoQX1C5hkTPy9zcCSQpeQ5X7kJe4CBhY768Z4fID
ELwAyk3DIfcWKDcRh5wFhpm3v0F1zQKGGd8VZKkbwtYb7gLpMw5AXXyrULR9
MWVikjYzM+MDeSECzZZCuM/ZVn9Gk/uVApHRq3iDw41UAgCqb3ZQ
      "], {{0, 28}, {28, 
      0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8gcIAJCBh0Jk3ClEoWYgYCJiBuQpc6Jc7MzKehASSZFS+iyW1jZnba
9P//BaAkk9I1NMnpBRDaC2huFQ4nHQPKyT7ALvclAOieyTg05gPlHHHI5TEw
MYXi0aeLKvSk3QsIPJ/9jMew76oSMzhcEuKB7pRA8f1EYFga+gPDExSmTNtR
tE0C6nn99U4HEzhMd2DIddy61Q6RW4wiBwpHWDwwMQvno7pFkQkcf0wB+WA7
dZCD7VmHDy+fj/eJr//rwXptUL148BCYetDHx8zE544jaDY6MvngkKItAAAg
qHQV
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x848PliuTADz9sfmDK3UtWYwCABQ2obK1BYe1YiE5MXhtwUJib92R/+
9zExLceQez3zwtv//++qMfEcxeEccyb2Ldhl/m5kZhLGoauRicnxD3api3JM
THtwaItnYtLb8xenHBOTwz2scpe8QJLq2CV/vmhxYGIqxmElKFwMcckBjS3D
KvH5fA4nE/t2dOEXe/f//78U6BTWfgwtHkzMZmaCQFfGYhpnAInXsJVYrDrO
z8TkO/kdjtCkEwAAIU22qw==
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+E4EdnZxQDI3/nYQyZV/N8mCCAe/onFBkrLUWgqLKfnz1INgtFzljI
0tKx5ub//58PFTMxiV1DlntwFM6cxcRk9Rarg/5M12Pij8MqdTsVaN0nrFL/
TUBO2YZdrsoLKMebhl3y24VGVSbBtdgl//+/q8oktA6X5G01JoEDuCTXMDHN
p7LcBi0mNez+v13HysQ0HU3wz9XnL+7u9lFiYuKf/hJV6l4Mk7auMDBYxGfu
QzcrGBLrMX24XEgtAAD9s7AP
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8wcEnEhZGRUfomFqmLokxgwFqIKXdcgEml8OoVRSZNLBr3T/30//8J
dqZ4XJZOZBI5jUNqGhfTQuwyT5y4mOyxa9tjzsRk9AmbzGNXTqAP6rHqqgH7
jj/sNRY5SyYxW1tbfSa9RVjM3HEBSL6bxKT4BrtL//9/b87khUvuvz+TMh45
3gPYZX6clGdiXYFF4t3rk4FAf+hiSHyuL4DEoPx1DDk5SNQyyd3ANPB8i6iW
jEpLC7Y0QScAAHgXtrM=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cSWK6v/wqH1EEuJqtf2KUu8jFxXMQu9UqVkSkEu9RHOyZGzS/Y5RYw
Mopewi51RoKJCYfUFzsmVnfsUv/7mZikcUj9l2biPwSkNqzClFrMwOjw//8c
DkZGpSPocoWMfHt+tzMyAYH6Q1Sp9zyMlv83MTEyKakwMU5GlVvKxJhwm4+J
Mfr7Gwy5SUCReiamsF//z2DIrWZkqFRlZPz//6woI8NZVLnv2oxsrEzOJ0qA
gRP5F82dS8BOBBG2nzA8WACWY3Pa9h7T86+2xzIxlR/DlBj0AAA+fqQy
      "], {{0, 28}, {
      28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cKuC/F5PMVh9wxZmaOfTjk8pmZXXBIbeZhZu7DIcXAxOSLQ5scE7PY
S+xS0zmZmGuxS53hZGYy/YlV6rcPE5PsTRwmMkPceP/YsR/oclJAuWf//zcC
aZNGVCkzJmbmmf+fmrMBaWbWJmSp83yMTIafHkUyMTHyAbEVktSnYGYm5kVP
I4F6Ki9EMTNZI8kBw5hJ/5M5E7P87q8T+THl5oPCpfO/D1Av3xFkOaAdadOZ
GJmigPYyMZ35j6aPGYbF5qP44NNCHpic4aJb6F5vSgPLaV7/hDXUBjUAAPlC
hQA=
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x984NeF0knZSxkY/U/dw5BzZoIB4XloUhe44HJMYmhyx7VsQmfsAQE9
DLn/X37CGIuZ63A56rQ5UzJ2mc2WAkwiX7HJHI5kBrrFC5vUD0GQM5mfYZOb
CPaCQvLK75hyewKgPuzCovHfrwu/ZhQ7MrGdxOGJ/xeZOF/gknvFxHYWu8zX
Cc5MrPswxb+9azYRZ2Jin48u8WthiJEQyJUCh9BkpvboQ9zPzFOKKtMXxwmR
sYpfi6bphqN9PJNx1tSLF//hcjzVAACV8KCL
      "], {{0, 28}, {28, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{28, 28},
    PlotRange->{{0, 28}, {0, 28}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.722388565565011*^9},ExpressionUUID->"d515ecec-bf47-40d4-a2b8-\
9812df317580"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["",
 FontSize->18]], "Title",
 CellChangeTimes->{{3.722388607540408*^9, 3.722388607687624*^9}, {
   3.722388701579138*^9, 3.72238874992458*^9}, {3.722388854796019*^9, 
   3.722388855823268*^9}, {3.722388904706038*^9, 3.7223889059867887`*^9}, {
   3.7223899893322487`*^9, 3.722389990595623*^9}, 3.722440747548291*^9, {
   3.722442363556699*^9, 3.722442365802561*^9}, {3.722943614846922*^9, 
   3.7229436354287033`*^9}, {3.7229556065757794`*^9, 
   3.722955628190091*^9}},ExpressionUUID->"143c047b-c1f4-4610-8f5d-\
7f69079a0e22"],

Cell[CellGroupData[{

Cell["\<\

2. CIFAR - 10
Pour les donn\[EAcute]es de CIFAR-10, on va constater \
l\[CloseCurlyQuote]influence sur les hyper-param\[EGrave]tres de couche \
neurone (taille de filtre et taille de pooling) en fixant les autres \
hyper-param\[EGrave]tres. 
Les autres hyper-param\[EGrave]tres sont comme\[NonBreakingSpace]: \
\[EAcute]poque = 10~20, mini BatchSize = 200~300, 
  Regularization= 0.0000001, Taux d\[CloseCurlyQuote]apprentissage de \
descente gradient = 2.4, deux couche de Multi-layer Perceptron(800 neurones \
et 100 neurones) pour la sortie.

\
\>", "Chapter",
 CellChangeTimes->{{3.722341792959947*^9, 3.722341804101468*^9}, {
  3.722440797065674*^9, 3.722440797363855*^9}, {3.7229556325482955`*^9, 
  3.7229556738347216`*^9}},ExpressionUUID->"5357a7a0-f14e-4360-8c3e-\
eea812413d3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"obj", "=", 
    RowBox[{"ResourceObject", "[", "\"\<CIFAR-10\>\"", "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ctrainset", "=", 
     RowBox[{"ResourceData", "[", 
      RowBox[{"obj", ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ctestset", "=", 
     RowBox[{"ResourceData", "[", 
      RowBox[{"obj", ",", "\"\<TestData\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexs", "=", 
     RowBox[{"Table", "[", 
      RowBox[{"i", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "ctrainset", "]"}]}], "}"}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexs", "=", 
     RowBox[{"RandomSample", "[", "indexs", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cvalidset", "=", 
     RowBox[{"ctrainset", "[", 
      RowBox[{"[", 
       RowBox[{"indexs", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "10000"}], "]"}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ctrainset", "=", 
     RowBox[{"ctrainset", "[", 
      RowBox[{"[", 
       RowBox[{"indexs", "[", 
        RowBox[{"[", 
         RowBox[{"10001", ";;", "50000"}], "]"}], "]"}], "]"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.72234333952909*^9, 3.722343361880093*^9}, {
   3.722343403259482*^9, 3.722343403504305*^9}, 3.722343598363749*^9, {
   3.722343694390685*^9, 3.722343724166181*^9}, {3.722343757125558*^9, 
   3.722343849350724*^9}, {3.722343923271701*^9, 
   3.722344017488872*^9}},ExpressionUUID->"1ebbdc4a-8715-42a8-b880-\
ec343e6e5561"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ResourceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.011111111111111112`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
                 7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                 3.266}, {3.789, 3.266}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129,
                  54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
                 15.57}, {14.129, 15.57}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129,
                  41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                 38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191,
                  31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
                 42.191, 15.569999999999997`}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 51.223000000000006`, 46.875}, {56.973000000000006`, 
                 46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254,
                  37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
                 15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, 
               FaceForm[
                RGBColor[0.274612, 0.618881, 0.810913, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                 75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                 56.547}, {9.879000000000001, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
                 13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121,
                  9.097999999999999}, {9.871, 9.097999999999999}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                 80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                  66.54700000000001}, {45., 82.418}, {78.398, 
                  66.54700000000001}}, {{45., 86.73400000000001}, {
                  2.2230000000000003`, 66.54700000000001}, {
                  2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                  66.54700000000001}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
             Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"CIFAR-10\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/CIFAR-\
10_1"}, "HyperlinkURL"]}, "RowDefault"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"CIFAR-10 computer-vision training dataset\"", 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.011111111111111112`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
                 7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                 3.266}, {3.789, 3.266}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129,
                  54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
                 15.57}, {14.129, 15.57}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129,
                  41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                 38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191,
                  31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
                 42.191, 15.569999999999997`}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 51.223000000000006`, 46.875}, {56.973000000000006`, 
                 46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254,
                  37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
                 15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, 
               FaceForm[
                RGBColor[0.274612, 0.618881, 0.810913, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                 75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                 56.547}, {9.879000000000001, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
                 13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121,
                  9.097999999999999}, {9.871, 9.097999999999999}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                 80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                  66.54700000000001}, {45., 82.418}, {78.398, 
                  66.54700000000001}}, {{45., 86.73400000000001}, {
                  2.2230000000000003`, 66.54700000000001}, {
                  2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                  66.54700000000001}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
             Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"CIFAR-10\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/CIFAR-\
10_1"}, "HyperlinkURL"]}, "RowDefault"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"CIFAR-10 computer-vision training dataset\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{",", "\",\"", "\"Machine Learning\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ContentTypes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TemplateBox[{",", "\",\""}, "RowWithSeparators"], Short], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Keywords: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"training\"", "\"test\"", "\"vision\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Documentation: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "\"https://datarepository.wolframcloud.com/resources/CIFAR-\
10_1\"", "https://datarepository.wolframcloud.com/resources/CIFAR-10_1"}, 
                   "HyperlinkURL"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Data Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  DynamicModuleBox[{
                   ResourceSystemClient`Private`typesetstorage$$ = 
                    ResourceSystemClient`Private`typesetstorageLocation, 
                    ResourceSystemClient`Private`info$$}, 
                   DynamicBox[
                    ToBoxes[
                    ResourceSystemClient`Private`info$$ = 
                    ResourceSystemClient`Private`resourceInfo[
                    "f9519a0f-2f42-4ef8-ba73-b05c928596ae"]; If[
                    AssociationQ[ResourceSystemClient`Private`info$$], 
                    ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                    Missing["NotAvailable"]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"f9519a0f-2f42-4ef8-ba73-b05c928596ae\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.0.0\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "179.28008`", "\"MB\"", "megabytes", "\"Megabytes\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"TestData\"", "\"TestDataset\"", 
                    "\"TrainingData\"", "\"TrainingData1\"", 
                    "\"TrainingData2\"", "\"TrainingData3\"", 
                    "\"TrainingData4\"", "\"TrainingData5\"", 
                    "\"TrainingDataset\""}, "RowWithSeparators"], 
                   Short[#, 2]& ], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel",
     DisplayFunction->(
      ButtonBox[#, Active -> False, Alignment -> Left, 
       Appearance -> {
        "Default" -> 
         FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
       FrameMargins -> 7, BaseStyle -> {}, 
       DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
       Baseline]& )],
    DynamicModuleValues:>{}], "]"}],
  ResourceObject[
   Association[
   "Name" -> "CIFAR-10", "UUID" -> "f9519a0f-2f42-4ef8-ba73-b05c928596ae", 
    "ResourceType" -> "DataResource", "Version" -> "1.0.0", "Description" -> 
    "CIFAR-10 computer-vision training dataset", "RepositoryLocation" -> 
    URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
    "ContentSize" -> Quantity[179.28008, "Megabytes"], 
    "ContentElements" -> {
     "TestData", "TestDataset", "TrainingData", "TrainingData1", 
      "TrainingData2", "TrainingData3", "TrainingData4", "TrainingData5", 
      "TrainingDataset"}], ResourceSystemBase -> 
   "https://www.wolframcloud.com/objects/resourcesystem/api/1.0"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.722447828540311*^9, 
  3.7224550742714043`*^9},ExpressionUUID->"9a33e824-b3d9-4ee8-824e-\
b70db663f60e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   RowBox[{
    TagBox["ResourceObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.011111111111111112`], 
               StyleBox[{
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789,
                   7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                  3.266}, {3.789, 3.266}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  14.129, 54.07}, {19.878999999999998`, 54.07}, {
                  19.878999999999998`, 15.57}, {14.129, 15.57}}}]}, 
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  24.129, 41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                  15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                  38.910000000000004`, 15.57}, {33.160000000000004`, 
                  15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  42.191, 31.781}, {47.941, 31.781}, {47.941, 
                  15.569999999999997`}, {42.191, 15.569999999999997`}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  51.223000000000006`, 46.875}, {56.973000000000006`, 
                  46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`,
                   15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  60.254, 37.707}, {66.00399999999999, 37.707}, {
                  66.00399999999999, 15.569999999999997`}, {60.254, 
                  15.569999999999997`}}}]}, 
                FaceForm[
                 RGBColor[0.274612, 0.618881, 0.810913, 1.]], StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                  75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                  56.547}, {9.879000000000001, 56.547}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871,
                   13.097999999999999`}, {80.121, 13.097999999999999`}, {
                  80.121, 9.097999999999999}, {9.871, 9.097999999999999}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                  80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                   66.54700000000001}, {45., 82.418}, {78.398, 
                   66.54700000000001}}, {{45., 86.73400000000001}, {
                   2.2230000000000003`, 66.54700000000001}, {
                   2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                   66.54700000000001}}}]}, 
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
                False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
              Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
                Dynamic[
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"\"CIFAR-10\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/CIFAR-\
10_1"}, "HyperlinkURL"]}, "RowDefault"], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"DataResource\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"CIFAR-10 computer-vision training dataset\"", 
                   "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[{
               Thickness[0.011111111111111112`], 
               StyleBox[{
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789,
                   7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                  3.266}, {3.789, 3.266}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  14.129, 54.07}, {19.878999999999998`, 54.07}, {
                  19.878999999999998`, 15.57}, {14.129, 15.57}}}]}, 
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  24.129, 41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                  15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                  38.910000000000004`, 15.57}, {33.160000000000004`, 
                  15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  42.191, 31.781}, {47.941, 31.781}, {47.941, 
                  15.569999999999997`}, {42.191, 15.569999999999997`}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  51.223000000000006`, 46.875}, {56.973000000000006`, 
                  46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`,
                   15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  60.254, 37.707}, {66.00399999999999, 37.707}, {
                  66.00399999999999, 15.569999999999997`}, {60.254, 
                  15.569999999999997`}}}]}, 
                FaceForm[
                 RGBColor[0.274612, 0.618881, 0.810913, 1.]], StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                  75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                  56.547}, {9.879000000000001, 56.547}}}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871,
                   13.097999999999999`}, {80.121, 13.097999999999999`}, {
                  80.121, 9.097999999999999}, {9.871, 9.097999999999999}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                  80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                   66.54700000000001}, {45., 82.418}, {78.398, 
                   66.54700000000001}}, {{45., 86.73400000000001}, {
                   2.2230000000000003`, 66.54700000000001}, {
                   2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                   66.54700000000001}}}]}, 
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
                False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
              Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
                Dynamic[
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"\"CIFAR-10\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/CIFAR-\
10_1"}, "HyperlinkURL"]}, "RowDefault"], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"DataResource\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"CIFAR-10 computer-vision training dataset\"", 
                   "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"Machine Learning\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"ContentTypes: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    TemplateBox[{",", "\",\""}, "RowWithSeparators"], Short], 
                   "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Keywords: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"training\"", "\"test\"", "\"vision\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Documentation: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "\"https://datarepository.wolframcloud.com/resources/\
CIFAR-10_1\"", 
                    "https://datarepository.wolframcloud.com/resources/CIFAR-\
10_1"}, "HyperlinkURL"], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data Location: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   DynamicModuleBox[{
                    ResourceSystemClient`Private`typesetstorage$$ = 
                    ResourceSystemClient`Private`typesetstorageLocation, 
                    ResourceSystemClient`Private`info$$}, 
                    DynamicBox[
                    ToBoxes[
                    ResourceSystemClient`Private`info$$ = 
                    ResourceSystemClient`Private`resourceInfo[
                    "f9519a0f-2f42-4ef8-ba73-b05c928596ae"]; If[
                    AssociationQ[ResourceSystemClient`Private`info$$], 
                    ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                    Missing["NotAvailable"]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"f9519a0f-2f42-4ef8-ba73-b05c928596ae\"", 
                   "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"1.0.0\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "179.28008`", "\"MB\"", "megabytes", "\"Megabytes\""}, 
                    "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Elements: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"TestData\"", "\"TestDataset\"", 
                    "\"TrainingData\"", "\"TrainingData1\"", 
                    "\"TrainingData2\"", "\"TrainingData3\"", 
                    "\"TrainingData4\"", "\"TrainingData5\"", 
                    "\"TrainingDataset\""}, "RowWithSeparators"], 
                    Short[#, 2]& ], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel",
      DisplayFunction->(
       ButtonBox[#, Active -> False, Alignment -> Left, 
        Appearance -> {
         "Default" -> 
          FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
        FrameMargins -> 7, BaseStyle -> {}, 
        DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
        Baseline]& )],
     DynamicModuleValues:>{}], "]"}],
   ResourceObject[
    Association[
    "Name" -> "CIFAR-10", "UUID" -> "f9519a0f-2f42-4ef8-ba73-b05c928596ae", 
     "ResourceType" -> "DataResource", "Version" -> "1.0.0", "Description" -> 
     "CIFAR-10 computer-vision training dataset", "RepositoryLocation" -> 
     URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
     "ContentSize" -> Quantity[179.28008, "Megabytes"], 
     "ContentElements" -> {
      "TestData", "TestDataset", "TrainingData", "TrainingData1", 
       "TrainingData2", "TrainingData3", "TrainingData4", "TrainingData5", 
       "TrainingDataset"}], ResourceSystemBase -> 
    "https://www.wolframcloud.com/objects/resourcesystem/api/1.0"],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.722435894496368*^9, 3.722435902478951*^9}, 
   3.722436132125256*^9},ExpressionUUID->"4a67ac46-0ec3-4d3b-a3e1-\
77c0d45b1ee5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{
   RowBox[{"cCNNchain1", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"30", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Filtres", " ", "de", " ", "noyau", " ", "\[AGrave]", " ", 
          "convolution"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{"Function", " ", 
          RowBox[{"d", "'"}], "activation", " ", "ReLU"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"Pooling", " ", "filtres"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "800", "]"}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"Multi", "-", 
          RowBox[{"Layer", " ", "Perceptron"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "100", "]"}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Deuxieme", " ", "Multi"}], "-", 
          RowBox[{"Layer", " ", "Perceptron"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
      RowBox[{"(*", 
       RowBox[{"Function", " ", 
        RowBox[{"d", "'"}], "activation", " ", "pour", " ", "la", " ", 
        "sortie"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<ship\>\"", ",", "\"\<airplane\>\"", ",", "\"\<automobile\>\"",
             ",", "\"\<bird\>\"", ",", "\"\<cat\>\"", ",", "\"\<deer\>\"", 
            ",", "\"\<dog\>\"", ",", "\"\<frog\>\"", ",", "\"\<horse\>\"", 
            ",", "\"\<truck\>\""}], "}"}]}], "}"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"NetEncoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Image\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"32", ",", "32"}], "}"}], ",", "\"\<RGB\>\""}], "}"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtrain21", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errvalid21", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtest21", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cCNNtrained1", "=", " ", "cCNNchain1"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "\[LessEqual]", "15"}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Epouqe\>\"", ",", "i"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cCNNtrained1", "=", 
        RowBox[{"NetTrain", "[", 
         RowBox[{"cCNNtrained1", ",", "ctrainset", ",", 
          RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
          RowBox[{"BatchSize", "\[Rule]", "300"}], ",", 
          RowBox[{"Method", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<SGD\>\"", ",", 
             RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.0000001"}]}], 
            "}"}]}], ",", 
          RowBox[{"LearningRateMultipliers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"_", "\[Rule]", "2.4"}], "}"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err1", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained1", ",", "ctrainset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtrain21", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtrain21", ",", "err1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err2", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained1", ",", "cvalidset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errvalid21", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errvalid21", ",", "err2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err3", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained1", ",", "ctestset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtest21", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtest21", ",", "err3"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<Taux \>\"", ",", "err1", ",", "\"\< \>\"", ",", "err2", ",", 
         "\"\< \>\"", ",", "err3"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"err3", "<", "0.3"}], ",", 
         RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]",
      "]"}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.722341764328125*^9, 3.722341800040638*^9}, {
   3.722343262570117*^9, 3.722343290653*^9}, {3.7223433225736837`*^9, 
   3.722343348887897*^9}, 3.722344107475967*^9, {3.7223441394986877`*^9, 
   3.722344256841888*^9}, 3.72234429538447*^9, {3.722344341782729*^9, 
   3.722344346209342*^9}, {3.722345469989183*^9, 3.72234549696395*^9}, {
   3.722390158008875*^9, 3.722390174724194*^9}, {3.722420945073366*^9, 
   3.722420980988508*^9}, {3.722421069584037*^9, 3.722421094385065*^9}, {
   3.7224223807941*^9, 3.722422392506755*^9}, {3.722433510238997*^9, 
   3.722433525138075*^9}, {3.722433645444469*^9, 3.722433826399555*^9}, {
   3.722434195137186*^9, 3.722434195450375*^9}, {3.7224359061735287`*^9, 
   3.722435949201495*^9}, {3.722435994867857*^9, 3.722436152809305*^9}, 
   3.722436343231278*^9},ExpressionUUID->"bfefa32f-6c36-4add-bd3a-\
71cb1931053e"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{30, 3, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 30, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
               "$OutputSize" -> {28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{30, 28, 28}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {30, 28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{30, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{30, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 30, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{30, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{30, 14, 14}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {5880}, 
               "$InputSize" -> {30, 14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{30, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{5880}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{800, 5880}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {800}, "$OutputSize" -> 800, "$InputSize" -> 
               5880, "$InputDimensions" -> {5880}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{5880}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{100, 800}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {100}, "$OutputSize" -> 100, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 100}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               100, "$InputDimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "ship", "airplane", "automobile", "bird", "cat", "deer", "dog",
                 "frog", "horse", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"30\"", "\"28\"", "\"28\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"30\"", "\"28\"", "\"28\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"30\"", "\"14\"", "\"14\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5880\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{245., {99.4169921875, 104.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.722344302297872*^9, 3.7223444352034197`*^9, {3.722345482913389*^9, 
   3.722345497506384*^9}, 3.7223902685242033`*^9, 3.7223943920483913`*^9, 
   3.7224209213280478`*^9, 3.722420992310137*^9, {3.7224210757648163`*^9, 
   3.722421104192649*^9}, 3.722433936033607*^9, 
   3.722435565982587*^9},ExpressionUUID->"d32bc2b5-f1a4-4e42-8e06-\
0a4854667f81"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Epouqe", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435566056945*^9},ExpressionUUID->"67abb787-f31a-43f1-84ae-\
64185b3295c7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.891425`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8915`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8914`"}],
  SequenceForm["Taux ", 0.891425, " ", 0.8915, " ", 0.8914],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435631842637*^9},ExpressionUUID->"22dea9ca-6dda-44ba-b615-\
8b70e4b5b205"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Epouqe", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435631857841*^9},ExpressionUUID->"bc4b2e07-1093-4ca2-9ed9-\
89fde175b55d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.73515`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.741`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.7423`"}],
  SequenceForm["Taux ", 0.73515, " ", 0.741, " ", 0.7423],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435698805169*^9},ExpressionUUID->"161d9277-6557-4304-9b1e-\
b3863600f39b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Epouqe", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435698830015*^9},ExpressionUUID->"ae3729e8-5885-4621-a118-\
7826b1798b8d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.59265`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.6038`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.6013`"}],
  SequenceForm["Taux ", 0.59265, " ", 0.6038, " ", 0.6013],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.7224357649044847`*^9},ExpressionUUID->"d0ca67b2-679e-41e5-b81d-\
ea7308d0c499"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Epouqe", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.72243576495977*^9},ExpressionUUID->"b26496a7-7896-406e-a3cb-17f5f57b3c51"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.53555`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5617`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5552`"}],
  SequenceForm["Taux ", 0.53555, " ", 0.5617, " ", 0.5552],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435830456176*^9},ExpressionUUID->"ecd81388-1926-4f4c-87a2-\
c9370ab570c7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Epouqe", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.72243583054808*^9},ExpressionUUID->"69162a02-f6e1-4f01-b3c4-f893dde719d4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.487225`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.5276000000000001`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.5236000000000001`"}],
  SequenceForm[
  "Taux ", 0.487225, " ", 0.5276000000000001, " ", 0.5236000000000001],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.7224358968870983`*^9},ExpressionUUID->"4f096be8-8938-4582-91c1-\
1687b15aa562"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Epouqe", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.72243589690764*^9},ExpressionUUID->"aaac3592-880d-4095-a5d6-eaeb2188b676"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.430725`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5023`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.49029999999999996`"}],
  SequenceForm["Taux ", 0.430725, " ", 0.5023, " ", 0.49029999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435961453681*^9},ExpressionUUID->"81ef48fb-4f87-46b9-bd6f-\
3ba8b51182c0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Epouqe", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722435961473646*^9},ExpressionUUID->"7e191ed2-8613-4b9f-9d7e-\
b62a4c9432ea"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.396725`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.49250000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.48009999999999997`"}],
  SequenceForm[
  "Taux ", 0.396725, " ", 0.49250000000000005`, " ", 0.48009999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722436025176591*^9},ExpressionUUID->"0e6e7698-47c9-4608-9e6c-\
3040929bb294"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Epouqe", 8],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722436025200245*^9},ExpressionUUID->"abb47335-86b2-4ea8-b986-\
66a7156e233e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.3368`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.4699`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.4619`"}],
  SequenceForm["Taux ", 0.3368, " ", 0.4699, " ", 0.4619],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.72243608972148*^9},ExpressionUUID->"5381fe3a-df37-44e7-8763-b28fd13711aa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "9"}],
  SequenceForm["Epouqe", 9],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722436089742466*^9},ExpressionUUID->"a1d28d1c-d861-4d33-87a7-\
afa10ed5c86b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.30837499999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.471`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.46540000000000004`"}],
  SequenceForm[
  "Taux ", 0.30837499999999995`, " ", 0.471, " ", 0.46540000000000004`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.7224361555375767`*^9},ExpressionUUID->"41c15618-2419-4844-9890-\
24bdd1ea2314"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "10"}],
  SequenceForm["Epouqe", 10],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722436155553213*^9},ExpressionUUID->"7ab60c53-ae4a-41c9-9568-\
60f1e87fe126"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.258625`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.45820000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.4588`"}],
  SequenceForm["Taux ", 0.258625, " ", 0.45820000000000005`, " ", 0.4588],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.7224362205999947`*^9},ExpressionUUID->"1f787612-f95a-4cc2-bd82-\
e056f790389f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "11"}],
  SequenceForm["Epouqe", 11],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.72243622062643*^9},ExpressionUUID->"bf6fa520-76bd-49d8-9cf3-35947d80b0b9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.22885`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.47030000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.46440000000000003`"}],
  SequenceForm[
  "Taux ", 0.22885, " ", 0.47030000000000005`, " ", 0.46440000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722436285104068*^9},ExpressionUUID->"1503ad52-56d1-4a16-93db-\
a207d66b927e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "12"}],
  SequenceForm["Epouqe", 12],
  Editable->False]], "Print",
 CellChangeTimes->{3.722433843222414*^9, 
  3.722436285134432*^9},ExpressionUUID->"491efab3-818e-45a7-bce5-\
728a48dca581"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Taux d'erreur sur test:\>\"", ",", "err3"}], "]"}], "\n", 
   RowBox[{
    RowBox[{"cerrset1", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain21", ",", "errvalid21", ",", "errtest21"}], "}"}]}], 
    ";"}], "\n", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain21", ",", "errvalid21", ",", "errtest21"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.722436372805874*^9, 
  3.7224363770151577`*^9}},ExpressionUUID->"aac6be73-16eb-4a87-af62-\
998f9cdf9faa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux d'erreur sur test:\"\>", "\[InvisibleSpace]", 
   "0.46440000000000003`"}],
  SequenceForm["Taux d'erreur sur test:", 0.46440000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436392369671*^9},ExpressionUUID->"fc7da6ce-585f-4e5b-9756-\
0a5ac016f74e"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.891425}, {2., 0.73515}, {3., 0.59265}, {4., 
         0.53555}, {5., 0.487225}, {6., 0.430725}, {7., 0.396725}, {8., 
         0.3368}, {9., 0.30837499999999995`}, {10., 0.258625}, {11., 
         0.22885}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.8915}, {2., 0.741}, {3., 0.6038}, {4., 0.5617}, {5., 
         0.5276000000000001}, {6., 0.5023}, {7., 0.49250000000000005`}, {8., 
         0.4699}, {9., 0.471}, {10., 0.45820000000000005`}, {11., 
         0.47030000000000005`}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.8914}, {2., 0.7423}, {3., 0.6013}, {4., 0.5552}, {5., 
         0.5236000000000001}, {6., 0.49029999999999996`}, {7., 
         0.48009999999999997`}, {8., 0.4619}, {9., 0.46540000000000004`}, {
         10., 0.4588}, {11., 0.46440000000000003`}}]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 11.}, {0, 0.8915}}, PlotRangeClipping -> True, 
     ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, AxesOrigin -> {0., 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 11.}, {0, 0.8915}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.7224363924710703`*^9},ExpressionUUID->"18fc9f3d-5682-4e14-b109-\
e566d86070df"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.72243356403939*^9},ExpressionUUID->"74015a23-a097-4690-a62d-9a0ef1ca20b2"],

Cell[TextData[{
 "\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3VtYVHe+N3iembmYy7mc25lnz56d7iQ3M890707S+s5M0vvtTsxhdncn
mOfdbyLwzu5I2R1BjUA8YETcQhkFVDxwUJSDggoiqIAoeCilUAoo5VyEIi4s
sGSxKUff5/lNrap1PlQVVQsL9Hvx6Y5V6/Bfq0r/3/qf1v/09brPUv6bhISE
9f+9/38++2rjf/j226+++3/+B/8f/mhZ/6//xZKc9B8tacn/JfnbX3/93/pf
nPVv+z/6/Xf+/x4eHqaHDx8GjIyMkNvtJoZhyOPx0PT0NAAAAMCCcBmCyxWD
g4P06NGjuJcHAAAAXg1c+8Xjx4/jXg4AAAB4dSBbAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJho
1EYlOVtp/frNtHV/FfVMLvHjAgAAvO6YAbp05gydWahzV2n8pZRxkqrW/l/0
u9/9TvTFvs4lfNzF/KxGqe1c6M/lXGMbOQYn419WAAB4vf3UQqtldWzkvqTW
8ZmXUMYROrT6fWUO2NO+hI+7eH7q2Bvx57NmZxUNMvEvMwAAvKZ+bqfkaPLF
B8kvKV9M073K7xXn3tc8vKSPu1h+ulW4oM/og09zqQcZAwAA4sGfL1J/90EU
+SKNbky+nHwRMDlJkxyz68vFOu4i0MsXH6xeTasDPtP9nL5e6n0+AADw+vip
RdGm8UFiMY0abu+i69yYgHPn6NyZM9R4/UHgtY4zRyln2zbati2Hjl7qVe7D
jNL1xlOUl/MdrV+/PmjzNjp4/CI5xhnNOcYd1+jMGf/xA+c4R7bRKdV7ZwLv
nTnTSP3+nMAM2qhq/07azB9787YCar4z9tKOK13nAF2qPCDeh7z9x/zbDwXe
c1y/wJ+bu3cdEY1lUecL7nOR7zfpvEa7kt5X5cBUMQfqXRP32jH/NW3zlzEn
74S2vcN/DW3+z3Lb5vWyz2oXlTfeCl3mqK49iu+S3+CdZjoYGKcrlHEz7Tt+
nnpCtq8xgXIczJP22+z/DuYdrKJrDuPPlBnvoUb/dUn3Y7P/e5BPlf77MboM
MioAQFyp2jQ+WFNsXJdoxm98SUmrle0hX+yRfkP3Nv5In4VpG9l55q7iHB0F
f1K8/29tLsP3vvHXQ0bH/9vRzpdyXM7PjjrDdqFv8kpol2LsR2RjWfTyxahq
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
eZaipwONlJudTfkl14hdAuVZbhwn/xb4jh3rmY7pOGbli9mxLjqev4ESV62i
VQGJlLqliFodk2H3dTuayLpxDb/fKkpMXEd55ZdodDb8eWPZFwBguXHWfMfn
iw3UtUzzhc8zRJ0tLWQffroox+8u/TZwj5K3X0K+iIKzemvg/h2Pe76YpUv5
X1FCQoKhdzdUE6O77yOq2vSbEPu+TaX2KYPzxrIvAMAy5R0L1M3tnc5lW3cK
v4/XltxbhONPUJklOXD8/VfH436ty9FSyReTlzLEOv0Xa/bSdaeLZmZniRnr
oeNb/iy+9/uCO6p956lu3d+J73+44RjZh9w0M8PQg44zlPyWkBNWUqtbndFj
2RcAAOJJqL82V5nfN/9iso0sgfYdC11l8O9/LJ9PfPPFNB1bFazL/2FDI83r
Hf/4X/i6/kvqmpU+6ynbPjEfpJ/q0zn2BBWt5nPC19U0K3svln0BAJY3H3kY
NzFeVvG6z+shN+MhH/9nj/sh2W02svnZewYMx+qp9/N5J6jf3kP9Az3+fXvI
7fXpl8PHEuNmyMMavO/Hehli5ONQWS95/K9dK/wm2H5R0Oa/Do9/G0a/fKyH
BnrsgWuw2ew04GLEchoZb9kX7D9KLde0m3tcA4p7whhdm3iNXhruF87v36d/
mLwRfUbK/Xq4/SIYK+llhsTyBa/XuH6P9vOWY1x9UhkHXGJ72JLIF09u0sdC
O4FRTmSFbT6h6zPSNt1FvwvW/58fM6z/X0y10Eq+r+P8mM+UfQEAlrOnzlPB
sQWpp2R1nZdq0pMCYz67/HXoyey1/BgNuSyq71H3GQv7baD7Xi/dqcjR2S+F
Dl10asvhKOf7OIzqD+HYKVTZHxxnIfSL6FEeh6Xuuv262yWn76arhuM2WGrO
XRPYbr2s74V13aaizCTd4+06cU03M0zazlC6bln17qNsP/sZytLdz0IlLQ79
fOSboAuFm3XLl7q9jPo86vo12s+bxw4Z79M/RYMNO+OfL9i7lMxnh5YZo3xx
l1Zr8sU0HU8Mti9kNf0c4hxS+8hXpx6asC8AwPIm5ouM04p8cVZVf1oy91J1
QxPVVRTw/QXBOu6K+5nseMJ+G8hqzRDrmNLqBmpqqKYd/DiGYF/GPd1ybD5h
nC+EMgn11JT9PBWXFkv1b/IOKq0opeLiYrooqwudZ7eK503LPUxNLe3UVFci
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
e1Ah9Ys4lG1NIfOFLFe957/OHjdyBAAsbTHlC4N6RzhmZb/e72njfBEYV2gt
JKvVquJ/LVMYXxBuLVF528EOKixUH8saeE0c/xBRvmBpwHaFKoqL/fvnUnZ2
JmWmp5PFkqJ7HHkZ9O9B0LPJy4G+C0U7i2osRUqKhbJzC6m6qV137k109y6y
8s0Nnl56+UJlfnaCOmv38HM8/d7bK7bRiPni3QP6+aLoj4H399v11j/XzwpT
ndmy+SLq7+G0OL5Tf32tCbKuEOaLtGveDzf+Qpwjw3vzt6tpY04R1Xd0k3sJ
rF8KACC3mPlCvx0gdL4IbwH5IgJh2y8892mvRTsHJjj+0RI2X+Rc+dm4rHzf
hqYfx/eIrlUfonSL9pzc3Jwut/S7N7p7J40/7dDMfZHxLo35qZHg2gWEjCHk
hUjzxZ7beut+6uQL2Tob3+itw/F8VtpnVvsdlfJBcL6I+n1hHu7vC3TWuuNN
2s/T1sSPdOeQbDh8A/NUAWDJWEr5IjDHwecjlmVDCLcGhNT2H5gf4gt1LJZ8
Icd3+qg1d43UX9HiCDzriyuDMK5EHH8RTfvFSGPY8ZNebs0N+1WqLt4l5YTk
3fSQjeXeyfqQDMZscObCfM4LsfjPN5P6Lb4qC/Z3mJ0vnth2S/X5itWUlJhI
iQqrxPdXBJ6P8lv6/PtGcW7JAdkc2MQk9b6J9LHY37OSVvmPteK3q6l+yKAf
ZH6Gxpx2aqgs4Nf0Ul47AEC8LYV8Mefk55wkH6CxmK9JqtsLQowtCHUvxHL7
HgbWf+Beqx+YC7mPUb7Qu68CadxlZM8Pe+a+rpmvEt29k8q3rVZvHGnQoDiX
Jb754kHVen7exHiI7aR1NIU5FKbni+7duu0GIYnnVuaLSO25Fcmza+fpqvVP
mv4hAIB4clTo/f4Oeln5Qj6fw2g8pM/dRaWFVirQzDfVGufnYKjnn0p81N1Q
EhibcHV4zrjcfP9AYFwkq9Mnw/aJ+cMoX+jPsQleszDOQqrjWbpWmk/Z2Va6
6tLrt2DF44pljPLeSfdoN/WFubZ45wshByR8eMCw7nwx1SLO6fjhejAvmN4/
wq0HyjCGZmb6adeKYPtD/dAUzXCvzc6Lx5ydMd6XmZml4Us7AuV59/vLxMzO
+F+fEfs7WOd5WpeYSKl5l3X7QHy9B5EvAGBJmRLWVEg9Ira5C15avngu/VYO
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
yjKxD6koRaqvdxWfpOrqaiotlB0z7RRNRHBtmvL56/Vdxf5rs+ZSVed4DOfz
1+uqOjOj8CQ1NJwQr5WTnZspjpcs9d+XhupDlC4rSwcjH0M5Rodl5dheyN2r
JqouzSeLeH8P0JBPWY6aTON8Ib/u/NIaamqqo8LsVCljFVxXtDHpf87aa7Vk
7qXqhiaqqyiQyuY/xxW3Kv9479EO2X7b/feoyX9NpdYMcZ9MPnfGL19ohcoX
bPehwHt/PtxHXDaxc3NNysupnFPZQI6xJ8bHZu8G+1YCVtL3hVX+78wp2mX5
UMwY0eYWAIClarBOGH/xQPOeWO+kGeeL5O2nFXXwdM8ZRZ1UcnVccUxnnf5c
yO7Sb8Ws0uFSjlmc7j8v1mc5F0fDXpOifBllNKTTLxHd+ZR1bpVd3hbxmM7m
rlWcd0x+Xn+dK8wplY91mbqxT7wft9XtFEyXWE8r62GpHEb5IjntMPV5lHNB
nGJb0wa6LXtP/3NWXmvBRaeybJ77tFeYI6saG3yD73PjrumKal7SdH+jLGst
n3zRe/xf+CzwNq18S78d4sPvq3Xb2B4I+76XS/2zys/EdTVbzB23ZpfX3B0A
gFDE8Z066yiEzxdZinoqyEfXrMH6JSm/TTUWw4/t4+vMLGkupPiav87u0R8j
MN60hy9Ledh+ktDli+V8Up2boTPf5sXkZT6XWOiiS92nIctysnvNuu9Ti/+3
fWePTr/Jc2nuqHL8bbh8sYGuuvXqqgk6bNG2G4TLF2sLruuWberGAXE/j/D6
07tim9gx+0zI/ZZTvugu+qMiS3yUaqXa5jZqaz5Fm1a/oZh7ov5+Pqj718B7
vy/Qm0s8S/a2Zmpu68a4UQB4pcSSL5IzzileF495NnjMbbVDOucU6i2p/UJ+
HsPxfi96tbnEQLjyRX8+qc6t7NfJJUJuSd5Nfay2jOL4iAWsiaX/+YTOF+r+
rIj3M8gXutdqcL6njvJgdkg9EqIva4yKdHJONF5Wvujc9Ss+Q3xC9UPa8b+9
dZlixkivH1G+d/SfxTaKguZe5AgAeC3ElC/S9Osx4Zj69ZJxvgi0C1gLyWq1
qvhfyxTGKIRfYzJc+aI/n379LJoLjjswqt+N8wVLA7YrVFFc7D93LmVnZ1Jm
ejpZLFI/woLyhcF1cxwV3y04XxhmAL6tQpEvhGNt1892ER87Qi8rX7hu11P5
kXJqdRqPs7i09df6+8/ep02KvpS3KTFpExVUXiD7kNu0v8sAAEvJYuYL/boj
dL4Iz9x8sbDzLUK+4MYx6MxD4VjSLabnC73PJup8oXO9wrHWqsaQ6n8Hlk++
iATbe4gfZ6Ezh3V+gi4UZumP3fjtd3R9bKFzsAEAlrallC8C8zV8PmJZNgRf
2GuKNF8s/Hxm5wsfteauEcdMVLU4yO3xBs4p1M3i+Itlli9ClcFo/ks0llK+
eP7kGn0cyAxf0q0Z4ww8w4yRvaOeirZ8LcsZKdSD8Z0A8ApZCvlizsnPOUk+
QGMmXFO48kV/PpPzhew5ZfUD+ut8RzX+Io75Ym7kvJiXdMfWcqavi3NIlke+
mKCiVcGxF62642b5/fk1MhaST3yui+Lc1T23H5tyHQAAS4HQHx/PfPH8xZA4
1zHPYP6pz91FpYVWKjhxI+yaj2Hr2ajPZ3K+8ArPKcuiLp3xoNx4UXFO6zLJ
F9y6mGV8f09qfpvOZ+WlZqs0j3d55Avp2WZ/yLtjsP80HU3k2yK+rpaN4Zyl
CzlrKTFxHdUP6bW9zdKxVcgXAPDqmbpzlITx/g9VddxLyxd+gw07xTqnpGVQ
0XfvdUlrZSblh+rXj6x80Z/P7P6Rx3SSX4czNb+RGNkaWty81cOytU+XT77g
vlPS/NPU3JPU5/YE+po8rvtUJlvna/nkC2mOaWB+SNkd5RyQ+VGq2vQb8f1S
h7wtalrMD9z6Fz0z8owxT92VmeKYz/Nj4fv+AACWi2euy4p/79Mt6XSIXxPr
qaNSrHc8sn3k9ZFH55jh8kUNny+U80wf0wXZ+lQpliyyFlopWzbGkVsLK9zY
zkjKF/35wowb4J+bvpDxnZPtB2T330KZmZmUnS2tc5rJ/7c6X4RavzPUdevm
C93POYIxEkK+0Dmfo05vffSgNGsZHeZzxlLNF3rPZz+eLBuT+ebHtDEnn3K2
pNLb8rW+D2vbN9jeEuXaGUmbaMuWjfSxbKwn1u8EgFfRSPtxf66Q/v1fz9dl
c+OXA/3k6rmGQh978vZG3Xp0kF+jU3/tKv/v4uwkg6zAUnfDQdna0/J1rptp
LIJsEUn5oj8fS818Jqkd0F//guvPMF53IzjuY5tqrdRx2xnKVM8hseygWtsk
PeWvZVvtA0U5rhVvDpZDNgc4kusW1iZR7Kf7OYe5Vo6QLwzmok4PdFCpdTul
p6cHc1NuIdXbRgLHXorzR9gHfA5Yc8JgjYpZ6izPUuQJKW+sprIOl+Gxnwxd
p11J7+rud7i5F890BwB4KVhi3G5yMwwxjCfmZ2wuvfPp4Z5hypCHe4atx7sE
PoMY+FjyekNdg/DstKWVLyI2P0NjTgc5nEPktNvJMeSOOB/Mz86Qm/uuBb5v
+uubAgDA/8/eu0DFdd7n3vp6zuq32pW12q9fz0lvac/plybHSeyediVtWseR
T5M0N1t2kiaOZbepI0Ha2MJOLCRZAt3AkpCQkGwQFroAstAFWSALJNDVIIEs
YQESCBDiIoE1WIMGGBjMIIHzfPPOntmzZ/bew1w2M2zpeVZ/q9HMvrzz/j28
z/zf//tuQgLxrblduO2S5jF93pqfEPZinYq4+AtCCCGExBy5ZjhRPF/2IOpa
u2C12WDpakV5wSr5vVBqdaeC/oIQQgh5UPDVh+jWeG467P982QihvyCEEEIe
LBzWTlSXH0BeTg4KigqQk5WFguJyXOmJruZCCf0FIYQQQoyG/oIQQgghRkN/
QQghhBCjob8ghBBCiNHQXxBCCCHEaOgvCCGEEGI09BeEEEIIMRr6C0IIIYQY
Df0FIYQQQoyG/oIQQgghRkN/QQghhBCjob8ghBBCiNHQXxBCCCHEaOgvCCGE
EGI09BeEEEIIMRr6C0IIIYQYDf0FIYQQQoyG/oIQQgghRkN/QQghZPpwwmrp
gcVmnwFtiRyn3YqeHgvszvj1o6XrOnqs5ulH+gtCCCHThv0ykhMTkbBgH2zx
bksUNO/9FRJdn2NX00Bc7t99fI37/omJqbhin4h7f4SCUf6iq+YQViTNw5w5
c9zMnb8EheWNGNE5fsxSj5L9JSgpCYLr/SarM8h9B1Bb8ibmu+4323Pf+Unr
cKjmGsZmQN8SQsgDz+hlpAt/sewd2GNyTyd6GmpwurrR0Pu1Fa90j+9vx8lf
tB18zeMvFqH+QfEXYzewdf7nMWvWLG2++AouWNV9MVS3Xv8cBSnn7mjfd7AJ
K2cHOfeJzWgdi3//EkLIA02s/cXwJXe+xOhxON7+4p79JmpPn0Z1bRsc8Y5p
iETnL8ZwNOmz8pi+aMcJdFoHMWi9iar9r+MR71j/UAZuBJzbuPXH7vd+unYn
Skr2Y/9+Nbt370e9RSN/4WzBkoe9XuIRrCmpg2VwEJbOJhzIesHnMX66B4Mz
oI8JIeSBJdb+wtHivp97HsFxH/kLExKNv3BeK5LH8jcvqvMMDtf7Xo/xes1H
fu95/cWb9aNh37cu6zue+z6OQ20O1fv9tb7cSF7zUNz7mBBCHli8/mKhz19Y
e66joa4OdS6aWntC+D3ugOV6q3xOQ9N1WB3q4+w2G6zdJ5Hk9hdJOHW9Hzar
FVbd2lI7ulob3NeU2tKlW7/p8xfD7n87bDfR1OA5t6FVsz2hYlP0h/uz2bXq
Apyuz2Jxvec/5jntrs8sPuMUOHQ+l93SJd+7rq4JXVb1mBop0fiL/to0OU+g
V2dRu1byAt/f+IHf61Urvup+PVPDlwTF2YKXPd5hYVmvznEj2DlXOuaFfe3G
f18IIYSEhtdfrD7mGufqsTU5wVNHoGDBetT0aP/W7Kh+2zPfoSa7rBlO77HD
lzy+Qgv1XElfwyGkah6bhPzTiut68PqLkqYOnM1bqnmf/NMdYfWNo+citqbM
17zWuj1n/fI9w2373K+LOlnf63YcTNLoTw1UdanOmzic9armscuyj8NqQOyj
8heNezF3zhxkVnbrHuPNU/yjn7+4ja1zpPxDpSW8/FW/XLfxyhT1FWMYGRmL
/3eLEEIeZDz+Qjl+LUjbiqKiIhQVbPIb1yu6/D1GX3Wu/H5CcjoKistRWV6M
rJQF8usbT30oHe+8hfKCAuTlLPONkzmFKCjIQ16B/3jZXfmm4r6pKCgtR3np
HqQpvM+rey77tcXrL5TtKSqtdJ2X7+dT8utC/M0sz+NI/mdb8XFUV1eiIMvX
/lfzL8nHy/7Cb57JibbKPcjLK3B9zgBc/av0ciXXhxX3bsfWRN976/L2ori4
GAU5q32fb+E+3Ioy9tO7PnXA4yNmIeXMR36v73K//jzqxyYw2NmE4yWi3mK3
m7Kaq7p1E965kf+16KT73yOWVpTv3oG1a9dixYoV2JRzABc6++P/nSKEEKLy
F9sCfuM7rfXY7PkNLuZQfGtYb2G7ZwxcuueSKp/QeHClfI5fXcdEu3S/hHS0
aM0JDFyQ8yELs08ErJl1orl0o+w76m2+379Kf7Ha1R7/OZ1bOJg23zP+vxtS
/WV3+RpP+3ejM2Bupe+DnbLv8NaQyP4i8PPqchuFntyI0qe4+67g19L1XX0U
mDcaaD0i54HWVtyIKvbT6S+6Sl+VazCPKOs0R64gwVuDOXu2zhqQp7GvQe0T
vPmQl/Z9gKqdL+quH3liebEh+R1CCCFRoPAXSwNyAl4mek7KY7cvh+FAa+0p
VFbW4paWT3BdN9UzRvrtByHfL1Vz/UjbYY9PWLBb5/f5HexNlsbl/a2+3/xe
f6FXpzre46n7SFiPlhDqSrvPZEp9cuCaxvuuz15Xi9o631qR8PyFA2eyXpTz
EH5joSJvcqBpWPP83spM2ftEM45Ol79wdh2UaztfKGzxf9/xPp5T+oEvPYdN
O0rx3nvv4UBOsm/diUbdaK0nfzF7zmzZuyzfcRQNbW1ovliJdfO/5rvuz4t1
60IIIYTEAHm8X4Qajb0KJBw4nvGSe0x7s+qj0K5r9/iLQB+h8BfqfajsOOj5
TZ/tnVfRwumAw+Ff5+j1Fxv1zlOsWwllXWxH6Uo5R3GgtmPKnEc4/qLD4w+E
91LmYAKvo3vPiathfRY9psNfTPSf9fmHeeraz4n+07KH+P6ak2oP4Le3xSp0
yO/dRpZyz4uvv6a5t8bVA6/Kx2Tq7Z9BCCFk+pHXjwTfv9ObV3h1j/945LC2
43TpHuTl5CAjIw0pKSlITkryq5/Qy19o+YvDKercRCh4/YXueUHvq0FADYSo
P0nLyEFxZTVae6yq40P1F6MdR+RrHtBYS+u9jrs+JSsHWVlZAbheS0nQ7tsw
MdxfOC7J6ztmfeE17RrMsRso378bu/dX6dZZTPRV4HGvR5BzGGM4uuQv5bzF
3rZxnXaMofRlaV+Oh146xr08CSEkXoS4/4V3/F6q8BfN5RsV46//Go+kqPzF
ItRY9MaP4O3T3f8iXH8hcN7G2eJtLr+k/owJC7ei3uKrjQjJX9gvY73Hs6wq
0Zp38fcXUzOD/IWzBSvlfa9eQf1gNHubjODtueochLf+YtYTuUH3zhpq3CId
99hm1mEQQki88I67C3YEXY8Q6C/Ge4/J49zCrINo6rLA7nDA6XTK102NwF94
50fe1qk9mKp9hvoLBXabBa0NVSjOW+cb3xPWoz3k+s47cm4mYd0x3bkP33X2
4ZarL8U8kD7Bns8xNcb5ixvImuP1Fs/jnO48W+h414o8k+2rCbq6819C8hcO
r7/4WvDjCCGETCOK+s6KHr2cga+m0ru+s8O7vmLdCe2xMkJ/cdizzmOVZl2l
hHhWqsVi9dtra7r9hZJxyzm5z7z3m8pfNBd5nk+SsFn2JFqMth3yHJeLm9Mc
e2P8xW28neBb91F5M7jn8e6v+f011UGv6a21yLzg23vNcS3fc5/XFHUZanqO
LgvJhxBCCJlGZB+QiAWbTqjWmQoGGnfLtY41VsmDNHue57V0j/b45PUfqvHc
ruM7PPSdfUOufdT2Ab51sbsaBuXXjfUXDpwt2IS0tCxUaXouh5yLCMVf9Mv9
p95DRMVEJzZ7Pt9GnfWnTks9CnKykL3nfFTPOoneX4ygdMn/F3S/7kCG6t7w
5Tl05lAcjdvkGs0Cv2vekOdgntneon0P5xW5BuR72drroQghhMSAgP0vlm17
DzZFXkDso+mtpZi/6T3Zfww3+8bMsiblXgUONFe+FaRG4DYKPftKZWvtp+ls
l2sUEhf41zjcc9zCGe/enAHrTI31F746U7EGtN1vP3CxZ9Zb8mev8tSJ6PqL
/nPyfh7bQlx74/Nm0p6jSs9n77ko70cyf9M5TT8YKtE+36xq7Xd9z/rw1GGO
jY2p8Yuvb49v9xqQm/6epO/iXrm2U2vv8b6qNPmeyYUf+F17zFqPlU/5ciln
DJinIYQQEiHe/EVSOjLkdQlJyMjKQppiH06R12/xG5dvYrti7+uk5BSkpKT5
aiHFv93vB66hdOJs1jzfdZOSkbysEJ0KTzPcccRvL/GUtAxkpKX41Taurej0
+xze56Pr+gu99bI6KNd5uNuQsRV5eTmez6Sxf2fzftlf+Nbh+HyKt0+Sk5NV
JCUmo0y5f+e9OzjqWQ8s9VEqsnJc8UhWrMvRze+ETjT+Qq6h9PLwLP9/+/E8
6kcmFOfm+73/5Pwl2LRpLV6e8wXF64ma60+Frzmx8qt++2ckJc1H0vxn/a75
eqXe80kIIYTEBM++EFIdxW0cV9YvenMaOYdxU+v5YI5OHM5RP+tjtev4W047
jqfN097Pyt6JgxnLFOeox3yn9QoKMxaqrp2UshmnWtV7O3Z79pTQXZ/qaJfm
HULcX0tg76nXbIPwYiW1/nmF0d6T7jxFwup3FfkLB87maD9DJBB1ux1oLH9L
45ktSdhUcBw3DXi2fXT+YlsQPxFIop+/EIzcPIuVcx/SPP7Z5cW4EfT5IiOo
3Z3qtxeXb1+MV1DZxuemEkLIjMTlDcQzTd3PNtV8Vqg/TofNfbzdZoU9iueU
auGw29y1nOIZoza7cc8ODQenw+571qnus16nCwesFgss7vvboqq3CGR6nz8S
GoOWm2huaEZnZxsaXP/fMhjOc8lGcLOtGW2dnWhrbkDbTfW+JIQQQgiJLTPB
XxBCCCHk/oL+ghBCCCFGQ39BCCGEEKOhvyCEEEKI0dBfEEIIIcRo6C8IIYQQ
YjT0F4QQQggxGvoLQgghhBgN/QUhhBBCjIb+ghBCCCFGQ39BCCGEEKOhvyCE
EEKI0dBfEEIIIcRo6C8IIYQQYjT0F4QQQggxGvoLQgghhBgN/QUhhBBCjIb+
ghBCCCFGQ39BCCGEEKOhvyCEEEKI0dBfEEIIIcRo6C8IIYRMH05YLT2w2Owz
oC2R47Rb0dNjgd3JfgkV+gtCCCHThv0ykhMTkbBgH2zxbksUNO/9FRJdn2NX
0wD7JUQi9xcDqCs/hJKSkqnZX4JznUNTXnOo85z72JCuWV6LQY1rWJorkbV4
HubMmeNm7tyXsXH3CdwYiX9fd9VUYv/+/Si72DXFcXuxZO6TmO35DHOeXYJ9
NcHPCRlrPbLmfw2zZj2PC4MTce8TQsh9zuhlpItxdNk7sMfknk70NNTgdHWj
ofdrK17p9hdvG+UvYt4vsSdifzF01jVGzQqZz605P+U1a9f9RRjXfBzn/MbH
2ziw5B+DHP8IChr649PPIx3YmfSory0PbYZV89gRnFj3Xd3P8LXlxzASRTt6
avPwiHw9+gtCSAyI9Tg6fMmdF0hMXIR6u3F/4+gvwiea/EVtyT7sdv0e369J
CUoOvC6Pjc9sb5nymkNtZ7B7t971XJSUIOs57/iYiPoR7387Yyh9+bPyvZ5Y
tAsNnRYMDlpxreYQEh72eZIzltiOqX11BXg80Cs8kauZe6nN+o58zE/XHEan
dRAjgzdwdNML8uuPrqmOqB2Oq9ukazyWgeNHX3f3Bf0FIWTaifU46mhx3y8x
MRVXHPQX8WQ66y8cjdt8v5VHjIjzCHbO9fiV7Mvy6/11b8jjb/I+LR9zC1u9
vuTnxVHlAEJnDFVZP/F5iiczXH4rVfrfX1P7i4med+XcwjPbP1Bdr/Htn8l5
mHduOsNuz5ArFs8uKHbnTZxXt9BfEEJig3ccXegbR60919FQV4c6F02tPXBM
eR0HLNdb5XMamq7D6lAfZ7fZYO0+iSS3v0jCqev9sFmtsOrWUNrR1drgvqbU
li7d+k2fvxh2/9thu4mmBs+5Da2a7QmpX4L4C7u1U/7MdXUNuN4Tgrdx2HC9
qUFxjhXOKc6xKeLh7lt7+GOMFtPnL24ja7Z3vLxsyDX7a9fLfqVe4Vcat35b
ev2nu3S9w0T/aU8e4REciWB8juTz53o+/8+zT7rbJY3r2v6iceuP5fe0504G
sGuOdL3vZav9RzgMNdJfEEJihHccXX0MVms9tiYnuMdpPxasR03PqOb5HdVv
e+Y71GSXNfvGzuFLHl+hhXqupK/hEFI1j01C/ulm1Zjs9RclTR04m7dU8z75
pzvC7xctf+G8haM52vdYsLoQLTatv90ONJa+qXlOQvJ6VHUNq85x9FzE1pT5
mues23M26rzKdPmL/to0TS8QObd0/MoA3vbkNFIrPwpyvm98fmFfewy+VwM4
sHgB9ilqPqRxXctf3MBKzxzOi4e6da/Zc/RVT/1GBm5E0Tb6C0JIzPCMo35j
ZNpWFBUVoahgk9+4XtHl7zH6qnMVY2Q6CorLUVlejKyUBfLrG099KB3vGpPL
CwqQl7NMfm9ZTiEKCvKQV3Dc73dbd6VyHE5FQWk5ykv3IE3hfV7d4/+72Osv
lO0pKq10nZfv51Py6+6E1S8qf+Fox+ZEXzuWZRWi8nQlivPW+bW5xjLu377D
vvYtzNjuOqcalX5tW4SLVsXffHkeSXpvW/FxVFdXoiDL13+v5l+KKvbT4y9u
YZ3RuYsqPb/iyxO82RBsHfEIDsz31jBMXWvaV/sGvvTFV1CvNQY7W7By9heQ
+V5vWJ9B118MvY+nPPUhlUHqQyb6Kjw5mKd9ta1jg+hsa0ObDjetIzrtoL8g
hMSAAH+xLeA3vtNaj81J0ngq5lB8azVvYbtnnF2655Iqn9B4cKV8jt/4PNEu
3S8hHS1acx0DF+R8yMLsEwFrQ51oLt0oj+H1ijyB0l+sdrXHf07nFg6mSXmA
hGXvhjDfc0/XX3xQ8Gt5zK9o9Z8PcVouYr2nT/zu42yXX99WHfgb9RYKPf37
6h7fWN9dvsbTf7vRGTC30/fBTrkN0dSwTIe/6NP1ApHi8itf0vcrJ1Z+1f3e
9zcGmzfwXUN/DkLCca1IUY8Z4DGEt5DrRWchr1k7p6eFrr9wvI/nAn2DFg6v
D3la9gZDdauDr7NZ/r5OO+gvCCExQOEvlu7R/r050XNSHrt9OQwHWmtPobKy
Fre0fILruqkeH3FFOfch3y9Vc/2I/Dt/wW7c0mzzHexNlrzC/lbfnILXX+jV
S4z3eOo+EtajJZQxWctfKPpKLw8y3n1M7qsyb185Oz05j1RNT+WwtKC2uhYt
Ft941X0mU4rJgWsa93H1fV0tauvaQvNKOhjvL4J7gUiYyq9clWsfn9ZdH3Lt
wC+nXL8hM9Ih51/8PEaAt5j12Cq0huGf9PzFRP9ZyTd8YdUU8x43PO3y+Yt7
g60oLylBeXm5GtfrZ5r7dNpBf0EIiQHymLkINVa9vzkOHM94yT3evVkVbJ5b
gd3jLwJ9hMJfXFH5CzsOeuoNsr3zKlo4HXA4HH6vef3FRr3zFOtWQloXq+Ev
hpv3S94hIRc3dc+147AnVyJ7EMVcx8JNh3HdOvXv3o7SlXKO4kBtR1Q+Qg+j
/UVf1VKDcxc3pvYrzitIUOzrcKhBMaaO3UbVzhdV60OD5S+k8wI9xuN4XOkt
XF6gdSy8z6LnL+R8yRO7gvseuYbk6ai8Af0FISRmyOtHgu9T6c0rKHP4Aoe1
HadL9yAvJwcZGWlISUlBclKSXy2CXv5Cy18cTlHnJkLB6y90zwt63yD9ovQX
bfvkuY9gtZXevlqqnO+ozPSrD0lKTkdOwUFU661tcbRja6Ky1jYJaRk5KK6s
RmuP1ZDYG+svfHWKoex3EQp9J5Zp7HehZuhqkWLvKBezZ+PhLz2ueO1p7Ni9
Rvr3lOO4B+Ex5mjMOTwWvrdwt1F3fuSSZ35kij2v5OPoLwghJiHEfR6847dy
zGwu3+g3ZirHwqSo/MUiVX3kVEy5/4WB/mLhNvW89lR9JehvrcL2tGWafZZd
0qhep+q8jbPF21x+TWPNycKtqLeEPv+vhZH+oidELxA6YfoVaxO2Jn1f5Qee
XbwVTa6x1Lv+Ipz1nRN9e1TXe6NzMqLPE6z+IrCuQpNQ6zSmwHE1P2qPQggh
IeEddxfs0Kl3kAgcM8d7fXUGC7MOoqnLArvDAafTKV83NQJ/4Z0f8e5jESqx
9BeqmlW9vjqgM3Y77bB0taK68gDWK9bErC3r1L2m3WZBa0OV/zqVhPVonxH1
nS4vEMZenaEgr8cM16+MDMIq9lRxMSLnGcbk9SPB60CV12nFytka+YvAms8Q
mTp/MQt5QdbAyHtwGrZfGSGETDOKmsWKHr2cga+m0ltT0OFd37DuhHZtQIT+
wlu7sEqzrlFCPCvVYrH67bUVC38x2nYohHH9Ngo9niG0vUSd+KBolce3hPYs
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
Wap5nwWrC9Fi0/qt7EBj6Zua5yQkr0eVRp2Ko+citqbM1zxn3Z6zUedVIvcX
AziweAH2NfTLrw01RuIvbmDlw9L4/+Khbt3jeo6+6qntyMANxesjlg40NzTD
Mjimfe6E11+ocx+EEGIqHC3uMUn8/S/r0q4r+CDv19JYu+19+bW+6lzFWJOO
guJyVJYXIytlgfz6xlMf+l1Hz18cTNEetzvKM33jU5LrHkVFKCoqQHqStI4j
KTlZun/AeBpu2/objiCvIM/nDxLEvQqQl5eHiqb+qdtZqWhnYirySyvd91uf
nCC//mr++36exusvlD5kU8FBVFaWIifN18752eemzBXI6PkLRzs2J/rasiyr
EJWnK1Gct86v3TWWcf94HV7p8zoZ213nVKOyNF/hoxbholXhSxT/LYn3thUf
R3V1JQqylin64VJU/70auX4kIn8x9D6eco//j6PSoj9/MdFX4amzeBrnwpjn
6DmxzDM/koimEc6PEELMzXnPvMCrWnWNzk55bCq57v29egvbPa8t3XNJNf41
HpTGpYSF/uOcbv5Ca9weuCDnHxZsOhGw3vIOjue86vMQfuNpZG0TdJR66y+u
afTT1O1cmB3YTicai9fK7Sxp9f3eV/qLhIXbVfmDtvKNvjFcM7eggY6/+KDg
1/K1KloD5qYsF+V1twnL3vXN/SjW426rDvydfguFSeq1ut3lazyfZzc6A+aF
+j7YKbfhiiPycTPu/sLxPp4LxTc4vD4ktDqKsZFbqHp7oVwf8sz2GbpGiRBC
wmC07ZDnd3subga8N9y8W3pvgXL+xIHW2lOu39q1uKW115R3LWdCOq7YfX9b
w/EX8m/nBXrzNrdR6MkP+HuFyNqmbN9Szf0tpmrnbp25DCeOZ8yT2rnuhDx+
+/zFIlRp/g52+STPGB5yPayWv/C8Jq6TX3dH87zx7mOy15FzWLKvTEWLRj86
LC2ora71W0vTfSYziD9zxaWuFrV1bUHqV6Ym3v5iov+s5Bu+sMpv3kPNDayb
HdxfXN35M1+9qYJnCuktCCH3C76xbH+rck7dKdc8rirRGjN0sHv3ikhFfUT+
wjcXETjHoqTv7Bu6uYhw26ZsX+j+wtfON6t6de/p9W8JC/fJHsTrL/RrMXXy
JcHQ8BfDzft1vaPfvdLm+3sQxVzHwk2Hcd069Zpcb/5HeKYDtR1R+Qg94u0v
HNeKPGtad01xjreWU99fXDsg1Wg8/PDD/h7jS0/hzfci3/OLEEJmEt7f4coa
C98Yk4Qqq/pvpMPajtOle5CXk4OMjDSkpKQgOSnJb04/svyF7zV/v+PPaMc7
uv4i3LYp2xeOvwilnb5+9Hka2V8E8UbNRa9F7y9kH/NuUA/mjb/ys3f71ZWI
epd05BQcRHVDq846nHZsVdR5iP9u0jJyUFxZjdYeqyH/ncbbX9xzXPLMjzwf
fN5DPi7UdaZjsLSdQ9b8z8s+I/OczhoTQggxERN970nrNBLWo92TD+/3zJlr
jU3Ncn2Aer1EkmH+YhFqrOP67bZrr0+NpG3K9oXvL6ZopzxH4btnKP4i7P1C
gviLhUrfGORegZ+9v7UK29OWafZndkmjuvbUeRtni7e5vJzGmpOFW1Ef5d5k
8fcXIdZVhFqnoWIEpS9/Vs6R6O0BSggh5sE3fu5pEOOZE2cyXvLk/v1/R433
+ubrF2YdRFOXBXaHA06nZz3dqG8OIlJ/4VurESR/oTFGR9o2ZfsimR8J1k6t
mo9Y+4up5pCm3FvMaYelqxXVlQf81sWsLevUvabdZkFrQ5X/OhXhX01d3+nN
S8xCXoP+c+QcV7d58hDP40KY60Cc1/K5hoQQcl/hrWdYsMn1W3f8qm9MDBgP
OrzrBBT1in4Y4C+8rwWr+5DboRg7I22bsn2RzI8EG2cHvHmghb7njsXKX/hq
d4ON675a2dDu5cQHRatUnykY45Zzcj1HNPu3xt1f3BvBgfne/b/P6x5X590/
/OfFvhzEyBUsEXtnPJaBjiD3cHYd9OwPGm7ugxBCZijePH7CZlSWb5PqMbLP
qY5rPvhakHHYN8ZH7i/uodezFkGMiy1a46KjxbeuUjFGR9o297lFwc6NsJ2u
sXuvZ18uZW1LrPzFvQnf+mI9D9SvWDta5dkDY7TrPWSlpWHTnvOa+2+My7Uv
Xn/hwNmCTUhLy0JVj9ZckSP8elUN4u8vXD5c3qPiaZzRWPsjrzFx79OpqPuV
51ZEbYX2Wh6B/GyTxyJ57hohhMxMvHtheNGqW5TXrCYmoaypX/GeA82Vb+nW
UIa1/4Vyr6YFW3FFsX7Bab2CrYocvf96icjaJpDH2QU7NH7r67WzXeFz/Nt5
z3ETBz1zTO4aWcX+VTHzF/eUnioR2ZX+e5f21u2Xa1Jeyvb5n1HF/hz51R1+
93HaWrDd0/8vyft/+fpH7H/R7rcfuBNtct/790O4xMpfOLqOeLzA86i8GbB3
/kQHlsjPKHsF9cra58EmKUfhfv+VgGeMjOHokr/0vPc4tque4z6A2p0vyvWd
LxS2TNv3nBBCYo3fvpK6axpvyutZpXUFKUhJSfPV9Il/J0l7J/itTz2otR5C
f1/M/ob9fl4nJSMLWRm+WsPVOTlSfadrjLZF2TbBeM9Jv/slJyVjm7zuVL+d
A945CG87U1LcKPc1D9yjSukv9OYXwvYX3npX1TXv4Kjsc1wkpUptVHq0hdv9
9n4Xn9e7b4f3nJy8PORkKGs9RV2rrw9HO44ExGsr8vJyPP09s/fvDMwT1Cme
j/q6Rq7BIc9hSHt5Jy1ejMWLkxTPZn0Eh9o0nukzckV+voib2c9hxaZN2LRi
gd9zXR9aUBz2M10JIWRm49sLI+ieF45OHNZ4nsXqnMO45XSNTWnzVHMG3vWO
/jkRB87mSdcp0ciV2LtqsDk5IeA+i6Rnenj2mExYHbC+JYK2yW0Uzy1RrH3w
7U8ZvJ0ip1KYtlB1z4SFm1F1Xe0PRrulsThh9TH9/IVnzajW/TRxSvuAa69F
daK5Ml/zmSybis/reBw7Gsu1zxF92W5T5yHsPfUozFD3g9jfvaS2I/S9znUw
0l84vHWU8/ao1mkMXc2XfcJeLZ8gYn7zNF6erd4fS+Q0KjuDPC9w7BZKN72k
ubeWmHPZeKiRz2YnhDzwOB0293NV7TYr7LrPCo0eu9UKm90Om80W8hgVq7Yp
cditsFht7ntqP2823jhgtVjcfWm1+D8fVh+n9HmsEqH0pdNhl483sh+M9BfG
MIabbQ242NCGtuaLaGjuCd0bjAyis7kBDQ0SzZ0W+gpCCCEkDsw8f0EIIYQQ
s0N/QQghhBCjob8ghBBCiNHQXxBCCCHEaOgvCCGEEGI09BeEEEIIMRr6C0II
IYQYDf0FIYQQQoyG/oIQQgghRkN/QQghhBCjob8ghBBCiNHQXxBCCCHEaOgv
CCGEEGI09BeEEEIIMRr6C0IIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIST2UBRFURRlfsXbT9BfUBRFUdT9p3j7CfoLiqIoirr/FG8/QX9BURRF
Ufef4u0n6C8oiqIo6v5TvP0E/QVFUdFocnwUw8PDGJ+Md0soilIq3n6C/oKi
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
SM6rwd17k1O1iIqD+HfQHGKczCXGSy1z+4sxdLc148KpYnfuQRxX1jGiOmry
9gX5OrlFZThVVij/u7jRJl2pu0LlLzrKNrj8RcX94y+CScyliFzF2TXSepTM
P5k6z+Fex/J1YPVvI3neM/i9p7b58el5J/C3a27j8U39eCrXhn/d/iFeyrmI
ZS7vkVE5hLfOOrC37mMcbR7Huc5xNN26h5sDExj8+BNMTP4m3j1y34p/B80h
xslcYrzUMrW/GGvzy0fo+Yu2si2St6jolF8b8uQ7Vm6R5j/08xcPiL/Q0vAt
oLVU2lt0/w+BLZ+Vchni/wsfMuypTelvxWf+5U2Vv/j9H+zCpxf1RcxfvnYD
f5N6DbNXXcacVWfx/Kp38eLynVi6PBNrcw4i91g3ilz+pLzpY5ztGMcV4U9s
ExgY/QT36E90xb+D5hDjZC4xXmqZ2l+I/EVzIxpdlO1Yo+MvPHWbLu/Q7PfW
EIrXiNdzJU8x1OjOgVSo6i8qH1x/oSWdWtI/n5uvzl/8IBdJr2XhZ0t24gdL
3sE/LT6BLy++iL9a1IY/XvRhVN4jFP5nykf436/fxuMb+/H9nDt4ftcAflFo
wWtZh7H2YDu2Vjuw5+LHKPP4k8sf3sMNlz+x3ef+hH8HzSHGyVxivNQyt7/w
qfdUrra/GOvAFtfrKzLLXI5CqUk0Fq1R+I4RlAm/saUCt8buYqj3gttv5FbF
cf2IibR4e63KXyx+5WVpDmX1b0vPgTu3TlrzcjEbWP/fMbz8U+hN/TNcTf0C
alK+ioqUb2P/sh8jb9UryFyZitTUdXhl2Zv492W78cPUo/jG8vP4SupVfG5x
B/5kUe/0+5NlH+Gv02/j6y5/8oTLnzzn8if/uXcQS0rtWFM5gpwqyZ8cufIx
qq+Po/HDu+i+M4E7jkncnZi5/oR/B80hxslcYrzUul/8RXeFjr+424GtKyXf
EJiHCDxn0tYsHethTWEN1LMtlJbG703i8fmb8Bdz890Iv+Gu7xRrbLX2Khev
Va2W9u5wP//ty9Kci/cZ91PpTjtGjizEh+mfR0vqQzif8veoTPlnHFj2L9i+
7OfYuPQVLE9JxytvnsULO2/jR6+fwzcXV+Iri9/H5xe1xMSf/I9lfXgk7TYe
y5TyJ3N3DuA/XP5kcYkdr1cMI9vlT96+8DHevTKGqmvjaOi9iy6XP+k32p+M
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
edK9vB89Xj3T0PN/7VHtnkPSj61PTvyeXbd44t/6u1/fW/tN62sp+vfRnTN7
j9onsv3Z2l7Z66tnJ2GdpWvtR89R6ntGdB5H+0d7PaPRepCezWiGa/fzHZ0N
qs9Q0fv5eVs1X637a7W/RTPndZ5H+256rM/w/1WEfgFZ4MkDPHmQ4mn0TLW2
MFPGzlb7WOu/Y7WOUZ89qpnrmumuPRV/zOGuSH3P7rM3fx4r5Zs1E2eBtS6i
9ZHOz3LxTLUO06uDaH/HlHtMFlTnV6abzaZ5Z9rD0usOnk7Ug7T+pH0tv35d
li9bOvv/Btco9AvIAk8e4MmDxj3p3GvnvhidCxn7q5n30T3Dvo5m1+v8rs7U
aE+K5tXrOYTOAOt8bP1ZyCC9Irz2+L4P7UNdfWspfe4GPLDszrn9nPOJ9qro
2YvmwPxnr7mZfgFp4MkDPHkwFJ40G/29h+d21+18c6XPXSKaJ6IOonWPDNSx
jn9eypevVfPgda9NvWfsfGH676F9tLovZ8sT1Yx83XmjOwO1lqO9uHous+P5
anZdBrtfnryWtOulah/vfKL333o9+gVkgScP8OTBUHjSusWg807/r2jO6+rb
Jn6H687fXvx9vvrd3n0fzVTR+ZZDW2b/vvTcp37PYPcakva+HHi3mtPW7849
ofUyPc+armdqjot60/jruPSLpvfBEkIIIb1ybP+uq2dcrrRyaseq6nOHD5ej
B74opz9e0fr85L0cl169qYy9eXsZfeuecm7Tg+XChnvL2OrF5dLKm9tncdrf
a/l15cTejTN+PzqfM7r27tq5oUXl1Ccry8U1d03ZZ/5ZcWPrfTzUfq/tMzk/
/VB+272+9bEl5XLrfehrLr9yQzm3eUk5+dmacuTHg5Ne88ih78v5tx+oveYt
Nv0Chh88eYAnD/DkxfplT0/cLaM9qWvv6P2sQudW9MygH798OnGGRbNFtK+k
w+mDpexZOvX8U81R1Tmfzutp70x9PUQzXjff13/OWucZR7/P6/7hDa2+8sEj
1Zme+uxW7ce98Dv9AtLAkwd48gBPXrR9jeztffdd+7zJwup+vX77RepobaQz
A6y9nvHc+B7T2vfUntY6WoPpzCBTPnx06v2x2ruq+Ww6b6tZ9VpL0Tnc0CM0
b+yx6u5Cfc10veOd+6uzRYXzI5AHnjzAkwd48uKqL93tpr/r3x//u37fulKO
bJ/dXTWajTrdc4ZOx9A+Gc127Xx861ODd5kO2g974tvqrInOzOjene73rT05
mtu67ZlqP2r9OY1+5lqfoV9AFnjyAE8e4MmLefP13cbxc7ELqpnsX71R3cGy
alGtY7w4eS+n7oiZy526M0U9RjPHul6TfgFZ4MkDPHmAJy/m1dfInlLOnpz8
sTMjcQaaog4yJOeJ6ReQBZ48wJMHePKiEV/dHUNzNDSzdUigX0AWePIATx7g
yYvGfHU6xusLq7mlQ4RLv2j6fDMhhBAyjBnZv6sc37et8ffRHZd+AcMPnjzA
kwd48gJfEfoFZIEnD/DkAZ68wFeEfgFZ4MkDPHmAJy/wFaFfQBZ48gBPHuDJ
C3xF6BeQBZ48wJMHePICXxH6BWSBJw/w5AGevMBXhH4BWeDJAzx5gCcv8BVx
6RdNn+MlhBBCyOBx6Rcw/ODJAzx5gCcv8BWhX0AWePIATx7gyQt8RegXkAWe
PMCTB3jyAl8R+gVkgScP8OQBnrzAV4R+AVngyQM8eYAnL/AVoV9AFnjyAE8e
4MkLfEXoF5AFnjzAkwd48gJfEfoFZIEnD/DkAZ68wFeEfgFZ4MkDPHmAJy/w
FXHpF03PISOEEELI4HHpFzD84MkDPHmAJy/wFaFfQBZ48gBPHuDJC3xF6BeQ
BZ48wJMHePICXxH6BWSBJw/w5AGevMBXhH4BWeDJAzx5gCcv8BWhX0AWePIA
Tx7gyQt8RegXkAWePMCTB3jyAl8R+gVkgScP8OQBnrzAV4R+AVngyQM8eYAn
L/AVoV9AFnjyAE8e4MkLfEXoF5AFnjzAkwd48gJfEZd+0fQcdUIIIYQMHpd+
AcMPnjzAkwd48gJfEfoFZIEnD/DkAZ68wFeEfgFZ4MkDPHmAJy/wFaFfQBZ4
8gBPHuDJC3xF6BeQBZ48wJMHePICXxH6BWSBJw/w5AGevMBXhH4BWeDJAzx5
gCcv8BWhX0AWePIATx7gyQt8RegXkAWePMCTB3jyAl8R+gVkgScP8OQBnrzA
V4R+AVngyQM8eYAnL/AVoV9AFnjyAE8e4MkLfEXoF5AFnjzAkwd48gJfEfoF
ZIEnD/DkAZ68wFeEfgFZ4MkDPHmAJy/wFXHpF03fY08IIYSQwePSL2D4wZMH
ePIAT17gK0K/gCzw5AGePMCTF/iK0C8gCzx5gCcP8OQFviL0C8gCTx7gyQM8
eYGvCP0CssCTB3jyAE9e4Cvi0i8IIYQQ4pem+wT9ghBCCLn20nSfmKpfAAAA
gC9N9wn6BQAAwLVH032CEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhJDZ5F+0s4h5
     "], {{0, 754}, {536, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{209.0390625, Automatic},
   ImageSizeRaw->{536, 754},
   PlotRange->{{0, 536}, {0, 754}}]], "Input",ExpressionUUID->
  "c0191a7a-50fc-406c-9d45-737897b44797"],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvQlcVGeW/830TKeX9+2ZTJLuWTLdnV4mmvXfme50NInZF7P3JMakY5JO
jEVilIorGBVcKDfABVxAgaiooBFQcAcUEIyCFgIqCAhKoQVlxFBa/qect/yc
t27VXaturdxbVcTf99OnDXep56lbVff+nvOcc57fjP7izegfREVFTf6x/f/e
/Dju6UmTPv7yrVvtf7ytnTz2U61mzEvaKZpPNZOGjP57+8YxzLH2//gH+z8E
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBas1KEv
oazkmaTVaik6OprmFp2zb2+ntNhYytxdR5ZwdxEAAAAAAADQb2y9pygjVuPQ
/GKbkX+G6MZJSmD/1kzNpk5ruHsLAAAAAAAACJob7ZQW7a79nfr/HNG1o6QV
bdMk7iUMAQAAAAAAABiYtBXM4bX9zKwy6rHZ+G0zck87jrGa6ilNK4wRSow3
wtxrAAAAAAAAQOBcpcL4MQ5NPyZpP+/Xd9X/DiwnaR6r/1dWfRuW3gIAAAAA
AAD6gbWdUtjYn62t1/jNsvqf+mgDe+wUyXYAAAAAAADAgMB2gTLYuJ5NTb70
/1XaHDtGZjsAAAAAAABgYCDE/8Qk7Scbu1VO/9/oPsDnAa+rvxqe7gIAAAAA
AAD6RV3OZCH/N7OSzPZtZ3fMEer/2LncWs7H/kdHa6kc+b8AAAAAAAAMTK6f
FGl7p74X/juOknUxkpqg4zOPhrvHAAAAAAAAgH5gMRzg1/jyZpqkbdQT7s4C
AAAAAAAA+o/tEtUWr6d4rftaYDHxabRL3xXuHgIAAAAAAABUwGqxkIUzq833
CQAAAAAAAAAAAAAAAAAACB82C5lMpn5aL2FGAAAAAAAAgMjnWvNGnzm+/tj2
jmu+GwMAAAAAAACEFaX0P9b/AgAAAAAAIPKxmTupprqaqvtjFdXU0ov1vwAA
AAAAAAAAAAAAAACAiMFqJqPBQAa79Vps7CaT42//zUTWML8NAAAAAAAAgG/E
8f/jc087tjVvnhRw/P/WVuT/AgAAAAAAEOlI9P/6E45tweh/5P8CAAAAAAAw
ALBcoAa93mEdvdedm4wtpNc3UEODf8Yc22lG/i8AAAAAAAAAAAAAAAAAMCCw
9VFT9S7KSk2kWK2WtIxF2y12HmXllfHzBQAAAAAAAICBzbWOA5TgR9z/sqJG
soW7swAAAAAAAIDguXKUYl10vjY2npJTUylZF09al30z8k+Hu8cAAAAAAACA
oLDRofRxvLafmlpIHb0Wl2OuUlt1vmiMoKVyI/J/AQAAAAAAGHhcpcL4MQ5d
H5O03+u6Xte79vFzAWv034WshwAAAAAAAACFuN5C8/xe06uPNkRrHMdOYdcO
AAAAAAAAAAwk+qgwdoyfPv2rtFnr1P9Ly8+HpHcAAAAAAAAMTKzUoS+hrOSZ
jrqajIaeW3TOvr2d0mJjKXN3HblG3YcGGx1KZeP/NSlUb/Z85MWadXyeQIkB
tUABAAAAAACQw9Z7ijJiNW61NGfknyG6cZKvu6mZmk2d3gLwFelMHxmNRsFM
vWRs3i7ql5bWl9aR0Wwhi8VCVquFTIZTVJaTxB+jmbnXa54AAAAAAAAANy03
2ikt2l37O/X/OaJrRyX1NTWJ6mrra80bfdb498fg/wcAAAAAAMCdtoI5vGae
mVVGPTYbv21GrrOOvtVUT2laYYxQomJtTaX0/7r6q6r1EQAAAAAAgIGJUFtz
jKi2pqv+d2A5ydfhWVn1rWo9slkukF6v75/V6KnTjPr/AAAAAAAASLC2Uwob
+yOurSmr/8W1NXOxvi4AAAAAAAADDtsFymDjejY1+dL/V2kzW4dzBvQ/AAAA
AAAAAxDp2ro2dquc/r/RfYDPAw5fbH0f1ZXmki42Rhrvr9WSLjmbyhu6+PcA
AAAAAAAAcKcuZ7KQ/5tZSUx5/bM75gj1f+xcbi3nY/+Z+pvlKub/euK68bCo
D54tZtneMK1TAAAAAAAAwADg+kkXXa0V/XccJeukvvbxmUfD0McWPk+Bs1hd
MmVlZVFWehLFal3rliI+CQAAAAAAAE9YDAf4Nb68mSZpG/WEoX/NhdMF/35S
IbWbXVcgsJGhYSfFcn3VzKNTmAQAAAAAAADAM7ZLVFu8nuK17muBxcSn0S59
V5g6JuQoaGZuc8QneeJG1z4+R0GczwwAAAAAAADwjNViIQtn1jBn1No6KSPa
vUaRPEKNorlFZ0LSPQAAAAAAAICC2PV/mswaBfL00QYt1igAAAAAAADAJzYr
9ZpMZDQYyODVTOQafa8uohqlyw56r+955Sifx7BO/12oOggAAAAAAMCA4mzF
Oj5u3h/z7YdXEhvVZgk1SpMKamVzAKymen4tM8Z2Gq6HsI8AAAAAAAAMDK40
bvRb93MW8vW/rhwVavuwdUnTcwqpuKCAiosLKD15qqR/Y3zNEwAAAAAAAHBT
cpV2sLE1jvgaXTbtrq6hhoYGj6bXN1CnOfTrf11u3u7XHIVm5gbqhPgHAAAA
AABAhkt8vRxN4t4Qx/UHgbmTdqQnymt/7TzKr26L/PcAAAAAAABAuBCtqxvy
mJ7+YLM4cpV7zRYy9zr/BQAAAAAAAPhCqK2ztOR8uDsDAAAAAAAAUJm6HLa2
jiaFTkWwG/1yazmlxk/1Gf/vNC2VG1H/BwAAAAAAADeut9A8UV2d9aW11GE0
kclojJD6/wOkRhEAAAAAAAADgLbihQFr69DW/7dKahRFaxMoPSuH8nJyKMeT
2fcfQf1/AAAAAAAA3GjePCnCfesX+HW9NIk7Zdf+AgAAAAAAAPiHxdhCer3e
f6vRh7b+v62TMtgaRZuaQjnvAAAAAAAAAAg9whplM/JPh7szANz02HrbqTQv
k+JjtaTVOmsHtNiIunYvoam6bDpmwDgdAAAAGBCwNfWNRiOZTM78X8e/7DZD
Rwc16EsoPTmd6kO8/m93xQq+rk9+w8WQtg0A4LBR8+6VMjGBCQ7935Y3nd+W
Wd0V7s4CAAAAwCM2aiyWe6ZHSvy/k9rU0Xz72vgUyvKY/5tFWVmF1B7BtUwB
GIh0lS7xcE9w6v+67M8l27d3YB4AAAAAiESuNK6N8Po/dsynKI3NAfZ7jNJ0
JbR9BOD7jOWkqE5wAu1qukg2+7YE9m/n2iFWaixeyv8GxyQdJFu4+w0AAAAA
F65KamtOTS2k6op8imX/npJTRtWl+ZQSK2jvReXfhriPNqpM/iTgMcom6H8A
FONa29d8DN6uDra27nVX/e+kuWCO89iYr6gnPN0FAAAAgEcE/R+z7Bt+W2Gs
c9vKKk7rW+lQOrtOcMzGED/T7f3hxiiaeVTeepGsvpyKcDoCoChn9zjXCdHM
3Ea81L/OzQlI9f+VxtX8PEE94vAAAACAyMLaTikytTXrcpx5fFMyj4sOFurw
bwpl/I9ofeJ1x7CmLwDhoPuQMwdfM9W3/r/WvDFi9X+vwUAR1iUAAAAgxPRQ
NqvpxTH9bTvmuD/rmTic1HHOeYHyUM4ACP7/pSWIJgAgHIjjf0q4tbVF8f+C
zhfuE5qpW1Rfr6+teCnl+lWP4BJV5szFOiIAAACAKP5nUcl5fiv/rNekUDsf
S2OjQ+nO5/qU3FDW4bdRLdtudEwGtVtD2DQAwMnlo3xeEKP3yzuuEN047fT/
a+Y56v+QTdDYjvzfZern/7YVfuloa5eXOckrreWi3GXkBgEAALjZsVIZn1sb
R0Vsbf0bXfuEOt5VrM/d0kJpbKzQ3KIzoe0m72d0ao3c0kPU1NrhWJfAaDCQ
wc1MhGECAMrCzQvydXhF/x2j00n+ZuYJqnrV71Mzv+aAlkrc6o32ScYjnPH5
ywAAAMBNyvWz2yTPxhn554iJC+K0PmPxycki31/o63+2FS+M/BqlwDPX7WNH
rZaW5ZVRRy+018DlKlVmzfDj9xe6dfou1q6WtFvOxiZd6Tgg8fk7c5ez6RS+
fwAAAAAx8TV1eYKPbAYb29Nd6WGtnzDU9GvePClg/R+ONcqAPELsuP37Feq5
I6A4vR1HKCt5pqzuX5ZTRp0hTrDt4tcHd/YhNTXRrV/rK9pQFgwAAABwgXmm
56SmiubQbdRcukY6x5+4ISzr6lqMLaTX6/23Gj11mm+EvqNAFq52pCOH+8h3
4e4OUAqblSwWC2/h1NddFWtk/QAxyZupXe0kZAAAAOB7h419viOiHgSHUA8y
mpLg/x/4WC1kltwP+qihoohycnIoJ6+Aqpq6w9Kt7tp1vL+f+feT9aGsUwAA
AABEKDYLmUymflpvGP18fVRXmku62Bipn0+rJV1yNpU3dGGOPyLpoz2iNZxn
pm6man0TGQxG2e8Yk9dtMmO8GXHYeqgsyxkrOJ6vAXZJWJ9PZONXHVQ+B99q
9pDvb3B+l3pNdCh7tChWMYWqWg2O7xNqAwAAALhZEfth+2Pb3epsqM9142G3
fD7Z+f5le7G+T6RxvYVfZ85f08RswecYUdjoUKowhtPM3OnQ0ZfrVnv8DNfU
fOvzVQNBqfsXagMAAAC4mVDq+Rny3FoZ/RirS6asrCzKSk+iWK20fzPyMe8f
UVw7Lqkf5a/+R9h25HCje5/o84mj3Io2YsYEZaJ5nfU1XWQxHuN/q9L1A/vP
gL1/AQAAAMSsQV9PxTmrSBcbS1pWu2q1saRLzaaSmjbV/J42cyfVVFdTdX+s
oppaekObW9tcOJ1/dsckFVK7W2yIjQwNOwWNqZlHp+A8jhxsfdRUU0M1fudv
15C+NTT1I4F/CDWcEugYV9ffPi7n5uTEa/1eqVvLxt8oXCvMcoEa7N+PhoaG
oE2vb0BtAAAAACHGz/rZdv16xIRnlJOrfHyxZuY2rz5hZt0yrl7RpibM8YOB
g7XXSK2tHdTR4a8ZyGgykdkamoyX7kMr+N8gN7SW1HUVzbldqVvOjxXqQzkO
t1rI4nI9LMZ2au1AzD8AAIDwUZcz2UXrx5EuOZVSU1NJFx/jNgY4hQAIIlsn
ZbDxBL41/VXaHOscK4R8jWIA+kEwa1zwc2LxGXTMqO66Vl2lS9z0v7D2rjSm
/lrz1tDqf1sP7WHzkqfkSmP/mrl7rv1+WtJ6OQSdAQAAAERcPiyqpZ9Auxq6
3HxS1t522pE6hX+mjl91NHT9s12ihuoiSk/WUazWWT+PqasTG6+jzIIyajWG
yZ9u1//cWsS+8/b6aINWI6sD+ovV3Eu9vf0zswXViWz273hpXibFx2qdsW+a
FGqxX5au3Utoqi6bjhluznmbtsIv+xnXHqfqnKHg67e344j/EX6Xjs+Qv5n1
0Q7dGLeYINWwXaBsrZAbNCZpv+i+epV2uNQmWn9E2ZxkAAAAwBuCTyyOqrw+
p21UmT4ldM9Ppm8dB/zKz0zMrQ1DfU0h/idm2UHv7V85Sglcjp9eyXWm7H2I
da9xGKgpnQ85sLBR8+6VMtclwaH/20S+5MzqLtV6EbFxNhcPSK5LUs4eauow
OseOJgPpK/L577ZD52btJ311CWXrhHlDTeJe9eJcrh0XtR9nH7+JNPeybxyH
dOlLKE20fXzmcbV6w3N2z2zJGCi3tFlyj7CYWmhPTpJkXrUFwUAAAABCRFvB
HL814LXG1bw2Un3+/PJRN+3P+PyZmKTUZJ1k/V9HXE3Ia+vYqDZLiJtKKqiV
HRNZTfWUIfID7jQoGQ9xlTZrA6tfKa//b96aNlz8iCf9X5f9uWS7WjVmIzXO
hrs/MBq23ON39xIV8r71jfa/GOy/j5zp/LVU837RzPdRbFoqNzL+DCvtkfja
RXnCqiH49zUzt9AFL0O0y3Wb+L7lov4PAACAEMHVrvNHA15rZOtnaNKoXWW3
o1hbz8zaQ51utXWs1KHfLhojaKlK9ee6C1dcxyhxlJ5TSMUFBVRcXEDpyVMl
mmSMr3mCgLGRQV9FFaI6SDX6Gj7WiOtTZnElNbHrDXU06alY7HeMZuKXrija
qwGD5aRo7YYE2tV0kWz2bQns385aTVZqLF4qfIZJSn+GTiIzzkaYX1pa7qNi
zuXD7G8hjo5xNxKRb35Tk5rfMRu1VeSTLj7WUa8sXpdBVR1Ce9y1ZcZJ9SGp
XyDE/qw75kvT9/Fj+BkKxwYCAAAAnrjetUPwYRd5e/5coA2sFlB1Pt+BEFsz
JdN7rsGNbiFGKBz1sy83b3ebi5D1sc/cQJ2hCFK6fpKvc86sOeZpTHfDdJTX
vtLY5JsHIXZcS7s6WN/2dVf974T3MStdO5IjEuNsrgvjo62t/+v92Bun+WP5
3+G1o6K6Vyrp/+stlKbV0rK8MurolZ+fsFktZLaE8Bsuqg0QztwgAAAAwBu1
orXpYxI30JHWbrJYrWRlzNJLTTVFkjVul1a0kUmydr2BepXMIZXoDj+en9Fh
9p+ZO2lHeqK89tfOo/zqtpDpa17T+jFHc1mteugDhLN7FrJjM1HsG//dk+r/
KyrHvkVmnE0fX7dqRu4Jr0deb9suzEPwdfiF37Fa+l9S6zNiamsJ8T8+c4PM
x/lrtEbR3CAAAADAC6K1cvpj4xXV3n28/9+f+XPOf7ao5JyCfQgCm4V6TSbq
NVvI3Ov8N9S07WDzOWbu9DnmCFs99AiBrx0/1bf+F9Z4VeNaRWqcjY0qU4V1
dDPt4345LWs2HBTuIfZxZyd7bnPxQn5McEylBBNuDOe4dkciRz83imoqJ66v
JJPMj9FsOEJpoli9EkVzgwAAAAAv2LWDPzV2fOr/9d79g4FhpbJkVndoUryu
N3CxZh3fh+0doX1+dlWso/j4FCr3VRvSdoE2sOsoqBsHzfipWZ2qmedTp/L6
zH6N21WeoIjEayWO/+G1lyj+X7h+jA4ex44VVMiVjuA4m+tnd7rNZ+UUFFNx
cTHt3l1AqTppjsuMImYM3sPHCnLjK7Xyy4VxGRO/GCn+f/s35vJRSbwWY/HJ
qZSVk0M5Wemki5Xm7Y9f9U0YapgBAAC4eemjVr2e9P20DpPC2vvyYdHzUUvr
d9eSsdfijEmyW6/xFO1g19ZxatjV1GoykVEUk2Qw9qr6TD3L5hX61GzXhTGW
2pr2Rvc+ke7KplOyn4tVUvNSrZxWMZF4raQ1phKonMkZ5fQ1U4+RuSi2S1SZ
I3zPlM/hZojsOJvu6tUSrerJYpIKnXFkkpqc9rGVSjWTnPTRnmRhjmJm6maq
1jfZf/9GMtnvB67G5MCb3GoJqMO1tp1+5QbFJO28KePvAAAAAFe4OJb+WZyC
sRp9VJm3nnIY/53d8vJyKIX14U1Nznb8ze0TG7M9WbSGsuqalql3KNJDjv7p
MqiguMDelwIqyFnlNt+jfNzBQLlW7t8zsV6L0bnWmVWrxlTkx9lYDPWUl54o
q2dj4tOopKFbONjaTtnxU0ln1+L1SvsFXLnewue7+2uamC0hW+/CZr5A1cXr
7d/rqW79YH6X5U3dvl8EAAAA6Cdmk9HFN24lk9hn7ocxfni16U89dHX0v1Wi
0YK1XaGIUbJ1Unasf5ooV39RhQ4MoGtFV6kya4Yf/dFSfoMa18pJpMfZCFjJ
3NvL+9PDvnZ0EPGLjP4Py3oXNpv9fzbH/KUNwT4AAABChni9KFYbXw/u+an2
CMBibOl3TJK+4ayydXck9eIDNG0sZZa0KdkbH1ylhop8iT9drGWTsnZ4iA1S
iAF1rYh6O45QVvJM2Wu1LKeMOkPgMI7sOJsIxdZHTTU1VOPvPcF+rL5VvXEc
AAAAEHkop//V9p+17V7qjCuoUVjD9xunD4+Bq/Gxjq3bZ2P9e+4Wwu7J1EO3
Wa1kNpudZrGEMM8wwq+VHDYrWezXiLNQdydi42yoj+pKc0kX6zKetH/XdMnZ
VN7QhfxVETaL2bl2g99mxvUDAACgEjYyttaTvkFP+qYOVldfpVb73w0NDX6a
npo6LqvcT2H9L0ceZmQNAHguN5VTXl5xCLSX/0RmPfTIvFZibL3tVJqXSfGx
WtJqox01kZj8367dS2iqLpuO+apbpDiRE2dz3XjYr7kcZr25cJaRNRuO0eZU
97GTNnYeZRZUUqc5FGv/OgkmfjHU9csAAACAiEKc06dZza5zFHlEoo8vUuuh
87BrJDjqsDDa1miU1GYxdHRQg76E0pPTqT4kes0mqYUkWIJD/7flTee3ZVZ3
haA/EeZnl8mvjdUlU1ZWFmWlJ1GsVnrdZuSHYw0+K9XmzfVDY2tpl8/1BJUh
GP0fjvXLAQAAAGatX6Z+ZofX/N8OMprU9vIJ6yE56v9H6NpUkejji9R66IzO
biyW09nh1UNdpUs8tO/U/3XZn7t8furpx0j0szcXCuMfJu+g3a12po0MDTuF
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
hlVk41cdDMFzSqoHp6YWUnVFPl8fZUpOGVWX5lOKqK7monKl9aJvInGMcuPi
QVEsfRzl15x183VaTC1UmDqF71PMsm9U9yWf3TNbdB3iKLe0WdIm06c9OUmS
cYmycdM2MuirqEKcm6Gv4dfS4vqVWVzJ6jSmdqueisV9cnx+/a/fqpT+D8VY
klsfMLBxSejG4df59b+c41zm82toaqKmJia3vUnGGqjJoH78YqRfNwAAADc7
NjqUKtT/ZNYBZmTX5brVHp9Ta2rU1tqC/me0KbeNm1NfWcW1b6VD6ayvO2Zj
SOvFROoYRbwe6i6v/mErlXFjgBi110MVrpVm5ha64GWwcbluE3+9ctXWt9dP
8nHaMcv2evQJ3zAd5ddvU2LtKJu53f5dqRDliddQTcU6yW9savIGqtA3kcFg
JKOhg/QVRZLvEuPD7glBKkKk1+G90riR/76XhHDdYV9E+nUDAABwc3Oje5/o
GRRHuRVtxIwJxGsCrK/pIovxGK+VFImB9oa1nW9rU5PgE6vLme7U1pnHRQdf
4NdE2hTS+J/IHKOcZdez4sZx3rjWuJr/3OtV/UCF2J91x3xpnD4+TmeGyuv/
CusPp/lc+/pyHTvXo1Jd0rZizl9sH7d5nGMQ11BVXu+2FX7pHHss28//vr87
U0tlZWV05Kh/tQFqamqoPYR5+Jyfnfm+R1KYvdlwynEt/K2pEOrrBgAA4OZG
8Bcn0DFubdPrLby/UxzvfEVlDSTQw+tFcbwMt1ardPxho8rUcU7NXR7CGYAI
HaPwsSV++PSvNbOfp2a1uvXkbZ2UEe3+ecrTx8fkuOYIK01bAGOlK3XL+d+J
8mMloV7k0pLzPo69xF8fYYypDNwaxOLfF+fHjlTftDCGS/E5hgslXRXrKD4+
hcoNPr7vtgu0gc1dVnZtcAAAAMAz3YdWsBpIeOZfE8XUzsgXNJi6GkiM4Ftf
JNJD8s96Gx1KHxcSvSglQscoFw/w8f9z871djx7azF5jJqZFXekknivxsW6t
+Tg/9lyj/07VXvGxI5p5Pr/PzZx/XvE1nEky3t7qM6e3j7LZsdQUdq1sZbBS
GbeGrmieiptP2tr6vwq2pSBXjlICe+2SikL5+/fOWXYuxed1E63XDf0PAAAg
VHSVLnHT/81503n9L9a215q3hkj/W0XxR3FU1HDRsfVGlxCrlFnFKhRLC6Wx
emhu0Rk1O+VCZIxRzI7aIYKZeo2SvISY5A2kb+1m17OyksVsotaaEkoR5b2G
oo6MuCZR4vpKMsloaLPhCKWJ+qV2PLc49k0zNZtOmeTas1LzbqHG05gkH+OX
oBBq2PiMebIIOQuLdp1TtBdc/A/3u0tOTaV49vPQxqdQqv1v75ZMukT7dVSx
uA7zfRfX8zf1miSxijPTC6mmoZUMjt+D/BoAxl6lb159VJm33lknzW55eTl8
rsbU5GzH39w+sTHbk0V1S6H/AQAAhArB1x9HRxzxP528nmY0rFCDpY926Ma4
xQSpxfWz2yS5cTPyGa3TI/TNbvHJybzvzL/YEiWJhDGKQjUtE9WPnbZdFvy0
wueXSlmMFspKJ12s9H2MX6V+TSLmM9wj0o4OvabLoILiArs2K6CCnFWS75d6
YxJmfkjoR2Zps2w8ktVUTxmi61RiVDZe/JqkZmXwpl6skHLrlyv7fbdKPr9g
zXu+PgAAAKAg146LdFkcxYv0xRg2r7VLX0Jpou3jJbHtaiHOdRT8ot2VS+Sf
n6rnJLgT/jGKcnpI7fEcw7W2naLapJ4tJmln6D5LWydlx/p3DXP1F1XrxvWz
O13ai6P0nEIqLsijgoICytBNlexXog6RHJeb9lGqLp5iY2Mdxn9eWi2/zZtp
o7VUpNo4PIK/75aTfAxXwKaNpcySNqV7BAAAAHiluWCOzHNJS+UO/6KV9kjW
ARDlCYeA3o4jlJOaSiV8bWwbNZeukejImMQN1B6W4h/hHqPYyNjU4HeNEU/W
0KGernXrsfkCVRevp+T4qW7Xh/G9l4dwjTmBq9RQkS+JxRD/DpKydniIDVKW
7mrPNXcl+nXmlpCNj7iYIHGOe/hQ6vuuVv1/G9lszlkrLt5tHZvDwmyXN5W6
AgAAAPjERm12/aOLjyWtNpbi7TqsqkOIReU0QEx8BtWbIqVGnY2PaQ83kT1G
iWBYDWS1WiNGB9nsfTGbzU6zf79C3S2LsZ4KspJk50li4tOoqLotpOvEOurY
xOqoHGtTBcTlpnLKyyu23y8R0wMAAGBgYrNa7Foo/Dp74BE5YxQw0LCPiyxm
fixisUbIAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4HvO/E6Pc1g+FwWAw2PfHAAAA
ADGc/mf+7a8p9TqMnd/1qmLG9Eup17p0YqlixvSrv6/xXcdWxYzpj2Kvd65Q
MXP0S6HXunKpVjFj+qXUa/WdL1HMmH4p9VqRdr2uftekmDH9Ueq1Iu2+wBkD
9D8AAABXoP+h/6H/of+h/6H/AQAA3DxA/0P/Q/9D/0P/Q/8DAAC4eYD+h/6H
/of+h/6H/gcAAHDzoLRuj0T9r6Qp+ZxXwpTU/4qagvpfSVNSzyppSup/JS3c
10VN/a+khfs+AP0PAAAgEKD/of+h/8Nv4db50P/Q/wAAANShq3oT6XQ6Ssqs
JGsQ51hU6BP0P/Q/9H/4Ldw6H/of+h8AAIA6NBdOd9yLNVO3kdnPc9oKvwz4
nEBgtPZfnvwjaf/8Y4r784882C0U99RtdGXiD3h9fmJEFGl+9wN6MOqH9MAd
/0AP/PKntOQN6TGerOTxKIqKuoUyP/h58Po//wlaMurf6Z67/tFpD/6Kpsc+
QS0ejq+efx+9P+Qn9nZvdRz/5hv3U2HWKyrr/8W0beKD9jbvpNTCZLd9+3Qv
0KdjnqO4cS9JbBqzLX48nVdM/2+mmk0x9PHz99L9Ub+m+wbbbciTNH9NChk7
8r2e++3hafRKVBTd89dJZPBxbKD6/1JDKmVNfIWGMf0ZfJfDRo7WUEXN117P
69MnOPo0Yt5y1fX/vtlD7J/fy1R59qjs/q7Dy2jKiGF0373/6bBXRoymvMpS
VfW/uWE+vcq8/wVZno85lUmrxj9t/7yj6L57fmu3R+nLxUvpnIr6/+rp5Y5+
vZ2yRf6Ynn20LeVDGnbv753X6/EnaVLKcurolr+2Sut/y7kdlDHpZXrA3sf7
7xtkt+do+spN1BUW/a/+vQH6HwAAIoO2gjm8lvfXl9+8eZLznJgtqun/x25j
9LgPu+N2Mk38oeP4bQ97Oe7eO/jj5OzCSOHYJaN+EZT+P7f2D/SYp/YffJBq
dr0mOn44bRz19x77O3n+cNX0/+n1L/Lt6L5e6LJ/Ls3+T2/X/C/Upoj+30R5
n/+z53beGEsdHnV9Js0Zwh73yOdejgtc//dUxjq0qad+Ld62SV77n1lB0wc7
jxk+a6mq+r9h4ydsf56isrPH3Pa3bhvrsf+zd+xVRf+bz62lGfc423hpTobs
MabqWfSEp2s7NIbOqKH/ewpo5r3s56LLlTlmJyXe66FPj8ZSyyX/xgBB6/Pj
afSkp2vy2Ew6G2L9H4p7Q3D6/xLtSJ1JMfEZ1OJtktrWR3WluZSs01F8fDzp
dMmUWVBG7eYbXl/dbDhGeemppLOfEx+vo+TUbCrRd5HN20lBtgUAAJFCMPrf
Zuklo9FIpl411L9T/7/76vOU9cKPaMNLtwj26k9o1f3CM+fJoT+n/zvx78j0
jrDtvWG3U+e4W+jKuCgqeVbYrn3jX+R1/dgoep055uf90f/P09wHubZupQXz
n6P24peoZsn9/Jhg6Ohn+ONPpd3F92vw8P+iitxXqD3/aVox8kfs9jupYMsb
yuv/QzH0MvP6d3t4xh+b4Nxvb39CwoeUseh93lbr3qWMjGnUo4D+P1v4Af/+
R8R9SU0ncqn7RBYVzRvOb/90zWrZcytmPSBoDrv+V87/v5YWDeU+w6cpd89X
1H1mM53ZP4s+HyponLoz26RjhkOz6GORDlJP/1fRvsWvifTWU+7+f7veHc3t
f2sq1bdV08UzWyjxJe6cEfRNl/9+bX+0uKlmgeT9y+v/9TSZO2bwCNpTVUiX
zuXT/iWv8+fN371NUf3/bf0K4Vp40P8Na1/h9y8s3E4Xe6pI//XnwnczrUA9
/d9XQlN4/8THtLeuhr67dJjKV40S+lTRv7mFgPR/iO4Nwej/ZvYZFR2dQPUe
HlI3TEdpnpe1houarsicZaO6vLkez9Ek7ZT1bwXXFgAAhAiblXrtGr2jo4M6
DHatbpa/cYr1v8O1YjWTkTnHbgajiaxenSCubdqY/3F/2Ns38O2b/U0uIO/x
/0t/yz4zf3k7XZh4i2Nb9ePstgd+7hbrs/Mh574H/vwLx1jB9fWyBkv9WMHo
//aswfz505Ok8TutvNa/i0q3ve7w/WcO5+YF/kANknmB52kh69t+YeJzCuv/
BbT8Fel7dX3Gny9+i933Gp04sSxg/6G/+r902m+c7fw11i3WJ//j2xz7Bo1N
oIsu53XtiZb6HJ8bq5j+72uYy/un15RJj+2rmcq2+RvaWlPAbs+hgtnPuPlB
1dD/TDzPaDc/tbv+169+ldf5R3tE+3q28Fr4y8IyhfR/PhXMGe72/uX0f+ce
Dbv/ISqqLxXt20M5bzrPe9TDvEHg+r+Mts1/3f1zcdX/omviqvMbuOs4aIJf
cwDBaPPzldx3agjtaGsW7TtBG9n5yEcXbAuR/g/dvSEw/W+jxuJFIm2dQKdk
H2OXaINWI+j2+Awqra6gzalTJOfWu4j5y3VrJbp9VUEZVezOpVjRthm5JxRp
CwAA1Ocq1RWvJK2cb0I7j3Y1XZYczev/mRuopjpX5jwtZZa0eThHNGdw/STr
E7Efv7uY0mI1bu0vK6j1a47Bk/6ve557Pt1COzW389u3PBxFD9q3a15y9/GX
PMSNF9xjgE5zz7w7fkpP3RG8/m9N+73zde76P6SX6Hm7FQ+j99ln6oKVzL4X
eY0/eb57rP+h6f/kfK0hD3vMGwhG/x9dMtT5unc/SMM8+Pjqlz/h1N5jxjl8
eT3Hkuj8scUK6/8cWj/2MUeczYdLV7jtL/5Y8O1LYntal9Ln7HV8/Pn7FPf/
9+yfRC8P/ZXDx1/Tss1lbPAlr4sW7HDGAPWdms+PF+557z2aO+rfVNP/VbPv
Zdu/m2bM/5SNUXLX/1WLH3F+fl+sdnuNfdPuZ/etpMt+xrV4jflpWSq8/1Ef
0dz37/Sg//dQwZhfOPXs9BUyOQE5VFu1gc607FFE/189lyX068OxlPjhr2X1
/9Vz6x15Acw1LWiWxlFdPZPOvoZ934kaFfT/Cdo+9pfOazL7a/ecgLOlpK8r
o7NdJ0Ki/0N5b/Bb/1s6qTB5vMszRF7/i3X8+FUHJXUsmosX8vumSLS8WMfH
UYnhurDLfIpSojWClhe1GVxbAACgPo150z3OS/Lzk63X+OPb+LlV77ZOf9Ht
HEnMEK//pabVSv8es+ygzzpDsvp/bBQ9xT7X33vWQyyPjK1i5wueHCY95/9+
4hwzMPs2f3wrbRncD/2/ktX/Q/4oo9mfohi2nTlprzj0/5Ih4vGA9PjahNvZ
uYE/0inXsUSQ+r+n5G90H9uH7N1zae0r8s/4fRN/L8Q+PPMLwR/48GP01ddz
FfP/e7a1tJQd4w2NWyTavpnyx97q7Mu706m5dLzi+t+bnd/+N95XW3JquxDz
//yTtHLTCsfftSmPqKb/mZj/kRNm07E2RqduoXdl9X8FZbBxPhO37HR7jbPb
Rjvfw6OxZFBC/zMx/y8+Sys2f+X4++iSxz3o/+207EVnv1aU5lP9lok07s0h
NOzRP9ArL75qPz8noNxfn/5/Jub/peG0qjDfOSey/BlZ/d99kPW/D/6cTrpd
DyEvYMH+cuX1f18tpb3sfP2Vhw5RY3EijRv5DD0x7BF69eWRtKqopF+6PxD9
H+p7gz/6v7t2nYfnkJz+t1KZ7hMv8UF9tDl2jHO/ZjVd4B5XXTtEPv7Tbn24
0ijo/KXlPf1qCwAAVMeuwRO4ecmZ2VRvvOLIYbJZL1FtwVKJBufCdFz1P+Oj
N5mtZLVcoLKsGcI8p6jWj1/6PyaD6k1On4rZcFCyL7dBOgfhipz+L+Hze2+l
01/81C/tX/6kMJ+9cpS0rs/s253bX3vqX51xQL9VQP/b+/bVWmncfqcoNojT
/5z/f9Abj7q81iui2CC5sUQw+n8WTWN9ei/Gxdr/TqLlT8s94xfQ4qddY0yk
9kXaLFX1/+5ZD/JtLS7O4bc3b/pvdvsjtK85n77d83HI9H+ffq6jro8z3mgC
nT23Tfa4b+YPUU3/u/qtPen/VFb/L6mscjuP17vDZ5JRAf3vaocXDvOo/1e9
6P17NWi8jnrUyP+125HFPvT/8Dky10MYS6ml/zNe9n5NBk/MoG9V1/+hvzf4
o/+bRT6smGV7qal2k2f9f6Od0lhfvWbmTtn5ZfEzbivr++oqXeK2zfVZOo9/
lrKvG2RbAACgOqJ71oz8My47+2gzO985ddl+/t4lvl8t2nXO5ZxLlK3l7nfb
3M7xqP8189zu0ze6D/CxRb5yjd30P5ejG+Ulj9fFap4Rnk2usf/V3Ljgjtuo
c+KPJPMEQeX/Fg8jDfcsvOu3tDnrJWeeb9af+NgfQf+LYnzsNmr8MDpV/Jr9
NZ6nLeNEfjWF9P++aezY5D//wsbtCs9yyTP+2AQaxrX99Ku0t2QB9dQvppOF
Gvob/x7uph2HUlXR/xW6pwQ9OHauEPt/fDavv6dtzGLzAEaHRP/3NcwX5baK
Y//Dp/+vnF/nQf9X0cYPWf+/TIw/r3cfDbP+f/Q1ytudTSeqV9KiUXfy26dt
3hJS/f/t4Vls259TR7j1/7B3aHPFLmo6vpWSP7qL3/5l0UFV9X847g3+6H/H
8yUmjcqbnHPO19u+9qz/RT6vGfnufnyGa/z50bSJzc1tE+UUy+cUXKXC+DFS
31eQbQEAgOpYhPsTY4lZhaRv6iKzlyReyX1QJjCH98Vo0qjdJj3Hk/6fW+Q6
9mCwUhkXz2l/rU4vecWu+p+P04/6GdXF/Myn9i95XPRsfUAa928axe37KZV8
ehu/fQOr/1d+4Hl84U2D180XtIwn4/Q/ExM05S7vx8rHEgWm/898zfnN/w8V
VnLP5sW0hn3GJxeK43eTqL54Ku3MjqET9S75fZWf8M//hPXzFdb/m6gobqjw
vv86SRT3v5ZWsvFAw+Pm8+d8W8rmAT8X43OtgGD1P1PX5x3R57Fmz0avx4df
/3vXrBHh/x88gg61l0r3sfm/UUMn0fmw+P/lrkcI9f+9H9Ph7mbpPq4e8WNz
qVsl/R+ue4M/+t+Va170/42LB3m/0hSZOB7p+Zwmt1Ft+mQvcTwMV2mHSP9b
gm4LAABCgY0OpY+TjZ2M1aVRcUUdmSxS4c3rfxmfvWS/6D7pS/97mvds2+G7
jhuDq/7nYnMeeNSzb95hX0TR0nvEfv876PLEv5fmA9zJ7b+FVr7wI1ry1E9o
5bM/4HMBXv+vf3Jsq9b8U0D6nzH9kvvpLYmuv5MWz3+CFg7/Oxf9z8wZMPU+
Rf5+Zg7+jT/Rjvn38P7//sX/L6DFDwv9SNG9TfPiRlJKwnA+3nf4+284tu09
kOLjmb2AjwtwxgkopP9bV9LCN0QxD2NjJf583s/P2NixtEL3MS3RRdP0N/6N
3f4IzU4YTUuWLnSrFdQf/X9660eiz+VBWleW5/OcSND/XPzPgr0y+v/AF6z/
XZn4/2D0/6DJy9zOu8DVBrLrf3/XAVNE/x8Q5kPcr0eZcC33q6v/B03Lddvf
w9UGsuv//qwD5u33HK57g9L6X6y319R86+N8TpML2j465ivqkT3LXf8H1xYA
AISKPjqUt1R2DMDZ+ppu/mjZWj4i5OZJfen/ReXy90bfc65OOP3vsA9eoX+P
4nzzntfm/d8YIaafMc2zP5et9ynof+8266/u8wD+1eN8hVq2vEAt+cPpnOPv
x9kYoFtpdZa7nj+3bTid2vIStWxj6/9MZfNc33iMPV8J/e/dYjctpEvH5tKB
9Z/TluwpMut4ip7x8V8qo/+b0/g1sxj7m85dw3fteN+v/kdFfeTfOmB+aPHj
WSNErzucdnuJ+Yks/X+Ytnx6p6zWZaxqvjM/+dFZWX63pYz+z6dlj7LXc1yq
23mmiglh0f/f1SfxdZRc11ETagM9THua3ddY67/+P0xpw9hrMtFd/1+qnRNC
/a/uvcHbc8hfvPr/RXGl6zzobTn/f2XqOPYZ5mkNSxn/f1BtAQBAiLFZyNB0
jIrzMkkXG+Ny743z7ssXEYz+V9L/L6zt5T3vd+F/CM+sBSM8jxNqXrWPI174
iWNtMc42vPB3gv//z//k2Fbz6T8GEP//OMU4/P7/4rZulxAX9DsqL37dqfG/
dPqvh77/lMtrPc3HBb0X+6Kf4w1P+j+JDix+h1J0f6U0ka3WvSL4+Ma8ad/2
Ae2vXErnvhbWQtpc6RLHW8OuDRTFxAUnK6D/M4Q1fJmx1kb5tb6+PayjFbpx
tCLpc8GWfkEL7WOzKFa7LUiy71+TrIj//8zWvwra57loajwjn+sbmfq/lprW
smOXQRNcfNpllMTGxA2dJ7cOrpr6v4T2Tv+js18vuGt87ryoF+JCGv/D1Aka
x37Ws3dIffxd+z7jv19ua6wpof/tVjKHfd8vuWv8mqXsOrzDF6oU/xO+e4Oa
8T/ycac+4n80KR7WFPYe/+N/WwAAoD428wXSV1dQQV4xdbrc0yy97bRZVE/Z
NQ9KSf2/aNd5mVcSz7lu9DDn6kSs//k83t/93C2Wh7MTzwta8v5hv6DOT39A
Zz7+AZ0W2ZlPb/EaO9S/+P9nacavnee/MPoJame3t2Q9RMPZfr3w6bP88Y1J
v+bn3jes5eYEXqSNo37Kb9+dr8L6vye8xPjWTOCf44Pf/0iI8z02nebztT8e
p2+O+V77x5cOr0l+hP+87o6bS01HV1Nj+QrSi6zh6AaP56sR/9/XskQU7/8b
Kqr8ik4fWkN1latEtoa6PIwJIkH/Xz29nPVpR9HbKevZOv+H7VqPWzf4YSpu
9l3PXmn931sjrJ8wYsEyvtZP+54JfH9HLF7rd1uK6P9LwpoIzHppe9jr8t3p
dH5dsLvj3NdRUEr/99l/h9w1eXvJJr7Wz7nKufQAd01W7Ala+/uK/w/XvUFp
/S+peeEhJv96kPm/O2Tyf4NpCwAA1OZy7Qr+3rO0yj0G52LlkpDof3GuMMe1
5q1825rEvV7XAJDof7ZWD1enUy7mn6+9483uuN1t/S9JXFB/6v+41PSJuuvf
6c1nbhO1fzfv++fmC8R1gV585pf0mOjvT6b77/sPXP97qPFht8OL/kvU5ztp
xIg/8v5Ax/Hr/Mvv8x7zv1RUU8eL3a3xGNOjRv0frn6/L5vFrv8VLv0vxKa4
x604NO3sIUJ/H3+Z3h0m9P3RhJyA2lJK/zNrgPFzAIzd8xiNfFOo9Ro16FNq
DqAtpfT/1dPp/FphjL3zoXg944dpT5vv2J9g9T+zBhg/B8DYfc/ROyMfFv4e
HEst/dD+wel/9e8Niut/Uc2LKZnHZc+/eEh4LnJr3wg1RuPoSK/cWRcog6t9
l8jW+gyyLQAAUB3zcdHa5XGUX91GFqb2j81K3Q0lohr86sb/OPdlONYfYOr+
dNVslawrvFO81qIMYv2/k41Tfe1ZD/p/XBS954+evMfz/AFjW+5n/f+jPMcO
edfhw2lH7F10r0u7L77xX1SR/7rb8e0bhtCUIbe49PNOWjD3uYC0f+D6P4nW
jviZ08cnM19/OOM1odYfr8X/TF8VLvC7Da8a3K4xRvrzeb0+yaO27y4dx/r/
xyqn/1Of8kv/r9iz2ev5L85T2/+/hfVPv+whNqWKDiwf6dbvsSkZftf9CUb/
H13xvFNnL5DT/84xwOE17/H+fs4eHzWealtKA2orkPegX/2qs18pm2T3f3cy
g8Y97vI5PzaKimsP+j8mC1qjn6CanLG8v5+zYR/NoGNdzf3S/sHpf/XvDYrr
f7tO52pUM7m8l9zOttGh1HHC+azj6WL1aiGX98h37o1eFGL9hVqfwbUFAACh
oC5nMn9f82RzRbWLA9H//tb/8bdtT7jW/4kU80uPF79I+g3PUs3a5+hUvu/j
W3KZY5+1n/Oi3/m+/dP//umA0wdmU32J/TM/oKOeAM/3W4+H2gLU5aGygPS/
n3b5bBmdOl5Mp07sJkNXYLo/GP3vt50rouaaDXSiJo/OtOwM6jWUv16HyXCi
yHG9Wpr3B3x+f3X6VftrtDaWUVNjBZ3tOt7/1wta/6t/b1Be/0vXsFmnd9Hy
Fw/yPjFm3lnuecXkALtq+dos4Tm6vUPw4wfVFgAAhAQrNZeuE80DiC2Bciva
JEdzObke1zPkcnaZmB6r6zny+j8pr5DSYjVubedXn/XrHQxo/R8GU+c5H7yF
XedD/ytiquh/BSzc10Vx/a+Shfs+ECr9T6K83OhoLeXruxzr27utO19/VXJa
rahWdkxSIXVabhDZ+qg2b65oHnubtD5QkG0BAEDosFKvyURGo4EMBiOZes3k
Zcmt/iOp//O/xMyFmk1Ge9sGMpp6A2ob+h/6H/o//BZunQ/9D/3PINb/nurG
te1Z6HXeeUzSfvecM0sLpUS7+qmkViITqxpUWwAA8H1FpP/7W/cA+h/6H/o/
/BZunQ/9D/3PcK1tOzsHLb9GJQeTZyY3772soNZzLI61kwqTp7ido5maRkcM
nvN3g2oLAAC+j0D/Q/9D/0P/Q/9HjIX7PqCU/g8Im4WMBoNj3pmZ9zb76Yi3
9Bqpo8N5nrFXfkUwpdoCAIDvFaLaaND/0P8RaRGg9aH/of+h/1XU/wAAAEKL
tZM2JCeSTpdM5V7mTf0B+h/6H/o//BZunQ/9D/0PAADg5gH6H/of+j/8Fm6d
D/0P/Q8AAODmAfof+h/6P/wWbp0P/Q/9DwAA4OYB+h/6H/o//BZunQ/9D/0P
AADg5gH6H/of+j/8Fm6dD/0P/Q8AAODmAfof+h/6P/wWbp0P/Q/9DwAA4OYB
+h/6H/o//BZunQ/9D/0PAADg5gH6H/of+j/8Fm6dD/0P/Q8AAODmAfof+h/6
P/wWbp0P/Q/9DwAA4ObBVBvneD4w/0aS/X9fREWkfde5PaLs28aUiLTL7Zth
AdiVi0ci0vq69kSUmbsPRaT1tnwVkcYA/Q8AAMAV6H/of+j/8Fu4dT70P/Q/
AACAmwfof+h/6P/wW7h1PvQ/9D8AAICbB+h/6H/o//BbuHU+9D/0PwAAgJsH
6H/of+j/8Fu4dT70P/Q/AACAmwfof+h/6P/wW7h1PvQ/9D8AAICbB+h/6H/o
//BbuHU+9D/0PwAADES6qjeRTqejpMxKsqjako0aC1aSLtne1vpDZFW1LfWB
/of+h/4Pv4Vb50P/Q/8DAMBApK3wS8d9TjN1G5lVbekqFcaOCVFb6uNZ/0+h
PQlDKfqjoaT1aH8i7aR3qdODhi8e/x8UFfUglVRMC1j//090FM1+6BaKe/hH
Hu2Lh35Cuz66XaLPT74ZRZrfRdnbvYUeuOMf6L2H/pFKPrxVcsyh56Loi4d/
7OW17e0+eRtd/eIHAev/S43LKWvSqzRs8K/pvsF3OWzkJ9FUUZvvdmxf+3oq
mP/fwrFDh9DEeXOorb1IVf3fvf8jejkqigaP+JA6ZPaf2DKKPnvlt3Rf1L87
7LGnn6TsTfGK6/+LdSm0ZsJw+/v/lf39/9phb3/8MR04vNHl2E1UmvQWfTb2
LzRtwkipMdsSZ9EFxbT4JqrZOI4+eu4euj/K2af7hgyj+asXubVx8XA8ffmx
TJ/sNvHjkbStyvV9KKP/rzal0av2z+/t5Dy/jt83a4j99/AyVbbXqKr/zfU6
R79GLFgt2d5bv5hmfPIXmjTuHY/2+Sfv0NaqHaro/33xj9jf/3CqPPON+/6e
g3QsP4FGD3/I/nn/nu67x26PDaeF69eRqUdZ/W86qqMVXwyjewf9h9MeeZRm
pcTSGZ/nZtL2KX+0v4dfUdqODOh/AAAQ0bx5klOTx2xRXf/viBf0v7pzDerj
Wf9raZ5DR/uw371IrTL6vWbxn9ljBtPuIPT/d+/60bbdFrzzL7w23/YHz8ct
eefn/HFLb/Pjte+4nS5+8cOA9H/PwWl2DeH5NRdvyxMdn01zB3k4dsin1Nzp
3xggcP0/i2Y9zLbzp3eo1WX/Nwsf8tj/D+bGKab/jeWTvF6rlPx1ouNX0xxP
18phH1J7+xYFtH8O5X7+z57beeNTSTsdBW97/Q7FSt6DQvrfuJVm3ut8/eG6
DT6Pb9gwmu3PU1TWXqua/jefzaQZ9zj79dLsVZJ9F/Z84NdveVZRgeL6vyHn
I/b1n7S/fxf933OAtnzxr5779OaX1NkjM2YIQv9fKI22j6U9tPPs+3Tay7kt
uX/hj51XuFJl/X+JdqTOpJj4DGrxNrlt66O60lxK1ukoPj6edLpkyiwoo3bz
Da+vbjYco7z0VNLZz4mP11FyajaV6LvI5u2kINsCANwc2Cy9ZDQaydSrtkf+
ZtH/dg2/6jValvAapScKtmrhW5T838Kza2j0+3RBct4kKv7yXtHzbXBQ/n/b
2Cja8vwPacPwWyS25ZUfiF77x1Qy5p8duvzqR0KfNE/eTsZxP6Tvou1a/35u
+8/oZMz/6zj29JtRlP38j6Sv/cpPaNX9wms8OeTn9D9f/F0A+n89LRrKnf80
5e5dR93tW+nMgTn0Ob/9L1TH+vaPZzwljGFy1ziOrc0ZxW8bkZyhiv7fP+23
wvWz63+J//+I1jEvwOx79P33qLZ6IXUdmU6rP7mbPedOKqhQQv+vpoVDuGvy
BG3avZoutORQa8kMGstvf42OtbBau0lHrzi23UUTErW0ekmMYIs+o9VfpZBJ
Ad9/R4Ho+sfF0anGDWRsXEPbdS/w26NXr+KPr9bd59h273Pv0uqVMZJ+LV+k
pQO1eYrq/2/rltNokW70rv8raV/Kq6LfylOq+f9NR+bRx6J+uep/8+kMylk8
kTLT4iS2fvV4Uf/+QEVHdymn/+3afl/yK6LXf9LN/2/YLbQ/cmYynW4vt3+P
dtKO5BH89s/Wb1dA/2fQune4fjxDX+9JJdOplXQkayQ/JvggJVn+3KNfOn+T
g0Kj/5sL5jiOj45OoHoPD7cbpqM0z3GMvBU1XZE5y0Z1eXM9nqNJ2inrtwuu
LQDA9wGb1UImo4E6OjrIYDCQ0dQbWMy9zcb8z/mf9jGCgXkdY6/gbxDtZ+5R
vWxbHQYjmWUb8q3/A+qzpH1ytN/KtN9hIJN8B1zOt5DR0OHss938OkdE4PH/
Wpr3JPss++OLdFK0r/XrN+nD37v6t4LT/57i7y+OFF57wdu/4LfXPsFu/+Ud
9N0X/8Bvt30WRU+xY4VdY27zGtu/9Lfca9jHD1/cElD8f19jIj3B9mvN/gLp
Pvv7cfb5N7S1dhv1tS/n9ZKrzj+exo4L7h7t1xxAINr/bMFb0s/maan+P7vl
dXbfg1R2dLHo3Mn0N/Yc3aZ5/df/dfE0jH29jH0uMTKHJ7J9uIu2HHbqZ2PJ
GHbbX+mUIn5+eSud9mtnO+9OcYv1yf/4Nse+QWNnsmONHFrzhvM9TPhqTb/b
9q7DS2mb7jU3v7En/d91aAmNvtf1d6iG/v+aCmY/79YvV/3vyTqLP+HPmZ2/
RbH4f0N1Co2+x/X9u+v/A/Gsn+L9hW6xPoXR/+b8vGOWUa8fcUBedXjdNP77
nuISv1My5ZeO7Xdrp8mcu5JWvC59H+rpfxs1Fi8SaesEOiWr/y/RBq1G0O3x
GVRaXUGbU6dIzq13EfOX69ZKdPuqgjKq2J1LsaJtM3JPKNIWAGBgY+s9RRuS
p3oY92spc1ezZM6wjfVbaGaKNPn1k07fgSaFKqrzSSt+DU0adVw5xfoW7K+3
u5jSYjVubS0rqHXR+J71f6B95vtn31ek11OhbrzbeTGJG6hF9j5spcbda6Tv
ibWZywqp08+JiUD1f0XCb9hn0b9Q3q4vJfvKxv+M3xc7+XHWt6Wg/h8XRe+x
z8EHHv6FVJePZuYLfkBZb97uds7rjnNuoW1jbveo/Y8/xz1jb7GPEzwf5zH2
58Bkennorxw+/prWIpexwQxhzLIzj/qaUlh/tn08UFfsYRzhHCsopv+PT6bP
2D489szvZf3/Zws86f9Y/lzdlv7rf2OJll4e8kuHj/9Ik4uer5vKX6v5Rc74
mcY1L0u098WmHLrQlKuw/l9H68YOdcQkfbBkmdv+oo/Z78cjXAxQGk1ixykb
q5hxyiZ7n3LoYovy+v9qxxp+bHnPh59R4oe/9Kr/q2bdw17D/6QZumg2zkp5
/W8+vVjo16gPae77/+a3/jefWUHvsOcO+jxJ0fzfqnjh/U/XjWHfv4v+7ym1
a8tnHfv+tmqL22vsjGY/76H+xQB51+FpVJ41lubP+JTqT62V7CufOdh5DT6d
Sj0u5x1Le9LZh0F/pGFq+v8tnVSY7Prskdf/Yh0/ftVBiV+ruXghv2+KRMuL
dXwclRiuC7vMpyglWsO3KZ5zCK4tAMBA5obpsMQv4MmWlvfw5/D6f6qM/pez
mI3Ue/2U7H6tVvr3mGXie4+8/g+mz17759LXS5Ir1Ed7kj/xfo5mHh3r9R0f
GZD+3/8OPc4+s9+c5n4OE/P/1kevUtV+Ru9/RCMU1v8VjwmxPLXj/slnrZ7/
+SxKFNMjxP+4mjBHYB9fPPMvXl8zmBo957d/xPZhKJU0FdP5fRrWx/8BNbr5
+IW8AGasoIz+T6Itn/zY2eYIDZ0oGimr/789KsT/DP/8Y2o8kmzfNos2TnyA
hPifJYrl/8qZgY/B+TPta/za6ZeP49qPoref+w/BHzrkBVpbtFq1+QDBsmkJ
Oz4cGreAHafEs2M4uz03TJLL8GHcZDrVEtg8hc+Y/+HDaVXB146/9WnPeNX/
TMz/yC9m0bEWRu/n0btq6X8m5v+Fp2lFXpbj76NLHvVb/++dwY5Bo56lijN7
FdX/TMz/SG08HT1t1+09G9n37+7/9xw7tJdShzs/y0dnfqVY/q9rTu+x9W/z
8T9vpSyU7DeVf87v+6p0Ka17XR393127zsMzRE7/W6lM9wm/3z0+qI82s7Ux
ojWr6QL3mOvaIfLxn3brw5XGtTLPx+DaAgAMZGx0KH0cfz9IXF9JRjamxWq5
QJV5whyl2Nfvj/7XTE2j3RUVDh/9qvLz7vo7JoPqTU7fhNlwULIvt+Ey+6Jy
+j+4Psv170jHRbJYLWRo2EkJon3bO67xV6hrt+D7YHR+eetFx7yCzd7WnvQp
orZ2+sxPCET/F37EaZwhdOSwD01f8b6i+t8WHUUPss/DL17xrtGvfiAcy9mS
Ub/weHzJn7jjbqXTMf+Povq/ry5R0InPT6Czdr3P63/7311u+j+PVr2grP4/
kfU079ffc3QxdXN+flf9b7fmTS+7xXNwpk1PUCz/V9ZqRZr62XGsn30dr709
2YTVy1XV/7sT7ufbSmHnJAy7P/Lap6iot+iY69xGsPrfxY6keNf/0rmDtarp
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
NGeIoLFmbVjl4bh1tJRbj3jsbLf9pVy+8COf+j1vcHPo/6/5NfI+yw4s71cV
/d+znRIfEz7vOVv9W+srUP3fuYNbd+NXVHhUWv+TWRuAy8+Z9/UyKk/9iBbP
H03LRbZmwQjB///pKPu2aPu4Myus8T/y8bI+4n/kcvAceI//8b8tAMBARvyb
1iTudKl7yWAV7hUB1P/xpa8X7ZKLkxfPXW5k5y69z1UG0udg9L+4ltoUT759
6wWqqaig6poG6jB5rwDkj/4v/dJZ1zvqydep3V8Nr5D+Z9YB5vJzvfnoxfX7
s/4q1O9vf1N4vr/2lDT+v/Zp3/MK/ur/vtalonj/31DRwXV0+pssqjuYIVhl
FnWxY4I9k37HzxHsqnPOEVyqS+TzhQdNmu9XrJG/9Xgk4wIP8f97+bWB76TU
LbP47W1FH/IaZdAnn9nHCv3U/00LRfH+d9G28tXUVLWcjpWnimwFdTJjgkYd
r/EHfzxByAFoWkoL+c/8Bfd1BIKwmqQ/8d+Vu+Nm06nadGosXybpV0Ptesex
5Xz+712UVizkADRufJ9/Dbl1BG5m/W8+nUqvstdmScn2sOv/Y6lCbvfdM1fQ
6VNFdPLw11QvspMnyxTw/8/iv++D3xlrb4fbPp8W8Ot7/ZH21a318BqREf/v
M5+OxPnDgeX/7pDJ/w2mLQDAwEWspZfKxORcaRDi3wOp/+NLX8vV3xHH2msS
97JrAHjX/4H0ORj9T9TJ10Vj5hmqTO71fcS1SBeV9D//t2zSvzuePS9MGuO/
hq94n60XNJh2K6L/f0q1Y73U/BflCDvmAX73U3rvP0Rz5nf8s5uPn1sz2HVc
EIz+r00R5Yp6sVlsTD9TF/QJ0faR7z0pOu5B2tXo2/cfrP73WP/nqLBGGGP3
PvwnGvH070T9epjKjiz2qw1/dbY3S2BrbdYsHSbafhe9/e7jknr785XI/W1J
FtUT8mJ3f+LMA7aPYcTH3/vcMOnaBM+ODmitYtX0f8daVnM/RWXttWHW/4vZ
vjxGFacDj/0PSv+3Z7FtPml//yL9f34Tjfbr856swPpforW8HHYvvf3OEN6n
75jbXLXEy/nq1f9xxav+twg1eaZ4qD1x8dAK/tlTxM6pCzVG4+hIr9xZF4T6
GIlsrc8g2wIADFwkvvSpGVRvdP6ubVYzNVVvclnvVrhH9Vv/8+0xx1mpq2ar
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
crrh/O9hh0msn9f+WVn/P8vtLo5Sbj/zI8M/9q9RdQwp+1d5/t/blvMHt+hr
jyV9/irP/3vbqdYF0DH3oaEDxOciPmOuQZ0L+VbF/xvbs+OIHqKyGa6vGMn/
AzjGd1kzSHL+7BLmuh3ao0CB60/8zM5fvIywsKFmWv87CpsYzu5Dc7bg3AV2
bkQH/6e4vs7cVxOERzmaaf3vOMF9DRedu+DWVMT/5Xu7oaWq/aYyjD8BmbuH
IDN6NMpNjv/ZjV3TOqE11dY4ny2S83ETeN++KLanwAfTmb/Rzr1aNY7/n+L/
QIb/+3nGiM7lhwxvXP6vK8WBdTM1fOvy/C/k+Jn+qaI41/w4L+6ci4jlhRzv
ikRhTGrtFayf7MSzvKBN49oiIiIianwJ+Z9+VzXUVlJ9SDHV15RRfG9gdH9D
A/2f+v9SYwT6OmUV1TJxkvWoriij2qDPV6rafVwSYzH+f1DBx//0X7gRBaVZ
1LET2OfWB3z8j+lxq4bwf9wMlrtaI/HkPJ3lbyaOxbrBf4fZ43/omP9+feF/
IEr174ube8jy/63U+eq2W0zHrxIfP78uYE1yisH8H8bG5Xz1Oi7OkY//8WGY
3muWNHY/fSxf54pBZf8mz/90zH/7t7DBQ+2nPzXrOVn+L9jM+G3fb4X0OM31
u/y6gJU+6mPJTuyajrcR5NMLN+L6ImfzJxjCjgMNjv8ZAB+G/738pXyfuYJh
6E++ko/p39eBG+d879zXIPbXFf+TwsX/fIBtwT+iPGUcft3RlRvzCuN/JEaN
ldj7+uHnoYaxv474n5SZLzP31ZS6rzEUv0/Arzu7C+5LHf9TFMys2enVC7/G
f49NE1qib6c34fD5+xgzoRvO6eH3Nz3/zy/w6cWMi13XCo7vQdQ05nOMXIz8
pJmNFv+TzsX/9MDuE8n4vSYLN9J8MLIR439uZYQoxNbI8X89jns4aokPuoc9
CyapzzsF4SZz9GF5vMDHf1VyD/dzec73SbltUltERERE1hDP/zuQFOcvjXGc
74fzZX/I11kqiBl6+Ks65tFpPU6mRWGW8DpOfihiHCElaeGi+VOVzVqN7QFL
Lcf/lN1ImiuJ52Dt532JJvdZBvE/xW2tmLadPCdrLVu6pydXlrVVYbMts/6X
svMbdPB/35WokPD/SQT2M47/L05kP9cLiHN/ETfYOCAF/799p9ckTM/H+zQR
+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
kXz2j1BTVYWbN64j9+IphAeuFI8HnCLFPF6fza/3l5uTEKxr1jdnkTAWasER
pXgj7bqTLtxXwFLPynQJx77iGP/bov3wJnkny+aAJ7I9/ZG/Xw//fwPq2cW6
DaUInOwk4HxX+G7fgyNJacjJK0Zt/W1R/H+j8H/BViZ/jjSOv7Y4iNszk7aW
fXpheJ/3+N9bb2fk68v+luB/t891ljE3/9OWJZizpFl/xE/90VXwnPpt2Gc0
++sV/39+Kn4StGff7TMM69aEv6du3yGX9ecbUlbP+P/U4YJ+gmLyIe2e4/JE
qnz0kwU+esGaYNrosnxddZ4g7ro/Sq8rrNtnsDH5//tze3epPv9nH2KIw+uC
dj7G0UM/GV7WEvE/oR9gtKD93p1e5fYOo81xjpDnW/NzALS9+yoGdxKsG3j3
fWREGMv/gxiG/wiJicqx/+c9BO+CD6ln1ftNwbP6Qi/fvy7+F+7bq9WaTeX8
/QmL+Lygdh27Y4Rg7kC9T4B+6w0sy/+Wy/8j6ae08X8dH8PqIhvDClSd2cL1
PweZnJx8jlFXnJfdr+gmH8u6isn1aWRbeonbg7YHws5X6F/PSF2N4n3OAzal
yeeklJEwZ6Z/LvtlPML9mhrcv89fheN/E/zihqsSIZObc/fnHMvm4Jfu8TVm
zHfo3n2Qau8wlXUX5k2m9xRrja6zI7XeOz/G6YGkKsPv9ves7aI2jxgdP2R5
5bLrgZ39cL5MMnhCSVo4Nz44XPxQ9hpENqbaSzrj/zO28/Okubn8eIF+J0rn
eup5n8nSxvL/72T6V/k4/tq8nVg7RpoTfZiLJ24Ywv4G8n/m5m9U7fRdo8T2
hxA9o7mOMpbhf9ryj7hx8wC8fYW1++JMYn+9+J+2UzPhOeS/ku9lyLRxKNDk
eUPK6rn+N3W8mOtV9uY/ETyriYTPy1zt4NRUo2zTl7DPRZrLJ9OJnwcQjhPc
J8j4/fXM/1+RMBA+Q96QfP6OAzogNfYn48sawf8pTJxTL0dp3L4qdn/ru5jX
9hmN9ptg9UK58q2ROOcFzt/P3WuP93Fip3zuT334/7dYNu+/vVb+v53mhCMr
PheN/VS/x+E9cDpRP/bXyf9565n5SR02aL5gLfA+HF/fX1Jm6urVeuX9MZb/
L2xVr6fp66UP/ycidIx6Xzmfo0etx/8Up+9g/Y/OO2X6pAac8Z3B12eck1Vp
Qfxa3vMyvq8qPtafz/VpXFt66342H09C8WCouffPFahIyP9KOell1CCIoeH5
WlPVCLJWLpsHKdw8QJeVadz9bNbcN1gvW6/l3mv5fD2tDN/n7E76VlFboTm2
HD/P5sKdhcSKx4ql2DG1IfNeRFaUxp7O2ZoLoR5f5fdAmb8Xtwp5/vdJkeY/
uJ8jGB8I8v8I+X9/wf/TeVuG8L++drsgGvnpEbicEYHrBUnGXccERrekGc3q
NVkouXIceTlHUXAlBXc01wNbkv/ZNbxnXHH5yDxcoiz/zEqzldXF/2xszmXX
vyFz/rPIXPgcyjz/pjU3UL7rX1RlLy1+XmceIfa6l1yfk1lnbCD/M1Z2aCgu
RXyPzIihuBwrXeNrbFlD+F9fywtsgbN+9sjY2hpFusqHtkQGVfasX0tk7dR9
bX25XG875Yjs2LG4ED0e1xJ1r/c1Zv2vMXY3Lwy5Z7cjN+MXlBToz/3G8n9j
GS3z8b94zy3JPHZVKp/DbtVRfs8u4f5eVN+myfKc34uy2GLej29UW/qqRsD/
bQZjrwX5X61qLv5nwCZ995wt4e9xVKT8uOHOIS4Xj87r/lmCuEAvuLuvRVjy
VdNj3yn+5/IAjeLnHqryLyA1NVXBziM9wZ+rN2pTHC6ep45fLFW+H2E80aRo
vcdPtEpFeyR/ilAj1/v+fv0Ufgn0ha/vL4I9mC0hlv+1j2nLj3gR/n/CxH5n
rI9fnf+/gXpPZ2OHIP//2sTfRBzvND8Q2RXq92JDfS3yBPM/mu9q4Tpj51Wh
SM/JQVm18tvREvxvFrMB1jcr/1vIDOXyxjLd+T+tZEaweWOYKfxvSTM7/5to
luJ/U83anN9Y/A9RbPIsRF0sV+1hU1uWKlqrFpEt5ukMwV42zt4HUFr3mOrM
7iEj0l3Wj2VKWzrVcAU/M37/sIuWj//hxe7nq9/6X1rp3h05fl1zSnPk9Cei
uP2B7bD3urK/mPahc/ME7JzCEaU5BajW/NIx+m6xvyoWKT26nLuWQfspNPDx
//45esSvCPIFfRugfD+auhzB5B381E71zGOMjPlpqDikMVeh//dnjNj4H3eF
fe/odQB7mNhvwv9Pku4i3kP7/r/0Xufqd6B4rYfKZs1SqDcLpyuZ3/7Da1yc
EWszdyn9HRH+J/xP+N8WzNqcT/if8D8tIf8r7S1UmOCltQ+TXZdYd02w/428
JZZJWdCotnTIKut/GRmS/1OlikOiXPs+yUVqP/mfvyFqUWeeSXXF/nNjHjs9
mP1PRArGCq1Hr8KRi0Wo+fNPPHr0J2puFiLOz1F0LX9D8vgbmP/zgWAfNP3G
GX/i/7N3JmBRXFnf78lMTMZvMsloEicz42QzImadmMSoMTGaxF3jbuKGC7iC
GwKyuIEK4gK4gEtc44qCAioiCuIKCooKKCgIKIgRI0reF9/B5/9Vd9faVd30
Srfx/J85T8aqe+tWVzdVvzr3nHOPRwyWnN+YDSm4mHlGPh9x5AiOXTT8Dvgw
a4kO/6swmlvLwAYS57X4R8Ygu7AMVdXVqKqqRH5mEiK82L8j1/l68ulJjqsa
ZMWtVLyXhe3JkPo/qq9jR+gMeVuPWdh2ogiVRQmiGCEhKq7o8BpJe/U7hb6f
CfE/8T/xv/3N3pxP/E/8r9ZvBXuNYovS9Gg+/kb3Gaa3W00xYkI95T6vGeo8
R/35u2aNpVds/c+WoXao/wmT1v/iVHZ0fh2x89OQXZcbuLbABP4HHtw4rFzz
X8F+MLKeES9RHVNT10HTv9aYqL0Crxu0lobzJmqurJX16WHT9eMeIjl0tMH3
XrWtPa68mh7pCVBtNSrKSlBSwlhZBaoNODFq1OuAqduVlKGisgpGzWLV1qC6
qkqzfkSNgQ7E/8T/xP/2N3tzPvE/8b/JYp5hZSUl/LOpykhHfHVlGQoLtf3K
KpVXBLPWWHKx63/Zcq1cQ2LYt6OJ/K/WL5k7JbX/OfvKdQ0KjAyIPx7RVRIL
X3fOQyWObl2I7/Xk877Xayp2mRM/JfL/C3WNDDRn50yMby/ndYP2Y111k6pw
NMobvTsa9+5kHd1HRtxaBOjGgKjj5wKicLyQ4n5Ilov4n/if+N/+Zm/OJ/4n
/n86pOV/2/ObHpnJ/1r9L25dy8O1G7dwI4/57y3Tc5bVsTt5TN87JuHjf/Hg
zi1cY8ZW97127QbT30GL59tSovWX9ddjsr7UftzKigpUMFZpyFFMIpko4n/i
f+J/+5u9OZ/4n/j/6dCTzP8ke+r67olCrrUDrx9AIhkr4n/if+J/+5u9OZ/4
n/j/6RDxP8l0lR1fKooX0lOLlUR6wkT8T/xP/G9/szfnE/8T/z8dIv4nmaIK
bJvZQ5QvMM6mtT9JpPoU8T/xP/G//c3enE/8T/z/dIj4n2SCanOEtceGLEcB
sT/pdyTif+J/4n/7m705n/if+P/pEPE/yTSVnTmAA5nF9j4NEsnqIv4n/if+
t7/Zm/OJ/4n/nw4R/5NIJJJaxP/E/8T/9jd7cz7xP/H/0yHifxKJRFKL+J/4
n/jf/mZvzif+J/5/OkT8TyKRSGqpnxHq54O9n1O6dv9mkkNaddU1h7Jbif0c
0srT3BzSfpmjcky7sMAhrezwEIeyO2d9HdIe/prrkKYW8b9YxP8kx9KD/BRs
3rwd27ebZpu3H8QtWg6MZIGI/4n/if8dwByA9Yn/if9//3IQ/j9XbZ/xSQ6n
vM3TNX+jpps3LtDPiGSBiP+J/4n/HcAcgPWJ/4n/f/+yM/8/PIvvGf6fk1xu
n/FJDqc7mXsRHh6JyEjTLDx8B66T/59kgYj/if+J/x3AHID1if+J/3//qsIm
u/r/L2AYw/8q7xT7jE8ikUisiP+J/4n/HcAcgPWJ/4n/f/di13NqH5xhpxP4
L+KmateT+olyAEgGVF1ZgZKSEpkV5ucjN/s4NodvxlXy/5MsEPE/8T/xvwOY
A7A+8T/x/+9b/4vEwLYa9l52+q79TuOXVE0MkPo8xoTvRua1G7hz5x7zZkAi
qXUX8aGTKP6fZHMR/xP/E/87gDkA6xP/E///7vTf/8WdWzdwMW0vfHtrmVs1
eQ/zJmBn3cvF6ik9tOejsQ9x+oG9T4rkCLpzcoVx+b+uq3Gr1t5nS3qSRfxP
/E/87wDmAKxP/E/8/3vTw6wgEWN3xNyfM+zP/mL97wPcuXEDN27ds/eZkBxC
tTgWPlHzN+selohK5t9ZbH2gjdn3UFt9C8fW+Wn+PWnVKRD+kyyRqfx/yO9T
5j7aGccKjtXZ9t75hejB3Hedh8zGLRvyf1X2As04/Reu098mZy1WTfoa7zHt
3nV+i7G2mLlkGW7UO/9fwYF53Zhr6IxVpy7VG/+fDPkIw9o0ZMZ9Cc5vvoi+
fT5E7IY+snbFW9tiRh8nzBjWUmbufd7Fzs1W5P/kH7FusjPavt0Yzhr7F1zH
d8bZ5HF19B2D6HFNmc/yCpZtdDWL/8unq+D9eQN4f/2czKZ83hAxU1+S8rm3
ChHtmd+O+vfT5E+MPQ/v7/+Ggjl/krO8vwobuqrwRZM/sm0bYNy3L+F8wJ/N
5P9AJM7tgLGjOsB7/DcS81Fv83NFqYH+5YeHohtz3i36/Ygia/N/XHcsc3mD
+U39TWsfvgW/mV1QoNQ2sQ+2TXFC2zdfYts2hfuUb3Ap0Qb8f3QMIlycNd9X
y2avMtYCXrNdkK/QNiOyC0Z81Yj5PTXRtO3/QyfExXrVG/9nxQVicPt3mPFb
MPcnJ3R38UBiVjrxvzX03we4cY25T1J8DemJ0EPEBIzRxPacqdRuuZe1QfM3
PG/fNbZNDZJDR2u2JZQ8stuZksRi3tP2rERQaBDCNp3Ek5KWYQr/Z28czvpR
2iO5Tv6PRWBb1u/yuReKbcT/VTc2wM9ZO07XuVGKbSpOzMaXvA9Ix9q441o9
8v+NQ9P4sUPSztcD//fG1mF/Uv7sjHmG9JS0zwt7S29btU0P62sd/k/uAze9
47yPI4n63wEur/iIbztv3Wiz+L9gjP7PqDZv1yZ821IPhuX1tX2zMfLmPCth
/3F6j/sCjvm9YAb/+2B2M0Pn2x35hvp+yrb7pJ+Bdqbzf8nWdmin75w+/Axn
Je17w/8NfW3b4LwV+b8k9nv931errsjh287AjrGN9V7XGZGTbcz/57Fr2kd6
x5974JQd+P8u4sP94R4QZTi3sPY+sg5vQ2hQEAICAhAUFIq1e5Jxveqx4edN
yTlsjwxHENMnICAIoeE/ISmz1LAf08yxSKQnTyz/u85HDvv396hgr+Zv2HPt
Wb7VvYzVmm1bcylozDHEfG9eYzTfieuMnaiy9+kYKeP4PwmHQrqKnk3t6/T/
H5/3idCe4X9b+P8r0hdipOh5qcz/mzCda9OiPw4ej8HdG7txZGkvvt+CA7H1
wv+/lexCT/WY79Uf/+euaM5/zhbdPsWxnX1RGNsZKwf9md3eFDG7B/Ltj7o3
0Gx3bvMBVvp/ipU+n/G2bPpnSNzZ3yr8f9ijMT/+shVDUJQyGmejBJ5sPqqP
ct/9PdBV3aaZZfyf1kPbv2WLFxE18FlE9WvAW8T3zyHZS+D0Kdzvp8mLiJ/8
V5TPUiHxe+F3N3/cK3zbI1257c8jYvRLKGXanh8jvD84d3zFdP5PH6fx36tU
/8Bk/0FYvXCgYHP7IWrVFJTr6XvU+3Xh75Dhf+v5//si8EPuszZGcOj3KEwc
jLPLP+O/w89de/DtT89qIryzhfbRtE1b+C6/rc+Mvlbi//HC99WsDeJiPVF2
ZioOzhY4O3DLDE3b/C1f8tuc+/TAiSRvlBybgCiXV9ntzog76m8z/i/Y48KP
P37lVpSWX0LppU2Y9C57/u3mobSe+T9vz1w2vniW3tzCxxVnMd9AXPI+RSap
Rdb2eXr7uC5KUHxmmjcWifSkqhYnI7XxP7tzf9Nuqr6MWerfu/vP/N8I8b+j
6SHiAzj+j8WTkpZdF/+XpAVjlLOub8ow/5cd9ZS2/87a/L8be+Z2kfnLlPi/
+KAru/8/2HfhsGjfQWzuq+3XVs+8gVX5/0E2Vg+Snq/t+b831nZjx/vgE1xM
FLN7D4S00e77bno3vv3KjtptE4O+t2H8/0gs+oJlxMmDJfvOzGJ59T9f4Ura
WFm/sG+l19Bc/l/9vrb/lGFN9MfkMFYwVuD5GK+/SfZtYI/Rrtvf+W1LnOTb
1Ha2nzBfoBgzZIDBS2O5d9XOuGgCuxdF95L+jXSwHv8XbmrFH9dv2SDJvmur
OK5vhiP7h6Issau25rkC55/2+Tt7XT4zag6gLg4XmP5N7EkSs7uPJiZLva/N
dDeN7399H6U5AbVNxeKv2L+N2eNtw//3TyO0Pftb8dkm2Xf//EL2M3yOI6V5
9cT/tbgYFyJi61nIUXyI3cUWD1eB2wOicPhEKnaEe0r6XtCBeS6GgbNVe5KR
emAbvETb/LZdsspYJNKTrNLkYPa37YFNqXmoqS1GhJv27yBsfx4qyy4gykv7
720XHtr7dEka/T75/4Rfc/5Z7jtvlCZ+3hD/PyjZgInss759549s4v+vurqM
j+dxHuKCeUP/qYf/D2LPGK0vr63vCoWcgM3IOL4F164etDn/X9oyVHst3v0O
X75bX/zfk2d8zxA5z5/yf1l7Tm3aIF+z7Tu4a67rS9iwWT0n0BeFcd+jeL/1
+T+M5f/Ok3+U7DsX2Ewv/5/m9r39Ftq+bRn/a33EDbBlWiNtjI//H1A+6xkZ
l+9szTLadwrvCd4qnPJogDxfIf5nOcv/XbpJ258faD7/nw9vo+nrNGq0xs9f
nj4XpelBhtk9052PQ2rX4S2r+/+vrfpAP7cnduN5P3jNjyiL+xZdVNp5gq3R
w6VtYzuw8wXMvh1DLeR/H+z84Vkt47uPVsgJmICTsZOQe2wm8+/pPOPPiJwu
zwkIcdJ+vq++R6EN+P/+pQi8r/nc3ygw/iXkpicgN+8Efq0P/391MWJk9QaV
+V/M8ZNWpUniXPPigvl9nhKWF3O8N5LEMctVOVjs5iqwvGhM88YikZ5wiXhf
/TdxndmUt2OaYv3Pc5X2PtmnUzVVlSgpLERhYQkqqtR3ptq6+b+2GmUl6j5a
0/arW9WVZXyfwpIKg7kFtbVcJGUt855Yojm/ymr90ZV18b865n+guy/O5qp5
fwMGG+T/I4hxZ+fOh4TgapqvbfhfHfPfuRNW7Fiv+ffZpV/o4f+9COusfcav
OLwbF3ZOxcS+n6N924/QvXMPpv9mk3J/zeX/qpxV7LNehS0XTmHboPrj/2Us
/wdHyeP2z85hfa8ftEauetvuNiynMdb2DbTk/j9jQ8e0Q9Z+42J/jIn/SfFo
xB77baxdNwKlaWNweeM36K9Sjv8pje7In8/a7cPx07cW8D/D7V25z+bcUJMj
yn3OEd++hEuzn5P58yMmNMLZESqM++AZtHvzWXRt8WdEuPxNxvFpfPxPQ6wf
9zeUM9vyxqswgHtfNSP+J3HKm/z59e/wiuDP/7Q1ftruq9AnEDtHaeO4VP1G
4lJsX+vz/5r32d9JW4Vc357wYM9x3qrBQts3W+nkBEjzAtRtLeN/genDt0/T
5PWO6/oO2rV6HV2++hjhkRMlbSPYtou2e8uOlbWUPedWPRVzhi3l/9vH/LTH
H7AERTfiETVzGHp0+wxftu+EkTMX4oKFfn9j+b88Y6Oe2Bol/q9BctBoA/FB
97GDjYHV1CZktz4qjRf5+K/IzuHBRYHzl6XctmgsEul3oarriIn0g6t/gpYl
a29jR5D0HX3T8dt1HYVkbTHfi3T+UWuBkev4OEU5/9fg4oE18FC4z/qHxaBY
b5zlBfwU5K54b96dXiprX8DGbgZuP4b4cOlvJWz/DeWPUwf/S3z7BVEG+f9q
9DA+Pii58BjuHfWwCf/r2ung9nr5f1Vn3dglqTlNCsJtW/L/gxMIYP39XYOZ
v+WqHKzuXv/+f6c+X+ns6yuKDWqt8f8XRLUweK1UqvdwMs468f/laUOx6D/6
xvkcGSli3/+P8Hqbmy8YxPx7FD9/YA7/F403/JtQz3+cDWgo8efrs5btX0Hp
HOm8wZI39LVvhPOznzeR/2dhcQfD5+AR5iXpc2lNe/77Opi+EOXRXW3H/6rG
2LBV6rcvEcUGSfi/bXuFd4UBWNbWevzPMb3ev3eXwSjReVdo8cNg2TyCEBvU
0yb+/9un/Or4DbbA5qxzNuf/POb9kXtGqOsN5mZs1c//j6/zfkmeS/Q8g9QW
na+NXy49vFS2TaJHl4VnJ3dcM8cikX7Pqqoo06wBbMinS7KRaq6L5ir1m5T/
7+Ng6GjDfVzn41yltJbBAzbn25D5bTsv6SO+H+raxsxfFT+SSfxfqJ//H+SF
aWpwqp9dPrti2TyAyY7F/217YvuBn3DpxEqEDPknv91nx06b8X/qIjYeucVM
5LN5ABH1xv+iGB/Ghnp8jVy1D39/D+xy/4dwXVj+53J/1ebp/w1y4/qhOLYr
to4TrlWbMd9Zhf+Ltn/L+/rl9ja2bh/Dt90/mf0Mb32B85qYICF/wBz+53J/
1eY9qBEK/P+Icl8VdnYVtnPxPhL+f/Mv2DLuBZz3UGF+K9ExXF6V1AoaoPdz
NcSOyS+Zxv/p44RaNh064+DBWSjPDMIl5l17BH/cZohLW6htz7wbdWO3e63x
Y/MAulmd/9UxPnz9pjedsGvTQM32vE0d+NgfjumL1nPvA61wqT75v1UrbN4y
DlmxIzG/z1/47TMip0pjfBgb5jMM+WeYY5yZipiZ74qOUT/8PzI4EpkXk3Fi
uzc/V6hynoyrNuZ/zTPDPQIpuXc0/35UsEs//z9i8xDVz57dcj++Wr/x/YXc
xAJRTrFyTgFX81D77KyyYCwS6UlXbXUlysrKjDDDsSAka6oWWeumC4zvvwVX
K9VxjDUozYrW+vY9PGT8X3ogWML5Kfl3NLXO1Os4HIz0FB1P5ON4LH3PCNx0
EhWa971alGcnSHKm9on8Hrr8H7b9IFIPbELAjCgU63ldtA7/xyGS5eyufiv5
7ffS2Dzg7/xQYW/+b9EfJ68flu5j839Vbabhpg34/9bxOezz/TskXL/Obr+C
DSz/LzuVZ3P+V8f0z3izDn93m880/F+4uzOOhH2J2KiesuNED/sjy3of6+QR
m8H/Kf0ERnz7P4iNHqXZfi26Jzz4OYG3cShxHK6sa83/e1fcePYYYxDJ8n/I
RuPZn+P/Um/mHWDMHxA/Xl6LM/ZrdvwmjZAn5v8mL+JYwF8kbZd/wPHvyyia
80f8MkslMLm6VtBU7fGLpqowhf8OGiJZqQaoXgafg/OxHohf44aLmTr7Uobw
7wYBGwKYbf5Y3kH77y5TxvPtymN7su8PgwyuE2AS/zN2PvSdOnzYuv5/pVgh
G/F/szZIPeEn3ce93/FMPx7eBuuqMvaV7fl//NoDOvvm8fuCUzNtH/8v0m8G
+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
K/D/zcSh/GcbNtMDeedX4MaJmVgwsBG7/UucurRK0/ba7t582xYDh+LUiQjc
PBuI1a7cd/kfxJ+JtAn/V5fuxZYVQfhpTYjEtmwKEPF/a8TnXqxX/s/bM5fN
L5ylt7bI44qzmG8gL3GfIpPUImv7PL19XBclKM6JmzcWifTkqjQ5mP19e2BT
ah5qaosR4aZdByxsfx4qyy4gykv7720XHtr7dEkKqqmqRElhIQoLS1BRpXak
1NbN/7XVqFDXd5X0q3Mk5vcg9BG61KK2tu7sEFP5/+axGeyz6XPEF+SJ9l3C
zywPtF0Ya1v+v52ImKAeMl+ZEv8fDWip3T80WBbrE+P2mmafk3sYKo2MAzLp
c9w/jdD22nNr57NNsu/++YX8dTxSmmf2daqbxedhdXftOXisDDDYNnHKq9pz
6j9CFuuza+jz2ms12g3lRvJ/cdQraMt+N2EhH0k4vDjiJfbzN8TGiA9xY2NT
DFHifPV7wXj2O276Oj8HkB/CzVP8W2dewJL4/zlY3Y29Vqv8jGb3ouhe0t9i
B/P4/9YE7hiNkDO7gUH/fbGrir9+R/1ekOwbwZ7HgjHyOYDicTo+Zicz+T/T
C+3ZYyyOWynZl+T5T8325u5ewlzBAc4/0BeXbRj/f9RX+zet+nQoinJXCfvO
TGbPtwV2pGp9/xu495dPByNP3DY3FEs6avd1nj+rXuP/bx72FHz/+0/UY/x/
LS7GhYjYehZyFB9Sd7FFtCapa0AUDp9IxY5wT0nfCzowz8Uwc7ZqTzJSD2yD
l2ib37ZLVhmLRHqiJeJ99e/7OrMpb8c0xfqf5yrtfbIkiaqu69yftBYYuY73
Y8j5/z5O7lmm6N+YER6D63rub0Untkrun9w747YTWQwfj9HJGVGWafx/CXvH
a+fL287ZJdtfXXQYmVnJKCq9ZFP+f3A9Cl+yz0jnYcy1HdZUmf9vH2aeH53w
HrNvxKqdsuMkuLHP/zbGxwCZ8hnuX4rQ5EeoVN8oMP4l5KYnIDfvBH61qf9/
BqawfvYtidr4/tKMQJRn6babg/Wj39P4boct9JIdJ3Yo59s2LgZIy+gv4jvn
Bpqxj6z/QMr/US/xnDM78EMUr/0H78/fuFLnXYF/j2DfFZhtp6Zq+zr1ctL4
+a+tb4Gr6y3l/+nCtTqo/ncgStPnojzTQJ9Md4xjP0e7Dm9Z5P/PHqw9Tsv2
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
Yyq2xz/Kb49as8pVvjEOf+W23Tt9NurqmbJJWDfrTq7sz1FQu3n48T8V05Ee
OxGp8U9ILP3jR0Tv0y+QVxLjLP8mlv7Bve232JT9Frq+mItTnz2DN/jtf8Lh
L2KGrf+bU37DX/+2v47HgdwX0LHjKayedr3w+7e97Cq/63G87K7rw2Pxxbbn
nZr2cSwe767Tbdhb8tLw43/Kn0faokeQ+sFjEktb+qDoXv0MuYXu8s9gErd9
/JSJOLxrNr4sfwWpL/+EK/tD5JZoq//PH0nE6+J324f+v9y8ivV9j7p9ePp/
Pq/Hv4vyqO/COt/lv3fXwzSd0/VzR7Fjbsy2B+6+ESf030G/c9vGse6y16Fk
jmsc4MTUUVgz6T+w8YnrBHv6P/Hp74TzPnD/TbAa/i0o/X/+yCeSeyXX/3uQ
9ZJ7/9+Qd6AY/d27UOd87919gldXfx4y/d+c/yFbPipqCRpsymWG+o5gKVtG
2QqbLisc5cDRnDjVY3QJxYptcHDXIgiC8E4b961j9L/Kp+5rTzD6/+zRDMy4
w9M3NZL6Pw/5H06U+caU9H/XTh23//cobCgX7duJzMmcTlIZN9BE/9tOYLtp
qryuI6T/yxf8wnXNafNksT55029wad1Z76HP+W9L4Stc/f6IvaeyRWWXY7q7
r5SbHrL4/9YNwtjD4rV61/Y9z+E+blvKZx7HlDzBlf8RckqGq/+nIu2v3PO5
cxxOSPZNxnJO1z8a8zd2W9XCH/M6f/8ukc7fNYnvF7xjUo4Z0iL+v2WdMIay
KOUN0XjBeG77LSireFt0zPN4hSsfJxorGJ7+34GCuMfl77ZX/V+K1MnS8sHo
/7Ovuo//tlO7f1+ixbdwvvUHHvkx++8+vux3cHDe/5OUdffJTS/9ULLd0xJ/
rTyu4L/+L0GB8a+ye+Wp/y+fWc2PVa7cWybZty/2Nnb7rTHJIdD/DhzfsVyk
rZfglGKjeAFZep2g22PXoLy6ElvN8yXHNniI+YtHN0p0e0r+HlSWZsMg2rYo
+4Qm1yIIgvAF6f/g9P9B4++59ut2LE6Yx8bejqT+t7as5NvIMS9OR9xL/6Oi
/3cif+YPXRr/vVUKcwIyUVuVhTMtO0On/3u38TEKY16fD+OMX42g/k9Hxqw/
sX7Dl1eskO0vnM7pkD9FsTFAlpKXVfR/It506//tIdL/B17Cs9w1Rr/6Ar+9
67PHMfEPN7I+/qoDBukxe57mdVR8pn8xQOoa/Dle4yvp9kNLfuS61vj70eb8
d9nc77jqOm2SrOz2V6/j9j0GSyj0f8VU4V69/Jw0XihznIr+fxFvuPX/Bm30
/+W2VcLf4UszEf/ST3zq/8b13DMbcz/uHxO8/i/kxn4eeOhHinMCjkVdh665
rhidvtfU9f8ct/6frq7/aycK4wTbZ98Y1Pxfsa4f85KOv1dy/38JqrbEYXn8
+zjZLY3zqTL+0fXM56xAv5b639aFAtMcD9+6sv4X6/g5KQckcbPNO5bx++ZL
tLxYxy9AmWVQ2GU9hcQonaDlRdcM7loEQRC+Eet/9ttit6KnowMdTrP09MHu
NSjRicOGPouFLd/RYUGf1UvApMPB/I87rB8W9hr9srhHu7UfPdw5mf02X3Vw
Yuvv4ergNEtfQHMZgtH/TMz/1HdWoL7bqfdte/D8SOt/JuZ/wsNYtXUD++8j
K+5T0f/bkTTB1eauKs9Dw2f/wFuTx+L+8f+Lv054wnl8ZkBzf4PS/0zM/xOT
kVpcyf772JonRtT/r25rseIR170ZZ1jq2nZKiP+Z9PY/cKoxy7ktBdkL7hHi
X2pzQqL/d8xxz1H4Lco8db7aPAJ+vGA0Siv8O8ab/l/J6f9l616Q7a+L4+Jn
7rwXzaKycz5+Vlb2pOkWfhyhOQT6v3D2/+H731KNz/QNhPifCTOfQEP5HOe2
15E5mxsHYuN/3tZE/7Mx/xMexerPs9h/1618wKv+v3gkjo9h2fRFPjZPDl7/
f8r549e8diMbszPn9m/gwZ9dhydv+U+smSodD7gyT4j/eeK+7+PM3OvYbbkP
ieN/vq+s//XCHIOpjyn0Nfz1/zMx/xOZe7WF/Xdd0gMq+l/JKtCYK8T/PLs6
WzP//7naDJXYGiX9b8ce4wwv8UGXsNUw07VftxZnua2D3UUiH/9pWR0uHxd0
/sqK3mFdiyAIwh94/b84CzXV2dDLvoF6rC9rUzjyEg7mr1T8bsaYC9DuOR45
eNIVw6hLRGV1nvQ6umS0OwW7vacOa2KjFc8Zv34P+hX6AUN9DUg3Kh2zBHk1
3X7dg2D0v9S/XTTi+t/TDi27X1X/p0zwjFOS2ug5RvSO1Pxfp9UmR4b+L40V
Yt0TRT791rznVe/V3PRVmsz/ldmup/n5vbqPZ/l5zHO8zh31wJNorRlu/I/g
/x89+RGPfdNEsUH3ok1UVqmvcGbdb7mxgvHsWIGm+r9kEm5336ulyvl8Tq1T
n18dvWJGaOb/Ou3Q8ge96P9cj/nBZUidELz+X/tr73/Xd4y7SZKjp+sl9bLz
p6j7/kv/5C53A07M/45m+T8PJTzoh/7fhXTdHdL63roAZwO4DoM3/d+c8x7f
bkQn7UJT7RZ1/T/UjmTOV69bXKw4Zt7Gzx+IQm7rFXZbd/kK2TbF9lF83iCv
RRAE4Q/i74c3y6g/Lxzk6EK6KCZR2Ragokc0xin6vsksejP6Lx/BEh910MXv
knwDL7dt91nvRdnHfN6DYev/C1eR/h//JHJK03GiejWWv/g//PaFWz+7pvR/
Rdz9/G+/bVYsG/vvjhfK5X39cptoeBddIdD/O+f9F3eNP+GwPzp+z1Q+lj2Q
2H/v+l8U4+O0F+dOQPMuJp7/GeTO/YlwH1j9L8wVmKMQK8Trf7astvq/dK67
jnfj0EG9Qpko5PC+frlNmD0Z7WHQ//vi73bVYfRbON2zn50HYNZK///s/yL3
1etxOsrZlxXN0108VfDXFz6krv+feOgH6DN8U9H37x43mPOMuu8/lPo/daJn
ff+A1buLNdP/bBsYnYyKJlcbN9j2ubr+d7Zj7nZqUZ7cj89whT8+Clu4ublt
ojnFynMKBlAQO5Mfi7cO41oEQRD+4Kn/k/Jr2Rgeu+0s9qQtErS3KD/Q0cx3
RL77RFR1XGRjeOz97dIYSqeuv+C+kIf+18Uko7SyElmmGKRUfIW2gnf5fevL
j8PKBh450G85jGRRX6Oih8t3NtQuipmMQvymg+izuY4511gsmVNV6MMvcs3o
/9uexcH2cuk+9zzEcfPw1TWh/zdiu0Gk76fpJbk/61eN5/e9sewDdJ3OxsXT
6ShfKcxbnBi3TFv9/8XrfFz65NgZPst3FU7mY98ZS8n2P/enL/3fU/4kYm72
7ld2+fSF+J+4FC/6X2v//wEhhn+ySh7Pw0tv5uuqWzQV7QeY46JQ+sGd/PbH
DP73N7TQ/5bd7hzB96Pw+AFu+15s4P42V+7dE7z+v+m7qJ13vUSLrx3j7he4
dP2Jp4XnN2fSjeib/++4wuQKEuUEfWKCXN8Lx10vu8bI6P8D6O/chb7uCliO
JGM+n1vqAew/418OUAZv+t+TK170/9D5A/zY9XyFOB7p8W5N7kBt6jv8OZVz
Cg2gSKT/bUFfiyAIwj/E+n95yZceey/wfn7dYm5+sMgnwWj/Ftm3bAA7+ZhF
ZtzgX67NYv3PHOcRoM/XQ7cULR5xPu7YSH3UApR0uLT8+YOrRD5++dynoXP7
+G/nzIQDXnMru/W/2L6O+n/0O0my4866cwM59b+/64Bdtfr/dBKWiXTQbbPm
efjy0/n5ABMNH8rHDNz+W26usFb6vz3bncfyF8jbtcBr2ca194m0+C+Q9tk/
Aosz8qn/GX//01g97X9E1xmFCZPvQ7Hp97xPv1kU/xP3qYL+d+cR1Tj+X5jb
+zOVGP4omO53+/mnyfaXG37qOv6uR9EyYvq/FGZet/4aSSvewfK4d5C0/DU+
nv1x3Zvstr1HywPW/3fcL9ftfL4fp/4/K5or8MRD8jifg4+Ky0pz+gvX8J4b
KJT6X2zMmmHuOcQf794p2+9tLNhfvOl/sd5eV/NPH8e7Nbmg7aOiN6BX8Si5
/g/uWgRBEP4hGZdUmDTLx0YyMfoO6fdG3l9wMSSa68TnJRDpf6X5T2L/f1R0
IvIqj8LSZ1XR7Q7sN7/FldfjsGLuM+ncqC4vHQC3/g9ag0a0/s9Dklt7vGWW
HddXOffa0P+nPsG7owU9+0qcURTzI+j/VZz+N+TIc/z07J7hOv5hnV8xQP7q
8fwoVw5SJoa/3UvsT03iH0Wa/C4UBhDzE5D+58xS8hyat01BW8nzrtggd77P
yY/AUj4NGdzY0WOzn5IdWzb7/7L7xuoe9/t6/mjxvJncOgT3T1KJ4YmCmdP/
81PkOX6+zH6AO/5Rv2OAtNX/3m1hUan/839/6h67+7FMi/fPkOp/t45f/KK8
r8CXvcUjBmiOMO83+bWbRkz/X+7Mx+6MWKSsXo0+2XF7+HggJf0fcv+/yK+U
oaK3lfz/7vZKF/OZyjo7Cv7/oK5FEAThH2K/u1JcYpvHWiji743qfKPBFrnW
F+v/vDOyQ4Z6DijMPXaa3oCkzCLUdZwX9QWEWEn/TH0dF4avt/4vw673/uBq
3x+Ta3z3caMeW/A1jv/5FB+OFTTW+5lqc3jXYgVX7hmFGJ+mDZM4//90Df3/
c/i1vXSJ6vN+T60dK+jEBx5DnZ9rfQUe/+/KzTpuuqduf5qPC3rx3cnstrol
nC/95ns8fPyTEX+nq+zYt+R9g+D1/0wY7+Lu1XLleb9MGRNXZrJCjE/DCm5c
4q6/jKD/vwxV6xYgacVCpIgsbeUbgv8/Wu/cFosDx/f5rf/LHxJ0u6ffvtbt
07/lJqemF/oKSvl7zjzn7itI1/Q9y88X9j7vV2v937PvTX6spLC5Wto3OLPa
tW6a05YV7wpr/E9cobwdkx6vEP+jMPbtbtO8xf/4fy2CIAj/EPL/KOf/95y3
NNi5jf/evFemPJKp6OsXbdvSpNxvsHZUIdmgPq9Yt/gznGW/naLxVL9Mf03r
//6ad3nt+OzHSXyun/adc4V8ep9s9PtaV5v+r1n+B/73jzbE4lTtKhzftwJ1
+1by1li7gS1bzucE+jmSt6fw5+jYPZfPC+peK0wT/V/xAp/DZ3n2POUyonUB
mLm+efmz0VgYhZr8mSKLQrsG6/+eXHkb//u3bBHyAmW/+j1++64d3Pq/uQ/w
eXj+PvcJLs//NBTPdccO/Tc+z/VP+/ul/0Xr+i7PnK1aTpgf/EMkbZjJb2/J
nsgfP/rlZ/DVCMb/K9vw4v+ts4Q+7dTHhFw/Xa+O4tYjcW5/3DU2UPmwu+x1
WDNdyN9/doYwv/eOcT+UrOl7UNKHUJgbHDL/fzqmcXUa8+IHaOfWALjcmY2E
Z4T4/z1hiP/3NY7NFgly/m+RwvzfYK5FEAThD77W//L8bmnh//f1nbL1WVBf
WYg0c7xsTGD+JuZ8Iv+/binqLD3sWgIdErPA0tODHqdZnPu9rW02bP3fW8S1
oROxLwL1P7MGGD8GwNiYezFl8u+Ef49+A80BXOuq0v+nhXV7vdotr7l8+qcS
+HW+GPvN2Pvw3CNjRGXvx77GbJ/a33/9P5XTpKNRppK/vzr2537Fjiwe9vpf
L0rW7mVswsM3417Rv2cumSwpv23md4U63PkrPHOnUHas7gm/tb9/+v/v3L26
BWXlXvL3VzzPzxFmNeRdY/Ds/f8tule3ez9+xPT/8PL/SMYAGLvpO5h2+zdE
//4+zhj+w1V2nrDOF6v1f+Yse8s3Rffkehyc+13pvIC/uPY98bA8vijU8f+N
aX8T1e0PmPrSo7yvgrF/ZOT7fR0GzfS/TZj/Nn+9cm458dw0d+4JIcfoAhzu
VzrqLNa459rFc7k+g7wWQRCEPwSs/5s389+buELl+P/BzmK+jH/634Ge1jpU
luahsMojZ7/Dhs7qLXw/wFVPO/aYZvDf0zqVtc97mg6jvLIajU0dXtcQG7b+
v7AXM9h26dmw+f+PrHrU1ZZ+rKT/XX2AQ+tekLShjN334hzUtpQHdK3h/q5j
G55zaaSkEdD/jXGY4o/+f1ovxPSf+gSrpv+vrMy906bjcL1/2t9f/X+2xJ33
/7fq+j/+Vr/0/0q18YMA4/87tj6CmPHf8Tj/z7Hs478plJ+K4vm/kNVFN3eC
33l//NX/XxU+zo03+KHfK16EecpPZfUa//SfUbXLf+0fqP6vWz3B9Xe4zB/9
X4asl1z9kpW7dgWl/9lYn6cFf7/bHrjzBhyb65Gvx9kHWHu3/L1hy+rluX0K
ubz/SnmBtND/dSkTXfdqufL838bcf/BzfXm7bQLWF28P6DoMmul/p07nc19H
bxDy24nasoP83DRhTt356rV8m7ju8L/kFz0vxPoLuT6DuxZBEIQ/BKr/ceWY
KP+P0pyBARQZhdgcXut71f+9WOPO5albq5Af4aywDgpXz3Oi9VTmpHwhnycs
ip1kYi5DOv83RBaIJvfbvixEc00WTtTk4ExLcVDnCPd9CUj/D8PON6ai6YAZ
jQdWo6U+I+Djg43PD7X5q8fbcv+OI1uexrGtz3GxPV7mCu94hi17ZOvf0VwS
mO4PZP5voPZV+Qw05E9HXf7rOLVLPWZIK/0/Eqaov+ePwplZ38DpWd9C19xv
edfpc0Vl9df5pe1Dof/9sz1ob/gcJ2s/x+ljpegP4hwM2ul/ac48Pr+dqN1x
556WrFcjXt8r5jOZlq9NE3Jqb+8Q/PhBXYsgCMIPAtb/To575v9vdc3NtfW3
YKtH/n9ey/uI/zkuWoORWT+4lcv9Y7d2YU9mnCj+x51PqEWynkBMyk50We1w
OOzoa62QrA2glqfIzTWl/zWwcN+XkdL/w7Vw6/zh6v+RtlDofy0s3HrfL/0f
ARYa/T98Y9BS/0t8S1F65NV3s22V1XJA0iZlNwxIDqtNfYvfF51QgC7bEOC4
hNocoX0Tr7MznGsRBEH4IhD9z8+hdZxFlsHX/NsFqOobEk4kWjdAMf7/4iHJ
ml2KpluKBtHH8WJjro86RHnJtyxA+p/0P+n/8Fu4dT7pf9L/DGL9r5Y3om3n
Mq/tzsyEvZCF49haJH4pJSuzDGpzLYIgCB+0Fbnz/xQr6/8id37QZLRLPjID
qM1PUfweLU4tQEv/kPREIv+/2rxhe98pdj1gxXMmbEWLQpy/va8BWUalY/RI
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
E/e265H/yg24NPff0D19FKJ/6t5+A5rmfoct2/SkqF/17I1s2cbJwrZpE36s
if5vzv+QLR8VtQQNKk6lob4jWMqWUbbCpssKRzlwNCdO9RhdQrFiGxbctQiC
IIbHlebN/HdmSwR+Z9q4bzWj/0Ph/y83/MzVvkybK4v1yZt+A7vvtlkLcb4t
HRnTuLbonlfRIimbghWPuPZNWLZs+Pq/bj7vy08s/FSyr+ydn7Dbb42O4be1
50/m2sgx2HZwnaj8amRwbeq495YMW/93ZPyeb4sXrXhWsu9Mym3cvl9hb/Hz
fH8he/ZPZL68UOh/S3UiXh/j6TeU6/99sbe79r20TBbrUxD1X+y+0dFJ6Pcj
Dsh//W/Cp09I6ybR/4fm8M87tThJemzFa9wxP8HWCm38/90HV+D12z3vlbKm
D6Ts8PR/DvI/eET2rijp/7OlUdz+8ahsKxHtW833HT7e/vmw9f+l4/F4gDvf
ur350n21C7g63Izc2m241P4pf21PnX8smesX3Pq6f2MAPnT4noWcv+GFhbJY
n4LXXeMCo2d/gH9y+77cuwiv3eb5DIPU/yrW+7zI9z+V8+nPHoUHuW0Z02+S
HhPlLn8ddkR9n437mami85smcWV/8H3FMQAG//S/A8d3LBdp6yU4pdioXECW
Xifo9tg1KK+uxFbzfMmxDR5i/uLRjRLdnpK/B5Wl2TCIti3KPqHJtQiCIIbL
lbbPRfr/SrirIyO0+n8tMmbdw47vv/yJSba/cLpb7zMxQOt4jb9gU6p8TsCq
ca6yD89C17D9/ytQsT4KH703Ew0npfsq3hvtat+j/oE+TuPnvXI9u238O4sU
5gQsxaHdH+F0Xcqw9f+ZlDtcv/Hmu3HMM85n50Tex79srXuewIP8uMBtj9+J
xY9/K2T6vyp2DKcnbsF7xplczIaH/u8td7a1D7P7Xk35THaOYrcmGedfDJC/
+v/IyvGc/rsT9yv4/78qfhWP3/NfrI//i6MePv5DOuU+wzD0f9X7wr1aZIzi
7pWypg+k7HD0v7V5Oa+1x7zwEuJe/G91/V+mpv/X4i23/i8Zvv7v3fcOHh/3
M9bHX9Na6NE3WCT4+otzcKkpEX919weO7lDpR7j6CsPT/1uQOfs+9jm8kpQi
21/0OvcOj32LjwHav/Bmvq/y7gfTuGeoof7Xj8Lz3L244x4hnueS8/v51E+/
wfr4G/XXS4+ZLfL1v/RDdlzhKXd/YNaNsrIPivsKweh/WxcKTHM8fOvK+l+s
4+ekHIA4RKh5xzJ+33yJlhfr+AUoswwKu6ynkBilE7S86JrBXYsgCGL4XD4u
+P8zGi9KdzoczP9c/9fWD0tHByw9/d7jGAPBYUdfjwUdzvN2dFjQb5Of2Zf+
d7B19F4j3/N/lUzw6Y+LiWP7Cqu4fycWyef6Hl/7Z1FfIRT5f1ajLuMZPv7n
GVM8tz0JKx52bUsuXOEs8xLefPJO3HfPaEx6+EF8unFpgNfxov/Xcvp//DiF
ub6PQ8/VLS5lihDzP/7nWJHwBPvvqnduCJn+Z2L+p+hjceS0U7f3bsY0Ff+/
euzQLpgnuuo/fvEGzeJ/eve8xj+z9F1LsfGJwLT8lzlPcjrpf7GrdpUm+p+J
45/y9vuoa2E0fA53r5Q1fSBlh6X/mZj/xx7Cqpy1rvj+T8ap6n9r2yd8/M/j
8xahubnQuW0ztr57H4T4n5Jh639v9tX26dy1xqGsaQe+2s310259GcdlPn5h
XgDTVwhd/p9MrHyUe4cXJkpi/p+brUdNI3PuJEzVWP/vvU+I8Tms/65fOXsu
uMdSR30HVXNuwIVX3D7+76F13n/KyrvnBbB9hQD1/7naDJXYGiX9b8ce4wwv
8UGXsNUw07VftxZnua2D3UUiH/9pWR0uHxd0/sqK3mFdiyAIYngMoMg4U/G7
mMeMAwyedMUk6hJRWZ0HvbiMLhmnW4ql5T0Y7BT257Z67HdcwP6cJOk5OVuc
WoQu0XdQVf9LfCpRiCv5UvWXBqP/S91xIoze37aW1f/u/sBt0+d7lN8oig2a
oYH/X2xJWPfKzXxdWPv1q/hStH/Vw55j+1IbHaXHV1rq/1Hfx8bNz0v2WUSx
Qbz+97AK/fdDpv/Fdrk9LWD9v9v4J77+K8vKNNL/cVjI+fsnLFzo/Pcn+PQv
Aej/qjmuOQOM/eUVtJ3SMv7fZQMdG/3W9IGUHc78X8YOfayu/xlrL3xN9X2f
m5mh2fxfxbigo/Gcr99pj85Fp1Pv8/rf+e9umf7PQcpjodf/Oz/4neBTL9qi
WObSqeXa6v9Zwvze6Kd+5F/OzlluX7/TfnUTeud9S9D/zn9fmPfvsmPW/zJ4
/d+c8x7fTkQn7UJT7RZ1/T/UjmSuXdEtLlb0ObXx8weEtq27fIV6e8c2iCf5
GH/+vEFeiyAIYngMoMCgrP8zmHkAou+VzKI3o7st1+u8AWlckXj/BWyNVb6u
0L9Yiy7Opa+o/20nJdo/xmPc1JNA9X9F3L18O3rbrEU47xnjw4y9x72H9mbn
9uYUbI+/T9AfIdD/cn0/Bsn5K5T33/MQNjvvWePud/HxFCFHyIKNicOf/7tz
IqLc17n5Vnye4ZoD0Jxxn2R+b9j1/5eB6f8q0Zzh0dGr/Yr990f/7154i+u8
t0zGCVa7m/CJv/r/0Nt4lb+n/sf+B6z/LRv81/8BlA2t/v8c+e/e5/E3Idik
d434KkT6/9Lxj0Xzk4V4nt59b3PbXkZbGPT/ftHc3tGzjXzsv0z/t2ir/6se
ct+LG9A07zu+tf9sIc5fHM/DxAq5fQvd867TVP+zbUh0MiqazrP/HuTbJgX9
72z3lrj9+HlyP75a29YmmlOsPKfA2d5y7R6fyyLIaxEEQQwXh92O7oPr+O/L
6upO2KxW2Bnt7aH/dTHJKK2sRJYpBikVX/n8Lqntbyv6UKTzE1HVcZGNJ7L1
tyBL1C9YXfVPV3lP/e+h/eev/8Kr9mfwX/+nY3vMHwUtMW2ORyxPIt5Vy+/n
toe11v9r0deQhLMnU9C+dx7+weeDuQv76tZJ9f8tj+FAwzpp38GdU+OPr4jG
DILN/zMVxxJ+6f33X036v3cfimJFeSRfivc796cv/X8m1z0n+39RUOWO20nC
Ok7/m7YlqR771Z438ZzofqZu8z/357Wg/xvWCFr3zUQTvupg4oc+x95P/85v
n/iR8rjBcPR/7xcfctrZZet2CVpe8P/PGWH//1bsWDheeIdfmK+a+1Nz/T93
FKK5606b4Nv3f2mmME+AsYxXfiDEA/H+/x9o7v9Xb5vkWn3o/AF+XHq+QhyP
ctvmQG3qO17ieBgGnN+amZK2LLhrEQRBaMOg6PsiieMR63+nTvfMkxyU/h9q
l8yDqvPMaXDlGJ8rwf2N5PV//C7Y7MJ4KRsrtOmIX3MR3PpfbDI93vwJlj0l
tE23zZqrrOOZeJxZQqwIq1Gmv4HyzFd4/39o4v85O6jnc8W4cnoK+v/W6IWy
8l35f+f1v7/rgPnS48eS78YzN4s1PxPj/xiWP/7Nq0f/f5WHhGeE3zBa/zHO
BqD9vet/Ez7h+2k/QeLSKVi6cCoS35/EzwWY+PLf2W27PNb2Opn1lOi+jkZ6
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
     "], {{0, 612}, {
     768, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{318.92578125, Automatic},
   ImageSizeRaw->{768, 612},
   PlotRange->{{0, 768}, {0, 612}}]], "Input",ImageCache->GraphicsData[
  "CompressedBitmap", "\<\
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
NWxZYStL3sauKH9tLZfG3W2RpbFZ0HqSTXRwd1WsjNoqKqMKtTVV7Hqz7EOW
xH29vo59nc7sC7XSYuVpyiyJPbVGmdVjq/wx9Vyedd+tq62latZyd1vZmepZ
XyuvZ30td/eELK1uTdq/ydJYZWTpXKHytPrqCjrKWVp1OVWjmq3qNlSXs1vu
AxXZubaqAv2kJVh3/mV9387PTSE8wAI1uY7UI7V5TnRuLHJBfKgpMmIsSQQ5
b+GSqZRce9Rk27CDMknPdTk2uO+tg7I0S9Rm20iTVehsi8qYqygPPUGZykNP
0bni/ikUBZ2Cv/U/2bU0WYXOJ6l8N9RXJrAhKY+lc0NFHPE7HOFBTmisjNvC
JVNjyqKoZEtUZ5pSpupMM1bjbDNkRukjLkgH9Tnm0mQVloVKdUBDVQJ1T0NV
PGVtqU1C5H1XFGSFoqkmcTOXrMKyUPkRpGYCWE8WB7K0kkCE+lmgusCfDVlx
4FbUFfux+pX4oSLXC9Gh1mT+/bawZPqsyId9VuyLsmwPxN63pgJ8N8uS6+gr
9RnWaL31NFqv/e/NaL3+G0puv/6/kXf1b8i88iI6r8uSVdB29VeoNT2ItIwc
pb+uH6o5CR+J4eaY7g6g7093BbKJif5glGfao6nYFaKeoC1csgqmO30x1ebB
DsokPc90eCI7xhTD9a6YbveQJpPybffERPF1jKYfpUyjGcfoPJZ5DP2px5Hk
cYZdS5NV6PwVlU9abaKCMonGSugsHi/FaG8uxY6BpBpK5cmisVIIRwvoGa4Q
tNhvppMDq3SbI1oKLFCWagJRh5M0WQWCZjuqsh/E/AoaAjG/nLLOT1chPzsU
vW0ZmBNUbuaSVVgWiEZzIeQlUlYhL4lF4EMpyEx0wWRvPI2WNG1mMJ6OOHZw
d3FUpJAXj7GuKBRnutN34rew5K2YGYhhnw3GYqQtHKXZ9BkvdrMseYa+Imp0
x4LGL7CoyuYSbiqxPQ83ldB1/f9C87XfADdlyWT3rilB6LgHOYUlGw1eQrgF
Jjv8KftkBxtCQWcgBuu9MdzkC0FHwBYuWQWT7T7gt7izg8k/Oqugt9IZ401u
3N1mWRq/1ROjhdcxlPYV5RtKP852z6QdR1vcCe5usyxtKO1rKjkU06NllG96
uIg9g1dAsjoTM8PFbFgojZ2LMTWUR6W7YKLJfgud2OAM1dqhv8oW/GY2gtK0
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
mVa+sOpefj7EEjbRt7WY7vAkletyH0u5xGa2zRnjHVEH9lLchhz1P2JdnS3c
Wleuq5h3fACj2SzN91jGG1TG9gCbqNLmFd7HszoRybc48Tf8ZgfiWS8H4niP
YoU1ePsWeKWz1XN8Uad8kWadPAfTWA7rpTydEYkOngOMr5mTL/piPWIZs1gS
qnv5mXo510nfNmC63Z215D5FeqlpsmPHOyLv2surjxL98V5q8F6qs17+AqNZ
bFc06h/rZdpril66qQjVThGckfcyjvcy9r/tZa0y0Q/rzf/7XmopetnaUI2u
EYlCif//1POo225Iq2q/a8/VWM9J2GuoHD5gDFTZGLDcfq+rKT8dOmBcjgoN
aXOhxjjzK9UDxkqeVO6QPJ0kz8bCFtfGHj1gCPkaVFW2WpVhgp38QNTOO8f2
qDC2LDe6PAmQitoB432UnVWZZjh8wMgfEUae1aJYy6p2wGwcUiZ+6+TJ33bK
7pihfzUwu2dNgKHrKzI0NDZjaU3+ZtXW2hKqSwuRnJyC5s4BYcPfGckwstJS
kJFdAMnMgtKT0EZ0npSUhIraJrYqSWF9fcv/fQ8by/MoyExGYGAgomJTIJ1d
Jn3Ti7LKRl7BxtI0CnNzMTk9g5LCYsySEZgY6gMX3wBEhIUgMTUX88vrqoq2
CmS0pUHggSAne3lknf5vXyfoyVJkbmrKyYtgJytj3+8iLi44xZlvYDzzdYym
kRDNPgMRlUmy5P9JvFKZQsTuIzg1PoakiTtcCGo68/Gd73LFRLMjWVyumG13
UYzzkd0EKM8COcRWcBNtyYbiWQYoRXJIvvnUcDxLDsmBRyzj4h2CVCBhQsdj
SWzdNB2JSrqcG0lkZWoHkKaaIqUjS/u5NFunTPXPVunPSWuwKt87TPUAapXv
9Ek/Hc8nyJnLtwFdkOQTPs/FLH1eniggCJqjpsh8t4uUle8FLNGTFhSfV+br
SYVW8aw+izO1B1G2Kj8f5lS8uthLP2vDkoxMHVnX3Sh8ZyZcMdMunwlZlxuB
f0deNtfh8i8o/gdUVT9sbO0xPsc8DpvISwyCvoklwsMCoK1jiPpuCd92yNnc
CK4+AfBysoad2y2sbG6jqy4PuvoGCI8Ih6GuLjLKWveQ/J9QlhEBXSNLlJNx
FuRqC9fAWHTW5MLRJZi7+FalfTDV1UZHfy9sTa0wKJEhOdQLVzQNkVtYADsL
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
shK0dg8Lc8fOB60O+r/5rHLPfwH/2Mf+\
\>"],ExpressionUUID->"4b045bad-f031-4616-9b51-a848bed33a07"]
}], "Text",
 CellChangeTimes->{{3.7223951680628233`*^9, 3.722395172689128*^9}, 
   3.722395260741415*^9},ExpressionUUID->"09e6a146-0a6c-4b32-9610-\
93777be838bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\n", 
  RowBox[{
   RowBox[{"cCNNchain2", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"30", ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "9"}], "}"}]}], "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Permiere", " ", "couche"}], ",", " ", 
          RowBox[{
          "Filtres", " ", "de", " ", "noyau", " ", "\[AGrave]", " ", 
           "convolution"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"90", ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "9"}], "}"}]}], "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Deuxieme", " ", "couche"}], " ", ",", 
          RowBox[{
          "Filtres", " ", "de", " ", "noyau", " ", "\[AGrave]", " ", 
           "convolution"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "800", "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "100", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<ship\>\"", ",", "\"\<airplane\>\"", ",", "\"\<automobile\>\"",
             ",", "\"\<bird\>\"", ",", "\"\<cat\>\"", ",", "\"\<deer\>\"", 
            ",", "\"\<dog\>\"", ",", "\"\<frog\>\"", ",", "\"\<horse\>\"", 
            ",", "\"\<truck\>\""}], "}"}]}], "}"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"NetEncoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Image\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"32", ",", "32"}], "}"}], ",", "\"\<RGB\>\""}], "}"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtrain22", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errvalid22", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtest22", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cCNNtrained2", "=", " ", "cCNNchain2"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "\[LessEqual]", "15"}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Epouqe\>\"", ",", "i"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cCNNtrained2", "=", 
        RowBox[{"NetTrain", "[", 
         RowBox[{"cCNNtrained2", ",", "ctrainset", ",", 
          RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
          RowBox[{"BatchSize", "\[Rule]", "300"}], ",", 
          RowBox[{"Method", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<SGD\>\"", ",", 
             RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.0000001"}]}], 
            "}"}]}], ",", 
          RowBox[{"LearningRateMultipliers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"_", "\[Rule]", "2.4"}], "}"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err1", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained2", ",", "ctrainset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtrain22", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtrain22", ",", "err1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err2", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained2", ",", "cvalidset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errvalid22", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errvalid22", ",", "err2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err3", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained2", ",", "ctestset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtest22", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtest22", ",", "err3"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<Taux \>\"", ",", "err1", ",", "\"\< \>\"", ",", "err2", ",", 
         "\"\< \>\"", ",", "err3"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"err3", "<", "0.4"}], ",", 
         RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]",
      "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.722434288201971*^9, 3.7224344071423693`*^9}, {
  3.72243621035215*^9, 3.7224362328405447`*^9}, {3.72243645668554*^9, 
  3.722436472128577*^9}},ExpressionUUID->"7a1afb40-2a63-4e66-ae93-\
a5325e258a0a"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{30, 3, 9, 9}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 30, "KernelSize" -> {9, 9}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
               "$OutputSize" -> {24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{30, 24, 24}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {30, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{30, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{30, 24, 24}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 30, "$InputSize" -> {24, 24}, 
               "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{30, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{30, 12, 12}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{90, 30, 9, 9}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{90}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 90, "KernelSize" -> {9, 9}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               30, "$GroupNumber" -> 1, "$InputSize" -> {12, 12}, 
               "$OutputSize" -> {4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{30, 12, 12}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{90, 4, 4}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {90, 4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{90, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{90, 4, 4}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 90, "$InputSize" -> {4, 4}, 
               "$OutputSize" -> {2, 2}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{90, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{90, 2, 2}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {360}, 
               "$InputSize" -> {90, 2, 2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{90, 2, 2}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{360}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{800, 360}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {800}, "$OutputSize" -> 800, "$InputSize" -> 
               360, "$InputDimensions" -> {360}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{360}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{100, 800}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {100}, "$OutputSize" -> 100, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 100}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               100, "$InputDimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "ship", "airplane", "automobile", "bird", "cat", "deer", "dog",
                 "frog", "horse", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"30\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"30\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"30\"", "\"12\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"90\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"90\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"90\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"360\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{245., {121.9169921875, 127.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.722436479036312*^9},ExpressionUUID->"75d8039e-576d-4a4c-be9c-\
14492ebc6eef"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Epouqe", 1],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436479050462*^9},ExpressionUUID->"c3399772-8804-4e09-9d66-\
fb5abd54fed8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.873825`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.879`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8759`"}],
  SequenceForm["Taux ", 0.873825, " ", 0.879, " ", 0.8759],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436585955943*^9},ExpressionUUID->"aafbfe94-48cf-4a2e-b0b7-\
89006e299769"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Epouqe", 2],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436585975916*^9},ExpressionUUID->"b7828eca-347b-4cfe-a536-\
bb1a9ddb8ed1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.89985`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9004`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9`"}],
  SequenceForm["Taux ", 0.89985, " ", 0.9004, " ", 0.9],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436691096848*^9},ExpressionUUID->"e8eaf260-ea0e-4b7e-b96c-\
b6536a9b3526"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Epouqe", 3],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224366911533623`*^9},ExpressionUUID->"e0704a2e-d749-4332-a92d-\
0972726c2b82"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.898325`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8993`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8991`"}],
  SequenceForm["Taux ", 0.898325, " ", 0.8993, " ", 0.8991],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224367941976633`*^9},ExpressionUUID->"095634d8-cb57-451d-8387-\
73fb1faf5565"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Epouqe", 4],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436794288094*^9},ExpressionUUID->"f82d043c-d46f-4c15-876c-\
9bf2667c4ba3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.8999`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9001`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9001`"}],
  SequenceForm["Taux ", 0.8999, " ", 0.9001, " ", 0.9001],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436898086166*^9},ExpressionUUID->"7a6b54d5-71f0-4080-b41d-\
06499f58e00e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Epouqe", 5],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722436898441531*^9},ExpressionUUID->"76885355-467b-45e7-a44e-\
2867be713e50"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.8992249999999999`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8998`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9001`"}],
  SequenceForm["Taux ", 0.8992249999999999, " ", 0.8998, " ", 0.9001],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437001530589*^9},ExpressionUUID->"07264bf3-36cb-4577-aad9-\
7f065701de88"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Epouqe", 6],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437001588674*^9},ExpressionUUID->"3fe728ba-3f23-47d1-a516-\
0758e215d467"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.858675`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8631`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.8614999999999999`"}],
  SequenceForm["Taux ", 0.858675, " ", 0.8631, " ", 0.8614999999999999],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437105075869*^9},ExpressionUUID->"3ee8b25f-010a-4fba-8b23-\
1dc418fcb92d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Epouqe", 7],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224371051317453`*^9},ExpressionUUID->"773dd2fc-c173-475e-a3ec-\
dc796e34c0eb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.898975`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9042`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8999`"}],
  SequenceForm["Taux ", 0.898975, " ", 0.9042, " ", 0.8999],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224372089669228`*^9},ExpressionUUID->"4b69c60e-d020-40d3-b6f8-\
4369c3639493"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Epouqe", 8],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224372090248423`*^9},ExpressionUUID->"dbe005ac-d772-45e4-a3d1-\
da683b3484ac"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.899925`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.8996999999999999`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.9004`"}],
  SequenceForm["Taux ", 0.899925, " ", 0.8996999999999999, " ", 0.9004],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437312315687*^9},ExpressionUUID->"b5eb44f6-8560-4acd-8836-\
9627d9fb8a41"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "9"}],
  SequenceForm["Epouqe", 9],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437312371839*^9},ExpressionUUID->"4e8eb2af-73e1-4b8c-84a3-\
56af7e049a5b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.898925`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9042`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9`"}],
  SequenceForm["Taux ", 0.898925, " ", 0.9042, " ", 0.9],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224374151632557`*^9},ExpressionUUID->"9b8cbb36-716f-444b-aa3b-\
4feeb4bd0d8b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "10"}],
  SequenceForm["Epouqe", 10],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437415254014*^9},ExpressionUUID->"77b5ca8e-5404-4611-a2a0-\
23e6ce07f405"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.899925`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9003`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9`"}],
  SequenceForm["Taux ", 0.899925, " ", 0.9003, " ", 0.9],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437519005413*^9},ExpressionUUID->"b1d01b7c-5925-41f3-aa84-\
7a84a638452f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "11"}],
  SequenceForm["Epouqe", 11],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437519061019*^9},ExpressionUUID->"1746128e-785e-4b94-baed-\
e48f1dd3549a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.900575`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8964`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9003`"}],
  SequenceForm["Taux ", 0.900575, " ", 0.8964, " ", 0.9003],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224376223036833`*^9},ExpressionUUID->"54d4b680-8015-4153-a244-\
cbe5f6c92950"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "12"}],
  SequenceForm["Epouqe", 12],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224376223555193`*^9},ExpressionUUID->"de6add39-994c-43cf-9065-\
e54e1af57516"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.895025`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8998`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8966`"}],
  SequenceForm["Taux ", 0.895025, " ", 0.8998, " ", 0.8966],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437725252759*^9},ExpressionUUID->"f49e530a-2497-4c93-a5a4-\
f40d9455583a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "13"}],
  SequenceForm["Epouqe", 13],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437725343236*^9},ExpressionUUID->"4501c068-78d0-4530-9d5c-\
f5a48f4cdc96"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.897625`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8993`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8986`"}],
  SequenceForm["Taux ", 0.897625, " ", 0.8993, " ", 0.8986],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437828490893*^9},ExpressionUUID->"772d26b1-6809-4c45-a15e-\
4aeb92a0a2ca"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "14"}],
  SequenceForm["Epouqe", 14],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224378285463047`*^9},ExpressionUUID->"b33316bb-f885-4552-b934-\
cbe14808b82e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.8985`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9028`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8998`"}],
  SequenceForm["Taux ", 0.8985, " ", 0.9028, " ", 0.8998],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7224379316855*^9},ExpressionUUID->"40b1560f-b6b3-42da-bf2b-c223dbe1427c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "15"}],
  SequenceForm["Epouqe", 15],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722437931742135*^9},ExpressionUUID->"f23d4735-d5b1-4879-a4fe-\
58ddfef8743a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.8993`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.9004`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.8988`"}],
  SequenceForm["Taux ", 0.8993, " ", 0.9004, " ", 0.8988],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722438035653142*^9},ExpressionUUID->"749cad86-0ea3-4338-87ca-\
5caca3cd953c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Taux d'erreur sur test:\>\"", ",", "err3"}], "]"}], "\n", 
   RowBox[{
    RowBox[{"cerrset2", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain22", ",", "errvalid22", ",", "errtest22"}], "}"}]}], 
    ";"}], "\n", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain22", ",", "errvalid22", ",", "errtest22"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.722436460025296*^9, 
  3.722436460770754*^9}},ExpressionUUID->"1f90abee-5f7a-4c01-9ca5-\
a7d46c8fa1c0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux d'erreur sur test:\"\>", "\[InvisibleSpace]", "0.8988`"}],
  
  SequenceForm["Taux d'erreur sur test:", 0.8988],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722438035783745*^9},ExpressionUUID->"2275cb02-e90d-4512-8ef0-\
5314695494d5"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1.642651296829969, 0.89055}, {2., 0.89985}, {3., 
         0.898325}, {4., 0.8999}, {5., 0.8992249999999999}, {
         5.213933415536375, 0.89055}}], 
        LineBox[{{6.790942928039702, 0.89055}, {7., 0.898975}, {8., 
         0.899925}, {9., 0.898925}, {10., 0.899925}, {11., 0.900575}, {12., 
         0.895025}, {13., 0.897625}, {14., 0.8985}, {15., 0.8993}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1.5397196261682224`, 0.89055}, {2., 0.9004}, {3., 0.8993}, {
         4., 0.9001}, {5., 0.8998}, {5.252043596730247, 0.89055}}], 
        LineBox[{{6.667883211678831, 0.89055}, {7., 0.9042}, {8., 
         0.8996999999999999}, {9., 0.9042}, {10., 0.9003}, {11., 0.8964}, {
         12., 0.8998}, {13., 0.8993}, {14., 0.9028}, {15., 0.9004}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1.6078838174273833`, 0.89055}, {2., 0.9}, {3., 0.8991}, {4.,
          0.9001}, {5., 0.9001}, {5.247409326424871, 0.89055}}], 
        LineBox[{{6.756510416666665, 0.89055}, {7., 0.8999}, {8., 0.9004}, {
         9., 0.9}, {10., 0.9}, {11., 0.9003}, {12., 0.8966}, {13., 0.8986}, {
         14., 0.8998}, {15., 0.8988}}]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0.8898675}, 
     PlotRange -> {{0., 15.}, {0.89055, 0.9042}}, PlotRangeClipping -> True, 
     ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, 
     AxesOrigin -> {0., 0.8898675}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 15.}, {0.89055, 0.9042}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.722438036022382*^9},ExpressionUUID->"b263c37c-8b47-4b93-b5a7-\
fb6bc9735498"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"cCNNchain5", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"30", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"90", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "800", "]"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "100", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<ship\>\"", ",", "\"\<airplane\>\"", ",", "\"\<automobile\>\"",
             ",", "\"\<bird\>\"", ",", "\"\<cat\>\"", ",", "\"\<deer\>\"", 
            ",", "\"\<dog\>\"", ",", "\"\<frog\>\"", ",", "\"\<horse\>\"", 
            ",", "\"\<truck\>\""}], "}"}]}], "}"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"NetEncoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Image\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"32", ",", "32"}], "}"}], ",", "\"\<RGB\>\""}], "}"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.722392399288621*^9, 3.722392436943028*^9}, 
   3.722392470432764*^9, {3.722392507183338*^9, 3.722392518285342*^9}, 
   3.72239256762282*^9, {3.722392903146502*^9, 
   3.722392924990951*^9}},ExpressionUUID->"a1c0c1c5-92fc-47cb-b3e1-\
8ac5f0608996"],

Cell[TextData[{
 "\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
rRoT4n9AB5Ok99OtpYHrbaKqohzFsTp0P7dYP+/Q/VCcz1ZKVeXlVGLbI+6T
kaa6hybFkyOEPo2fb70S/PusZ4Aayo5TdnY27dy5k/JtlXRr2DjPhTdNhRtC
bQ8ZLT8ZboccAQCrkZgjUo1zRIG6/cDbK9YdKYqxjcr9knPO00NFe7iPrhdJ
v5Ovup9pyhFLjhAM1QnjI+5r95NlgaPt6t+T0hjKFJ3zzrlqxHzS7w/ljFH+
t3ViahkN+5XbT3adEPNFL7/98+lbYjvEntM3VWNZH1OzNYU/x0Ealt8r2X6p
BZfJq9iPJWddnpgJumXtC1383BKuDJcGlPeJ9dwW70Vi+veyspj9vJXnq1ed
b3qgUdEGs5w5Qmgv2HK2i9pOfG447+Ldr6tinksxUpcijt284DHu20KOAIDV
KFKO2FJwQ3e/qZtHxP28OvsF60Xdcz6man6b1KM/aMphJkeI4yz19mWH+Tow
k/p1+vj9nn7qbO+kfs+c5j0nPyc2cU+jWOeOthwwzizP/TRg76ROuzT3RWgL
Ubb3yLwYFuvoYrs0hk9sQ0kuo4cG9/GMqp/n+dxdsa1Efiy5Z6ONYr1ePyJc
s8nPW9Y2812H/vmmxGy1vDmik2+PWL9hvVjnf338IjlcLnLebqKchDekPPFZ
VVTrQXDYkWpxjOWnpf1ht0WOAIDVKFKOEOsoo/0M+kPyLo0ZnlOqk86KddKi
5QhZXZeaf54GGW1e0CfV09myaxHaPrjf35WdQxHmyvrEzHSq998MtxOOKbWJ
SPsVXP3R+Pisn/x+aXzsU2cFn+GO0HiYMp3PSlBlDXOfd3TnG6dCy3L3azwi
q3zNiDe36671cK8yRdzmwA39XCT3Yuo6bRKOudl4DKYAOQIAVqNIOcLw3/6n
d4LjC4xyhFF9xHk2eSXY566okxYrRzznxhkcUPb9p+0lW0k1tTsGiPEb3Bux
X8Gi6H/hxh8UysYDcO9n5dqoqqmdBtyMYZm5vhGbzUpWqxL3mjhmRJYjormP
hp9l+vdh54EIbR1654vl847ufH66mBXh2FEynyPm6eK2fye2Q5xxPTPcru6L
0DoRv9jSGH5tS/8dcf7Hul9ujzB2MwQ5AgBWI9M5gm9DN8oR2VeNx5sJbQRL
lSM4UwNtdCwrXZEnxPEAtT2aeQ9Cm0lS4nFtvwL7iK5XHaU0i878j9RC6vZo
+wuikaKp17eqxkNG91nK+4v0aO+Xuc872vMJ/UMrYXxEpDWgxLr+N2HWnGT7
aZe4ntXfqHsmunVFkCMAYDVarBwRtj2C76PXzRG64w7ClymaHCFifeQZGaD2
pkraL5v3kF0/LNuOpevWz/k68k7Y4/m8HhpwtCnnQyTupwfBcZZS/0RwPgbf
D2GEZaVrFftD+ky0R6QajMVQ36/KhckR4c8XxbGjFE+OuHfiD1HlCH/Eun6M
rBuEDPEJ3YhhbTLkCABYjRYrR4Sr0yf4fga98RHJ+a0Ga0NJ4xXiyhEKLHWV
79aURRqbmUQnHdHPBXzmuSGOxQiVUbofYcc5aEhjGHYb5qrQczQ9HmnNLWl+
iZBj9PZ7RKWaeZjx5QjufP1G59ObO2tSPDnCf7+Yr/u301CY7dwX08PkjUd0
KlHIEB9Q03iEdcdUkCMAYDVarBzBzY+4rVnv6HlwfoIwvmB3rVRHCutQGc3z
EMf06ZTJWb7dMEfMjbSSlXtW5+mbuvnk2dA5TY6YG70gXoPy2WV+ul6ST1lZ
Vmpz6/U3+DX3bYKf36GZ1yliqaehmKxWG7WNSGNAJ68fEsdV6D+H9SEdE7PO
jHhvhfyjbF+RTMnmpraJfSYmP29Z3pJ/lnLCGlTLnSO4dgShL+LPxwzmVbC9
4piH3xWon9UyS3Xb/uew62pHghwBAKvR4uUIbs7ifrrtltrlWe8DKpXlDEUd
PX1LXBeKWy+BkdW5UwONijUd1WUS68bk45rf4XPCb2aub6F9SPEe6+2nY/xv
c26+o5AzhPkT2vGD0vVx60c8UKyDzZKr6Ttx7KVYR/sfyNZsKKUHXuX6Tz3i
OhBJyjWeZL/jk5LlYy64Yz6kFmEdDlVbgLzeLmhSrnc5Ya8Q15TaUvCD7nXF
9nkr1/gqqJefj7sfyjVEl/v5GpNtWeJ8jLTSLsU4ynmmm3a9L7U1tCj6K+ap
Lfs/Sc/e4J+xMT8/rxXm/MgRALAaCb/z1etAVEdbrxitH2GxiPVHWkYGZQTI
65TiDu36jU7xGeahujjXaqWsNItiP70yPXNfUbyfZkmjo+KzOX3i2tahcmWS
raiIbLnyMZdbqUOsN6Rr2F2r/U0/N3RBca6M3EIqKrJRhmxtSvV6ltNCf4O4
j5WsuVmydSL1f88/DZxLvk1GVi7lZinvY/YldRkf08XcLYrr5e59hmwsSGLq
MVXbiNnPm/OIqrMSFOfj5qGI94Obp8Kv9bncOYLLA5d3/Uqa//nKJrJYEsiS
8BfFWlTfNCmfvyHW/4JX1yn/rvAJdc/q9/HIcwSeGw4Aq8XcxJXg/MbEPfLf
3txzJUJ1Ue2gwTg/oV5R7CfVwbUDUzTaWaF9NkTyfro6YFSfsOQM/Ka3qPbh
1mjuGHFTiy3FsEyj7acU8yeU61P6gn0Hes+32GM7r2wjkK0jWT+iv9aEz91N
pbmpmmMlWfZSbeeQbv8J6+mmY1nJmn24a7vkMH4eOcv06p6L2+/qgNHYDe4+
6l9vftVNVQ6I5/OW7u/NqjzNuVJzS6nf90JcAzSWOax64s8RnFnqLMuUnvUt
9+bfqMn1RLPPk56jYXKDWpJhjhDHaESx1gQAwNokbx8X6gzueaLcczo9iudJ
hsX6iPF4gs/t9Hpj74c2xpLPywSPG3wmqN7aEf5xauKef1HXolrTW4v1+8Rj
MV5fVGXwe0NjI4PX5ov+2vzc8zhj3s8fvI9eny/4LNVontkZl+D98AbusTdw
ztjGIEZjYXKEYJbGXU5yDQ+Ty+kg17h67Q8AAFh6CzfHD0BtYXMEAACsPMgR
sHiQIwAAVjsfVafFvn4SQDSQIwAAVj/W5w32kUc1DgIgBsgRAAAAYBZyBAAA
AJiFHAEAAABmIUcAAACAWcgRAAAAYBZyBAAAAJiFHAEAAABmIUcAAACAWcgR
AAAAYBZyBAAAAJiFHAEAAABmIUcAAACAWcgRAAAAYBZyBAAAAJiFHAEAAABm
IUcAAACAWcgRAAAAYBZyBAAAAJiFHAEAsBax5BkZJDfjWwFlWXysjyG320M+
dvnLsjKwxHjc5PHG//kjRwAArD2jzfsoKSkpIJN6fS+WvTyLzXnm78HrPdk3
vexlWRGe3qG0wP1ITD5L3jiPFW+OmPd0U21FLdXWhhF4v49hl+bezAxRne1r
2rhhA20I2khb952i7nG/zvbTZG+oCV922TXcGH6y/J89AECUWO8wdV67Ro6R
p5r3XNXb+RyxlbrXQI5wVe0KXu8p5IiQubu0l8sR6efIF+ex4s0RT+z7ad26
dRFl3Hi86PfF3XmIXgtThi2lXcp9nlyPquyCf7/v5vJ/9gAAURJ+g28pvqt9
3zcezBjtnS7yr4CyLjbkCJUVlCN6Cv8YrGM/zj4R+N1eQRUVWmVlFdTtWdz2
CHakWqrz39xOTY4RmpmZoXFnC+Vs/Ln4XmbThGy/aeqsPUtlOmUOqaXaym/E
ff98rH/5P3sAgCgJdeeOSvRdI0eorMAccbh7bhnvySxVJvAZ4t0jxOi8X/fF
z0Lv/+KgzvvG/D1H+RzxCd2aXf1tfwCwCvh95PUxdN32eag9oqCVGJ+XGIaR
jTNkyct4Aq+r+3z9wde9vtBvP9Y7Tn0OO9ntduob9BCr2JYlZqSfHPbQ+wNu
JmLZfJ4RcXu7vY9GGL0+5yixPhoZcPDHspNjYMSwToyUI/xeDw30Ccdy0GCY
a2ED99LDeMV7wfoe0oCjjwYG+4LX5PFF/t3sdQ+K98HRNxj4HCLvY+re+R8F
ysZfV6CMbmGfQI7IXCE5om3nr4L17IHbsfRbzBLjGSdmZj7493lmiG53tFJr
ayvddrppXrHtPHlc3dTRGnrfMezROd5DynkllCNKnPp55sXUNXormAc+oBsz
0eaBR2RdL7RF6LQLcmYZct7uCJattbWDnIHyzUd1bACAxSH0Z+jZUhz69/6p
62zw79w4O3k9Iry+o+oO9TTkafZPTC2kfm48BXOLDqYlat5Pzqmmh3pzIthx
Om9N0S1TekFzTL/vOJP2muA4Qe3xMqm+b0qzvWGO8PbTmdxU3XIlph+jXuaZ
6lg+qk5LCI4r6fX5qKs8W3ffo5dcuuX2u29TYUaC7j45p6/r1+km791o+ymy
GO0TuO79SYkrIEc8osINXD37FjV5ov+t/qTn22Dd/PuCduo89VftWIQ3t1N3
oK5/MXmNvlivHafwy81HaGxeWY7KnZ/Re5utNDRvcF7/D7Qpxhwx1ZkltkV0
a9oiZqnzeKr+WIo3E6nehTGZALA8phwXqKikKPh7M1h3JO6lkvISKioqokt8
HSvmCFU9IryeJNu3vK6Bqor2SPVr2n7aawlliNTcUmpoaqAiWV285egPyjL5
H1BhkpQ5corOUFVVFZXYZMdMPUsPo7y+0ZZDirKUB45VVVUilolTbJ9U7KOf
I8bpmKxce2zctTRRVUm+VP8mHqFhRS7y0fmMUI6wWtPF7FJS1UBNDVWKMuyo
VP3+9PcH+xKE8a1Hq5qpvb2JSsTjJFFK8Z0FuXdDDQekz9DCff7lVF4u3SNL
Wpru529GfDlimk5u4OvZ+Rc0M9xHzbXceIiyoPqOezSjs5+QIySfUP7xMirc
+bGiLt70aujPv9mcQ2UVZbQr4Q3x/f/w9ZWYyvrEfojv18iN8rv6kHLCtEX0
nPiDWJbfJOyiitoGqji+j94Xr+ktaokhWwEALLShOmF8xH3Ne2KOSDXOEYl7
zin+vZzuq1FkjOK2CcUxXXX6c0l7Sr4UM0mHW9lmPD1wQayzsy+NRb6u6Vti
O8Se0zdVY0QfU7Pwuz3xoKL+18sRUzcPieW9rW53YLrFOl+ZPYQcIbS/nFe1
v/joetEO8f2rbum4ow37+HteRsN+5XVNdp0Q80WvP857J7tHyfmXVfM6A/fI
JrVtLHuOmO2lRKHeXL/eYJ7DB3TWoWxjUuSIvxyhMdl7U/ajiv2/qR9V7Ntz
4j+Lx70Vbf8E20/b+Ezy863R5Y/JtjBtEax03Zn1D1T7jol9LL/O64qufAAA
i0AcZ3la+2985BwRqFu96n9jWbpuDY25SMhvVY2VeC77vZ0pzSWV/Qav7NPO
P+VMNB0Q69dI/Ruu87vC138vhukg//u92P5Ycy/kmcDv6aVrTU3U2Tepfy5+
bqxynKosR3BZRbecj6ma3yZV1jYz2nLAMNdx41IG7J3UaZfNnzF574R7lJR8
3OB38yMq5fuk1J+/GXHlCLGvgPfKJso/XhccK1BpS1PMwTwsGz8h5YgPqIVR
f0/n6aKFHxOZfF471sB/J8b+CdkYy3V/o76oxkpK4y10x0UEcskXfBm4dhj1
+7Pj3dTc0GywZgUAwNKIJ0ckpn+vW78IddTu2mGdcwp1rNQeIT+P4fzSF/e0
+UOXT6yfT/X+m+F2QjtMiuy6zczX0L9/Uo7IC9N+MnXziNjn4FWVi2tzqOwc
ijjf1ty9k+5R3tUfDY89ef3QisgR3NhFISv8ft8VmlVvM9NHu8TxDbtpiH9d
zBHvntTt9xD6DPTnWQp9KdG1R9j5+SShMZjRjVmYbNsRZlzEc1mWWUe/ST5J
fR7kBQBYeeLKEQb1i3DMigG938fGOSI4vs9qI6vVqhJ4LUPo/4+0tqa8LWAv
2WzqY1mDr4njE6LKEX4atF+l8qKiwP65lJWVQRlpaWSxJOkeR14G/XsQ8mzy
SrDPQdFuohrrkJRkoaxcG1U1tevOdTF376Ir39zQuRWRI57Pj1FDRRmVVbTp
5gHOi8lL/DwJaU6HmCPeOKKfI4S5pA69db+jzxH3ZGM402rU/Q9GxmjXq5HX
i7hfqRwf+sqbm+ir7EKq7+ghz+zS/lsBAKBnMXOE/u/68DkishhyRBQitkd4
e+mgRTvnJDQO0RIxR2Rf/cm4rHyfhKb/hX1E16uOUppFe05uLky3RxoDYe7e
SeNAOzRzTWR8K2feZ2SzdGojnyNuxJYj9OeSRpcjRi6mi3X8p6UGczZ1uC8L
+yXpt0XITDou0K6N7+mOC9l67CbmfwLAslpJOSI4p4Blye/3hxFpDQWpzT44
H4MNdyw/sWHHWbLUkrtZ6me45gw+s4orgzDuQxwfYaY9YrQx4jhGH7dmhaON
qopypDyQuJ8e+OO5d7K+H4MxFZy5CJ9zLJbiOV126z+Fft8XhOrzxc4Rk23/
Kq1BWRDLWtZjtMvM2pXzMzTuclBDRQElvrVOll+w/iUALJ+VkCPmXPwcj8Qj
NB73NUl1eEGYvv9w90IsN/sguH4C91r9oP66Q5HGR+jdV4E0/jG652A989zQ
zA8xd++k8u2u1RvPGTIkzh1Z3hwx1bmfHxvRHmY7aS2nA7dC/RSLmSOe9Ejz
PV7fdyWmNgH3xRSxLSK68Zh65qnN+qfQcX4T29qZAAALyVmu93s6ZKlyhHz+
hNG4RNbTTSU2KxVo5nFqTfBzHtTzOiUs9TQUB8cOtI3MGZebb9cPjk/0642D
6xdzhlGO0J/TErpmYRyEVJf76XpJPmVlWanNrdff4BePK5bR5L2T7tF+6o9w
bcudI8Q1GdZ9Yjh3wi+r10tcofGIi5Uj/PfPieM+f771vHbcZzgvhmib0BYR
oR3B77pAX2zcSMl5+jmFvfcdcgQALLspYU2C5ONiW7lgyXLEc+m3b7A/4tqQ
Yr6oz31bHKOQkH9DO5dUzS+1IySml9ID7zPF+XvqpDU4r3qehSn3YzqTFqq3
k/MbiZFlEm4+6DHZWp3GOYK7t/vptlvqP2C9D6hUljOk+SfSftwczQeKdbBZ
cjV9R8LYyzZZuU3dO/l6V8mF1MtIeYpleqlQdm3LPj5CnP8YWoPylmqe4+Tt
M+IYy3Ufnxbr9cXIEaz7krQG1McnQ/X3/DzN69C7lpG6f5HaInTmcsr5Zetf
fFOvvHfzTLc4R+XnWxsxRgIAls0z9xXFWLw0Sxod5deOeuqsEPOCvN1dniP0
2uMj5YhqPkco528+pou5W6SyWDLJGvgNnSUby8jNvwg/xlIy7VKuh5WRayVr
bpZiDWh1m74w1kFe7sn2I7LjWCgjI4OysqR1OTP4PxvmCItU/rTAvtz+8nIV
dyjXpZgbuqAqdyEVFdkoQzbWU7Oepcl7N+Wo0LlH0rqZe2y20DhLg885FnE/
N7ynWDG+8L2EbZSfn01fbPil7PUkuiVbJ0KeI/R+r0fKEYUb1OtHTNMRnfWz
jWjWhGB7xTwU3ZiGaem5YMF1M96nr3bupG0J8jGXsa0VDgCwGLhnLMjnBghz
GOYmrgTXPEzco1wnYm40VNcl7mnU/Z06xK9Zqb8uUqCOzUowyAR+6mn4Tud5
DxbKL2mm8SgzhIBrzz+Wlaw6VhJZMg7SJceE9j7w4xXUYyMn7DWKejxUV++l
WvskPeXvhTKTSDmidmCKRjsrpPXHZW0UVwf016nwubupVO95Htw5O4cM2mPM
3TvfSIfOM1C2UvE1lzg+RP35m7EQ4yxnx6/Tro2/0K2z//J1lepZGFz/Q7HY
RqHXHnHvxD+H5n3e0p/3eWJjqC/llixHnNgYfY74VDWG0n+/XFqnKkJbhLwc
nWXfSO0t8mveepL6mMV9TjoAwMvJT4zHQx6GIYbxRhwPEYnfy5DHwwSfZerV
PLs0WtyzT7n9vcR49eodOZ9sHMNTxf4M41E8BzQc1u8Lljko4jnju3e+4LX5
yOuNrmyxWsj5GjOecXI6nDQ87CJH4P89M/p9CKvLPM1w3x1PyAzWjgAAWMV8
2vGQa9xSzPsEAABYHZAj1JAjAAAAouWj6rTI6zytJcgRAAAA0WO5cRRRjoNY
C5AjAAAAwCzkCAAAADALOQIAAADMQo4AAAAAs5AjAAAAwCzkCAAAADALOQIA
AADMQo4AAAAAs5AjAAAAwCzkCAAAADALOQIAAADMQo4AAAAAs5AjAAAAwCzk
CAAAADALOQIAAADMQo4AAAAAs5AjAAAAwCzkCAAAADALOQIAYCVjyTMySG7G
twLKAnKs10ODg27ysWv7c0aOAABYuUab91FSUlJAJvX6Xix7eYDHPqD9SYnB
zybldPx16Mv8OS9kjhjpaKKKigqqvz0S0373W2uC+1VUXKaH88t/TwAAlhLr
HabOa9fIMfJU856rejtfv2yl7pesflnV5u5SZvBzSaItxXfjPt7L/DkvSI6Y
HaITltdp3bp1Ib84SEyU+z7p+Vbab91bdGPm5bp/AADxcp75u3F95BsPZoz2
Thf5V0BZQeJ2dNC1a+3U75mL/3gv8eccb46YtJfQW2IO4L17hGai2d9/hxIV
+35Ct5AjAGCNcVXtCuaIHZXoY4aXj/kcMU9t1j9JGeC9XKqtzAz9+Y1ocsQ8
1X3xM37fLyjxLe44HyBHAMDa4feR18fQddvnofaIglZifF5iGEY2do8lL+MJ
vO5X7e8Pvu71scG/s95x6nPYyW63U9+gh1jFtiwxI/3ksIfeH3AzEcvm84yI
29vtfTTCqM8fiVA+/njMMF8+Bw16tP03sZyPDdwjD+Plr9FP7sG+0H6OPvJ4
WdW2DA30Ofj3B4jxhy+33+uRtufKGuZeBcvhYVTtB8rP5bnfS4MDsuPpXHu4
z1l5rc/J63kg3idH32BUYzy5z144/0DguyGUl/XrlT925nPEIzqyPpQhPiu4
QrNcme59G3WOcF9OF/syWgL/zZzaGF2OYIb7qKO1lVoDOm47yTMzH9f1AwAs
F6E/Q8+W4tC/y09dZ4N/T0w+Sz7ZvsLrO6ruUE9Dnmb/xNRC6uf62ZlbdDAt
UfN+ck41PdSrg9hxOm9N0S1TekFz1H3WQvnSy1uopWS34jgJR+/GcT4fVacl
BMcj2gdv00GL9toK6l3BbXuqtPclKclClfZJbZm9/XQmN1W3HInpx6iXeaYp
x/lgOZLoVN+09nOpvEujnSd1j5dacFFzXfqfs3St3e5BOpO1Red4mVTfN6X/
OQSuqTQjQXefS4NT5Dq/TVN+M8zniGmq/CqZzjqk8otjHSLkiBdT1+l9vh0j
tX4i8NosFW4InyP8w9do2/uq/hPeZ3mN0fWjAACsIFOOC1RUUiSO10tK3Esl
5SVUVFREl/i6Qaxf0s/p5ogk2b7ldQ1UVbRHqv/S9tNevp5NzS2lhqYGKpLV
lVuO/qAsk/8BFSZJ9XJO0RmqqqqiEpvsmKln6WEU16YpX6D+zikKXJs1lyo7
J+I4X6D+VtWN6bYz1NBwWrxWTlZuhjhusSRwXxqqjlKarCwdjLyuGadjsnLs
sXH3qomqSvLJIt7fIzTMKstRnWGcI+TXnV9STU1NdWTLSpayVMENRZuR/ues
vVZLxkGqamiiuvICqWyBc1z1qHKO7y7tle23J3CPmgLXVGJNF/fJ4PPl8uUI
rehyxDTf9hDwWVWwHYN77WS4HOG/Q5tkYzG/tlUGvjNnKcfyrpglXt/Xvuz/
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
I8b6zvh9wszgHMyxvpOKV/h2+vHgvl5TG2IZWpXvepGprhnx9bd0a1Nc2T9H
2WatUf0JQgghsUNZrzFxPUt5nGDOHm2/47Jfx8niPcjJzkZGRhpSUlKQnJSk
yW8wGo/Q8xGHUoLHGsJB9hGG+014Xh0CchREfkhaRjYKyyvR1GUP2j5cHzHS
elg55n6dNarycbz5I5nZyMzMDMDzWUqC/r2NkJj7CNdFZT3FtIff0s+FHL2B
0oJd2FVQYZgHMdZThqdlL6CMSYziyIIvKeMQe5tvG7RjFMVvSHUtvvb6Uda2
JISQySbM+hFyP71Q5SMaS9ep+lntmookUz5iHqpsRv3ExO0zrB8RqY8QuHtx
pnCLxxcFX2PC3E2otflzF8LyEc5LWO3zJsuK9OZLtD4iNBbyEe6rWKrUh3oT
tQNmaoMMY/eLwWMKcn7EtGc2T1hjarA+S9ruqQ3MkyCEkMlG7l9nb5sw/z/Q
R9zuPqr0Z3MzD6Ch3QanywW3260cNzUKHyHPa+w2yA0I1b6Y+ggVTocNTXUV
KMxZ5e/HE1bjeth5lreUsZaEVUcN5yz8x9mHm557KeZvjJno/ROhiZ2PuIHM
GbKHeBlnDefHwkdem/HCRn/OzpXt/xKWj3DJPuLJibcjhBASA1R5lmVdRmMA
/txGed1kq7yeYdWH+n1ilD7ikG9dxTLd/EYJ8W5Pm82uqUk12T5CzW3bWeWe
yecL5SMa833v30jYoHgPPUaaD/q224zOSY59bHxEL3Yn+NdZlHdO7G3kepPf
Tq+c8JhyLsTac/4aZa5rO33neUuVNxFM15FFYfkNQgghMUDp7xMxe/2HQes3
Bf31u5Scwyq75DUafe+lWrhHvx+SfUZQv+008Bc+es68o+Qg6vf3/vWmO+oG
lM9j6yNcOJO7HmlpmajQ9VYuZWwhHB/Rp9y/4BocQYy1YYPv+tYZrOt022qR
m52JjXs+MvUuD/M+YhjFC/5wwjrVgQzWvOMftzCY+3DVb1FyJXM1x7yhzJ28
sPWq/jncl5UcjW9t1F9/RAghJIYE1I9YtOU0HKrnfFFXUs51mLX+tOIzhhr9
fWNJg3qtvwuN5e9NMIffizxf/aWNevUl3deVHILE2dochLuumzgl16oMWL8Z
Wx/hz/cUayuva+pgi9pS7ynXXuHL4zD0EX1nlXoYW8Jc6+L3YFINTrW3c3ad
V+p5zFp/Vtf3hYvZ93RVrPym/10WvnzI0dHRYDTx9de29q656NR6j57ze5Uc
S72a2z0Vaco5k/MuaI49aq/F0uf8YyOnYjC/QgghJATyeETSCmQo6wCSkJGZ
iTRVXUoxHn9V0/92Yquq5nNScgpSUtL8OYniv73fB65NdONM5kz/cZOSkbwo
D20q7zLUelhTQzslLQMZaSmaHMOVZW2a65Df223oI4zWoRqgXlfhbUPGJuTk
ZPuuSaeeZWOB4iP86178fkS+J8nJyUEkJSajRF3P8u4tHPGts5XuUSoysz3x
SFatgzEcrwkfMz5CyWWUeWya9r81vIza4THVvjs13z87awHWr1+JN2Y8rPo8
UXddp/AvHy79G039iaSkWUia9UPNMd8uN3r/BiGEkJjiq6sg5Tn04pg6j1Ae
o8g+hE6991y52nAoO/hdFss92990O3EsbaZ+3SdnGw5kLFLtE9y3u+2XkZcx
N+jYSSkbcKIpuNZhh68mg+G6T9d1ab4gzDpUAmdXrW4bhOcqqtaOE4x0H/eO
OyQs/0A1HuHCmWz9d2QEEtxuF+pL39N5J0kS1uceQ2cM3rluzkdsmcA3BJKo
8RGC4c4zWPri13S3/+HiQtyY8P0Zw6jelaqpWeWvK/Emypv5nk9CCIkrHg8g
3sHpfRen7rsttbhdDu/2TocdThPv1dTD5XR4cyrFOzEdzti96zIS3C6n/92c
hu8mnSxcsNtssHnP7zCVDxHI5L5fIzwGbJ1orGtEW1sz6jz/axuI5P1aw+hs
bkRzWxuaG+vQ3Blc14MQQgghk4MVfAQhhBBC7k3oIwghhBASLfQRhBBCCIkW
+ghCCCGERAt9BCGEEEKihT6CEEIIIdFCH0EIIYSQaKGPIIQQQki00EcQQggh
JFroIwghhBASLfQRhBBCCIkW+ghCCCGERAt9BCGEEEKihT6CEEIIIdFCH0EI
IYSQaKGPIIQQQki00EcQQgghJFroIwghhBASLfQRhBBCCIkW+ghCCCGERAt9
BCGEEEKihT6CEEKIedyw27pgczgt0JbocTvt6OqywenmfQkX+ghCCCGmcV5C
cmIiEmbvgyPebTFB496fIdFzHTsa+nlfwiR6H9GPmtKDKCoqCk1BEc62DUZ8
jvaqvVjw4rOYPmMGZgh+uAD7qtp1tx1sO+s9T1jtKa3GQBzudXtVOQoKClBy
Xv8aornuiLHXInPWk5g27WWcGxiL+78/Qsh9wsglrBD95aL34ZySc7rRVVeF
k5X1MT1fc+FSr4/YHSsfMeX3ZeqJ2kcMnvH0RdPC5ivpH0Vw/GF8uOqbhsd6
cvFRDAfsU73qoQja8zTOTmUfOtyK7UlP+M//tQ2wx+i6I6GrOgePK8ejjyCE
xJCp7i+HLnqf8xMT56HWGbu/ZfQRkWNmPKK6aB92eZ6vC3TxPPfvf1vpA1/Y
ejXsY1dnfkPZ7wfph9BmH8DwwA0cWf+K8vkT6ZWafQabT2HXLqO2eCgqQuZL
ch+aiNrhqelDe2py8XSgJ3hms+54SDTXHS6uK1ukYzyVgWNH3vZ6KfoIQkjM
mOr+0nXVe77ExFRcdtFHxJPJzI9w1W/xP/uG2W+PdX2gPDO/sPVC0Pf1u3/s
O+bjeL/THUF7hrH9Rd9xN16agns7iorM7/u9w7MZHl+VKv3/Twb7iMm7bolB
Tyx+OLvQOw7ivpJFH0EIiS1yfznX31/au1pQV1ODGg8NTV1whTyOC7aWJmWf
uoYW2F3B2zkdDtg7jiPJ6yOScKKlDw67HXbDXEYn2pvqvMeU2tJumEfp9xFD
3v92OTrRUOfbt65Jtz1h3ZcJfITT3qZcc01NHVq6wvAwLgdaGupU+9jhDrGP
QxUP7711Rt6X6DF5PqIXmdPlfjH8frt+0/eUvlZ/7L8fO2ZIx/3WxuD+1oi+
6tWKp5masYhebPZd/6sbj3vnI6T+W99HTNZ16zFYTx9BCIkxcn+5/Cjs9lps
Sk7w9scaZq9GVdeI7v6tlbt98xTBbCxp9PeRQxd9/kGP4DmOnrqDSNXdNgk7
TzYG9b2yjyhqaMWZnIW659l5sjXy+6LnI9w3cSRb/xyzl+fhqkPvb7QL9cXv
6u6TkLwaFe1DQfu4us5jU8os3X1W7TljepxksnxEX3VaFP32DSx9TOorXzvY
Ybhd15E5vjyDDNwI67g3o/I05ujH/vmzsa+uT/lM6r/1fMRkXbc+9BGEkJjj
6y81fWHaJuTn5yM/d72m/y5r13qJnsrNqr5wBXILS1FeWojMlNnK5+tOfCJt
7+l7S3NzkZO9SPluUXYecnNzkJN7TPMc1lGu7m9TkVtcitLiPUhTeZw5e7R9
guwj1O3JLy737LdT40d21tyK6L4E+QjXdWxI9LdjUWYeyk+WozBnlabNVbbb
2vYd8rdvbsZWzz6VKNe0bR7O21V/25X5H+m7LYXHUFlZjtxM//2bs/OiqdhP
jo+4iVXR9NuDH+M5Xx5kuc24jxvrKfPlHDwfVr5kX0Xknqan+h08+sibqNU7
vvsqlk5/GGtPd0d0Xwx9hJnrHh1AW3Mzmg3otA8btIM+ghASQwJ8xJaAZ3a3
vRYbkqR+U8x9+NdA3sRWX3+6cM/FoPGB+gNLlX00/fDYdel8CStwVW+Oov+c
Mr4xd+OHAWsu3WgsXqf01bWq5361j1juaY92LuYmDqRJz/UJiz4IY57mrqGP
uJD7c6VvL2vSzmO4beex2ndPNOdxX1c+31IZ+Mx5E3m++ztnj79P7yhN992/
XWgLmJPpubBdaYOZHJPJ8BE9UfTbXlwf46Vw/IFL7nefD6Mv9HiaRyPzNK5r
+aq8yAAvITzEY/6cyZxG/TE6PQx9hInrHqxZPvHalMUfG7SDPoIQEkNUPmLh
Hv2/tWNdx5U+2j8m4UJT9QmUl1fjpp4f8Bw31ecXLqvnLJTzpequ11Ce22fv
wk3dNt/C3mTJExQ0+ecCZB9hlM9wu8uXl5GwGlfD6Xv1fITqXhmNa9zuOKrc
qxL5XrnbfGMYqbreyWW7iurKaly1+fuljlNrpZjsv6ZzHs+9r6lGdU1zeJ7I
gNj7iMj7beXfWN8ZqZ98eFmIcfsbvvGO0D4iKk8z3KqMp2i8RICHmPbUMjRF
4JOMfISp6x5oQmlREUpLS4PxfH6qscegHfQRhJAYovSN81BlN/rb4sKxjNe9
/dq7FZ+Gd1ynz0cE+gWVj7gc5COcOODLB9goz4fo4XbB5XJpPpN9xDqj/VTr
RMJab6rjI4YaCySPkLAZnYb7OnHIN/aheA3VHMXc9YfQYg/9HNtavFQZc9hf
3WrKLxgRax/RU7Ew6nxGZRzgmR0h6kTJOYehfMSNqD3N3dFAL/E0nlZ7CE+f
3zQa2b0x8hGxv+5w2kEfQQiJIcp6jYnrNsrjBOqxd4HLfh0ni/cgJzsbGRlp
SElJQXJSkiZXwGg8Qs9HHEoJHmsIB9lHGO434XknuC9qH9G8T5mzmCjHUb5X
C9XzFOVrNfkbSckrkJ17AJVGa0lc17EpUZ3zmoS0jGwUlleiqcsek9jH1kf4
8wUjqRfhv96LvvH9EDWSlO0m7k97Plxkrl6E8BIzdOYKnorcQwiM5zVie93h
tYM+ghASQ8KskyD30+q+sbF0naZvVPd5SaZ8xLygPMVQhKwfEUMfMXdL8Lxz
qHsl6GuqwNa0Rbr3bGNRffD6T3cvzhRu8fgynTUeczeh1hb+/LwesfQRXWb7
7XDzHsLKJzDpaXyM9ewJ8hHvtI1HdayJ8iNid92hcV3ZadqLEEKIBrl/nb3N
IB9BIrBvvN3tzwOYm3kADe02OF0uuN1u5bipUfgIeV5DrgMRLlPpI4JyR43u
1X6DPtrthK29CZXl+7FatQZlZUmb4TGdDhua6iq060ISVuO6JfIsPf12FLUr
NSjP29OQU2f8bjSlNuME9a2UNZJmalcON2HpdJ3xiMDcyzAJPR5h/roJISQu
qHIHy7qMxgD8uY3ynH+rvJ5g1Yf6c/dR+gg5t2CZbn6hhHi3p81m19Skmgof
MdJ8MIz+uxd5Pm8QXm1NNy7kL/P5k/DeCXbbdlaJmZn6nbHyEep+uyHqPm4Y
+2fJ9Z+N38dRI9ePfrVQ/30TY61YIHuavCg9zfBlLFDnQ0x/CS89bc5LGNeP
iNF1E0JIvFD6+0TMXv+hbm3F/vpdSs5flV3yGo0H3tIdu5eRfUZQv+008Bc+
es684+urVxj09/71pjvqBpTPp8JH3B1rU2pHGI0d9KnWZFb45mZG2k8jMy0N
6/d8pHt/b7e+H+AjXDiTux5paZmo0PV2LiWPJO4+Ihb9thx7ZW7keZzSqaWg
rG3wMLdcv35De7FJTzPQoPUQTy1Dqzcf4kbQOo5zhnnJwRj7iNhcNyGExI2A
+hGLtpyGQ/WcL+pKyrkOs9afVvrBoUbZWyShpKFPdUwXGsvfM86zVD2vb9Sr
L6mqtZA4OyAHwHUTp+RalQHrN6fER9xV+yNP+8u1dTW7awqUe/X6Rn8OxYhv
PsQ7nlMZUJ/DcRVbfffj9Y1nfcfz55uK+hHXNXWw3WhW7m+S4lWiIRY+or34
3/399mjo++pqP+zrE19Gead2zY3ak0wTdaDU/bSmf39TP9dRtf8rUXoat7p+
hOIh/MdXe4m9za6wjzuRjzB93YQQEk/k8YikFchISVD6p4zMTKSp6lImJmzA
VU3/24mtSf65/aTkFKSkpPlzAsV/JyXorLN040zmTP9xk5KRvCgPbSrvMtR6
WFNDOyUtAxlpKZo8w5Vl2vGAZt/4iKGPMFqHaoRve23tLcEtHPGtgZXan+pd
o5KiynNImLtVcz3CFxzLmKnZJzsnB9kZ6pxL7brbEc89UF9vSsYm5ORk++6p
RepZui/jjQj77RrVey3fPhtcg8PVfkD1fuvHkTR/PubPT1K9N/NxHDTov6/t
/4+IPI0RfTVbMOOZDP0+e7QVmS8+g5zzwbUZJkLtI/TeoWHmugkhJK74ahtI
eQ69OKap7+wbo8g+hE7dtYltOKTznonlnu1vuj19Z9pM/bpPzjYc0PShwX27
234ZeRlzg46dlLIBJ5r6gtoir6s0XPcp17MOtw6VW9pef42nG43lO3XfK7K+
8CODHAcn6kv19xH367ojeFzB2VWrew+E5yuqbg35fq9QmPUR/tqPb4bdbw96
1wtI/aLR87y78yTe0Mtx9Dyrl7cZ9aUiz+CPTI1FTCaua77rnrnHML8huusm
hBAL4vEA4h2c3ndxhvFuSbfL4d3e6bDDGel7NUPgcjq8OZV2T1scTqv9LXXB
brN52uW5XwF5n8a4vfdJXI8gnPvldjmV7Y3fjRo5k/necPOMorO5DufrmtHc
eB51jV0YjXubeN2EEEKIjLV9BCGEEEKsDH0EIYQQQqKFPoIQQggh0UIfQQgh
hJBooY8ghBBCSLTQRxBCCCEkWugjCCGEEBIt9BGEEEIIiRb6CEIIIYREC30E
IYQQQqKFPoIQQggh0UIfQQghhJBooY8ghBBCSLTQRxBCCCEkWugjCCGEEBIt
9BGEEEIIiRb6CEIIIYREC30EIYQQQqKFPoIQQggh0UIfQQghhJBooY8ghBBC
SLTQRxBCCCHh4obd1gWbwzlJ29970EcQQgghYTJ0EcmJiUiYvQ+OcLZ3Xops
+3uQWPmI4c5a7F4/Dy/OmIEZXl7E7CWbcKqxJ8Jj9aOm9CCKiopCU1CEs22D
+scZaEKpZ5uComNoHRiLy71trypHQUEBSs63h9huLxa8+Cymy/fuhwuwr2ri
fcLGXovMWU9i2rSXcS5O94EQQu4bRi5hhfAFi96HczK2vwcx7yOG8eH6Vzz9
1DRDnpxXCHu4xxs8M+GxAvlK+kdBx2g/nYOnVdu8ffbW1N7X4VZsT3rC386v
bTC4fs+9W/VN4/u2+CiGTbSjqzoHjyvHo48ghBDT0EcEYdZH9Hy4SOn3Hp65
AWebuzAwPAx7ZwN2L3lB+e5bGy+Eecx+VBftwy7Pc3yBLkUo2v+2ctwXtl71
7zt6A7vnfzuoP157fup8RE9NrsbDeHlmMwZ0tq3O/IayzQ/SD6HNPoDhgRs4
ovJlT6RXRtUO15Ut0jGeysCxI+J+PU0fQQghZqGPCMKcj+jHjhlSf/fVeUcx
qnf83f+hPA/XDsemH3PVb/E/Y/uOOdpzEi+p+u7FBcVYOn0qfcQoKjK/7/cO
z2Z4/E6q9P8/Gewjxro+UMYKXtga7LHqd//Yd6zH8X6nO+L2DHru0Q9nS+NA
7itZ9BGEkEnCBYfdBodT+m+nvQ0NdTWoqalDi20oaHvxfV2N+N63TVe/8bHd
Lthtdjhcxn8DXU477PbAHEa5Tb79XA60NNX5z6nTriBcvWiq8+1T14Auu0v6
3OMLUmPsIyK6J0r7PNfUoLqmLjvcIfZxdLUo56lraIHdGXnfoocpHzH4MZ7z
9nVP45TdoI9yyds8j7Mx6cd6kTld7n8vKZ8P1qyW+t1HElHeLOI9rHicqfER
vdjsa9erG4975yOk/lvfR9Rv+p7ynf6ch9+jhT+Wo89gPX0EIWRyGGreh0RP
P7ko/xRO5S7z/v8ys7b4/0bfdd/EkeyFmu9lZi/Pw1VH8N+nocZd3u9f32nU
RzlxIHmWd5uCpqGgNi3cfwkd1Tt0zzl34xHD+faOyt1I0tln0cZjsDuuYnVi
Qmx8RBT3RHik+uJ3dfdJSF6NivZgj+TqOo9NKbN091m154zpcRJTPsJ1EQk+
j3DSqI/ybPNSDH1EX3Wa7viG68pOzFx8SPXvon+KfUQ/9s+fjX11fcpnUv+t
5yNuYOljUtteO9hheMyuI3N8+RUZuGGibfQRhJDJQu6z/SRhVU4ucjIzsL+6
W9rOdR0bPH2v0h9n5qH8ZDkKc1ap9ktFle227rEX7jH2EYd8/ePuhv4J27Q+
9wDKy4uRnTbb73M2ng16hm8tXevfL2kFcvPzkZ+fixVJUvuTkpOlPtusj4jy
njQfWur3QhlbPftUorx4p3eMRPp8Hs6rn+tdV73nl7/bUngMlZXlyM1cpBxn
zs6Lpv4NmJvXGMbuF+WcwOP68xr75XmNt9A0avbf7E2s0hmL0CcyH9FT/Q4e
feRN1Or1te6rWDr9Yaw93R1Rew19hGocp9xm3LeP9ZT5ci1UHmx0AG3NzWg2
oNM+bNAO+ghCSOxR99kJi/LQ5gre5kLuz5V+rKxJO2bvtp33Pt9L+38Al86x
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
HAb3QrRN3FOH09fPuBxoUfatQ4tNZ24lFGH4CKe9Tbkf3vN0heHpRNsaVG3r
ssMdYh9HV4v2vjvdkV+PDtH7iF5s9vXZr2487p1zcF/JispH1G/6nrKf/nxI
P3bMkM71rY1+nzFYs1ra75FElDeLf8PDynb0EYSQe5X++u3evjMxYRtuGmwz
0rzPt81qtKn61dbK3d68vkQdNpY0BvU1+j7CiUPJswzHKTo850jSOf6ijcc8
vuaqN/dRr9+MpG3yfIYer++8ElY7e+oOKvkTWpKw82Rz0PZDvnu6cP8ldFTv
0D333I1HIpu3n8hHuG/iSPZC3fPMXp6Hqw69PD8X6ovf1d0nIXk1KnTySFxd
57EpZZbuPqv2nDE9ThK9j+jH/vmzsa+uT/lssD4aH3EDSx+T+v7XDnYYbtd1
ZI4v9yIDN+R7c2UnZi4+pIppP30EIeTex3XV2/eIv/Ml7frz/hdyfi71qVs+
Vj7rqdys6lNWILewFOWlhchMma18vu7EJ5rjGPmIAyn6/XNr6Vp/P5TkOUd+
PvLzc7EiSVo3kZScLJ0/oN+MtG19dYeRk5vj9wEJ4ly5yMnJQVlDX+h2lqva
mZiKncXl3vOtTk5QPp+z82ONd5F9hNpvrM89gPLyYmSn+ds5a+PZkM/+CkY+
wnUdGxL9bVmUmYfyk+UozFmlaXeV7bY2XoeW+j1NxlbPPpUoL96p8kvzcN6u
8h+qf0viuy2Fx1BZWY7czEWq+3DR1L/XWK7XiMpHDH6M57zzEk+j3Ga8xmKs
p8yXh/E8zhquxaCPIITcH3zkG8+fo5df6G5T+qCiFvn58ya2+j5buOdiUD9X
f0DqfxLmavszw/EIvf65/5wynjB7/YcB6xhv4Vj2HL9X0PSb0bVN0Fos50dc
07lPods5d2NgO92oL1yptLOoyf/8rvYRCXO3Bo0HNJeu8/fVumMFOhj4iAu5
P1eOVdYUMKdkO6+sZ01Y9IF/zka1znVLZeBz903kJQWvge0oTfddzy60Bczn
9FzYrrThsiv6NY5x9xGuj305DhP5A2m753zbnaOPIITc54w0H/Q9h29GZ8B3
Q427pO9mq+c9XGiqPuF5dq7GTb2aTPIaSc9z/WWn/29oJD5CeRaebTTf0os8
3/O+1hNE1zZ1+xbq1ocI1c5dBnMQbhzLmCm1c9WHSj/t9xHzUKH7XOvxQ76+
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
+mB8pkrDyljEhrx85G3bhm15edisrKdZi82b83CxVzuox/iYF33Egyz6CKuq
92KxUpfgRPPghNsyPhbQ5x3YtFT8lkoQOLvB+EyVRlGVl4W1WVnIWrsWawWe
/39tun/uKT09KyiHhfExL/qIB1njPh9xgvX4LKNR1Jdsln4Pb+chhIXwivGZ
Qt1xoLn5ZtCYQ+uJbVI/lX+R4xEWk7yWJquEdagmS/QRD57GHc0oKynBibIS
qcZR+maUlJWhpKQsoG6BJMZl6jTaVuLP3Vubh8L8fOTl5fnYhu0HzgWNHTE+
U6jRZqmWpee5ttDze6k4UYb8bWuVmFVwvYblxDzLyRd9xIMn+XelB9cVxld3
uiuU+Qy9+Ig5KI6bx1HjvShT+QYFjxev6tAfPGJ84qvRjhOGtT2EGB/zspqP
iHfeKSGEhKT5Ci7VXsCFCxdQe6kh/u0hJI5YzUdQ1hPjYm0xPtYW42NtMT7m
RR9BhRLjYm0xPtYW42NtMT7mRR9BhRLjYm0xPtYW42NtMT7mRR9BhRLjYm0x
PtYW42NtMT7mRR9BhRLjYm0xPtYW42NtMT7mZTUfEe+8U0IIIYSEj9V8BGU9
MS7WFuNjbTE+1hbjY170EVQoMS7WFuNjbTE+1hbjY170EVQoMS7WFuNjbTE+
1hbjY170EVQoMS7WFuNjbTE+1hbjY170EVQoMS7WFuNjbTE+1hbjY170EVQo
MS7WFuNjbTE+1hbjY170EVQoMS7WFuNjbTE+1hbjY15W8xHxXgdLCCGEkPCx
mo+grCfGxdpifKwtxsfaYnzMiz6CCiXGxdpifKwtxsfaYnzMiz6CCiXGxdpi
fKwtxsfaYnzMiz6CCiXGxdpifKwtxsfaYnzMiz6CCiXGxdpifKwtxsfaYnzM
iz6CCiXGxdpifKwtxsfaYnzMiz6CCiXGxdpifKwtxsfaYnzMy2o+It7rYAkh
hBASPlbzEZT1xLhYW4yPtcX4WFuMj3nRR1ChxLhYW4yPtcX4WFuMj3nRR1Ch
xLhYW4yPtcX4WFuMj3nRR1ChxLhYW4yPtcX4WFuMj3nRR1ChxLhYW4yPtcX4
WFuMj3nRR1ChxLhYW4yPtcX4WFuMj3nRR1ChxLhYW4yPtcX4WFuMj3nRR1Ch
xLhYW4yPtcX4WFuMj3lZzkdcPwJUrQHuuuN4Vyi1+Duzthgfa4vxsbYYH/Oy
nI9YMs1L57lDca/RRQghhJCJsaqPwKU98bBVlI7o160txsfaYnysLcbHvCzn
I5Z+QfIRJxbG8a5QavF3Zm0xPtYW42NtMT7mZTkf8c5XJB+x97k43hVKLf7O
rC3Gx9pifKwtxse8LOcj9n1H8hFZfxTHu0Kpxd+ZtcX4WFuMj7XF+JiX5XzE
yRTJR4j5jbHbcbwzlCz+zqwtxsfaYnysLcbHvCznIxr2+nMtP70UxztDyeLv
zNpifKwtxsfaYnzMy3I+QngH2UcIT0HFXfydWVuMj7XF+FhbjI95Wc5HiPpT
ypqNRXG8M5Qs/s6sLcbH2mJ8rC3Gx7ws5yOERI6l8BEi55KKu/g7s7YYH2uL
8bG2GB/zsqSP2Pe85CPEGlAq7uLvzNpifKwtxsfaYnzMy5I+QtSgUtZs3InT
naFk8XdmbTE+1hbjY20xPuZlNR8hanX3lK9Rci1vnD8c99rhhBBCCNHHaj7C
q556/5qNxoKptlZUgOjXrS3Gx9pifKwtxse8LOkj7o7612ycTI3TnaFk8Xdm
bTE+1hbjY20xPuZlSR8htOHLko8o+G4c7gqlFn9n1hbjY20xPtYW42NelvUR
e2dIPuLdr8bhrlBq8XdmbTE+1hbjY20xPuZlWR9xfIHkI5b9J2D8rk7LqakS
f2fWFuNjbTE+1hbjY16W9RGXdvtzLe1X4nBnKFn8nVlbjI+1xfhYW4yPeVnW
R9hqVWs29sfhzlCy+Duzthgfa4vxsbYYH/OyrI+485nHQ/jWbJxaMvU3hlLE
35m1xfhYW4yPtcX4mJdlfYTQhi9JPmL/96b4rlBq8XdmbTE+1hbjY20xPuZl
aR+R/4zkIzY+MsV3hVKLvzNri/Gxthgfa4vxMS9L+4gP53HNhgXE35m1xfhY
W4yPtcX4mJelfUR9nj/X8uMNU3xnKFn8nVlbjI+1xfhYW4yPeVnaRzhagLd/
xe8lxHtAqSkXf2fWFuNjbTE+1hbjY16W9hFCYv3n6t/0e4niV4DxsSm8QxR/
Z9YW42NtMT7WFuNjXpb3EUL97UDWl/1eYtc/AoOdU3SHKP7OrC3Gx9pifKwt
xse87gkfITTSB2z5S7+XSPtl4PRS6d2g1KSKvzNri/Gxthgfa4vxMa97xkcI
3RkBDv7I7yUE6x8CGvZxrmMSxd+ZtcX4WFuMj7XF+JiX1XzE9evXQ9JVtRfu
zEc0fuLuqt/ErYM/Q9vlj8M6BiGEEELMYzUfEbY+/xyo2QJk/Fft+MTy/yzl
Yg50xNJuPdCiX7e2GB9ri/Gxthgf87pnfYQskR9Rtx1478+0fkLUrir5N2Do
Zgzv1oMp/s6sLcbH2mJ8rC3Gx7zueR+hVlcVUPBd//u9vPmY/xk4+obHT9hM
3qkHV/ydWVuMj7XF+FhbjI953Vc+QlZPvf/dHOr5jtLXAGd3bM7xAIm/M2uL
8bG2GB9ri/Exr/vSR8jq/hjI+4dgPyHeH3phKzBwI7bnu0/F35m1xfhYW4yP
tcX4mNd97SNkdX8E7P6G1k/IbPgycCyZ4xQTiL8za4vxsbYYH2uL8TGvB8JH
yLJdBN5/CVj168F+QuRlHvgBcPPC5LbhHhR/Z9YW42NtMT7WFuNjXg+Uj5D1
i18APXVA1Wpgx1PBnuKdrwBF/wp8/C7wSc0D/85y/s6sLcbH2mJ8rC3Gx7we
SB8RKOEpDr4sjUnozX2IGhXlcwD71fi0L87i78zaYnysLcbH2mJ8zIs+QiVR
a6JiuZRLEVjfSmbrX0k5mrddwfuL2ljCk+h9dw8r7nGhJhTjY20xPtYW42Ne
D66PuIPhwUEMDk/wni9RE7M+F8j9n9qaFIK3fwX4YJZUs+JKoTQPInsPUbNi
73PApd2A2zl1lzRJ4u/M2mJ8rC3Gx9pifMzrQfQR44PN2OY7n2DtniqEfGuo
eHf5yRRg3e/pj1MYIdaZ7vx7oGoN0Ns4FZcXc/F3Zm0xPtYW42NtMT7m9eD5
iGGUrfWcK6sYXcOjcLRWIN1z3m1nw6x3+fk4cL1UGm9Q51OI8Yl935FyMw+9
qr8mRLD296R63W3HI3tHqfMT4Or7wOllnvMfkd59OkXi78zaYnysLcbH2mJ8
zOu+9BHjHn/Q24teD4Oj49rvhhu9vqGkwz8C0VycjiVrT4QekwjUcA/wURbQ
egwYuxPQhjHJK4gamqJGhZ6nEF5DvFNMeI/mD6Q6nOKYYo2ImBMR4x/Cm6z9
XYNxjqeByrelsZJJFH9n1hbjY20xPtYW42Ne95qPGG4s9m5X1qHf6w+2nsZa
1ZyFIL/K/+7P0bYSz2dr0aravaMsC0vTD0fuIyJRfxtwfqOUwyk8QCRzIyH5
glS3s3G/5GfGbgN9TdK4yfnNgHvIVNP5O7O2GB9ri/Gxthgf87o3fMQoOpob
ce5EoXcsQWxX0joctNV47znlOJvzS3CiJE/578J6h3SkjrIgH9FassbjI8om
10eoJXIvxXiDmBtZ8UvG/mCpxx9kfRkofAH4aD3QVQ2MeK7jWglwNAl496vB
+3iPF5ATKo7x6aXQ7RJ1NQI8x52743h61no89OJOL/O3Vns/o6wj/h20thgf
a4vxMa97wkeMNmvGF4x8RHNJluQhytqUzwZ94xdLs6R5C+PxiCn0EWqJvtvV
K9XRvHJAmuNoKpZqVQTOlehJbFf2pnE+hvq9p+L96rLufCaNVxx/S3pHavaf
eLb5Zcm7FHxHqiXu0bycavzqc1s0CC9BWUf8O2htMT7WFuNjXveEjxDjEY31
qPdQsi3dwEf48ic9HqFR89UgCtPF55sl7zBY7x3TKAvKjyiPj4+IlcRcRsNe
4NBM4LTnPtbvksYvzqyUvIHsJ0S+hVg/Es7cyva/w0Mv5AT5iP/ynR34+ro+
zNh0C/+a24+fFQ5iaekQNpx0Yde5z3D48mc403obV2x3cXNwHCN3Po/33bmv
xb+D1hbjY20xPuZ1b/gIv7pPbNb3EaOtyPJ8vmRticc5qDWO+vx0lb8YRonw
FVlluDl6B4Pd57y+YnNFmOs17kXdqADW/La+VxBrTrL+CNjzLWlco/gnGo/x
0HfWB/mIX/vnHfiteT0R8cW3evBYWq/Xfzy32YEfq/xH1im//zjb5vcfn935
Rbzv3D0h/h20thgfa4vxMa97zUd0lBn4iDut2LRU8geB4wqB+4w7GqVtfaTn
VSF4luQ+k5g78dbTmiatHyn9D+DaYf31o8OfAicWAit/DQtmfj/IR/z1K9l4
eUEuvr3gAzwxvxKPzGvA78z7JGJvEYn/eDrAfyzbcwlZq1djV8YClBwuw9nr
I17/YXsA/Qf/DlpbjI+1xfiY14PkIyq61fkGdzAYqp7l/SZR+yKSNaIej3H7
UiFenfkaHvrOBu/YhPAVd1L130MysuzX0LX4IVxOfQwVKV9H8aLnsHNdGjLX
vovUVdswOy0fLy8/gmdWX8UTq3vxyLJe/O6C2HsP2X88rvIfP8nrx5sHPP6j
dAjvnHZh97nPUNIgjX9c7bm3/Qf/DlpbjI+1xfiY133jI3zzGno+orUsS8dH
UOHKGxeRDypyQeu2ATXZQHUmcDbD87/rpHENR4vkU8T/Fv3Y+J1nMum/Ko2J
dH+EkeEhdPWP4fLNu6i41IPi7ZnYuejHWL8wCYsXLkHSW5n40YJcPLPgEJ70
jn9cxu/O654U//HfF3yCx1OuYXrqeTy/qAQ/WVKIn60rwfKdVXintNPrP0o9
/qNK5T9G78bXf/DvoLXF+FhbjI953Tc+Ar3IX7rE810ebJpliaM4kSWOnaVZ
o0GFr6h+Z2LcQ+R8vven0rvNdkwHdv2jcZ6G+Fy8w13UBVXnbmz72+C1sSt/
DTi1BCPOfnT3fYbLJw+ict1PcGjRs8hd9CNkavzHTjy7oFjxH1+cd2Ny/MfC
Hjy+3IbpGZ14fu0V/GTNWfws4wCWbzqCd8o/xZ7zfv/R5PEfPc7Y+Q/+HbS2
GB9ri/Exr3vNR8h5lmUdgWML47iY71vL0azyGI6LUl2q9OKA/EsqXMX0dybq
fIp1rSKvc+kXjMcr8p8B+pr9+4ixEDH2IcZAjOpqdZyW1qqIuhzrv2h47JHF
v4TuJQ+hYe8SnNm6CB+kPKP4jyULF+PN1E14edkHeHZ5NZ5KuYBH50+i/3jr
Jh5fcgPT067iufTzeCXzHH62vRHLD36Cd0+7FP9R3e73H27hP8Y9v50L7+GO
s5f1PSwu9lPWFuNjXveGjxjEubISlJ0oQ+5aX27ktmKc8HxW0dirbHWnu8J3
nHQUnqjCxaoyaa7DQ965+3g9xiRr0n5n4p0hombGmXRpncj2J7xrTdF+MjbH
/2wAuHXdwzWpvqfwIuK9rHr+RdTX+HCeVOcrUGK+pqcOI1Wb8EneTDSm/S3O
pDzh9R+7Fr3s8R+zvf7jjbfW418X7MCMBUV4an4FHl3QMGn+46H5nXh8Xi3+
8CcFQXmw/yvltHcN7pYzI951MAdqJS9y8pobH3n8SP0nd9DSexfdA2O45ZLW
5X7++b2ZG3IviP2UtcX4mNc94SPudGjWV6hZW9Kq2dTRfFypeanUxa5o1T8u
FZbuu99Zb4M0HiLXFD/4sseqdoW//+efA7aL0vhIxXKgarX0npUL70m5IsK7
yO9gE/kfe1/EJ4u/iMbUR7z+43DKt5Hn8x9LF6bizbfW+fzHIXx9/mk8Nq8+
bP8h1uDGYl2uPDfzx0s+xZ++3Yu/W23H32/owzPZt/C9rQ5vnZCf5g94c1UX
HnJixdEhrDs+jE2VLuz8aAQFFz7DB5dH8WGT25u7Wtt1B02f3kWnYwz24XEM
uz/H2PiD6VXuu9/PfSbGx7zuCR8RqcZHve/o0n1PFxWx7tvfmairYaudmnMN
dACnFgMnFklzM8JziLph7Sek+Rt5rkaMh4h2nd+EkfeewM3U38WV1IdxJuN7
OHyiFrsy3sKGha9L/iN9L37jO8F1wn7tn7dPyhhILPhvC3rw5cWfetfS/HWG
HU+v78M3N97Cd7c48PKOfiTsHkDS/kEsKHZ619as/nDYO7+zrWoE+TWfoah+
FOVX3N46Zxc673jX+rbfGvPO9wx+9jluj/m8yuggYL8yNbENofv293OfiPEx
r/vSR1AxFeMSJ911Awde1M/zELXLx+548yECfYRYm3t38X/C0MrfR2/xW7hx
6SNcuXkbFz39ruh/jzW5cejSKPZd+Aw7PhpBdoULazz99fIjQ3jrkNNbn0OM
PfxoZz++m+PAt7Nv4X9l9uFvPP3+n6zoxVdSPsEX53fF3ZMY8TvzbuJLyS3e
vNq/XNyEr6/txT+9cwvPb3bgh9v78equAbxeMIjkg04sLhnCyvJh7zzQ1rMj
3vU479eN4qjHq5y+dhvnOu541xG12sfwycA4HCOfe9cH/+IX4Y2t8P001hf/
vpkXfQQVSoxLnCXmTtTvXhO5JJ9LfdFtTT+1A/OXZuLOap0c09W/CRz+qZQj
Eq26P5ZqqvuO+fliKWe1L+0hdJa/i+abI6jrvuPNCT1xze2tz1FY+xnyPh7B
5koX1p8YxttlQ1j0gcervD+If9874K3r8cI2B57ddAv/sKEPT6yx48/Te/Hw
kk/x+4vi70kmQrRPtFO0V7RbtF9cx/e3SvVKxPX93fxTQT7vmWUVXv8mPIvw
csK3iDkh4V3EvJDwL2Jdz/kbd7zzQw0eH3Pt07to6xtDZ/+Yd61xn0safxm5
LY3BhOtrqGDx75t50UdQocS4WEBX35fWvx59Q6rloVJQfERuRsM+6V3yenU8
xPra5kNSnodagf8tS7zzft/zAe+V/RV/fVSZzD8A9n8PKPl3aQ7H+856p/4x
xftnxTtsRwcmvGzRP4r1sWIcQIwHiHEBMT4gxglEf3v0xHkcXPUadi96CTmL
ZnlzTlamLMTidXuR/PZOvPZWFmYuyMEPF+zB88sr8U9vX8bXV1zDXy7vwCNL
b+JLKZ/id+ZPnteIZf5KyHGY+VKOi7imr3r8zaPLevFnb/fiL1bZvT5n+vo+
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
+ggqlBgXa4vxsbYYH2tLEx+xpkSsKRXrT0RtTNHHi+du9RrTw/9/e/fvanUB
xnF8q70taHJoaukPcM6/RJpaHaIIh6BBFwsaxXALAt3CoWhqaai4/gAHWzLC
RVQqqm8993S516P3Psf7UOcjvV7wgbhgpO/Bp3vP+Z7T+98TqJ8T1M886vlc
h90e9T2Nep7H+tfr+R31OXGHufTGP99DeGH1PpZrb6/ujqPunPo19Xm+6+qO
qfeT1nM0DnvW6XF27pXduyLtjtj2607NzOx/vJ3vlps3bjz2tdvffPHYZ3PU
Z5L8eu7E8ufa36u/v//S8tOVd5Yfvry4PPj45FP/7v3l/KvLz5++tdza+fbI
/447X13e//ceeN7IH2dfXB5deH33M1ueeH/H9e/b3199zsrdK+8+9b0/9d6Y
+vru7+2Im+W3D15e7l59b/VnddP7Nejpkk2fbPpk27jP/R+X5aPXDnndwd//
j//5mSdfx1ifbV/P1aifE9T7atZf69A5+IzSvdeA1nNHSr0WdOezZbn65ur1
GMd5vUM9o6Ke3fX1h6ufhdRz2PfUP9fnwNZzOer5n/X9jHqvTP2atfeAuCPo
6JJNn2z6ZHumPg/vrd77UM+9+uTU6nNG6jUD9Rlh/4bb1/bfc1HP5zr493wQ
dwQdXbLpk02fbM/cZ++Z5P+V+tyz+pyQYO4IOrpk0yebPtn0mXNH0NElmz7Z
9Mmmz1zaHbH11+qamZnZxku7I8ijSzZ9sumTTZ85dwQdXbLpk02fbPrMuSPo
6JJNn2z6ZNNnzh1BR5ds+mTTJ5s+c+4IOrpk0yebPtn0mXNH0NElmz7Z9Mmm
z5w7go4u2fTJpk82febS7ohtvw/WzMzMNl/aHUEeXbLpk02fbPrMuSPo6JJN
n2z6ZNNnzh1BR5ds+mTTJ5s+c+4IOrpk0yebPtn0mXNH0NElmz7Z9Mmmz5w7
go4u2fTJpk82febcEXR0yaZPNn2y6TPnjqCjSzZ9sumTTZ85dwQdXbLpk02f
bPrMpd0R234ul5mZmW2+tDuCPLpk0yebPtn0mXNH0NElmz7Z9Mmmz5w7go4u
2fTJpk82febcEXR0yaZPNn2y6TPnjqCjSzZ9sumTTZ85dwQdXbLpk02fbPrM
uSPo6JJNn2z6ZNNnzh1BR5ds+mTTJ5s+c+4IOrpk0yebPtn0mXNH0NElmz7Z
9Mmmz5w7go4u2fTJpk82febcEXR0yaZPNn2y6TPnjqCjSzZ9sumTTZ+5tDti
259bZmZmZpsv7Y4gjy7Z9MmmTzZ95twRdHTJpk82fbLpM+eOoKNLNn2y6ZNN
nzl3BB1dsumTTZ9s+sy5I+jokk2fbPpk02cu7Y4wMzOz52/uCDMzMzvutn1H
AADPL3cEAHBc27ojzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMxs
O/sLpx1c+Q==
     "], {{0, 748}, {530, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{138.10546875, Automatic},
   ImageSizeRaw->{530, 748},
   PlotRange->{{0, 530}, {0, 748}}]], "Input",ExpressionUUID->
  "fe8765ab-3f60-45c8-9fd9-2741407d34e8"],
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
CCEkUqgrqCuoK+Jv8dYP1BXUFYQQQkikUFdQV1BXxN/irR+oK6grCCGEkEih
rqCuoK6Iv8VbP1BXUFcQQgghkUJdQV1BXRF/i7d+oK6griCEEEIihbqCuoK6
Iv4Wb/1AXUFdQQghhETKic2PuZ47zn8Tyc6nJSWkfXlsfULZ6f3vJqR9ebQy
Ic1qOZyQFm+95c/iPV73thHjpoQ0c3taQpoT6gpCCCGxgrqCuoK6Iv4Wb/1A
XUFdQQghhEQKdQV1BXVF/C3e+oG6grqCEEIIiRTqCuoK6or4W7z1A3UFdQUh
hBASKdQV1BXUFfG3eOsH6grqCkIIISRSqCuoK6gr4m/x1g/UFdQVhBBCSKRQ
V1BXUFfE3+KtH6grqCsIIYRIDLashl6vR3ZRM6yatmTHvsol0Oc42lrRCpum
bWkPdQV1BXVF/C3e+oG6grqCEEKIRF/VG677Z3LaOlg0bekcqtInxqgt7QlG
V7QuuAnP33YlkpK+jZ9d/S088dgvsO5D+TGPYuP0azDx6euQ8tRP1e3pazD1
5bvQv/nxoHSFZUoS5tx8BVJv/bpfm3rzP2J98nf8aoD6u5Icff4mWqd9y2ef
5RX3+8+54+s+lnrzlaid/M9h6YrTXfkonj4Wd17/f3HD9f/hsqdeSkZT21qf
Y0cOL0fl3x6Xjr3t15g+/y30HdZWVwxtewkPJSXh+nEv4qjP/lzsLHkKf773
+45r90P8/Kf/inHjH0VV9d+iritOdy52XKuHvK7VRDTt+jiiY7XWFZZDxXjE
cf1+9mIehuKgK84eWIyHHe0/mV3m55gd2FP5Jl4a80vcmHQtbvi5w+4YgwUr
VsCsua7oRuOSqZjy2suYPWua0l6bjFmLVuKLGOuKT9/4L8d3+bdo6qlV3X+w
diamPH6D41pd7bI7738cK9Yv10RXtCy9H+NuvsrRnx/ghqTvY8zjd2JD1V9H
OW8GKqde4zpnUdkM6gpCCIkBPWtec4/1Uz7WXFfUZEi6QlvfiPYE1hWPYPX4
f3A8z5JULXXBWOG4BzHvP9SPUdjVv0J3kLrC/EIQ7+cw/fgfqI7/9z/uOeZK
NE37ts/+E+MDv++c59XfN9AYf6h5pmNc4v8931lXJju+GPOu83PsrZPRo5mu
mIu3bhHa+dUz6FPsW4hV46/0f61Xz4+arhhqSgt8rapWhXWs5rri7C7o7xTa
vuNvOB5rXXHiY8z+ubv9MfpSlWMa8fG0f/H/3X7iDQyYd2qnKyw7ob8h0G/r
dQzGUFd0ljwjtHs76lV0xe73fuu3ry/kFkZRV0xH6YtX+b/ffDDN77kHPrhV
PC6rdLrGuuI0avLmICWjEIcCOePtI+ioL0OOXo+MjAzo9TkoqmzAEcvFgO9u
Me5BeUEe9I5zMjL0yMkrQZ1hEPZAJ4XZFiGERILdOgyTyQTzsNYehMtHV/S8
9xPxeXb9g79C85rH0F/1Oyx56h+F7T9C1do/Cj6Nm7HotVuwZKbMZt+GhQ9K
z87bxt+LgSB1xflpSVj94BX46GGlrX70a7Ln8Tew6RVfzVB/v/yZfaWqv6L9
9+79N177bXz0qLKNwge/jtYp3wxRVyzHwts8bd6Lss0f4eThj3F461t4Vdz+
GDoEX8TegrvFPr69epnr2PYVz4nbxuUUaKIrGl//sXRtHLpC7q84XvuMuO/5
ma+gZ887ONY8A38b921h+2/wWeeiKOiKEiy81XNN7kHZpyU42VeOww2ZeFXc
/ig6+qpCPFZ7XdGafZd0/Ry6Ipb+ilOGxXhJNhZV0xXGzSni/qcycnHwSBPM
RzahJmecuP3lFRu00xXmSpcvJynpery26F2UFL0j2ZK3UVKxEV/GRFdU4dO3
fye7D9zu46+w9Cxy+X2c+++YMAN796+DuedDFE/5lXDOj7Fhb01UdEVX3v8T
+5Kc+Tx6d6Sit/ppTL5W6N/ND6G3Pd333K3P4EHn/mtjoyt6Kue6jp80KROd
fh5uF827Md91jLpt6D6rcpYdHeXz/J6TnL1RdT4wvLYIIcQ/dpsVZpMR/f39
MBqNMJmHQ8tpsNud/3P/p0N7GJ3vYxqW5kdk+533vmGhrX6jCRbVhkbXFSH1
WdE+XO33OtvvN8Ks3gGv860wGfvdfXZYUOfI8K8rHkGRRxP84mbsU+iBB8Ux
9P2vPRBAHzyIebf5e4/w8ivkfgb9n76v3DchCRO+5z0XqK4rPvqZe3/qOHW/
RKj5FSNdWbhLaPODhgrlvraZQl+uxtq2Kowczsdf/OiHvXmC3vjpS0H5LELR
FMeqximvzb1KXdH4+vdV9cbp1pdxp+ucn+LjbZH7K0Y650rXqv4T5b5dqdK1
2lUR0rFa6wrzzr8pr99DsdIVW1Clf9hnjltNV2zL/Jl7//gFPjFPVZP+1bXv
upR8DGukK07v1gv9m45DccqvGGh8E3+53vs+4KsrTtROlvb1yfctFX+fb69f
GwVdkYL5NwtzK5NeUOw7UfWA0If/QG3TTK/zpiFvjPLv0E5X2LGveqFszJ6J
A6q64jRW6pIlPZBRiPqWJqzJS1Wc2+klEs50fKTQA0srG9BUW4Z02bbZZfuj
0hYhhKhhHz6AlTlpfuYpdCja1KPwnfYJ8yzJc2Rj/Qufu+c6knPR1FIBnfw9
kvPRf/aAMBfieL/aauSnJ/u0tbiy3Us7+NcVofZZ7J9j3waDwTF2mOpzXkrW
ShxSvb/bsK/2A+XfJNicxVUYCNKR4l9XPCxqh9QFj/rs/2z2d9zPutt+jV4/
emHb9G8Kz8NvY9WqcZHnbU9PwjPC8/XG277vs7/1Ls/z9wrMue8K3BRAV6QK
x30y+SrX6+HpfwfLjK+FrSuGts7AQ7f9u8sn0XbIW3PMknwTNWUYOZCDsZ7x
sGGDH33i1iBR0xWdaXhZ6MNv7rtWVT8cq/srPtI/hvySN5Xn7pniysdw5luU
RkFXDDVMx0O3/rvLz9B2sMpLc7wuXavqVSEdq6muOLMZU4W27hr765j6K84e
WSZqq589PxlZz//Ij65ocIzDfueKGfvz0o993mfjJOH3cVvwsVChjvt71kxw
a5fpH7n8El8O7ccXQ90x1RU73rhG9DfMmvucEEOnoivq/OmKDzDF873aFLmu
OFH9CG5wvd91KtphBgyfTIBh01Sc8PJXtC24wd2/a3+KO7T0V1gHUJXj/exR
1xVyfTB16XbFfFlP9QJxX6pCI8j1wUzUGS9IuywHkDspWWxT7iMJry1CCPHl
ouOZl646NlfaosYh8RxRV6Sp6Ao1S1mF4QsHVPfrdMrXExfL72nquiKcPgfs
n1dfTyuu0Ag250wIfE7yfOwZHj3+NJCuWCToigUFvrph91vC3PYv/ls9Z2Lt
rbhDeDY/njImJE3hT1fUi7rhm2id/k+qORXP3PrP2JvijmF6xp+uSEkSYjWc
z+wrBf3htgl3fxuHZ3wjqvWgjq//s/D+t6LuwAYc/3Si4JMYj30+x0t5F04N
Eh1dkYtPJn7d3ea4yfi8+hl1v4SKDbWm451x30J046D82/F1L0jX6vN1UTs2
Ml1xEOtT3WP5pBeLcXhPTmzjoJw5FWMewJKKNa7Xe/Lu8euvCOTz8Mx9357x
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
EolEslfF19fr+x3dv1XJHD1eV7In7pqqZQ8zqqQ9vnehSlrpk/wqaU8eXKuS
9vj+paplxZerpOXv+qJKmk7EFSQSiUSqLBFXEFcQVzjeHM0PxBXEFSQSiUQi
2SviCuIK4grHm6P5gbiCuIJEIpFIJHtFXEFcQVzheHM0PxBXEFeQSCQSiWSv
iCuIK4grHG+O5gfiCuIKEolEIpHsFXEFcQVxhePN0fxAXEFcQSKRSCSSvSKu
IK4grnC8OZofiCuIK0gkEolEslfmuWINEkKHYkTHt6DR1EbjBu+g//D+iDga
IF8+cR6CxnyBJhqNvmzjBs3gvtgdWSpzxf2UQGyc2hNtG76LJg3f09uAn50Q
d2GvbPlbJz0wvXdzrmyP3v0RFrXVerZw0WBO82pwbfWiok1s/jLCx1bnx/5u
GkR01eDrN/+Kpm/+DU3qvATXrv9Crls1s9xwuL1Ge9+rIXh0TdW5ovTWYayd
1hMfaT+rpk0aaK0TZq8OQ4EDuOJJeiC+1Z5Hf79dqpatCK6I8Wqv/Uz64eyd
AodwxaOb2zFn/FBMnzpa0SaOd0J40uVK5Yon14MMn4v/Hvkyd6MR4T8MbRt/
iCaN66FJm3aY5r8KOXcqhytSDszFz93raj+7+vr2B4ybgqiL8RXKFQXra6Or
9p70Hv2ZfJnQRljW/zU0rPOKwRq/iVnOHyFjV3PZ8rGeb6Nv4xe11/AqGmn+
gS4d38W+APmyxBUkEunPqycoLCpx9EmopoJzofDy8oLvlniUWVxnh6HOhtMo
ZbaVP7iIYC8/7XY/xOY/rZBzNc0VQdgx/J/aPkwja967V4jK344ei7YKZTVf
DsJ1lbji7umZaKrUjtaWRYSJyl8PG6RYdv6eUKu44s4I5XaFtmh4LW7sv+gN
hXJ1auCG+4uKTJE7mC/rO/JNVbni/pVAfKN0/l95IrcyuaJwHzwaG9rutmi7
emUrgCuu7pnM3KduOOUgrrgb52zRd3BBdELlccXdcP5z8QqTKXMEixornGtr
N2RWKFf8gohZHynep1kRURXDFTsaYnptQxudR0i5IjeoNlorfX6NP8D5XV8K
yn+GkO+VP+tZ81uoxBX3ERngAWfPtcg01XmVP8LlmDD4afssT09PfR+1Yf8J
ZJc8M3n0kvxL2BkcAC9tHU9PL/gFhCA6qQDlpirZ2BaJRPpzqiQ/AYFuThgz
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
voToKa+b5ArV54PS21XeZ6GzJp0wcEBz/u+Gbsi0gymea664G8mM5bvhlMO5
YjtzLh1xJl/93Ao1ueLJ9bWi38HAYd0Fv4PmiLppga/C1jioor0cv+isZ/8e
onMZt9k+X4WtcVDnpgieWXVqok+bfwjuSR29r4Kbe3Z9HY43dNaqbU3Oh6Gz
aZ7SNfFU54pSPu/RVSEG9158ENc/HWT6bj53cSYSiuVq3eZjqxcxfaaNbZFI
pKon4bhV9xuXrlVXJhNPxPs65WMoleahVeAKQX7AwoPy+RVPcw9LY31EXGH8
/sJarnjE8ZOy/7ZMkD8un18hl5chzn+4K6pjjiuEawy5Kvkiym7jQlwczl1I
QU6R6RmhzOZtJy3E8hF1JeP2fs5jcC3NuPwanA3sIVnn4qsBP+F80gaLmcIk
VwS0s4grgkTrVezGCf/ukjLjvL0sngfKmCseTmJzJ141zRVM2Yl1jM6xzms4
PPY1k/V0tv0Txl8xQsEnYvPY/youbJ3A+SdYazvCA5cKrtvFFLZwRdJaw1yg
3fzMs4I1ZdX3V5zEKOa9u6P9FY8y2HUrelUJrkhax3wu/lKu0Psnrq3DxDZG
v4OvBuNQ4lnL27Fx3P9b2mZ4dH/f6BnQHiv2hNvNFKa4Im7SXwxcMVouv+Iz
HJxUg58rlrEuPeohVmatu4KQDzC9zQtG11Ad82cp527opBpXaMf/wvkbpWOD
csQHTOTrM33mPcFc7cJ5Eznd43Mp+DllbWuLRCJVPQnHsitipfMwPE7h4/v5
+aCEvk4XxBYZHTNDXEfIFUI/B/do+P2KYD4ob5nnm5YRvEZLxtzqcgWQEc6v
GSSd10lX54CZezEGKyV55/exi1uvT3evnonqmJ8PKo9bL0j3/udskXS+J+E8
wUujbc/bFuVeJ/oj5ZSP1nyRlRJsunxaANKYsteTVlvFE9bMB2Wt3U/bhtT4
DUi9sAm5mbYdwxwHmLICLV+kT3gBN1ykc0PZbHaO/59ox2o3Uk8iPfU0cguS
7T+ejVxRWaYWB6htFcEElc0VllkC8q8eQtqVSGRmnLK+vp3j/8Lrx5CWfASZ
1+LsytO2lCsssh3NcDH4Y5wP+gRXQ+X9DkLLWP+RtuzH2jrNuPipyuEKcd8m
iTW+d4abl91p0THR/I7cunczdksYIXEjP3/hgRze72BTWyQSqcpJ5K+YsRbJ
hYbfeXlZCdLP7TBa35l/9uRGLRHUM6wbUVpajIy4MFEdY67g3/e7YEtMItJv
5Ov3pxqvX8Gs0VBanIldRutXcDkMKnMFHl8UrV+xaGc8ikr1C1HgptG9EM6F
xz0PmZzqNTEZembSrb2xy4s/99G+JzmWsmb9itxI4foYM3EwqQBl5eUoK70r
Wl9EeR4rXpZyRWVbRXCFGqYaD1QVrqggczQ/EFdUVa6w01RkATXNLq6oQNNJ
Ta6AIJ9a12fv0/Y9ui6mJP+MKCczLPmJqFqi4F2Xs2848kqfafvRR0jcuVD2
3Zw9bZFIpKqmu9hmvM61i4v4b8FvnXtfXiLwMZgw42eHcI0Idpysjycqv41t
bqPNHM/ofb1g3Qs5rpCs6SmQ8HkqXLvnTmKo2Wty3XBRtEa3Retta8f8aSXS
Opatt30f4V7m7o3yvN9CEVcQVxBXON4czQ/EFcQVpvpBoW4K3iHKmfB9GafS
TPiPcTJZLzr/qTptkUikqqfSbOzymyH9HbvMRdi5XBQLchuE6yPo5pEKdJM+
O1YeTUVGzGrDuNk4l1n7vAkxqsPnYD1B4v41ss8Tj+BwZBYbxQAJcrn3SfK2
+fXouNwwgbiYJpm4q9L8BKz1dJa5H97Yd+4mjF0CbC63s98uxESukNSbsTIS
t8vk6wjz3p8WHOfe10jz18uQGhNq5D9i3gd5rsXZGw9giYgriCuIKxxvjuYH
4griCp1M9YNCFVzYK/Llc339/kTlmKSyPIT7ucq8awxEQr5y3rVNbZFIpCqp
Mt36ePn5WitEUXGJZPyspNLiIhTq6+WjuNSyWmWlpSgpKUFpqczbh/JSFBXm
M/McFaGkzNIzUVe667LlfojuY4nKb1fKy7h7Y8vxiSuIK4grHG+O5gfiCuIK
q6Xtl9l+Xtf3WNr1lBYXIieH6c+L5VfKU6stEolEIlWuiCuIK4grHG+O5gfi
CuIKEolEIpHsFXEFcQVxhePN0fxAXEFcQSKRSCSSvSKuIK4grnC8OZofiCuI
K0gkEolEslfEFcQVxBWON0fzA3EFcQWJRCKRSPaKuIK4grjC8eZofiCuIK4g
kUgkEsleEVcQVxBXON4czQ/EFcQVJBKJRCLZK+IK4griCsebo/mBuIK4gkQi
kUgke0VcQVxBXOF4czQ/EFcQV5BIJBKJZK+IK4griCscb47mB+IK4goSiUQi
kezVw5w9+n5H929Vsrtnx1dJc/i4yshu+b5QJe3OqWFV0ooSplVJ+/VQ1ypp
v11ZVKXsTtzPVdIe3NxWJU0n4goSiUQiVZaIK4griCscb47mB+IK4goSiUQi
kewVcQVxBXGF483R/EBcQVxBIpFIJJK9Iq4griCucLw5mh+IK4grSCQSiUSy
V8QVxBXEFY43R/MDcQVxBYlEIpFI9oq4griCuMLx5mh+IK4griCRSCQSyV4R
VxBXEFc43hzND8QVxBUkEolEItkr4griCuIKx5uj+YG4griCRCKRSCR7RVxB
XEFc4XhzND8QVxBXkEgkEolkr8xzxU5c2DEJIzs3RlPNu2jSUGstv8bi9X4o
zNkrU3actuw70Gje05ftP3IoDkSHqsYVv0b2glv/jzF5yGeKNqb/5wjbNU5Q
bwzOBbTHsDZvo7GmJhp9UAONmjXEoiUDcasCueLJ9SB8q9Ggv/8e+TJ3oxHh
PwxtG3+IJo3roUmbdpjmvwo5d9Thiqw5GnTRtt+wRU2k+VaT7JvWphqmdXlR
YhPavIIds6vbdFyruOLYD9g48UO0rvs6GtX9l9behtPYDrh4bLiZuoOxd8zb
2u9YDawIGao+V8QMQ8Bw7eehvcbGH76htXpw8xyEGwnTmTJTEOX5JcaMaAEX
RfsMLlP7I4+rYz1X3N72Mbppz6HPhPYK4/4uiPNqgCEtXtbeC+09fO+f6Pt9
Y+xe08UsL0QMr6atUwdRu3uoyBULED6lkfa4byNg7zzp/vjJWDXhMzSuV8tg
XzTD3MVjkXvFS3WuSF7/NcZ0flP7e6+ht9ZffYQNwT/Klr2+tQNcOtfWfv+q
661b52YI3TREda64d2kJgqZ8gyYN6hisRRvMXzYb2XLlM4Kwd2FPtG1Qmyn7
BaYsnInMjO3EFSQSifQnUcG5UHh5ecF3SzzKLK6zw1Bnw2mUqnQez4ouItjL
T3vcQJzNf2qyrGmu2I6dE/6lHSdo5O37ccjh2EJbdmQNxbKL929ShSuyQz5R
Ph+BzVk3hqkzGluHmCjbpQMyK4Ir7obDo7GhjW5eYTJljmBRY4Vzau2GTLu5
QoNZdZnjfVATKUbj/5SJpu/f1Em1bDquxVxxrDvGKLbfGCePjFCsey2gEVd2
0brBqnJF3r4eaKN0Xp93xjU9J4yH9wfmv4OaDzoLWMRKrohoDdf3DMfpMqad
zJi/Ezb3Um57gb8yW8R7vMOU+zcOqcgVGZvace17hc0V88DRwcr39YseuGwh
W1gyxj/nWVvxvgx27y/mj+UfK5b1WDVYNa4oPDkBTZWuv9NwZIrKB2BBfYWy
Xw5HWoVyxX1EBnjA2XMtMk11YuWPcDkmDH7avsvT01Pb1/hhw/4TyC55ZvLo
JfmXsDM4AF7aOp6eXvALCEF0UgHKTVWysS0SiUT6X9fN8Fn6Z7jTjAiUVGAd
c/o9Y7v+mDrbkf7YZFlTXJEbPoTrz/rNdEf61R24c3UDDnp35baPXb9WX/ZO
7ARu2/C5HriRsQsFF32x5KdazPYuSLhh7N+wIQ7q+ABsnN0ewfM6iWzjoraC
/rc29kYYymeu+4Lb3nfCt0g+Pga3jg/HPld+bOq0ZKSqXPFb8mr8LBgLyHFF
yuae3P4l4Qdx7+45JO3h72G/wHC7uOKwcMz5gdSvcLyvYV/DJq8hYEg1BPz0
Imd+/V9G5Nx/2nRcS7kiZuKrzHHewYqAfsiNGYyLq5vjK+bY9Uf0lK97sDO6
69uuCK4YhcnstX34JQ7uc8bt+AmI8mzKc8wWF33ZC0E9EeDZE8ELe3C2xqc3
/Hrz96eV00+4bUMclI6dhwi+P3JckbPuQ36sPKYFUvZ1Q+a2lljY9QVme13E
RXSXsEj4eCH7/1s9f8XpUeihO2Z9Oa6YjcVfsG2+Db/1U1FwaR6ubO3LsUar
yRPU4YqoHobvh+6Y/drhfORI5Eb1w5rBbzHt18SeA6MMZU/2wVD2XnRuYygb
2RueX7Hn2gQno0erwBWbEPoje8xO2HM8GPcyNuDCpp841hi6bAVXPimoNfcZ
Ld6yHLczNmnL/sBt+2HJsgrjioz9C5i+Yy6SFV506d5beTP9i5wdlO1zynF5
50LFOk6+h2X7P9vaIpFIpOdDN5lnso4RLPU9ZOyaZqjjvFs9rri5RxWuiHF/
39CX/TRDEvO0b2R1/b4G4z1xT/t33Lx3DWVbjEe+sOyVeWir7w8/wp7zuyss
v0LID3NWj+a2R41/2bC9V09JzNOu/n8xXMOQ3vhVFa44iYjFvSTvGCVccXcP
xx3G/JCy7ltDvQZTLPJZyI3p06YaveNsWsNo/K9BYDPDvvGj3rI4Z8L8cS3l
ih/hy4zdWk7qLdqXMJt5l/5pa1yXqbeyk/gc1OSKG1vY8dy72Bc1Q7BvCjZ1
ZcaqU0eYOMZ4eH9t7NuwhivaY7vTG5LvjxxXHHNi9n/0KTIPdeP3hX3KsNmb
2BbKM0Pamo8x5D3j999qcYUHVvUQH1vIFQWHenPbPTd5iOrmhnVi9n2G0wne
dnNF9nr2OVAXx0VM8D3HEIuChxv5NZrgzMlRfNmTfFnX5cPs54pkT+YZqIF/
ZIhoX4xbHcMzaLIHE//kgxEK/JC0/CvD+dYbZLHPQifLuKIcqYeWCsbsc5Em
24ndxzYXJ54HPNci5lwcdgW4iuomG3VmDy5vFvHAmv0nEHc0DG6CbXPCrqrS
FolEIj0vEnKFpY+68tJiFBYWoqhYvYejOlyxBVvGt9a/Txu2IlCy/9BIDccR
uliogrM+2OI3HEHb14rLZixET30/+R52VBRXnOyLfkxf3GBIX8G+n7FxyPto
rN0+ZN5QSb39/ZlraNbR4lgok/kUtzbia+Y8Gg0bj0XD3pXliie3turzLjSa
+tifkSTel7WWOYZ239VE67liiQajmHNo2aSagl9Bgwn6MtWwYXYN/d+Z3n9F
1pK/K3OFRce1nCtWMlzRdWJf0b5L8+sockUCu6/uu2hdV22umILdP/7VwA4T
ZcrFjMK5fWOQdmqq4jHiPJnz09TCzsMzLGYKjit2N+P8NQ27NcScrn9V5IrM
kC+xfnIDLPPqKN63r5k+J0OXb7FJwBXHhrNj/tcxfcyH+t+EWlxx0e9zZrzb
BF/Vk3JFblh3xgfUA6nG8U6XJmM4c82+cjkZVnJF1qbPFbiiDxd3t3C9gSui
p79ueGYM7iU5zsGRrzD7eqLAbn9FMGI3OcPHYyJSjPIjYj2bGD7vce4o0jPI
fOZ5+S52X9ghPs6l2QyfaPfFb1WPK0rzEO43ycgXIM8VQj6YtOaMKN4349AS
bp+riBGEfDAT0cLY3JI0+I9x4hlB0KZtbZFIJNLzIyFX6J6B5SVFyM/J0Y67
87XcYGX2RHm57j/D/2rZQ3ec/MJimTjUMhQX5mvb0O0v0rf7LDdCFX+Fsm3C
is7M+9uZSxTL/XZlOVb89CZUjYOSsYPjX2HaaITokxMsrDcSfm2Yaxg/UJ04
KF1ORffuWBO+X/930qqOslxx58wMw/k2nIBrJvIufE7GWckVGmxpz/JeLVyY
rhCvNN+Qd23wObyCRoL3zD/1+BcSlrxi23GtiIOK5eKg3sOGdQNRcGoIroW0
5fjQOA6qYOdXzFhYgw3bByKkk9pcMQl+jK9hxY6JuBDUCWO71sVXn9dGt68/
wcogJzO53nxMT9+Zo6xiCo4rdDkVLd7WsoKBI067VFPkCjm7FdYKSxTioHQ5
FX37fYq4MB1HtMAPKnHFnaMD9fntujZDDs3E5h4yXLG3m+Gc2vWVydGehiky
Pg6b46Ci+TioriO7IDlqpHbbj9gylvVN6OKgnLRlh3BsO8l3kOQ4acuZOMlm
bXE9bpSdXCFnoUjaysdB/bDMX789/zATe1q/P1JuGudo83kXiyM2qMIVdxJD
FWKM5LiiDCe8RpmIk3qEXW6jDfud1uE2s/VpQaTAJ3Fdcg6PU3l+WBF71662
SCQS6XkSzxUhiDm0RhpDOiMQCfm/y9fxEMROPb1miCl18kfcuX1wER7HKRDZ
zIub3HM7RH5kvbl4Y2OwR4VyxdF5fK7jskNbJPvvxEhzFL2Pblclb1tikV24
8abTouGWs8jkN7lz8w1xUjW/grWEZWa4ottCFErqncba7rZxxQU2NkbzD0R4
v46sqfLjf0k8k8ReR5z3q1Yf17r5oPrB91Ol9r/AxRjhnFB94VaX9W/o4qYG
cWNCNbki4GvT96XB8B8U53cKH/4XptyXSIi3PP5JMW9bayeZGD5zXJGzph73
G2BtwSrj3AqB7f5CJa5whTvjn+g6w1n79zysameCKzRvY9tRMVfcEcRIqcIV
WrsW3EzxM+QZYggXi7d000hlv8dX7ZClKlesx/oRH4jPq54T8pj9HFd0HMdt
E9YN6qQuV2TsnM31Fc4rjyE9cYcyVzzLRiDjW3DyOCwb63uTy88Yg703DH1d
QcxyyTaR2P5OeFwb2yKRSKTnScLnnLK5iPzAsjkZguesxJy34762SG7UEgva
Up8r4ry+4cdZ4xfocyskXBE1QtKfNxw5FTck89LazxVRk9l49M9w/qxlvooY
17r8NQzpa3FuhVpc8dv5BUz7E5CjFlcIfBBTx9QS84PR+J/N2daXHVoDKd7V
kLVQg1BBTnbLnm9ZfVxruCJ3+zecb0Jq72HH9iFc2SMTXzNsr9sCyaeGi/Iz
KowrPv8UW7aMRNK+QfDu/X/c9hlBE2R8FQO4d+ROfuOtZgq7uWLVu9Lf2/ef
I0WYdyGKlVKHK465Me1y8U0e8JfhCl2s0zhuDN0S+w8ZcixuHhrOxUCpxxVD
EDb2P4pc0XVcD4YThiPkO4Y1ZHIoOK5opj5XBHUyPq8mCIwI1u8vPD6G2TbA
aI6oiuEKff/jHIjY9HuGroeLoZXhCm2/NJf1O+yT+h10kovBvSnIBZfP2XiC
cM/R4hhiG9sikUik50nGXLHy0GWUlOvimO7iRDCfa+Y0g8/RtoQrdH6Oo3Fx
2OY3A2tifwUenBf5KTbE3dTHP5WV8HGyLqpzxXYcnNmS7wt/miqYY9bYdiL/
6g78dmMTYvy6cHW6efmryxVxP2Isc+y+swdZUGc09o2vw19Dr25WzTGrvr/C
QyV/hQb+TQx1Ovd8kxvbZ7HxSk1rItOXz53I1LLC8YkvYM+01yQ8ENaFqfN2
dVzS/m3NcS3mipie/Dw8dZsiYudP+u1ZO7vAhfNhvIfjR0bg+rpPub/3hI9k
jjEYwey75hBza13YwBUffonY067ifV1Z3uiGbCOfxQWfxsw5NjWqVzlcoVvH
InN3Z9yK6IDIybW473eXCd9UGFfcZHMmtGPi/afYfOsFWM9whe9ecfmr69uY
9AWpxRUJC97hjufk3gtZunzsk0NxxJOf/63r9B9EcVBsvkXl+Cu24d61Dbid
EYqc03MwrQV7/c1xKnm7wF8xulL8Fcb63QRXPLt3hutXXGXimcT12b6nHInB
003EM+n0BJECrii1uS0SiUR6viTkioWSdyxliPIbxe0/zPgszHKFk79kHnF2
blpxPCqrR9y7H2u4QmiScf6NICz5XvAudPwM8ZxP5uKm2HmlWowywSLWc0X2
lhbMOdXG3siJZhhkELy68NfQYEhPZFvJFKpxxSmGK1p7IF9S7yQCrOQKUVxT
h+rw6/t3ePd9EdOasdv/gVnfvwTvQdWR5fs3k3M+ZU7l64RNsv24psb2/Bok
7yEi3GidiiOdOD/GonUDBLFSNeA7swW8JrWE77SPubifbj801287vNey9fEs
4YoGToMl+7O3tOK4QrwmhbDeTzYxhf1cIbYINkf7o4+RJuezsJsrPLBMOG/s
gl7wnvE9/D3ac7kW3QZ302+Lil7As8XWvuhfz+g9/fpx8P/hVZW4go9t6jr2
e8n+6Glvcz6I63FDeZ9XsJQrstczPFth+RWMXZjBzRWlY4X8A0MN7X45Wma9
vGAsN8EVpvzWlsoUVwjH8esv/GamPtv38MwwxnkTjHsrg6RcYVtbJBKJ9HyJ
4woZFtDpqSCfeumRW6I6SlwhzXN7gig2n02XayGzoNDjVHXWr9BbRgBmN+TH
AsO9fGRjnzKiFmC97wQcORsmk2/B+PY7jbOYRywZ4+8b9Q/Dcdt0Mc0IJ3+E
m2AdsyGuA6yKfVKbKx4m+zH5J+1xItdoPihurqjmiDKaK0qRK1xMvwfmrYZ+
Hbuk6Rrs+PnviPSQ+it4rngVe8Zbd1zruaKFzFyyg7CGy8keYCIHQ2yuqy2L
h1Ie24+H3+fM8YZLuSJvd3t5rojqzeVrL90xpdK4ImnVFwia3BThIVJuyFnD
xPm1MJqDtkK4wrS5bTVmhQXIPT0HufGeuKP/exITC/U2Qg4ttJsrWB+E66oR
kv25W5sLfBAjsKUfwyCTfpCUjZlkWA+05Tgpn1jNFdcCcHTdeKxaNhe3Jfs3
iXwQ9047M8+G5ohONsrb5uaKaoIjxnNFVYa/4s4pzocQqtCvyPkrTgdMlPjp
xZLxV9jUFolEIj1f4nOw5fPM8DRTwgtmuWJfltFBBLGoiu3wsan2cUUwFrTk
xwjzjOeQ5WwLVjDlGkzxluyPmfdRBfgrRsKLeW/utGSYiXJD4NmMvwaPgBE2
8YSaXKGbN2oicz7zI8U+iYLj45hzbY/TuZZxRdYcDfz6vgS//i/yNuglzONi
LF7FvP4vw2/E68jy1Y5f3mJ9ENI1tQ+wORYf1ESqVce1wl+xjl1nrh6OHzNe
V7s3XDh/xY+Int8SvjO/wkqBrZn5Ke+vGNxCu60tjofbGwc1DYcmMu+zvzb2
SUxDnDuTS/D1t6I4qBsh7JoXrW3K17aNKzpgSVPm9za4raTeYae/VbC/Yh5O
+vaG34K+CJzP27oFnXl/xc/farcNwIlTuvyKSZii91N8iEOnxWtU8PFRLRF/
yfya26bH94Pgy/zW+06XskKKbz2RD+LSfMaPWre1kU9iEPdsaeksPY61XJF/
eCBzje8i/JIRDyR7Mqyg/V3u3YAHGb4Yzz5vw8Q+iZx9fSGMmXJkHNTCg8b9
knF9mTgohfdt5uKgLG+LRCKRni/x/opAeX+vjB/CHFfsSDee50LgV9Y+p821
Yw9XXPBrzo3H689cgPSLa5EauwpJAku5uFVfNp4r+x5WHQrhjpG6Yyh3jG5z
VcyvON6by5X13TJGsVz8rLf5a5jQF8mRw3Bp1yAk7BrM2aXI0ZXLFVo77s6O
rfshKsOwTsXD62u59fLqz1xvURumYpqU8iAOc3nb1eA3uQa3PZ6b90mDnwZJ
mUO1/Ap2zWytNfz2GyRzcz8NwJYR7HrQNRC6Uyl3oiLyK6bh9oFu3PX3dR/E
zf2UtqUDN17uq/3tCevEuL8pyxsV7a846fIic66vY9mKztz2RK/3uWtQjJ9S
KW9bakr5FTMx70PmGTDZCQXMXLO5hwYb1ujWsPNJmW/D3Pj+yKTqzPXXxIr1
g7nt17e2475z3JoUBzpxfNp3eh9mnYoRODKNzYP/D782t13+Ci8MYNpp9KMz
Mtk1LK75YQk3VwLvnzg6mW2/E45c2GLIybgwm1svj1tDr5K5wrQfnSliY952
pEzeti1tkUgk0vMk8/4K/lnpajFXGD8vLfFXZNrPFTeWY6QFcQ6a+qMNPght
+QmC7Y07f40BAl+HpsEgJKm5fsXxXsw44UNEH1eYByquP4ZZcg1126myLp41
XPHk+lpuDT2dDRzWXXBOzRF107yvwhxXKM7b5K3BIEHbDZu+gj5N/sK337Q6
Enxftv64VswHdXa+cA6jGvjhu/e5NeH048xpvU3Ur4j5oHQ2hfdZ6OzDevih
67/5vz/ogGQjdjgx1ZAn3dXkOtwVkF8R0QJOgvvVqMU7+OEjwXf6vcY4F6Ew
1+zuL5i18/6NQ6pyhcJ8UFd0a+c15c+tXhP06/Ge4PNva5GvwqL5oKK/59a/
09+XZvXQ76u3BG01wPEofr28A2Nr8vua1Uc/gW+z5bi+FjGFJfkVSUEdBOfQ
BP1/bC2ai3vK2kBBzsVsLudCZ7qywrqHjX0elcUVpbwf3HXDFdn69+KDuLH+
QWbuV34u25lIKJardRtrmXXznBYxfZqNbZFIJNLzJGF+hVzew+8ZfN4Dm29t
PVeU4QSb/62Ux3HzgP35FVcXc+/YTFqvqXzOxNUArBhZX1Km35QpSLeCKSzh
il8j2HUrGilzxfHeJuYyFViXbhbncFvDFUnrvjVwhb+UK/T+iWvrMLGN0bl8
NRiHEs9a3IbJHGzOr1BDOv6frxHEM/HWu6s0V8Kq41q8fsUwXAz4knuHzNs7
WLS0r5m6gxDyrWH9t6XrLMvXtowrDGwR59Oc80+w1rp3J5w9ZTzX0xTsGm6I
w+/iPlx1rjg93TC/ruK8Tru/wpJeL0s+w76DP0OSElPo/RUtMURfto7K/op5
2PSDYY1K37D5kn3HFn8jua/dBvdBfLy3xW1YNM6P7oOV/d6W3JdW332Fs5Gj
jcoPxxH3DyVlnaZ/a9E8UNbkbSdtHSbiBcN7mbZYtzdIUvZe/GyMN/59tuiB
iJMhVuWF66QaV2jH/yHsutnOm/TznYtVjngml0Jfn+mb7p1bx+dgJzyUNnqP
z6Xg55S1rS0SiWRaxflpSM95wPxVhoyYMPh5ecHLKxD74m7KrL1McqSE80Gt
ZPKyed3HLm6eJhfEFj0T1bGcK4zmnZLEngryutXI27bB7lzZgJSza7S2DjkZ
u2w6hj05EBVp1nCFZZaA/KuHkHYlEpkZp6yub2r8b4llLtLgwqy/IX7235G0
6EW7j2cNV7AxTdf29sPFnT8gee9A5FrBCLaYxWP9+ElIOeCEpANjkXZqsl3M
YCtXWGrZYe1wIeQbrbVH2j6FNStsNOu4wgK75IGr0a64ctQNN+PN52nbxBWM
FUT9hOTdA3Bx94+4FinN4xaXHawtpy27/0dcj7acJ6zhCjZP+0b8CqScXoG0
+HUoMlk2FDls2QvrrOKJiuEKcd8TmmTECPfOcPOfOy06Jtuf6XK3jRkhceN0
7pgHcni/g01tkUgkBT1CJLMOwaQtV/VbCk5I10GbE3bVwedJEop7DroYPp81
MRmGdSWKs7HLaxL3uY32PYkyozrWcIXORyxc38J332WUlJWjrPQ2IgNcRd8R
R3CFGuZofqg8rrDP1OIAta0i2aBSuKKSTU0WqNJcYadZO96vLLNlzF8ZppOa
XAFBPrXu/di+pAL9+82S/DOiPiks+YmoWmLwRG6fs2848kqfAeWPkLhzIbed
y62wsy0SiSTVvUQ+blDH4uVawg9h17R388fW4EXcb+0s896b5HhZtN62kz/S
SqR1jLnC3HxODwRzyZoy4griCuIK4griCuIKSyTkCvk17LR9VpT0HafQhO/N
OJVmwp8ZwyhZNLOmk91tkUgkI/Hzsvnuu6rn82d3jvO/vUJDqcuM75BYvero
ZqSBEZz9diEmcoXkGThjZSRuG69xF8nmesv7K/aayEd7cCMW/m7Gz+qZOHgu
Bv5MbKqp+joRVxBXEFc43hzND8QVxBU6/c7m5jl5K8zdZFDBhb1cHJLQVu5P
VI5JKstDuJ+rpI7TjEAk5Cv3Uza1RSKRBGLXS+b9kAVHGWZ33s7FJuYyHE/z
q1VdlZUUIT8/X2uFKCqpuLcqJcVsO/mwthniCuIK4grHm6P5gbiCuMJqlZei
kOl3dH2cpX1PaXEhcnIM9QqL5VfKU6stEomkE88VBj9kGSK9DPm+kwTzrbHx
M8QVJHtEXEFcQVzheHM0PxBXEFeQSKTnV2wclMeWeOSkHODXs2dinh6kH+f8
gubiXEgkUyKuIK4grnC8OZofiCuIK0gk0vOr3wXrD/D5voG4rd2XGz5LsG2T
/HrLJJKFIq4griCucLw5mh+IK4grSCTS863cuFDBHGtzEc3M68zNFeXsj0s0
FxTJThFXEFcQVzjeHM0PxBXEFSQS6c+gcpSVGSUolZUgP7+I5lYjqSLiCuIK
4grHm6P5gbiCuIJEIj3/ovW2SRUt4griCuIKx5uj+YG4griCRCI9z6L1tkmV
I+IK4griCsebo/mBuIK4gkQiPb+i9bZJlSXiCuIK4grHm6P5gbiCuIJEIj2v
ovW2SZUn4griCuIKx5uj+YG4griCRCI9r6L1tkmVp5LCOP33SPdvVbLizJAq
aQ9z91cpK85YWyUtb+lfq6Q9uBFaJe1W6AdV0u5fC6hSdveXyVXSfkv1q5Km
E3HFn09//PcBbt/KQtath44+FVKVEK23Tao8EVcQVxBXON4czQ/EFcQVz6X+
eIysjAzcuv0Afzj6XCpBf9xLQeCU76DRaBj7BOdpiEgCrbdNqjwRVxBXEFc4
3hzND8QVxBXPo55c9hKMsTtgwfZE/NfRJ1VR+i0aHZhrnRywD6lZt/Hg8eM/
BU+RzIvW2yZVlogriCuIKxxvjuYH4griiudSf/wXD+7dRkbSUSwa0tjAF6P3
P4ds8V/sG2tgim0ppY4+GVIVFa23TaoMEVcQVxBXON4czQ/EFcQVz7/+wFnf
Hvqxt8/p++aL/y+pLBlDtdfVcEGso8+EVOVF622TKlbEFcQVxBWON0fzA3EF
ccWfQuVpGKsdf7ddkujoM1FXZRfRW3td80/ccfSZkKq4SouLtAyRL7GcGzeQ
nnIWWwO2IpMAg2SHiCuIK4grHG+O5gfiCuKKP4dKsKW9litWXjFf9H9JWq7Q
5VasuEQxUCQl3efW2zZtM5k5o0gk20RcQVxBXOF4czQ/EFcQV/w5VIL1zzNX
JD1y9JmQqqjuxQdZwBS6vO11uF3u6LMl/S+LuIK4grjC8eZofiCuIK74c4i4
gvRnVDlOB0zUPwucVx5Dsfbvy1sN886GpjxAeeltnN44x7CexZpfQFhBskfW
csXxOc2h0XTF6ZunzZZ9cMUH32qfdY0Gz8Ntlbmi6OIiBE1ug8YN/mOwFq0w
z38GsmTLr0PClhEY0fFt7bnX0ZfvP3wAIqJWqc4V95NXYuPUHmjb8F00afie
3gb8PBpxCbvtKmsfVwQhIXSw9vrf0l5/bTSur73+Yf0QcWSFbPm0/aMw/rsP
0URbVmdtOnbC5t0+KnGFBju76+YtqQb/qTUl+w7212BUh5cwrfOLYmtfDdP6
VMeNpX/ny3tpEPydBq3f+isavvU3rb2IUT3+hXjv/7ODK0JwYSv/XWmi/678
iIhjwWbrHp3RRFunDU5d2WIzV2SvfgsBfV5B69rV0LD2i3rr3eUdHF7ZwCwD
ZK98BV20v7cG7d5HWuiHkv2JC/6JUa3+jkaal/TWqtkbCPasryJXrEDEtE+0
9+A/CIhYZrrsmbHooT3XvnPnqMgVzjjq8QXGDPsSk4c1V7BP4TLlB9wS1Mvc
+S0md30PjT6oqbduXVtgy7ZxFcwVSxE+tan2Xr2DgP0+kn3HFnbC2FEdMHNC
V5G567Z5jkcBcYWNIq4g/Rn1hFkXbyYSig1bHlzerH82LDyYxZQpwwm/Ufpt
h/OfOuxMSVVXZcVFKLEg98YarkgJHcbMA94WJ8xyRQQWtWbmDW/phjwVueJ2
zBjteFcjmJdcYB2H4LqofDB2DH9NvqzWvPcEqsYVd+NmoKnSeWltWfh2m8ra
xxWB2DHMxPXvXiYqn+DfXLHsMO/5dnPF5XH88ea7vCnhilm1lO+JRlMDqUtf
5JhilGK517Tjstds4IoNCDPxXVm8N0ixbtJadi2qLxBtI1fc8H1FO95Xvn5v
z8YmGKA2ZjVkymo5NSW0nmj/qbHKxx00WplZrBnzX9/ajTum1x5f5bIps+Fe
31Cuq7u7ilwxBl51TX1/GKvbEZm/TNHXSV6l/H2fEzy2wrgiI7Qzf692exnt
n4t59Uxdw/e4UWFccR+RAR5w9lxrOnez/BEux4TBz8sLnp6e8PLyw4b9J5Bd
YnqOypL8S9gZHAAvbR1PTy/4BYQgOqnA9PtRG9tSOAPiCtKfUAxXOHkjjfld
P2XWs3DdcJEr9SBxHa23TZJK+wxO3L9CtI6iKVnGFdE4vrS7oF9ra9ZfcXbh
F3x5LVeo568IRuhA9jzaY09UAIrSgpCwcQDHGkP9fQUMMpIfF8+Zjuup65F3
fj58BtbkjnE+bZMKXBGCpS3Z82qHsGMhuHNzJ7JOzMWElvx44PLNcCvL2scV
t48P5a9/9mRcT16NvPg58BlQg9n+Dc5fY8pfmql/h6zb/tWwEbh4YRVuX/LC
+jHMvO+a2oiIX2M7V8zT6N+na95S4ApvZr+mGib2/ScCfnyRt/7VEDDqdWQv
/Zu+7JHv2Pv0MvzH/ws3fF7ALxM0aM2cf4MuxsxinisKT4wWfFdmIPNqCPIT
FmIJ913pgIR0Y2bYgKMLvxL8Nr6w0V9RG/MbsMeoiY1e9ZEZ8j4u+9TEKJYX
NLVwOkTev3BkkGDcqeUKob8ib20N5r5q0KprHZxeXQ831r6DgG/5exi2qpF9
XKEdW+u/O/VNc8WvMeMwXDBGVpcrJiNhVXcEeHRH8IJuvHn3gt/3fJutRg/E
r7ryZ4diGHsuXTvg/PFJuHV8CDzbsmU/xam4qepzxbkJ4ntlzBUXJzG/w3cw
ee4QrF0yiLN1Cwdg7RpX3KkgrsjYv4Cb214pd/NZ0UV4m4jPPig7JinH5Z0L
Fes4+R7WjvjVasuUiCuM9ceDXJyJOoiDBw12MuE6KmVU+cd/cSvjEk5GRSFK
ZyfP6Nfys3ltkf8+xoMHD/RmyTH+ePwrUhPOGNrW2pmkDNx7bOEqgmqfe4Wr
HPHBhjiofenMWtql1zBXv2bFdu63R1xBktPvGdu5Z64l3w1zXJF/Zgl+bmT8
vsw0VxSechWX76IiV1yeibbMcf0jg0X7ol1r67fXd5nJbYv1eMdwDl+OwC3h
cS66MsdpjN1nN9rNFY+SF+Br5rzWx+wR70tg78f72Juwz6qy9nJF7Jy3DMdr
PlT7HBTsuzCFuf6G2HPawAp5+/szbTfDqeR1guPMxQjmfL13r7SRKzRY1kz8
PTLmihvT2X3VcWHpyyZjqRY3ZsaIvWqJ9p35kTnGBwLfhoVcwX9XfkaecN8l
N/67cm4ztz3n2BSMaGD827CNK/JWv8Yx0UofsV8ib+XfufH/lpXS8X+61wvi
c2gm5or0+X9h9r2OwxsaCuq+gcFMnXmeTezgCl+s+lZ8H6RcsRh7Zn0pefeu
Nlco+jFYVvisI9IYX8W5BR9w/HD27BS+/NnBHG+4rhqvMlcswqqeRvfKiCsK
DvZh9vVAaqXlV5Qj9dBSwZh9LtJkueI+trk48TzguRYx5+KwK8BVVDfZCBLY
mAvW1uw/gbijYXATbJsTdlWVtsz0eMQVnP7A5R1uCj6xYTiaVVGTjZbg7I75
+ES2XZ31RvDJbOsOWX4TswXHMH0finHI9yeFtjUYHRxrgg8q4NwrSQUnljC/
GRdsictAWXkeAscYfl8rj2SguDAZa90Mf4dZ8E6a9OfR7zf3CLjid7PlzXHF
uTn1md/Lh5i98GcmdkeZKx7nb8ZE5jfWtuunUN9fEYDYjeOxeM5YJKeJ98V6
NDS8qx7rirvMtrxYT4T6/IhVof7i46Sy7+brYJsKXHH3xFT0aFkHOj/Dhevh
Rszhzj13fA5tt6qsvVyRd3IWQhf3x6rNRvkRydOZ66+NbSxXHFTiigUYz3LF
ftu44sxg5rn71itoreCv+GU442vo8IbeL5Ht/QJueMtzxTKGKzr3ekt8DLYd
G7giP24eQpcMwqoty8X7rs5GT+a7sl3AFbEz/sPcrzpw9+jD/DZs44obPi+h
S0MdP9TCyQ3iuKS81dW478S8BUaxUCFvcvFgrZq9DDl/RboX2+cZc0Utrq7k
uFZwxcUVrQ3Hr/8x2ir5KxInc+8DGvb/FvP716g0roj1qM1c/5sIOzSN2x7j
9obhPcSwgZI6B0e/xuzrZ/BtqMQVF5cxbFW/Kb5S8FdcCWxj+B2MGqf3S9y5
uBgFF5dWHFeU5iFcMv+kPFcI+WDSmjOidbQyDi3h9rmKGEHIBzMRLYzdLkmD
/xgnnhEEbdrWljkRVxj0B84GCmMQ5OwT7M5QeXz5Ry4WfWzUzscd8P3330vG
6m5H8y08KL/WuHmu+C8OTRVfo9OshVg4a5Covuz6JhVy7pUoAUfofms6+snY
NU12ntlLxY4+WZJNKi9DUWE+cnJytJaP4lLTGfjlZaVced0aJoVFxbJrIz5O
5f0Vujx/czLHFbqcigHOs3ExXccRm/GjSa44iXDnNw2/rcFLkXlmdgVwhXxe
9qUt/bk4qB/8fczmfC9XPQ5K2X6NYPNSWiL6WoRqZW2dD6rowlwsl4uDSubj
oLo5j8O1S6u123yxw/UzpqwuDmqd1VyR7a7h8gaC3V7H2mbyXHGwO/9c7tP4
L/xz+oNXEexSXVT2OBcH9Q/9vuylf8HlKdp6TB1b4qDk7N4lb8F3RRwHpcup
6DfWCQmXdNu8MMAOrjCVO53uyXPBgbVCf0VdbGX9BO0+wAWfV2S5Im9DdS4O
qnPf93BhbT3tttrYOIC9x7o4KNu44m7MSO53FxLlhc3fKnCFLqeiwxcIDPHU
/33eq2nlcMXx3mjDnF/fGcMF+8YhgPFhOK8YI6mXtop5J/IZn4thL1fcOT6E
v1dH5mJzT3muODa1Lvfd79fhTf530Lw1QnbPVZUr7iSGKsQYyXFFGU54jTIR
J/UIu9xG83NVMlufFkQKfBLXZfosnh9WxN61qy3zIq7Q6cnVIP571XQazt9m
RxN/4PqxxYIxshd+VfVEixDY3nDspoP9cD7rIb/rj8e4sNlZ0PY4pFsQlnQ1
bKSgjmmuKLu+gS/ntAW/Co//OB2L2vN+h/OS4ZP6517pKslGePAcOHkchv4n
VX4Xu7zE7xS2nL1r7iikqqby+zi9cyVcZJ7lHsGRyDN6fpYXp2Gb3wyFZ78L
NhzJYHLeniDSa7RsuX0m/BbW5G0/vrnWJFdk7mVj+dviRM5pPDjlUsFcEYT1
w+uKnyn1RorjnYT53lE/S/K9vY1iqdTmikeXFjDvurXWyQW5uco5E9aUtYUr
bh8ZKr3+g4GiMpm7+0ie0axN3rDEhrxtDabVYn0LtUS+BjFX8LFNSjZhxBui
8j6KObrVEa8dY9vDFYXHRkvy6hcfXq9c58rcCuGKvFWvcUygafaeKB87caaA
NzY0RDbrlzDiCp1d9nxB+b5Ol8+tMM8VC4zyr/2xqoMCVxjZmXkfVQpX7B/G
XucXOC+MddJyhR/DFUu3OUvqZW8z+Aw0bbsiWxWuEOSqz5yu/dsbq9rLccUi
+LdX+l4bzCVwtmpckbFzNtdP6OafTE/cocwVz7K5953cuMRIN7n8jDHYe8PQ
7xTELJdsE+npNS6HgjuujW2ZF3GFjh0OTakH9n39ERkou7xuID9GV3utPe34
/WDUZSgNu4/NYvPVtGN7M6HcTy7zfPSRwG+gdB94nuqA03KvXQsPmz6Giude
lVRSVKh/X23u/TapKuo+dnnKj/05c1qHPOajfVZ0XhR/qmSGdzxPEO4mf+xQ
E3kWVnFFjjJXPM5YqZ9TVvebct8TweRZTK5wrgjqaNzvNkZguPwcT7cjf5T0
0Q2GjzeaP0o9rniU7I2RXFum8yWsKWszVxzsJ73+YU64zpVZgb3TP5OUYa3b
9MniHA0LuOIg61d4i82Z4PlBxBXefM61pol2nDzrn8j2eQGJUzRcDoDuvfre
+Qa/xY0ZvG9Cav/AFrd/2ccVhwdJjtto+ERkKtW5qj5X5K2uLrp2YW6FLh+D
5Y2pMxuJ450kXFEHWwYoj1M7D6wrOy+tOa44PutDhuX74Oq1QH2exbKqxBXH
+6E7c41OvsY+iYkIYXK5nVdNUOaKz9ThimPu7zP3qheTM8Hzg4grLk7i/Cua
9j0QdXwh7lxZiqv7fxbku9fDoXPLVOEK/djcORCx6ff0fz/l4mhluOIpk+ep
8zvsk/oddBLH4T7m2zCZs8HOgalliBkRhhxSG9syL+IKlCVjKPtdmhwpP0Z+
8gt6mytTQbq6jp1XzszY/KHgHDXTkHEvBWMt5gqFYwvujS058BafeyXo8Y1Y
bN26Ezt3Wmdbd0bhdkWl1pBU183IBQJ+8MfZnAd6X0NpcSa2CXhj9dnfIMzf
19miLadRyEwcW6Zbw2Qnn2Pn5BGhf59TXlaGgvj1/HHO5aK0pARlJhBUHa44
hOCuht9i9zmrue0PzjA5yF3moKhCuCIERamrcTttPbJjZ2BqC/YZ8zlOXZaL
bdIy2+W1KEoLQLRPO25c1XXBAtW54u65uRgoGLutj9qmSln74qCCkHdpFYqu
LUP04q/565/nqd9/KYCfw2ustxtu6eKjrq1AtH8nSVlLuCLVmR/nh82twfkZ
AhmuWDy1lsj/8Mv0F7DX6UV9PI+IBzx55nAfr2URHwFrvPUa9s4yzCmb7q7B
xA/4Ng8vfN2OOKgQ5F/ZgHvpQYhZ0oFnqwVelcIVN5a9LuKmlV6NRJzA5sB3
Hsj7L7J9mPLN3kOmgBPOTOSP8/PoD5AWoq0T8i4OjP0bt73TCPm5ZpXG91l7
+nLvO8PPrGK2r8B6hiv8IlY4nCsSvBsy59hEZl4nPg5q4eaJFeqvuLmbnYP4
I+yPY3lgqX58q9vuu1+YO+GNKwenIXLjBKRe8RcfK24ExxyeoQtVzts26HcT
XPHs3hnOz+4qE88krs+O9cuRGDzdRDyTTk8QKeCKUpvbskTEFWVXN3K/+/kn
7iuUEuQsfL0e5iOqVdJv0QJWMBVL9Ct8BX69bRlPtV+1ZK6uchzUVv49kXuk
JD/74YVlYP0ZMfcq6twrRxlbp/PjTatspuJccKQqpmfZovy0S8ZzWPx+hfNN
6J+tTzP5+fVGb5eZg4/3T3DveCB832Q6/okVyxVCs5YrOL+EzpxnYM0SZ6xc
Mh1z+tZhtrfFwoXabUHaMafKXCGy81O43FDv8CCz5Y+4Muf35RCF9fRs44rr
e4bx90PzMUJjwlQpq1Z+BWtHXJn5j5r/hKyMFVjO+H66Tp8pKRs7/xOm7FBt
WUu4QhinVA2L+1fD/O9exuI+L3C5Fp3b/lO/7cAc+bUm5PO0ayF9Cs8Oe+eK
8y7yFvB+DOn6GLavt33Ujcn9/XIYsiuYKxJn/VXwnXgVwT4NRfv5PGytfVcb
/iNqYvGINzGtFbv9dcwaXAuLx9VFVui7WCzDINz8tMN5H4fxmhfKXOGLZV+y
bf0H/l4D4e0+EP7zunNxdt2G9tZvOxa73EFcwXND/dHSvGxhHNTCDTJcsbkF
46+wN79iEfybs/fqHfgt6gvvmT/Ab25n/l4N+U6/Leqk8fp40mOxsVOGWCrx
flNjBUtliiuE4/j1F34zU58d6/PMMMZ5E+Qjt6VcYVtblsjAFfWfO64wjKkt
4QphboV+PK5V9sk1GPL99xji5ItL9wwvIq+GDmCeMesrbt7ZP/7Af//7GPdu
pePYZvE8S/NP3FGqhFMLW3PlXPbkMBd20QJfg1GOd7s5OJFaaPDH/BbHc8Gg
Leav2aZzrzzdSzqAgIBgBAdbZwEBu5BN/or/DQn8upM2yD3TynHzXDTOJaUg
p7BE/3dpSRHyc9KRU2S09mF5mWFOMGaODfZZrJO1z1o1/BWFx8cJxkGmbKLF
6+Mpju1T/XEk2Amr/GfhV8n+YC4uiuWKtEg3rF/8Mw7HrpPJt2DyQTqOUMzJ
sJYrrmz4QXC93XDURDyTNWVt5Yq0g9O01z8Mh08GyeRbMHPtddTNQbuCu3cz
twWYKWstV5i2qRNr6de5OzzuBWxx+j/xmtrGXNH3LQFXyM35pEGgQl64Oa5I
P+yOdT6jcCQuRCbfguG/DkZz0KrMFWcmC+/Nm9grN6/sfMvuqy7PPiX0Pc63
MXW2dC7ZG5yPQ5qTYRlXmDa3MPl4qArniiO9uHf7cvkTurW5tw408FvXKcMk
+09MMeRLt5rwk0XtWcYVZu7VDi/8dnEuToaOwa6NU2XW1BZwhadb5fsr7pzi
fAhKsbVy/orTAROZfmq37BoVsv4Km9qyRAau0L2D/x8Kfzcr9j28dVwxDJd0
L+zL0/i4KI1uLqRkfbmrXI6FtlxF3Kyyi6J2OWs6DSeylOehyjvGz2PfyP04
H6NVZglX6FSEdd+b+C1+twq55nwNNp571VA5SkpKRX/np2vHnUXkpPhf09Pc
CD7fIemh+QqcyrSfeQIO7dyK4AA/eLq5Sd5FOZorHlxZjTVL3LFmucCCPOE7
hJ2HsyuW6rZt3mi3vyIvkh2L10H4RaNYp8v8fEbeu4P0+RfLmdio+i5zJMeK
9mhkOJZK/oqsPYI5sTs5IdXEunbWlLWdK1ZgOTP+q+8s9UFEs3MI6/0Vy7iy
/WRindI2dBCUtYwrjgzWYHH/l+Df/0XOAvoL/BUdXtNuexmH5/4T6c78s3kL
FzPF+yDYXAIdK/BlX8Vhb2Nfh4ab59g6rgjmvisNXDwl+2M8mLUBK9BfcXmW
oH9qVhvxCmvgZa+sCf8RteA/WmDj3sb8dmz9mpiv2zaF8Vcwa2z0HiE9XuI0
pk7DOlb4K/xxavlP8PcajECBrfP6jn8HP7q/dtswnDzjmDiozA0tmXvRyihf
m7ck7waGMnXbGfkkxsDrM8N1tJJhDuu4whsnl/WH36KBCFw4gLN1iwS+nVG9
tdsG40ScL3J382uW74wzyqFIGM8937x2m/NtVGwc1MKDWWbqy8RBOfkrrOFt
Og7K8rYs0R/MPKNe2tHl86I/cGyKLtept0Xjf2GOgb68dozMx+/oYsQMc6zy
XFFBuQJPftHHbknH9sMQfOCy7BoSZdm7+HKN/cRzVVnkrwAeZhzBWOP5YgWm
i48ye7k2nHtV0OMbx+Glex/t5C34LT7CLuYd9Yw1UVCKjCNVPf1uZXySTk8L
z5tca7SqcIWSVUh+Reo8ZvymQcOB43GdXcNC23/79GJ/25/jOJNfcdbnU45D
hPncKVv6c8+CrnMW2p1f8ej6MkGOxPs4GBeC6+fW4XLcGt5i16FAyw/WlLXX
X3F28cdg310H7l/GbU8J7ctf/+y5Ys7Ql/XlymYfGcuNZxqMmYIiK/K25WKa
ZPMrBOzQoG1NPsfCS8sH3DxRr+Gk96v8ut2670CLGoJ8DA1COrNlq2HjrBpW
+SvOLfmM/65EBHHbU7fyc6N0m1Mx+RV5G2oK8ileRpjvh7iw7F2c9hXa+4bc
CIW5m5TyKw4O4o/rt4DPo0j1eZW/5999oGUQS/0VSlZ18ivYtSk0bXso50cc
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
hTFx8Ecm1m1HK9Rtm9IXERER0VOjR9clczul6SyDXiXKeeLng/rjoqjNPFkb
4D7PIuJ75+3jwrx9LmvOQbKq9uM8rHO1tw5XZK9mx0ztEK9bX3FrC7NuAD/H
jF0XDGojjFs0jR2Qaqn1K4zlisJtGKURnYM+a+RitXXxLqztI8r5aIyBI3/B
pxou96Me/Myo2TaqvuKqN8aLPpcmHb/DgBaiv71hL5zj16+Q+jZt8R36d/xE
dK1a4eh5letXmMUVeuaDouyU6/NCntQHb6F3+/8Vcmqosb5SrMKUeWZ7sFxx
WLZ+xUrJ971Zqw4Y0Lm56Fp1VJyb1hBXlEzTCHOJUvb9py/wMQy6nxnDRbUV
HhpmrUL+s2r0Ivp/KPpc33wV57k1KdT41hpXWGc+qML9HTBMdA27dPgAbUTX
cLSnmBP6MDEL/nv033fRp0N94bp89BUuSNbsNo0rkv1bir4X+m1W1FZVvrXO
FZXCHE0uay4qtr9zajn/7NnHxuCFuWzdcEZxHd9ChLJrONnPZeeUNbEvIiIi
oqdJWdHCfNoOTsE4k1+Bx08eoujSXsl6E+L1Ky6L16+geOREZgnV5gkelF7H
dvEaqE5bhZo3ej120fp7Tv5bkJKZg/Sz+/l3PNaJV2zBaOa5ZqdYt30/OxxB
Dp9J1mmgbeD0ObimhilUcsX5kG5MP10XSbnifvZ6DNZoZOeja5q+vkbXcJsy
9r+weyY/3yzfZ7Pe2Hw6xSymMIoraDs/B0uHfyj7u/s7jcHVqzq+qXOwfHgz
me/3AwYh6axxTGGIK45NeYHhrM7jjOGKdljVWZt7v2CJLie0Q9SUt9FMJ2e/
yy/NkBAmr6swLV6xkuVSZUaoyFqNlaO/lV2rtkPHsevqGd8XP5afTvHDp7p1
Ji9g/tD68nG/mwZLWsprUga0fwVpHv803ddErji/oov2d+hnDFccwpZh/8f4
B8TFWY4rKMvZ1hbTW/1TWs+heQ9+vt0U/PvgiOfHsu9Rm25f4/ie/kb1VyNX
BLWv8R5E2/LYcFW+tc4V1PifX8PVaT2/npKgapxiaymY9mws/c7JVUIN9pl7
8k7vCLUUwpyypvVFRERE9HSpFNvd7CXjeiXjY720qguxxc2wv4PjDJwo+VPS
06P8o3BTWF9b1/TN0cdJDVcYa3euR+HquV2U7UVe7nHTjmNGDYQ1zXQGuILc
jJNIv3IM6RlncM9MnlDFFVzt9dlFuHRkHmV+uJG6wqBvyflFSGN9r59dpqof
Q1xhcYv4HufXfYczq1vjaph8/idzuMJoJsjYhoykDbiStBk3ruwx7Ri6c8FO
0+CS89+QNvnvKPT6m8E5nQqna30vOT+H7Jny2mtTfdVyRW2YseN82jJ3dEPy
5q64sO0X5NUY5/gZFyjf5M3dcXlPb1X9GFu3bQujZTmukK5FtzHlrnRnSSL/
/sx+bpxQ+6cz14jurCbJovVk9+YIcQeT+iIiIiJ62lRdiuObF/LzcGjNEa4h
0TgWyW6fq7t+6AMk716p00Y7l4dnSCSul/2p3FdVHqJD5jJ+nHkGRiMz/wx/
H9c3Rx8na3CFRawOMIRlucI6pna8X1tWa1yh0qzBFRZhkxrG97YyW3OEOVxR
m2ZrfqgtroContrBwRkRKQVMfL08P1ESKw9LlSb1JodM4Pc5LYpE3oPHePL4
HpLDfZTft5nRFxEREdFTqaoKlBTlIz+fshLl2fVkqq7k2xQVlaCiqlrRrSI/
FceOnUV6jjA3rdjzUZZQD15TPRvhCsIVhCtsb7bmB8IVhCtoiblCeQ07ICvW
z3CcfNERyNKSKq9jsaOhWL4jDuU/skxfRERERESqlLF9Kn9fjcnXZY+HiPUf
ze8/VCS/V4tFuIJwBeEK25ut+YFwBeEKWn9k7dXGvh3m6Zm7SauCs7vgphBf
D9ydrD8nqSoPkf6ulJ84x5c6hhtdi6i/7tqkvoiIiIiIjJZ43m76vVLEscvI
LyxEzqUTWOfrJIor61uHSBDhCsIVhCtsb7bmB8IVhCtUq7oSRflsTD6/CBVG
Bg4qy4qQk8PG5cuMj+Wb0hcRERERkTF6gFj/MYbjw47eOK+vLkMkwhWEKwhX
2N5szQ+EKwhXEBERERE9y6pG7tl98PdyltRtT3Lzwprdx1FkZICYcAXhCsIV
tjdb8wPhCsIVRERERERE5opwBeEKwhW2N1vzA+EKwhVERERERETminAF4QrC
FbY3W/MD4QrCFUREREREROaKcAXhCsIVtjdb8wPhCsIVRERERERE5opwBeEK
whW2N1vzA+EKwhVERERERETminAF4QrCFbY3W/MD4QrCFUREREREROaKcAXh
CsIVtjdb8wPhCsIVRERERERE5opwBeEKwhW2N1vzA+EKwhVERERERETminAF
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
3hHPxtpjfdMXmSZwBc8N9LyyTq/JuWIku//912X11uL5n2iuEI71Ig45vSr1
nSLEMcQ5U2q4ojxzJfx6Cb/3JuPcUKCHE9T4mssVaeFD+O9ZPYoV18dJYw/5
+7l5oVtgf/J2aftLs3ge0dZ41y5XiMfxq8/+XkN77lkoen/mtB5Kb8KUuMK0
voiIiIieEhnBFZL8KEYPEMvVpdnP01t3phtDFueU6ruX1hx3FsRxRcXvF3ir
ccxfmsLUVtwtPIH8GydRdOucNkdq9c/aZ6JjMO7WIa64f1NYO48eN4xctF5V
7pOlueJeqj+bo/4j4nN15oPi54r6FrE6c0WZwhVpUS5YNW8koo+uVKi3GKq9
Jh3pGEQAlrZkr5GDnCt4X4tyRQuFOZ8GYkVHZa6IGPE8y2NtkWVgDlqTuIJi
gXoaaU6WuLZEiMf1o1ghGFuHa/Oxusx0lx3rKLvuRWtR3MMcrqhpTTr6367M
3LHefN2F6wZ53UXBHpZ32vdFrglcsb8NF49Qrp8oH8fVXryIBJ04gzBX1AsM
RwhcIZ/zibYNTU3nivKMZXBvLPq9+/rrzWdS42suV5wP7SX63Dphvyj3Sc4V
wxTmfNqI1T31c0WZgtFznlssXnH7KB9D2Kjn2aMUr+Di5/bTdyiuUaEYrzCp
LyIiIqKnREZxhe59z8R4heheqjdeYQJXODoKZri+Yph2zOS2UWdfLL++9IhV
0WYxhWW5Yh98uPGQph7mROw1iScsyRX0vFFcPsmsKGlMIj9uLHuuP+J4rrlc
EcSzglIM4qBHI1G8go5fNOY5I0vHN3E2W8vaYbTZeVA3Qrj8/waIlc3n1APO
ivGKPpjL5kiNmau+Xrsmrig+NhXBs4YheL7I/Edi/oDX2HP9DvPobctnMnPH
pga21m5v0BeZkpjEIsxj1+hupcAc6rhiNo4s7g1/n74IFtkqn85CvGLUzwie
MwDxzFp3nnx8o69CrtPlFWyez7c9TYpX+LP5SRP6yedp0s2T8vlVmiclrHeh
zW3iYxual3BCNKcUZy4mxytWY46o5nn21jUW8jWPK66H9xeYouNvemuv8/cN
Zv3aIV53TtobQZhqIF5Bz0soM3aeQGNlbB6UUj2gtL1CHpTeec8N50EZ3xcR
ERHRUyKTuKIcka5jarjfVgkxDYX6CuV6tnKeV6yRB5W7fwI/7o24mKSNXZQm
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
LLJ+zW27/P/uIoTy94mZu9XJ1zbHFeI6dqb52gY7YpjLdMdtaDeax1RmyJ24
4wdCPOKTn4v+/icTlVnFeq4IxuG1ExG6YjIil08SbNOKZ8V4xXsvM5+9iUP5
q/H1sRnCeodrEo3YoXQWJmkMc6dM50E5nSskc5NWpJk+x+T7K8yDUojVG55p
luZBWX8uEolEcq/EelDK61cY55tda9or3McW5yhHdBVjE5LPdtUo80hv4zFE
BnrLcrWl5rX0M7Ry92RJXNkq81OPKxjLW21YC/YubDx8CJc7KzlrKV4n+Mn3
fLAJ3R7GFQWr/8DnBwTgvJ2+n83xitYU4ZrcPXM96r6u49atuNyegxChTtRb
KGv3jLztr5Kn8H16BJ8XJuPSOebzc4lInvtH4XOlGIft8QotJhvGyhu++LJm
J7rqd6DrVAhWvSTmVxjiE1n+v4IhfyGzeBvXtqN4kbBe3t2GNfTcwBVqjSuz
vn3q43jW8HtOeBQVWW9xsYjWg69g6zRDDapbsXWnnjlOr7tLYLadO97k276G
XUJbaS6Gc7iivyVJGPfrC084lSuKFbjA2K7MEOMDbz31A/TMvYmrLdsyVSPU
q5oyXh/LqH5GZIr7x/0QTe9/C/Xv3oSad78lWP3737ajHpSxKedXsJ/vnGjo
wxik5Wr59SuWIGbid/nP/4yjpWqvi6eXJa4YKe7ONbEzbztDIW/bnnORSCSS
OzXSunjG90M14hUj3f/6O3Qoz09DXEQw/I3qO83fzh5PEq/wWokyXRu3Fkaj
zHTQtbWhjTEds93Smn+2ckVfWyp8JXH8+x59Aa9P+LMkpv8SCpqdu36FXVzx
8R9GbKM6VzBWEfeqpHbP3Xh9+kuCL8PmLqx2IGfbLq6oWcvHAx5BjhEj9Jzd
gHclczMm/ONxYY4P29f3o62LVViTX1G+4QlZ/adJb4wR1q5gz/VBTKQk52Kx
0A8uVvbGGOHfo5h9M41jHmpxxZcRfJ2nscg1xxUqjStLvn1B0C8k1+pWvDrh
VxhruB7M5+P9JetwS/O8GRv/xP8IbdljzAiyPlZhP1fs5LniSRTo1MutUOSK
x/W/24tPmM5xMo5ZCHOPbrsFb91zk3jPuu1WnJv7bS6nYobk2pm120bbvS6e
NbkSF/LfEWJ2XPzw+T8KMQz2OwyIXWb1eVipxhX9Yn7h/FjlWoPS3D9DzRCx
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
E+9ZtmuovxdtOh26FNZRIZFIJBKJ5F655Dk9PIi+nh70MNY3KPerenRlSIwO
QVBAAAIYC9LGYH95Cwad15sbWu71Tc2J95nd3Q0r5JrxfhWt9ZXITdmOCIbF
goL0YzsgKIibZ6QNjWAYOhFZhRVo7ey7Ia6by+URLEYikUgkEsmT1FGVCa2f
fJ5+eHIF9/69KWud2fk0bB0i5ar632yJvpTsU7TXH0NCRCjnl7IWGp2E4sYu
V3VK0b8bvnoBhenbEarV9ylIG4rdWaXo9BQodAPrDOgKzOaKmzPf0CScdWL4
xLP88iH+HUOf8hreDJPV5icjVJL/7+cXgIi4DJxpd/skSRKJRCKR3KABlCau
h1arxfa8Fheedxh9na2oKslDemICoiMiEBoaKlhEdDQSElOQW1gOXXuP+To6
KulC4SazvpSW6VuA5Gd2Xk1QoL9srvecKPXrCXmqrrafQVJEsFDryC8gDPvL
27htFQmLzV7H4N2lTqxjyvp4uyX5434IicvGeZYbLp0wnw/stRLFrc6eD8WM
9fazKC8pR3OvfI2IvtYzSE+IgpZjHS3zdxiJhJRDqHeyX3pNJ6lVxeea6OcV
GeW+M/3ykaybYrhmZU7AxKbcjVysJDg8Axc8gff6Twt/9yZragycRXyAaa0A
qYUkn1LmERKJRCKRvrEaENdq3q3mugLmdbW1Eju0Cyw+k01iAgsiGf/PSb6W
UY3PgIgdSEmJldVyNfiqyeVi/kJ/23GE+ThrXbE+VOXnIis3F7l2WxbyytVl
xWstB81+RxFx0TJf1TD/XdpmRZozxtgAjkbMNjtuYrSSPHMl/5nxk51X26sb
h6LFNUfEXIkBVKSssTjmg7cXOYnDxHXmuJhcShHaevsxMDCA/t5mHE1YIWyL
yjsPdixydXm1fpLr+hnUTndvSF0k/v5sXd52dxangtFafdL8DXF9e9m7BobB
/I3G+5r9zsolJ5FIJBLJVRqCrqoYhSUlKBnBystzhGenV3ASSsrL+W2FKK+/
qHrPrkjW+zL29fz9/QVTenfKWnLVJfX7JKmFqvejePVL1yNmfMLybtOdLx0X
3mkqbre7Uyfl75PtNC9fNf2/VsRIrodP4EpEhC5VqNHjh92FTbxPPIAmtk6v
sC1Q9XfdF4o2yMYSG18K8vcxvR7M+G7kc7UHus5y9aMM2+ZvP6lupzgNoSha
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
     "], {{0, 638}, {
     790, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{268.65625, Automatic},
   ImageSizeRaw->{790, 638},
   PlotRange->{{0, 790}, {0, 638}}]], "Input",ExpressionUUID->
  "e5754f09-9825-4385-8986-2d52d8ebba6e"]
}], "Text",
 CellChangeTimes->{{3.722394258881196*^9, 3.722394266380427*^9}, {
  3.722394297267147*^9, 
  3.722394330973276*^9}},ExpressionUUID->"967ad006-dfa9-424e-bef4-\
74716f404d88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"errtrain25", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errvalid25", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"errtest25", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cCNNtrained5", "=", " ", "cCNNchain5"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "\[LessEqual]", "60"}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Epouqe\>\"", ",", "i"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cCNNtrained5", "=", 
        RowBox[{"NetTrain", "[", 
         RowBox[{"cCNNtrained5", ",", "ctrainset", ",", 
          RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"BatchSize", "\[Rule]", "300"}], ",", 
          RowBox[{"Method", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<SGD\>\"", ",", 
             RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.0000001"}]}], 
            "}"}]}], ",", 
          RowBox[{"LearningRateMultipliers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"_", "\[Rule]", "2.4"}], "}"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err1", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained5", ",", "ctrainset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtrain25", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtrain25", ",", "err1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err2", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained5", ",", "cvalidset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errvalid25", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errvalid25", ",", "err2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"err3", "=", 
        RowBox[{
         RowBox[{"ClassifierMeasurements", "[", 
          RowBox[{"cCNNtrained5", ",", "ctestset", ",", 
           RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"errtest25", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"errtest25", ",", "err3"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<Taux \>\"", ",", "err1", ",", "\"\< \>\"", ",", "err2", ",", 
         "\"\< \>\"", ",", "err3"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"err3", "<", "0.01"}], ",", 
         RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]",
      "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.722392560636506*^9, 3.7223925615702047`*^9}, {
   3.7223926445931463`*^9, 3.722392646278933*^9}, {3.722392677829275*^9, 
   3.722392687696218*^9}, 3.722392962373868*^9, {3.722393006035954*^9, 
   3.7223930417965*^9}, {3.722393095801053*^9, 3.722393119608048*^9}, {
   3.722393162296652*^9, 3.72239324455591*^9}, {3.7223932766203423`*^9, 
   3.722393284777722*^9}, {3.7223933169293337`*^9, 3.722393369062561*^9}, {
   3.722393492290234*^9, 3.722393495367902*^9}, {3.722393532827557*^9, 
   3.722393536067436*^9}, {3.7223935705654173`*^9, 3.722393593193791*^9}, {
   3.722395360738097*^9, 3.722395400569957*^9}, {3.722395437244104*^9, 
   3.722395472232895*^9}, {3.7223956697880173`*^9, 3.72239567040025*^9}, {
   3.722395747815525*^9, 3.722395748652584*^9}, {3.722395810189741*^9, 
   3.722395824859873*^9}, {3.722395967903481*^9, 3.722395969108334*^9}, 
   3.72243663114074*^9},ExpressionUUID->"b10250a9-6e35-4c49-ad18-\
481cc48321df"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Epouqe", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722395990773616*^9},ExpressionUUID->"4b0dbfd0-c25d-4e26-8748-\
c570bcd2bf27"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.5855250000000001`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5935`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5883`"}],
  SequenceForm["Taux ", 0.5855250000000001, " ", 0.5935, " ", 0.5883],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396095602282*^9},ExpressionUUID->"cf306ed9-a14f-4250-a040-\
aee63f84239f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Epouqe", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396095620613*^9},ExpressionUUID->"586f4cb4-d4f8-4541-84d6-\
43820233b34e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.47395`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.49629999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.4878`"}],
  SequenceForm["Taux ", 0.47395, " ", 0.49629999999999996`, " ", 0.4878],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396200170394*^9},ExpressionUUID->"bd3f82ba-bf3c-4664-88cb-\
0e8bb7008159"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Epouqe", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223962001905413`*^9},ExpressionUUID->"7dd5d070-d639-443f-bcef-\
949e3d2e5f0a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.43642499999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.46940000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.46499999999999997`"}],
  SequenceForm[
  "Taux ", 0.43642499999999995`, " ", 0.46940000000000004`, " ", 
   0.46499999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396305298037*^9},ExpressionUUID->"174971dd-6f46-4373-b554-\
60f3678a87dc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Epouqe", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396305317725*^9},ExpressionUUID->"b6bd7c8a-8a66-4584-94fe-\
7d3c9f1b8bdb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.36205`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.41279999999999994`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.41000000000000003`"}],
  SequenceForm[
  "Taux ", 0.36205, " ", 0.41279999999999994`, " ", 0.41000000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223964098461733`*^9},ExpressionUUID->"58a1309e-c589-433b-96e8-\
399b7bd7480a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Epouqe", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396409865272*^9},ExpressionUUID->"48c48c23-db0e-4f2b-ab2d-\
df842954b650"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.3517`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.41400000000000003`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.4132`"}],
  SequenceForm["Taux ", 0.3517, " ", 0.41400000000000003`, " ", 0.4132],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223965146240053`*^9},ExpressionUUID->"c0fc837c-63d7-491a-99c5-\
ba01a22c6e6b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Epouqe", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396514643159*^9},ExpressionUUID->"d812c57d-5663-4ed0-82b7-\
88698dd5418a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.305975`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3962`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.39459999999999995`"}],
  SequenceForm["Taux ", 0.305975, " ", 0.3962, " ", 0.39459999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396620185506*^9},ExpressionUUID->"beeab7ec-feb3-4b03-ac8f-\
149b74c7d03e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Epouqe", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396620204131*^9},ExpressionUUID->"96fea926-8ec1-4691-91a7-\
0f3d138dd6af"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.25544999999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3748`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3657`"}],
  SequenceForm["Taux ", 0.25544999999999995`, " ", 0.3748, " ", 0.3657],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396725107333*^9},ExpressionUUID->"edf071e5-72e1-4cfb-a437-\
def3df25afd3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Epouqe", 8],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396725126525*^9},ExpressionUUID->"ad5eecc4-8594-4c1b-b0fb-\
341a8336ccf5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.22185`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36829999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.36760000000000004`"}],
  SequenceForm[
  "Taux ", 0.22185, " ", 0.36829999999999996`, " ", 0.36760000000000004`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72239682995476*^9},ExpressionUUID->"eb9e24da-7cf5-4497-8557-e87b72d0ba16"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "9"}],
  SequenceForm["Epouqe", 9],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396829973838*^9},ExpressionUUID->"4156c255-95aa-4295-a383-\
c02e0745059d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.16862500000000002`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35850000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.35340000000000005`"}],
  SequenceForm[
  "Taux ", 0.16862500000000002`, " ", 0.35850000000000004`, " ", 
   0.35340000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722396934218912*^9},ExpressionUUID->"dc8d5c6f-80e4-45f0-b2b5-\
707335ce4ab2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "10"}],
  SequenceForm["Epouqe", 10],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72239693427361*^9},ExpressionUUID->"0a5d215a-6f05-4b3b-9f92-b88dc7b038c2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.14617500000000005`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35940000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3597`"}],
  SequenceForm[
  "Taux ", 0.14617500000000005`, " ", 0.35940000000000005`, " ", 0.3597],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223970381243153`*^9},ExpressionUUID->"dce4e7d4-54a7-44a8-a659-\
6992270d17e7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "11"}],
  SequenceForm["Epouqe", 11],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397038214765*^9},ExpressionUUID->"3f8575a7-fa34-4712-95a2-\
e301b3551fa0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.10119999999999996`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35840000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3447`"}],
  SequenceForm[
  "Taux ", 0.10119999999999996`, " ", 0.35840000000000005`, " ", 0.3447],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223971421205397`*^9},ExpressionUUID->"bb87b133-de6f-4af4-97bc-\
f0f34d13ca52"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "12"}],
  SequenceForm["Epouqe", 12],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397142209015*^9},ExpressionUUID->"228d41b0-664e-4efb-b8f6-\
8ece45577a69"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.07617499999999999`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.356`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34919999999999995`"}],
  SequenceForm[
  "Taux ", 0.07617499999999999, " ", 0.356, " ", 0.34919999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72239724631601*^9},ExpressionUUID->"81cd5548-9d05-4c06-8117-f277a3fcb7a1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "13"}],
  SequenceForm["Epouqe", 13],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223972463698387`*^9},ExpressionUUID->"1f86f6d5-fab4-475a-a2e0-\
c74289bbd281"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.06467500000000004`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3597`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35960000000000003`"}],
  SequenceForm[
  "Taux ", 0.06467500000000004, " ", 0.3597, " ", 0.35960000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397350163818*^9},ExpressionUUID->"d81683d7-ba90-4082-914c-\
fba8bcca2325"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "14"}],
  SequenceForm["Epouqe", 14],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223973502527742`*^9},ExpressionUUID->"c61f75e0-023c-479a-8212-\
9511a8f8fc31"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.03480000000000005`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3591`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3581`"}],
  SequenceForm["Taux ", 0.03480000000000005, " ", 0.3591, " ", 0.3581],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397453911895*^9},ExpressionUUID->"d5379b17-d146-42dc-85da-\
e3a423de1dcc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "15"}],
  SequenceForm["Epouqe", 15],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72239745400143*^9},ExpressionUUID->"98962af7-facc-42dc-9e46-5dbf8c082850"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.03444999999999998`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36450000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3587`"}],
  SequenceForm[
  "Taux ", 0.03444999999999998, " ", 0.36450000000000005`, " ", 0.3587],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397558105668*^9},ExpressionUUID->"48b36b76-968c-4384-bb4e-\
0772d0b5c8cb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "16"}],
  SequenceForm["Epouqe", 16],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397558160857*^9},ExpressionUUID->"720048b9-dba0-4ae0-875e-\
fe4d99eccbb3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.02234999999999998`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3668`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36419999999999997`"}],
  SequenceForm[
  "Taux ", 0.02234999999999998, " ", 0.3668, " ", 0.36419999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397662249971*^9},ExpressionUUID->"5be64e58-a38e-4129-bba8-\
9cbfe9b826c8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "17"}],
  SequenceForm["Epouqe", 17],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397662303575*^9},ExpressionUUID->"2f451cf3-0189-43a4-9963-\
b422e6b61e85"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.013349999999999973`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36539999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.36160000000000003`"}],
  SequenceForm[
  "Taux ", 0.013349999999999973`, " ", 0.36539999999999995`, " ", 
   0.36160000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397766349092*^9},ExpressionUUID->"b2c1d00e-3914-4973-b8ff-\
7cbad0a88194"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "18"}],
  SequenceForm["Epouqe", 18],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397766399825*^9},ExpressionUUID->"aeb361b5-59de-4816-9364-\
4ddb454e8fc1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.01067499999999999`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3559`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35050000000000003`"}],
  SequenceForm[
  "Taux ", 0.01067499999999999, " ", 0.3559, " ", 0.35050000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397870490573*^9},ExpressionUUID->"1816b05d-0184-4be6-a808-\
4f13688eea79"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "19"}],
  SequenceForm["Epouqe", 19],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223978705405493`*^9},ExpressionUUID->"bc9a116c-ed82-4662-975a-\
ff35f12458ed"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.01177499999999998`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36040000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3568`"}],
  SequenceForm[
  "Taux ", 0.01177499999999998, " ", 0.36040000000000005`, " ", 0.3568],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722397974635825*^9},ExpressionUUID->"689891d4-90ed-4b6c-a577-\
3ad0b1c7ed45"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "20"}],
  SequenceForm["Epouqe", 20],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223979746860437`*^9},ExpressionUUID->"b4e80873-506a-47f2-81ce-\
e55f45c2001f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.007874999999999965`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3538`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3467`"}],
  SequenceForm["Taux ", 0.007874999999999965, " ", 0.3538, " ", 0.3467],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398078333776*^9},ExpressionUUID->"84408360-e3e7-4fc0-b08b-\
d3abd42f0176"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "21"}],
  SequenceForm["Epouqe", 21],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223980783844357`*^9},ExpressionUUID->"0abf8c39-4c62-4d28-84d3-\
63f7cbf489ec"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0050000000000000044`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.355`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3517`"}],
  SequenceForm["Taux ", 0.0050000000000000044`, " ", 0.355, " ", 0.3517],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223981823292627`*^9},ExpressionUUID->"38ea1752-2f4f-4235-8f38-\
f5435699c4c9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "22"}],
  SequenceForm["Epouqe", 22],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223981823802567`*^9},ExpressionUUID->"393cca26-10bb-4939-8849-\
5f85e1ca79d2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.002175000000000038`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34709999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.34519999999999995`"}],
  SequenceForm[
  "Taux ", 0.002175000000000038, " ", 0.34709999999999996`, " ", 
   0.34519999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398287283057*^9},ExpressionUUID->"cc294500-230a-4f20-bb72-\
b254c53a1baf"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "23"}],
  SequenceForm["Epouqe", 23],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223982873340178`*^9},ExpressionUUID->"7b4f3291-852f-4874-92fa-\
72833fb0cfae"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0022250000000000325`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3527`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35409999999999997`"}],
  SequenceForm[
  "Taux ", 0.0022250000000000325`, " ", 0.3527, " ", 0.35409999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398391122487*^9},ExpressionUUID->"1db640e4-558a-49fc-8ff7-\
7baa1d1d2785"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "24"}],
  SequenceForm["Epouqe", 24],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398391172824*^9},ExpressionUUID->"6de47381-f07c-41bb-a5b6-\
6319c83d1e53"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0022999999999999687`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34809999999999997`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3499`"}],
  SequenceForm[
  "Taux ", 0.0022999999999999687`, " ", 0.34809999999999997`, " ", 0.3499],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398495069186*^9},ExpressionUUID->"93f2900c-3b14-401d-99e0-\
a0b897d947ec"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "25"}],
  SequenceForm["Epouqe", 25],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223984951198807`*^9},ExpressionUUID->"e23522d5-5178-416e-b3bb-\
37a8b9d39850"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.003950000000000009`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3546`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35150000000000003`"}],
  SequenceForm[
  "Taux ", 0.003950000000000009, " ", 0.3546, " ", 0.35150000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398599219226*^9},ExpressionUUID->"b6bb013e-947d-4ec5-9c91-\
6cd7ecf4b2ac"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "26"}],
  SequenceForm["Epouqe", 26],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223985992700167`*^9},ExpressionUUID->"95ddd306-e7e5-4843-b1ba-\
6bf4d31844f2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.004449999999999954`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3547`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3571`"}],
  SequenceForm["Taux ", 0.004449999999999954, " ", 0.3547, " ", 0.3571],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398702861093*^9},ExpressionUUID->"80b78ac7-77dc-4b90-8b6c-\
c496064616ba"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "27"}],
  SequenceForm["Epouqe", 27],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398702911006*^9},ExpressionUUID->"64152a26-706a-4137-9661-\
cf287c9877c9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.006800000000000028`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36119999999999997`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.36229999999999996`"}],
  SequenceForm[
  "Taux ", 0.006800000000000028, " ", 0.36119999999999997`, " ", 
   0.36229999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722398806515567*^9},ExpressionUUID->"c860a3e2-ccf0-41fe-bb95-\
16b2be225151"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "28"}],
  SequenceForm["Epouqe", 28],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72239880656606*^9},ExpressionUUID->"ee3a0767-2ed1-433f-923c-aa1c2d8b658e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.01034999999999997`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36140000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.35619999999999996`"}],
  SequenceForm[
  "Taux ", 0.01034999999999997, " ", 0.36140000000000005`, " ", 
   0.35619999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223989108019257`*^9},ExpressionUUID->"50e41628-839f-4e36-b098-\
bb96b5a6c77f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "29"}],
  SequenceForm["Epouqe", 29],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223989108532143`*^9},ExpressionUUID->"1b5c385c-c1a7-4525-b654-\
fe55ef123aca"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.007349999999999968`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35950000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3528`"}],
  SequenceForm[
  "Taux ", 0.007349999999999968, " ", 0.35950000000000004`, " ", 0.3528],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399014655127*^9},ExpressionUUID->"208def7d-a8f7-4436-a94c-\
4be7146f8d22"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "30"}],
  SequenceForm["Epouqe", 30],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399014705126*^9},ExpressionUUID->"ec765a77-7b2c-4f7e-95ec-\
cdfd89044676"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.005525000000000002`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36329999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3571`"}],
  SequenceForm[
  "Taux ", 0.005525000000000002, " ", 0.36329999999999996`, " ", 0.3571],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399118393235*^9},ExpressionUUID->"07513475-7b54-40c8-9038-\
025615265d04"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "31"}],
  SequenceForm["Epouqe", 31],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223991184432096`*^9},ExpressionUUID->"976f94a0-f948-4338-ba73-\
66a8e99e2754"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.00824999999999998`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36040000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.362`"}],
  SequenceForm[
  "Taux ", 0.00824999999999998, " ", 0.36040000000000005`, " ", 0.362],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399222593871*^9},ExpressionUUID->"58f70c32-7c09-424e-bfbf-\
7d40e651623d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "32"}],
  SequenceForm["Epouqe", 32],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399222644311*^9},ExpressionUUID->"2a3448be-148d-48d2-a4f9-\
ef763f8066a6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.005800000000000027`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3628`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3591`"}],
  SequenceForm["Taux ", 0.005800000000000027, " ", 0.3628, " ", 0.3591],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399326589542*^9},ExpressionUUID->"61bde1f7-d266-489c-8c76-\
980ac4add93c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "33"}],
  SequenceForm["Epouqe", 33],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399326640156*^9},ExpressionUUID->"175ccb9c-2005-4d3b-be48-\
1028fdb9f491"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.007299999999999973`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3609`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3556`"}],
  SequenceForm["Taux ", 0.007299999999999973, " ", 0.3609, " ", 0.3556],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399430435801*^9},ExpressionUUID->"3074dacc-6ccf-4e7d-9633-\
09c97edd676a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "34"}],
  SequenceForm["Epouqe", 34],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399430485746*^9},ExpressionUUID->"7d74b690-ba80-4b10-b749-\
9564adbbb517"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.006449999999999956`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35840000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.35240000000000005`"}],
  SequenceForm[
  "Taux ", 0.006449999999999956, " ", 0.35840000000000005`, " ", 
   0.35240000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399533933135*^9},ExpressionUUID->"82f36262-58e8-4bbc-83e5-\
9d746b8bcd60"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "35"}],
  SequenceForm["Epouqe", 35],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399533984302*^9},ExpressionUUID->"e40f9a0e-556a-411e-9997-\
bc6f1d31d0f0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.00495000000000001`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3559`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35619999999999996`"}],
  SequenceForm[
  "Taux ", 0.00495000000000001, " ", 0.3559, " ", 0.35619999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223996381292667`*^9},ExpressionUUID->"d5e768e4-7afa-4eac-a0c8-\
c971e93f2d79"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "36"}],
  SequenceForm["Epouqe", 36],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223996381801863`*^9},ExpressionUUID->"c9aec02e-6707-41cd-8c9a-\
82cda35c1b6a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.00770000000000004`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.361`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36360000000000003`"}],
  SequenceForm[
  "Taux ", 0.00770000000000004, " ", 0.361, " ", 0.36360000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399742027052*^9},ExpressionUUID->"373f9c02-e182-4657-ac77-\
87337d4222b5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "37"}],
  SequenceForm["Epouqe", 37],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399742077229*^9},ExpressionUUID->"fb99437f-4407-4f67-acd3-\
ab1edc18f7d4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.006325000000000025`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35750000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.35529999999999995`"}],
  SequenceForm[
  "Taux ", 0.006325000000000025, " ", 0.35750000000000004`, " ", 
   0.35529999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399845777947*^9},ExpressionUUID->"4b7add75-7530-4baa-992c-\
129e22c1fed6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "38"}],
  SequenceForm["Epouqe", 38],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399845829077*^9},ExpressionUUID->"8e3b4274-383a-4b38-b955-\
55dcd0a9b0ac"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.007000000000000006`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36140000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3631`"}],
  SequenceForm[
  "Taux ", 0.007000000000000006, " ", 0.36140000000000005`, " ", 0.3631],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722399950218581*^9},ExpressionUUID->"0c9affc5-9f29-48f0-a03b-\
5551385fbbbd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "39"}],
  SequenceForm["Epouqe", 39],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7223999502700167`*^9},ExpressionUUID->"1b1ba451-2308-460b-8750-\
4e6434de5f33"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.005225000000000035`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35129999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.352`"}],
  SequenceForm[
  "Taux ", 0.005225000000000035, " ", 0.35129999999999995`, " ", 0.352],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400054515698*^9},ExpressionUUID->"7bb340b4-a907-4258-873d-\
8908ade1eae4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "40"}],
  SequenceForm["Epouqe", 40],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400054567116*^9},ExpressionUUID->"3020d4ff-8c81-4104-9c23-\
0abfad79421e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.00297499999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36019999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3517`"}],
  SequenceForm[
  "Taux ", 0.00297499999999995, " ", 0.36019999999999996`, " ", 0.3517],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224001582617283`*^9},ExpressionUUID->"d2d217df-dd8e-4df5-8cae-\
884f4bc0b15f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "41"}],
  SequenceForm["Epouqe", 41],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400158313793*^9},ExpressionUUID->"8c6af0e0-178b-4a8a-8c63-\
fe2a00c66b61"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.002774999999999972`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3507`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34730000000000005`"}],
  SequenceForm[
  "Taux ", 0.002774999999999972, " ", 0.3507, " ", 0.34730000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72240026245835*^9},ExpressionUUID->"07d8c68f-dbaa-4e4f-81ab-af9d7f052cad"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "42"}],
  SequenceForm["Epouqe", 42],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400262508629*^9},ExpressionUUID->"33eab3c3-dc01-4beb-9ea4-\
3c3e1d3a1088"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.003674999999999984`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35919999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.35229999999999995`"}],
  SequenceForm[
  "Taux ", 0.003674999999999984, " ", 0.35919999999999996`, " ", 
   0.35229999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72240036635888*^9},ExpressionUUID->"0cd5f6d6-d8b5-4add-8b5a-09aae7f70b5f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "43"}],
  SequenceForm["Epouqe", 43],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224003664089603`*^9},ExpressionUUID->"ee36648e-faa0-4f84-bbfb-\
4253d7226153"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.005249999999999977`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.36950000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3549`"}],
  SequenceForm[
  "Taux ", 0.005249999999999977, " ", 0.36950000000000005`, " ", 0.3549],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400469956174*^9},ExpressionUUID->"f56c9bc7-3585-4064-9aed-\
2a366c4498d0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "44"}],
  SequenceForm["Epouqe", 44],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72240047000766*^9},ExpressionUUID->"770255a3-848c-4991-8fb7-bf4aea378fdd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0011750000000000371`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35650000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3408`"}],
  SequenceForm[
  "Taux ", 0.0011750000000000371`, " ", 0.35650000000000004`, " ", 0.3408],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400574246669*^9},ExpressionUUID->"2aed4957-ad86-43be-a12d-\
0704af55de84"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "45"}],
  SequenceForm["Epouqe", 45],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224005742973003`*^9},ExpressionUUID->"1492d5d3-4a06-49b6-8db6-\
53cd856e2861"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0017500000000000293`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3548`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35050000000000003`"}],
  SequenceForm[
  "Taux ", 0.0017500000000000293`, " ", 0.3548, " ", 0.35050000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400678352512*^9},ExpressionUUID->"65273dfe-754b-42d8-b9b8-\
0c8b64cdeef9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "46"}],
  SequenceForm["Epouqe", 46],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224006784367247`*^9},ExpressionUUID->"184c9e68-ca3c-4890-abed-\
46e6b81efacc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0006249999999999867`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35540000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.34450000000000003`"}],
  SequenceForm[
  "Taux ", 0.0006249999999999867, " ", 0.35540000000000005`, " ", 
   0.34450000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72240078213964*^9},ExpressionUUID->"62012547-87b4-4c75-b5a3-f64e0da18492"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "47"}],
  SequenceForm["Epouqe", 47],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400782190633*^9},ExpressionUUID->"c3745621-ad3f-4005-adbf-\
5da98d496e66"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.00017500000000003624`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.35119999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3417`"}],
  SequenceForm[
  "Taux ", 0.00017500000000003624`, " ", 0.35119999999999996`, " ", 0.3417],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224008864341183`*^9},ExpressionUUID->"48358bb1-1efd-4ed3-9558-\
8da5090ea0d9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "48"}],
  SequenceForm["Epouqe", 48],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400886484962*^9},ExpressionUUID->"6b4a0c53-149d-4acd-88bb-\
45d37f3bb3b8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34630000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.34009999999999996`"}],
  SequenceForm[
  "Taux ", 0., " ", 0.34630000000000005`, " ", 0.34009999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400990531865*^9},ExpressionUUID->"ae630581-559f-4d52-ab70-\
82c7af6ee8a6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "49"}],
  SequenceForm["Epouqe", 49],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722400990581976*^9},ExpressionUUID->"0a0b85ac-8e8f-42c4-8aba-\
037eae0c9784"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3476`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3388`"}],
  SequenceForm["Taux ", 0., " ", 0.3476, " ", 0.3388],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224010943789883`*^9},ExpressionUUID->"77d6e6ba-a565-42f4-8251-\
140d78885e0a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "50"}],
  SequenceForm["Epouqe", 50],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401094430518*^9},ExpressionUUID->"80e20c74-1182-4ea3-9a44-\
056caff16f36"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3466`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3395`"}],
  SequenceForm["Taux ", 0., " ", 0.3466, " ", 0.3395],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401198722192*^9},ExpressionUUID->"e9f81428-905a-482e-b870-\
794e30d5ed06"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "51"}],
  SequenceForm["Epouqe", 51],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401198773417*^9},ExpressionUUID->"ed1672d9-8102-452c-a3a0-\
b9c0693681fb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34450000000000003`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.33830000000000005`"}],
  SequenceForm[
  "Taux ", 0., " ", 0.34450000000000003`, " ", 0.33830000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224013026693296`*^9},ExpressionUUID->"4b418479-6973-4058-a9e4-\
570632a4eaff"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "52"}],
  SequenceForm["Epouqe", 52],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401302719866*^9},ExpressionUUID->"bc9d8f5f-b847-4bec-a75a-\
38d7f2e9ad30"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34519999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3387`"}],
  SequenceForm["Taux ", 0., " ", 0.34519999999999995`, " ", 0.3387],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401406672311*^9},ExpressionUUID->"85eb9933-362e-45e6-a647-\
2c3a4fd139ee"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "53"}],
  SequenceForm["Epouqe", 53],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224014067242937`*^9},ExpressionUUID->"1d9d1d02-da29-4334-aa84-\
e7afd0d29ba9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34450000000000003`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.33830000000000005`"}],
  SequenceForm[
  "Taux ", 0., " ", 0.34450000000000003`, " ", 0.33830000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72240151061381*^9},ExpressionUUID->"a2a9512e-78ed-402e-903b-5639ed0f2b18"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "54"}],
  SequenceForm["Epouqe", 54],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401510664069*^9},ExpressionUUID->"ca6d6bc6-456f-4783-9d1c-\
a7a0022e5d85"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34440000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.33830000000000005`"}],
  SequenceForm[
  "Taux ", 0., " ", 0.34440000000000004`, " ", 0.33830000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224016148599453`*^9},ExpressionUUID->"446c2bae-dbb3-4e88-9146-\
9b658ae1f86c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "55"}],
  SequenceForm["Epouqe", 55],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401614910511*^9},ExpressionUUID->"88ece935-c415-4be6-9987-\
5432ca0f7dd7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3447`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.33799999999999997`"}],
  SequenceForm["Taux ", 0., " ", 0.3447, " ", 0.33799999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.72240171886558*^9},ExpressionUUID->"253e6344-53cb-4bc9-8873-f5d6743f625a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "56"}],
  SequenceForm["Epouqe", 56],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224017189520073`*^9},ExpressionUUID->"b38fc54e-91e9-440d-b0c0-\
c0aee305a008"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34430000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.33809999999999996`"}],
  SequenceForm[
  "Taux ", 0., " ", 0.34430000000000005`, " ", 0.33809999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224018231034527`*^9},ExpressionUUID->"42af5fba-4996-4dbb-8464-\
72d6d95db2ca"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "57"}],
  SequenceForm["Epouqe", 57],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401823154686*^9},ExpressionUUID->"0b31ed34-a0b7-4519-8f05-\
d974a9c13389"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34419999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.33699999999999997`"}],
  SequenceForm[
  "Taux ", 0., " ", 0.34419999999999995`, " ", 0.33699999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224019275003853`*^9},ExpressionUUID->"ae14e579-b963-4862-9dc2-\
2bf0d4db6840"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "58"}],
  SequenceForm["Epouqe", 58],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722401927550963*^9},ExpressionUUID->"be5e8d66-5004-4b5b-b83d-\
7684d6df9bde"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3438`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.33709999999999996`"}],
  SequenceForm["Taux ", 0., " ", 0.3438, " ", 0.33709999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722402031405066*^9},ExpressionUUID->"f1f1f202-7587-486c-8947-\
44c7c4997079"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "59"}],
  SequenceForm["Epouqe", 59],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224020314902353`*^9},ExpressionUUID->"a179d1bd-49a4-484b-b6da-\
2412b3b84bc2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34409999999999996`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3367`"}],
  SequenceForm["Taux ", 0., " ", 0.34409999999999996`, " ", 0.3367],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.7224021350927362`*^9},ExpressionUUID->"cf09fe7f-af26-472b-b500-\
222e6d6d9c5f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "60"}],
  SequenceForm["Epouqe", 60],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722402135144001*^9},ExpressionUUID->"1efb285f-db2e-4dec-952c-\
451242c9d8fa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.34319999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3366`"}],
  SequenceForm["Taux ", 0., " ", 0.34319999999999995`, " ", 0.3366],
  Editable->False]], "Print",
 CellChangeTimes->{3.722395410785955*^9, 3.722395527762166*^9, 
  3.722395673142741*^9, 3.722395851194766*^9, 
  3.722402239538842*^9},ExpressionUUID->"d6044c54-20ea-40be-a1d8-\
48d8de50dbad"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Taux d'erreur sur test:\>\"", ",", "err3"}], "]"}], "\n", 
   RowBox[{
    RowBox[{"cerrset25", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain25", ",", "errvalid25", ",", "errtest25"}], "}"}]}], 
    ";"}], "\n", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain25", ",", "errvalid25", ",", "errtest25"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7223926306160507`*^9, 3.722392635877293*^9}, {
  3.722393422444788*^9, 
  3.722393448964489*^9}},ExpressionUUID->"cda32630-1f41-4058-bb01-\
4c7528897d85"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux d'erreur sur test:\"\>", "\[InvisibleSpace]", "0.3366`"}],
  
  SequenceForm["Taux d'erreur sur test:", 0.3366],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722420129574346*^9},ExpressionUUID->"18e771f3-387b-403c-81e7-\
ab854a43b9de"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.01388888888888889], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxd0l1IU2Ecx/F/u1jrQqjcxWJGFjLKlk2b03Rtv700zWpZEVEIOcNRRCsz
C6fmoxSUUVcaZRRJWUFRk4iKXjTTvOkVw4XZqPVCb8iQqJsuOnP/E/EcOBw+
53sOz/PwPHOrdq2r1hCRXbmTz9SVcFb09P44ey/u5BcYNTYG8jbE2DpoprXN
2Tr+hj0dSA88Gl4YZesRsopbaB1hG/DAcirb0DHMzoD3deJn2aYX7EwcTFtz
vb36CXseLG+ztC0dg+ws6PXOx2M3+9kmVI5vdju+3GHPR+HI4E6ruMHORmR7
rKbteIRtRiT/abH/ZRc7B5aBnpzQedUWnDN7Mr7HT7BzQWHbFcfGo+w80Mzk
BA6xl6CvubS3afZhthX40H16IFOw8yH010reh/eybSBbcvwAuwB0qX5oQVEV
uxBU/sdQG1W9FKLGmPZu0W52EcTF5Pd72MUQU5/NWjvawLYjtUHq/JaB6jSd
OuMBtgMU/P0x0LWP7QQKjrgqP6nzBejMjO77D/enLABhN7/q/NzE3QXRMBEp
3xHm7gKNRVtqfer63KApMeVINHN3Q0zuTz13D8RXU67uaiN3Dyh9wvU8WMfd
C/K1/9Ju2cZdcWt86OTdIPflvJ4Qd8WLkwdE/d8H6r98wY/13BV/S45Xwb0E
NLkfXu6K+24f0yZM3EtB/19CMq2QumQqk7pkWil1ybRK6pJptdQlk/+f/wIJ
S8Zf
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.01388888888888889], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxdk29IU2EUh6+DVZbhquFGzGomprGWmq65lvttc27TbVhGDgqrQVS0kvpQ
OVMG/aGoSPahIqQy5zAqKVNbaouR5VIIjTJUmLTQAj+0DApRs23d80EvvFye
97mH98c57xXbKnYe5DAMo4ys6Pv/E1b11evaf82GVOwG3BasOvB6lOUlOHtu
s8mzNMgyDy1Vk09Kjg6zzMd4f8rIVA2xEA7Zw/yyPUMsi3Cm7v76FzOfWV4H
T2VPhsJFnIKr9m/TD34OspyKk4+ujBxmyKch0OG9tihMPh02njWvNUC8ET6/
IK2US99LkHpzrrZmmrwUl5KG3v8pJZ+J9MRlbZ5K4izYd1c3t9uIs3GnPKOP
10P1WyCKbZDPwcV3u/xNbvK58K65MLHDSyyDRCuaCMmIt0IYSdfgIpZjMOeH
XKcnzkNTWW9291NiBezxU/cOPSPeBqXk4+3xZDpfibfXs05vEhNvh6y8w5jA
Ic5HNJ0FxKoF+QGn4VV1spxlJxBOMpTMCMmr5/fbqV7QDw1aA6d8d1dTvQYh
B79Z/4W8dn4+pxZ7j73521JFvgAuRZz5/HLyBejWPD4SPEFeh+8G6Zx4ls7X
YTgyva+NlK8Q8svq/WP95AuR2bkhMlGq16N3TOUe9ZHX41bnjdpEB3kDEtqi
N5C8AZwu7kq+irwR1ug4pOSNQG60weSLULei8aVfQL5ogS9m/xfyxQjEApA3
wTvABDnx5E2YXPuhYt9i8maErILnAwx5M6THG+K6uOQtiLXn9yfVP/JXFAw=

         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.01388888888888889], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCwAWIQDQEf7O9Nbm+NuvzIHirg0OCxv1bW4j6Uz+Fw6KtG
TP+hu1C+gIMd1/XFBba3oHwRhyNOazPvFcL4Eg5mUgeiFRxvQvkyDruyOX8u
SL8O5Ss4eM1tUDvUBuMrOZQxzeKQnncNyldx2HdQXC2YFSav5nBixu5pE/hh
8hoOLjc+fPGKhPG1HH7xv9y+nhmmXsehaqmOs8xrmLyeg8gFkA4Y38DBitG3
hdcfpt7Qwe9zX3CJCoxv5GBz3793eh5MvbFDy7yzq85fhfFNHGRqEo1CDWB8
U4c8k4btDk0wvpnDHMGlew+Kw/jmDpfuPeCevBLGt3BYtMX8x6EUGN/S4dkF
pds/62B8K4cLmyO/7rwF41s7AC0Pe6MPc5+Nw6viraK/T8PkbR3uXG8sdpsC
49uh6bd3iNvlycOkDdPv4KAy/f+Eut9Q+QYHhyBPUITA1Ds6nBE4vmtHL0ze
Ec0+J4dF10zeW7hCzWtwcmAxETSz2QuTd3Y4E+t9gt0WJu/sALa+HSbvghpe
DS4O25ZVHte0gsm7OrDFz/AR7YHJuzp8yQmrXbcNJu/m8KQZHCFQeTe0+HJ3
cDAF+Rim393h1GFQAoWqZ/BwaFsefsroCEy/h8OEBT8Mn62DyXs6vKuxB5oA
k/d02KPOz711GUzey+HMu5NAE2HyXmjy3qj8Bm+HPKHmA6cWwuR9HIyObNTL
WwyT93E4orChKGMiTN7XoQOcYGDyvg4V3CoadT0weT+HLaDo7bpqDwBQcB2p

         "]]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 60.}, {0, 0.5935}}, PlotRangeClipping -> True, 
     ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, AxesOrigin -> {0., 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 60.}, {0, 0.5935}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.01388888888888889`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.01388888888888889`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.01388888888888889`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.7224201297313538`*^9},ExpressionUUID->"8fb049f4-cb3a-40f6-9e72-\
d8ed3c7b89c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"cCNNtrained5", ",", "ctrainset", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Error\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"cCNNtrained5", ",", "ctestset", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Error\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.722392427524493*^9, 3.7223924277902517`*^9}, 
   3.722392570003883*^9, {3.722392617089828*^9, 3.722392675191023*^9}, {
   3.722393348094452*^9, 3.722393348565709*^9}, {3.722420098792568*^9, 
   3.7224201079135227`*^9}},ExpressionUUID->"16da4410-4065-4313-973a-\
37ddf93469ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggmIQGwI+2A83Wm9vkPKEl6/tl7ZL/qiZ8Nj+R2x4c6/t
ngF3F7Xoh1Ui69wf3oLyYWDg3UUufdux8lLtstf2S6z3sOlmP7Lv8Hh3gz1v
yYC7i1La5VG9wodZ7+zXsZ9QWLPsrv29JAHzj8cSB9xdlNJ7uV4uEHn71n6Z
1JwQUYb79vGhk6bfyMsacHdRSus/EF4l5PDWft2BQp3n2g/sv7Ld3vC1tXDA
3UUpLdczv7x28hv77x6bFoVff2C/OST0w8mLpQPuLkrpZVGtz949fm2/7Z9G
zp7Wh/Zv27+YTTKoGnB3UUrnBZc/Z9V+Y1/x/M7xA+ue2DvFKJyZ/erYgLuL
UlrY+7Citv97+8MvQjpmOtyx/1E1/e682YED7i5a0QCaRLfp
     "], {{0, 0}, {10, 
     10}}, {0, 1}],
    Epilog->{{
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4030", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4030", "\" examples of \"", "\"ship\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4030, " examples of ", "ship", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "airplane", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3968", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3968", "\" examples of \"", "\"airplane\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3968, " examples of ", "airplane", " correctly classified"}], 
           
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "airplane"}], 
           
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "airplane"}], 
           
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "horse", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "truck", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "ship", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "airplane", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3991", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3991", "\" examples of \"", "\"automobile\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3991, " examples of ", "automobile", 
             " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "bird", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "cat", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "deer", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "dog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "frog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "horse", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "truck", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "airplane", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4000", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4000", "\" examples of \"", "\"bird\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4000, " examples of ", "bird", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "airplane", " misclassified as ", "cat"}], 
           
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4002", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4002", "\" examples of \"", "\"cat\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4002, " examples of ", "cat", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "airplane", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4005", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4005", "\" examples of \"", "\"deer\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4005, " examples of ", "deer", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "airplane", " misclassified as ", "dog"}], 
           
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4010", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4010", "\" examples of \"", "\"dog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4010, " examples of ", "dog", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "airplane", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3982", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3982", "\" examples of \"", "\"frog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3982, " examples of ", "frog", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "airplane", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4042", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4042", "\" examples of \"", "\"horse\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4042, " examples of ", "horse", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"truck\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "truck", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "airplane", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3970", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3970", "\" examples of \"", "\"truck\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3970, " examples of ", "truck", " correctly classified"}], 
           Row[{"Precision = ", 1.}], 
           Row[{"Recall = ", 1.}], 
           Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4030", "\" example\"", "\"s\"", "\" of class \"", "\"ship\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4030, " example", "s", " of class ", "ship"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3968", "\" example\"", "\"s\"", "\" of class \"", 
              "\"airplane\""}, "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3968, " example", "s", " of class ", "airplane"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3991", "\" example\"", "\"s\"", "\" of class \"", 
              "\"automobile\""}, "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3991, " example", "s", " of class ", "automobile"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4000", "\" example\"", "\"s\"", "\" of class \"", "\"bird\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4000, " example", "s", " of class ", "bird"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4002", "\" example\"", "\"s\"", "\" of class \"", "\"cat\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4002, " example", "s", " of class ", "cat"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4005", "\" example\"", "\"s\"", "\" of class \"", "\"deer\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4005, " example", "s", " of class ", "deer"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4010", "\" example\"", "\"s\"", "\" of class \"", "\"dog\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4010, " example", "s", " of class ", "dog"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3982", "\" example\"", "\"s\"", "\" of class \"", "\"frog\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3982, " example", "s", " of class ", "frog"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            TemplateBox[{
             "4042", "\" example\"", "\"s\"", "\" of class \"", "\"horse\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4042, " example", "s", " of class ", "horse"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3970", "\" example\"", "\"s\"", "\" of class \"", "\"truck\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3970, " example", "s", " of class ", "truck"}], 
          Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4030", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"ship\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4030, " example", "s", " classified as ", "ship"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3968", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"airplane\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3968, " example", "s", " classified as ", "airplane"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3991", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"automobile\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3991, " example", "s", " classified as ", "automobile"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4000", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"bird\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4000, " example", "s", " classified as ", "bird"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4002", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"cat\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4002, " example", "s", " classified as ", "cat"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4005", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"deer\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4005, " example", "s", " classified as ", "deer"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4010", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"dog\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4010, " example", "s", " classified as ", "dog"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3982", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"frog\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3982, " example", "s", " classified as ", "frog"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4042", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"horse\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4042, " example", "s", " classified as ", "horse"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3970", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"truck\""}, "RowDefault"]}, {
            TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3970, " example", "s", " classified as ", "truck"}], 
          Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
    Frame->True,
    FrameLabel->{
      FormBox["\"predicted class\"", TraditionalForm], 
      FormBox["\"actual class\"", TraditionalForm]},
    FrameTicks->{{{{9.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 0.], TraditionalForm]}, {
        7.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 0.], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 0.], TraditionalForm]}, {
        4.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 0.], TraditionalForm]}, {
        2.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 0.], TraditionalForm]}, {
        0.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 0.], TraditionalForm]}}, {{
        9.5, 
         FormBox["4030", TraditionalForm]}, {8.5, 
         FormBox["3968", TraditionalForm]}, {7.5, 
         FormBox["3991", TraditionalForm]}, {6.5, 
         FormBox["4000", TraditionalForm]}, {5.5, 
         FormBox["4002", TraditionalForm]}, {4.5, 
         FormBox["4005", TraditionalForm]}, {3.5, 
         FormBox["4010", TraditionalForm]}, {2.5, 
         FormBox["3982", TraditionalForm]}, {1.5, 
         FormBox["4042", TraditionalForm]}, {0.5, 
         FormBox["3970", TraditionalForm]}}}, {{{0.5, 
         FormBox[
          RotationBox["4030", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["3968", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["3991", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["4000", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["4002", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["4005", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["4010", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["3982", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["4042", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["3970", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}, {{0.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}}},
    FrameTicksStyle->12,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->300,
    Method->{
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]},
    PlotRangePadding->None,
    ImageCache->GraphicsData["CompressedBitmap", "\<\
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
Uu0VaAj6B2zn98OG799FhteHOLfvPVhteA9Hd7+HuYPegfee9/D1Z+8gnSyO
kjMfwXH+O9i44j1W3qku6I8BnzK46j6Vj+c+a7cFvxlw26HRVoUfvpuNC88L
hC/X3YQNCxfD52o8e0ZpQhjmTlyAEoHJeZdVHUpKSlBaWsqmbejq6hSYPbZm
2LULcLA1h4qWNm69SCXWcCEstZTh4HUUqQS4F48fxq5t23Hk0lO0SirgY28E
XUMTogS7sQnGjgeHs5tX5JXhJDjj74rdGoYEnBX9FIFIlk2iL1FC+34yVXJa
4WZuCL+LHHdRlRkDbRU1PEvjdpdT96a3nT4OnbqOFxEh0DR2Igs4N85Zsfeh
rqLRQ+RRJNJvCeD/jqqp+3Oq5um/S9U85o7/b6ma92VIzIw6B8NV72HoJ0TE
6XyISzvfw6d/F+HH6f0xi6ykn30mwlXzD/ADeb9i/rswW/UuhpNzj2h9gJKj
H6GYqG8uy97Bl599gXuvcnkJGGi2App/DOqRI7H+T1kaXsFTcHnLxudrFKQn
ITjwCDQJ+iJTy1CY/AgqmiZkLGSMC9HMHUw14XvlGVsq08vaCDZu3rhy9QrM
dLVxLDiMDdrpZqvNcQYNrS182NEYNu4nWdevTHObw/75gt0KFx0RBiNdLRz0
D0JCYhKRh4bYo6oL9wMeuHn3CQIPO0Jd3wI37tzH8UOu2KOuT1SGKjRV5cBC
S41c2h93b1+Dmb4mtu1UR1JxTV8qvByFLdBYPRwnHnLsi7RUxr5UKLIvcRhK
2ReZrHtJ2ZcNvVH4AoMnrxHYl2d/xr5sV2BftDZBxbMHCpW3/QxTRfZlem/2
Jb8H+5L7kmNf6jvlt8nszb5YUvZlP28ovL57HEtG9ccXX/RDnMdHWDuuH/Zs
IGb0mY8Rqf8+Bn8iwkOizxnP6ke0hn74YWw/fP3Pd/DIlRh+hzkDouLYR7Be
wGDsYlUFC5+L6lHrEdWzHH735FCEGMsU2ZfMSHzfg315V8GG6EZ85H3cvB8j
G6x/wd/VHJ7nI1CUEglldZpeuUkGxSoWildfpKE86yWxIfSRWsYtXm8enIeW
mR3qOjpw7eRhnLwexRvx8X8kXzgk/oOlJ+9dPgtdTQ3YElA/eZGAJ/fu4W7Y
LRw+dBj3IxPR1iJGGDnH28sLvv4nkJBRxCezK81OwsljvvD09sHt8Ee4EnoD
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
ei1mnQ1lOOq5Hy6ubnB3d4eriyv8T19EaZ2UmcCe8yXaGqvgbWMEXWNbBAYG
wIBo/DtUzFBU04rUp9fZHKhu3n447u8NFZoAJYwmQOlAaOAh7FXThv/J0/By
tsFeZR3EZFagqegNdLXNUVDV3GfQHNd777G91+DwMdqI6VRPtAsxdXVaky/W
ascQvaHRmmuiryZySiuxmtrIq8GKa2sgx8mZaKF/D/5Vh3/JknOGAjnXgTsE
1/s0dHA88CTMdDVgSxQsaSetoSuGr4MZdIjUDTzhD819yjh76xn7qdSoW1Df
qwzXQ/4IOHIA+5TVcT3iDdNLr6RFMd/Ex3AJbmKiERXxAI6m+rgenSLr9Q85
pkbDFJllnBcgMTIU+9QtUFBSCndLfXieviVE08fcv4wzoeEoy02CvqoybrKU
HvnpkuLimZO4+zQJEppowdAWhdXNfXU6T+k9vn0Rpuam8Dl5nm4UEnbPEAPm
PNE2TcnkDnkYL+yeaa7FWV8Hdt5ffvxaCI0uToedjQUsbOyQmFcuD42+Agsz
Ezj6nkFNUwevcdIciiWmH+PQzwwqiMZJBzZdg4ER0UCNFhHjRJeKOtJK5nzk
NgYGxJCxXsmgwJQb+FwtBg5E69QjJvRl7YGUhhZYO2Kg+rpZED3NBo9e58oj
q/Nw2MWcNNsqBlznJD0jkssM9i4HUVTbJKccuxF54wTMzEzhffa6QlT0YDmj
JxUjhigDEREReBTxCCcOOULX0BIPnsejujQHpppquB7FZcUvT49mGb243GoU
JIRDTcMQKcUcHxcTdpqNE6tuasKJg7aw8zonSIA7Z72haeqAKmmnzEjm1bl7
5MjlKHZrr6wA+5d4GnYS+k6HIJE5OqQ0wyC5clZWOqzMdOHo5Y8LwcE4d+4c
WyXx9uMYpL18Ah1lFTJjzyCYtJ87F4xLly/j6atkiIsIfoxsKH56zNretF/c
7dMYOHgEDOysMGfCUGg4n+tN+x013okRYxbAksB48L+GIvhpliLtd1h3M0aN
XwxLcx0M/NdwXHmZJ9B+RCT8NG8ClmxRhfauH6A0YzWKGgTarzj2FkZ+Nhja
ZpZYMmE0Nmh7oL0bQmaE5kqkqH+Mz75mUEQkRI0RR+39MIXB9rEMxg0hoCIA
TNnJYCixetUJAOcOYPAbAVY10Q0XfM5g/mgG5jMZzFEayAaoCtQeEc96xEaZ
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
NlqoVqpizGuOCY22buwP2T1EsA==\
\>"]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.722420170361003*^9},ExpressionUUID->"0c8e5adb-6fe4-4028-973c-\
205fa12bc625"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3366`", ",", 
   GraphicsBox[RasterBox[CompressedData["
1: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
mXbXCY71X22/YczCs75SaSvowb/kPNZe
     "], {{0, 0}, {10, 10}}, {0, 1}],
    Epilog->{{
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["803", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "803", "\" examples of \"", "\"ship\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.775096525096525`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.803`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7888015717092338`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{803, " examples of ", "ship", " correctly classified"}], 
           Row[{"Precision = ", 0.775096525096525}], 
           Row[{"Recall = ", 0.803}], 
           Row[{"FScore = ", 0.7888015717092338}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["79", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "79", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.07625482625482626`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.079`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{79, " examples of ", "airplane", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.07625482625482626}], 
           Row[{"Row fraction = ", 0.079}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["36", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "36", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03474903474903475`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.036`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{36, " examples of ", "automobile", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.03474903474903475}], 
           Row[{"Row fraction = ", 0.036}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.019305019305019305`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.02`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{20, " examples of ", "bird", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.019305019305019305`}], 
           Row[{"Row fraction = ", 0.02}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["16", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "16", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.015444015444015444`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.016`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{16, " examples of ", "cat", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.015444015444015444`}], 
           Row[{"Row fraction = ", 0.016}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["18", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "18", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.017374517374517374`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.018`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{18, " examples of ", "deer", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.017374517374517374`}], 
           Row[{"Row fraction = ", 0.018}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007722007722007722`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "dog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.007722007722007722}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.009652509652509652`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.01`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{10, " examples of ", "frog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.009652509652509652}], 
           Row[{"Row fraction = ", 0.01}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006756756756756757`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", "horse", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.006756756756756757}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["39", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "39", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.037644787644787646`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.039`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{39, " examples of ", "truck", " misclassified as ", "ship"}], 
           
           Row[{"Column fraction = ", 0.037644787644787646`}], 
           Row[{"Row fraction = ", 0.039}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["59", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "59", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06051282051282051`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.059`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{59, " examples of ", "ship", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.06051282051282051}], 
           Row[{"Row fraction = ", 0.059}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["711", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "711", "\" examples of \"", "\"airplane\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.7292307692307692`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.711`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7200000000000001`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{711, " examples of ", "airplane", " correctly classified"}], 
           Row[{"Precision = ", 0.7292307692307692}], 
           Row[{"Recall = ", 0.711}], 
           Row[{"FScore = ", 0.7200000000000001}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.020512820512820513`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.02`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{20, " examples of ", "automobile", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.020512820512820513`}], 
           Row[{"Row fraction = ", 0.02}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["64", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "64", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06564102564102564`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.064`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{64, " examples of ", "bird", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.06564102564102564}], 
           Row[{"Row fraction = ", 0.064}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["21", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "21", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.021538461538461538`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.021`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{21, " examples of ", "cat", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.021538461538461538`}], 
           Row[{"Row fraction = ", 0.021}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["23", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "23", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.02358974358974359`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.023`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            23, " examples of ", "deer", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.02358974358974359}], 
           Row[{"Row fraction = ", 0.023}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["18", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "18", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.018461538461538463`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.018`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{18, " examples of ", "dog", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.018461538461538463`}], 
           Row[{"Row fraction = ", 0.018}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.011282051282051283`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.011`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{11, " examples of ", "frog", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.011282051282051283`}], 
           Row[{"Row fraction = ", 0.011}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["19", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "19", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.019487179487179488`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.019`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{19, " examples of ", "horse", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.019487179487179488`}], 
           Row[{"Row fraction = ", 0.019}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["29", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "29", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.029743589743589743`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.029`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{29, " examples of ", "truck", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.029743589743589743`}], 
           Row[{"Row fraction = ", 0.029}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["30", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "30", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03112033195020747`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.03`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{30, " examples of ", "ship", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.03112033195020747}], 
           Row[{"Row fraction = ", 0.03}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["26", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "26", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.026970954356846474`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.026`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{26, " examples of ", "airplane", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.026970954356846474`}], 
           Row[{"Row fraction = ", 0.026}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["765", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "765", "\" examples of \"", "\"automobile\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.7935684647302904`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.765`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7790224032586557`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{765, " examples of ", "automobile", " correctly classified"}], 
           Row[{"Precision = ", 0.7935684647302904}], 
           Row[{"Recall = ", 0.765}], 
           Row[{"FScore = ", 0.7790224032586557}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"bird\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005186721991701245`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.005`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{5, " examples of ", "bird", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.005186721991701245}], 
           Row[{"Row fraction = ", 0.005}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01037344398340249`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.01`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            10, " examples of ", "cat", " misclassified as ", "automobile"}], 
           
           Row[{"Column fraction = ", 0.01037344398340249}], 
           Row[{"Row fraction = ", 0.01}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"deer\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004149377593360996`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.004`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{4, " examples of ", "deer", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.004149377593360996}], 
           Row[{"Row fraction = ", 0.004}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007261410788381743`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{7, " examples of ", "dog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.007261410788381743}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01037344398340249`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.01`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{10, " examples of ", "frog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.01037344398340249}], 
           Row[{"Row fraction = ", 0.01}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.005186721991701245`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.005`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{5, " examples of ", "horse", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.005186721991701245}], 
           Row[{"Row fraction = ", 0.005}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["102", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "102", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.10580912863070539`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.102`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{102, " examples of ", "truck", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.10580912863070539`}], 
           Row[{"Row fraction = ", 0.102}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["23", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "23", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.023445463812436288`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.023`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{23, " examples of ", "ship", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.023445463812436288`}], 
           Row[{"Row fraction = ", 0.023}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["49", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "49", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.04994903160040775`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.049`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{49, " examples of ", "airplane", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.04994903160040775}], 
           Row[{"Row fraction = ", 0.049}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.011213047910295617`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.011`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{11, " examples of ", "automobile", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.011213047910295617`}], 
           Row[{"Row fraction = ", 0.011}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["567", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "567", "\" examples of \"", "\"bird\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.5779816513761468`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.567`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.5724381625441696`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{567, " examples of ", "bird", " correctly classified"}], 
           Row[{"Precision = ", 0.5779816513761468}], 
           Row[{"Recall = ", 0.567}], 
           Row[{"FScore = ", 0.5724381625441696}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["76", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "76", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.07747196738022426`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.076`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{76, " examples of ", "cat", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.07747196738022426}], 
           Row[{"Row fraction = ", 0.076}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["92", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "92", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.09378185524974515`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.092`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{92, " examples of ", "deer", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.09378185524974515}], 
           Row[{"Row fraction = ", 0.092}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["56", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "56", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.05708460754332314`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.056`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{56, " examples of ", "dog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.05708460754332314}], 
           Row[{"Row fraction = ", 0.056}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["59", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "59", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.060142711518858305`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.059`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{59, " examples of ", "frog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.060142711518858305`}], 
           Row[{"Row fraction = ", 0.059}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["33", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "33", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03363914373088685`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.033`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{33, " examples of ", "horse", " misclassified as ", "bird"}], 
           
           Row[{"Column fraction = ", 0.03363914373088685}], 
           Row[{"Row fraction = ", 0.033}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["15", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             TemplateBox[{
              "15", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01529051987767584`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.015`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " examples of ", "truck", " misclassified as ", "bird"}], 
           
           Row[{"Column fraction = ", 0.01529051987767584}], 
           Row[{"Row fraction = ", 0.015}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["15", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01507537688442211`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.015`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " examples of ", "ship", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.01507537688442211}], 
           Row[{"Row fraction = ", 0.015}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["24", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "24", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.024120603015075376`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.024`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{24, " examples of ", "airplane", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.024120603015075376`}], 
           Row[{"Row fraction = ", 0.024}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["16", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "16", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.016080402010050253`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.016`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{16, " examples of ", "automobile", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.016080402010050253`}], 
           Row[{"Row fraction = ", 0.016}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["76", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "76", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0763819095477387`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.076`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{76, " examples of ", "bird", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.0763819095477387}], 
           Row[{"Row fraction = ", 0.076}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["468", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "468", "\" examples of \"", "\"cat\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.47035175879396984`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.468`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.46917293233082713`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{468, " examples of ", "cat", " correctly classified"}], 
           Row[{"Precision = ", 0.47035175879396984`}], 
           Row[{"Recall = ", 0.468}], 
           Row[{"FScore = ", 0.46917293233082713`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["74", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "74", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0743718592964824`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.074`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{74, " examples of ", "deer", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.0743718592964824}], 
           Row[{"Row fraction = ", 0.074}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["178", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "178", "\" examples of \"", "\"dog\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.17889447236180905`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.178`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{178, " examples of ", "dog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.17889447236180905`}], 
           Row[{"Row fraction = ", 0.178}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["74", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "74", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0743718592964824`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.074`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{74, " examples of ", "frog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.0743718592964824}], 
           Row[{"Row fraction = ", 0.074}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["47", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "47", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.04723618090452261`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.047`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{47, " examples of ", "horse", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.04723618090452261}], 
           Row[{"Row fraction = ", 0.047}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["23", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "23", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.023115577889447236`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.023`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{23, " examples of ", "truck", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.023115577889447236`}], 
           Row[{"Row fraction = ", 0.023}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007352941176470588`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", "ship", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.007352941176470588}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["26", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "26", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0273109243697479`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.026`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{26, " examples of ", "airplane", " misclassified as ", 
             "deer"}], 
           Row[{"Column fraction = ", 0.0273109243697479}], 
           Row[{"Row fraction = ", 0.026}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005252100840336135`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.005`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{5, " examples of ", "automobile", " misclassified as ", 
             "deer"}], 
           Row[{"Column fraction = ", 0.005252100840336135}], 
           Row[{"Row fraction = ", 0.005}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["73", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "73", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.07668067226890757`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.073`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{73, " examples of ", "bird", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.07668067226890757}], 
           Row[{"Row fraction = ", 0.073}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["82", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "82", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0861344537815126`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.082`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{82, " examples of ", "cat", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.0861344537815126}], 
           Row[{"Row fraction = ", 0.082}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["573", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "573", "\" examples of \"", "\"deer\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.601890756302521`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.573`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.5870901639344261`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{573, " examples of ", "deer", " correctly classified"}], 
           Row[{"Precision = ", 0.601890756302521}], 
           Row[{"Recall = ", 0.573}], 
           Row[{"FScore = ", 0.5870901639344261}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["63", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "63", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0661764705882353`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.063`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{63, " examples of ", "dog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.0661764705882353}], 
           Row[{"Row fraction = ", 0.063}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["36", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "36", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.037815126050420166`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.036`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{36, " examples of ", "frog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.037815126050420166`}], 
           Row[{"Row fraction = ", 0.036}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["79", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "79", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.08298319327731092`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.079`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{79, " examples of ", "horse", " misclassified as ", "deer"}], 
           
           Row[{"Column fraction = ", 0.08298319327731092}], 
           Row[{"Row fraction = ", 0.079}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"truck\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.008403361344537815`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "truck", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.008403361344537815}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["12", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "12", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01160541586073501`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.012`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{12, " examples of ", "ship", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.01160541586073501}], 
           Row[{"Row fraction = ", 0.012}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["12", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "12", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01160541586073501`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.012`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{12, " examples of ", "airplane", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.01160541586073501}], 
           Row[{"Row fraction = ", 0.012}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["14", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "14", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.013539651837524178`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.014`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{14, " examples of ", "automobile", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.013539651837524178`}], 
           Row[{"Row fraction = ", 0.014}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["70", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "70", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06769825918762089`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.07`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{70, " examples of ", "bird", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.06769825918762089}], 
           Row[{"Row fraction = ", 0.07}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["189", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "189", "\" examples of \"", "\"cat\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.1827852998065764`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.189`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{189, " examples of ", "cat", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.1827852998065764}], 
           Row[{"Row fraction = ", 0.189}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["51", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "51", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.04932301740812379`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.051`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{51, " examples of ", "deer", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.04932301740812379}], 
           Row[{"Row fraction = ", 0.051}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["563", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "563", "\" examples of \"", "\"dog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.5444874274661509`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.563`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.5535889872173058`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{563, " examples of ", "dog", " correctly classified"}], 
           Row[{"Precision = ", 0.5444874274661509}], 
           Row[{"Recall = ", 0.563}], 
           Row[{"FScore = ", 0.5535889872173058}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["33", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "33", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.031914893617021274`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.033`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{33, " examples of ", "frog", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.031914893617021274`}], 
           Row[{"Row fraction = ", 0.033}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["70", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "70", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06769825918762089`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.07`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{70, " examples of ", "horse", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.06769825918762089}], 
           Row[{"Row fraction = ", 0.07}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.019342359767891684`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.02`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{20, " examples of ", "truck", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.019342359767891684`}], 
           Row[{"Row fraction = ", 0.02}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["12", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             TemplateBox[{
              "12", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.011320754716981131`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.012`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{12, " examples of ", "ship", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.011320754716981131`}], 
           Row[{"Row fraction = ", 0.012}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["9", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "9", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008490566037735849`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.009`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{9, " examples of ", "airplane", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.008490566037735849}], 
           Row[{"Row fraction = ", 0.009}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["18", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "18", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.016981132075471698`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.018`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{18, " examples of ", "automobile", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.016981132075471698`}], 
           Row[{"Row fraction = ", 0.018}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["69", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "69", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06509433962264151`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.069`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{69, " examples of ", "bird", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.06509433962264151}], 
           Row[{"Row fraction = ", 0.069}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["69", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "69", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06509433962264151`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.069`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{69, " examples of ", "cat", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.06509433962264151}], 
           Row[{"Row fraction = ", 0.069}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["71", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "71", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0669811320754717`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.071`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{71, " examples of ", "deer", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.0669811320754717}], 
           Row[{"Row fraction = ", 0.071}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["36", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "36", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.033962264150943396`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.036`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{36, " examples of ", "dog", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.033962264150943396`}], 
           Row[{"Row fraction = ", 0.036}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["750", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "750", "\" examples of \"", "\"frog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7281553398058254`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{750, " examples of ", "frog", " correctly classified"}], 
           Row[{"Precision = ", 0.7075471698113207}], 
           Row[{"Recall = ", 0.75}], 
           Row[{"FScore = ", 0.7281553398058254}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["14", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "14", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.013207547169811321`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.014`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{14, " examples of ", "horse", " misclassified as ", "frog"}], 
           
           Row[{"Column fraction = ", 0.013207547169811321`}], 
           Row[{"Row fraction = ", 0.014}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["12", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "12", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.011320754716981131`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.012`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{12, " examples of ", "truck", " misclassified as ", "frog"}], 
           
           Row[{"Column fraction = ", 0.011320754716981131`}], 
           Row[{"Row fraction = ", 0.012}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0050200803212851405`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.005`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{5, " examples of ", "ship", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.0050200803212851405`}], 
           Row[{"Row fraction = ", 0.005}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["24", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "24", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.024096385542168676`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.024`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{24, " examples of ", "airplane", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.024096385542168676`}], 
           Row[{"Row fraction = ", 0.024}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006024096385542169`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.006`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{6, " examples of ", "automobile", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.006024096385542169}], 
           Row[{"Row fraction = ", 0.006}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["35", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "35", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.035140562248995984`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.035`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{35, " examples of ", "bird", " misclassified as ", "horse"}], 
           
           Row[{"Column fraction = ", 0.035140562248995984`}], 
           Row[{"Row fraction = ", 0.035}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["38", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "38", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03815261044176707`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.038`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{38, " examples of ", "cat", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.03815261044176707}], 
           Row[{"Row fraction = ", 0.038}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["88", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "88", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.08835341365461848`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.088`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{88, " examples of ", "deer", " misclassified as ", "horse"}], 
           
           Row[{"Column fraction = ", 0.08835341365461848}], 
           Row[{"Row fraction = ", 0.088}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["58", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "58", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.05823293172690763`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.058`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{58, " examples of ", "dog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.05823293172690763}], 
           Row[{"Row fraction = ", 0.058}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008032128514056224`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "frog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.008032128514056224}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["708", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "708", "\" examples of \"", "\"horse\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.7108433734939759`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.708`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "0.7094188376753506`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{708, " examples of ", "horse", " correctly classified"}], 
           Row[{"Precision = ", 0.7108433734939759}], 
           Row[{"Recall = ", 0.708}], 
           Row[{"FScore = ", 0.7094188376753506}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["26", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "26", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.02610441767068273`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.026`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{26, " examples of ", "truck", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.02610441767068273}], 
           Row[{"Row fraction = ", 0.026}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["34", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "34", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.033763654419066536`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.034`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{34, " examples of ", "ship", " misclassified as ", "truck"}], 
           
           Row[{"Column fraction = ", 0.033763654419066536`}], 
           Row[{"Row fraction = ", 0.034}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["40", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "40", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.039721946375372394`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.04`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{40, " examples of ", "airplane", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.039721946375372394`}], 
           Row[{"Row fraction = ", 0.04}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["109", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "109", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.10824230387288977`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.109`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{109, " examples of ", "automobile", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.10824230387288977`}], 
           Row[{"Row fraction = ", 0.109}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["21", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "21", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.020854021847070508`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.021`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{21, " examples of ", "bird", " misclassified as ", "truck"}], 
           
           Row[{"Column fraction = ", 0.020854021847070508`}], 
           Row[{"Row fraction = ", 0.021}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["31", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "31", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.030784508440913606`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.031`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{31, " examples of ", "cat", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.030784508440913606`}], 
           Row[{"Row fraction = ", 0.031}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"deer\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005958291956305859`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.006`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{6, " examples of ", "deer", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.005958291956305859}], 
           Row[{"Row fraction = ", 0.006}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["13", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "13", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.012909632571996028`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.013`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{13, " examples of ", "dog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.012909632571996028`}], 
           Row[{"Row fraction = ", 0.013}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["9", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "9", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00893743793445879`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.009`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{9, " examples of ", "frog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.00893743793445879}], 
           Row[{"Row fraction = ", 0.009}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["18", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "18", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01787487586891758`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.018`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{18, " examples of ", "horse", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.01787487586891758}], 
           Row[{"Row fraction = ", 0.018}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["726", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "726", "\" examples of \"", "\"truck\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "0.7209533267130089`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.726`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7234678624813154`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{726, " examples of ", "truck", " correctly classified"}], 
           Row[{"Precision = ", 0.7209533267130089}], 
           Row[{"Recall = ", 0.726}], 
           Row[{"FScore = ", 0.7234678624813154}]}], "Tooltip"]& ]}, 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"ship\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.803`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "ship"}], 
          Row[{"Recall = ", 0.803}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", 
              "\"airplane\""}, "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.711`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "airplane"}], 
          Row[{"Recall = ", 0.711}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", 
              "\"automobile\""}, "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.765`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "automobile"}], 
          Row[{"Recall = ", 0.765}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"bird\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.567`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "bird"}], 
          Row[{"Recall = ", 0.567}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"cat\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.468`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "cat"}], 
          Row[{"Recall = ", 0.468}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"deer\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.573`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "deer"}], 
          Row[{"Recall = ", 0.573}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"dog\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.563`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "dog"}], 
          Row[{"Recall = ", 0.563}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"frog\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "frog"}], 
          Row[{"Recall = ", 0.75}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"horse\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.708`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "horse"}], 
          Row[{"Recall = ", 0.708}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"truck\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.726`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "truck"}], 
          Row[{"Recall = ", 0.726}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1036", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"ship\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.775096525096525`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1036, " example", "s", " classified as ", "ship"}], 
          Row[{"Precision = ", 0.775096525096525}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "975", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"airplane\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.7292307692307692`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{975, " example", "s", " classified as ", "airplane"}], 
          Row[{"Precision = ", 0.7292307692307692}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "964", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"automobile\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.7935684647302904`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{964, " example", "s", " classified as ", "automobile"}], 
          Row[{"Precision = ", 0.7935684647302904}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "981", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"bird\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.5779816513761468`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{981, " example", "s", " classified as ", "bird"}], 
          Row[{"Precision = ", 0.5779816513761468}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "995", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"cat\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.47035175879396984`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{995, " example", "s", " classified as ", "cat"}], 
          Row[{"Precision = ", 0.47035175879396984`}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "952", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"deer\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.601890756302521`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{952, " example", "s", " classified as ", "deer"}], 
          Row[{"Precision = ", 0.601890756302521}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1034", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"dog\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.5444874274661509`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1034, " example", "s", " classified as ", "dog"}], 
          Row[{"Precision = ", 0.5444874274661509}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1060", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"frog\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1060, " example", "s", " classified as ", "frog"}], 
          Row[{"Precision = ", 0.7075471698113207}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "996", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"horse\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.7108433734939759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{996, " example", "s", " classified as ", "horse"}], 
          Row[{"Precision = ", 0.7108433734939759}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1007", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"truck\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.7209533267130089`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1007, " example", "s", " classified as ", "truck"}], 
          Row[{"Precision = ", 0.7209533267130089}]}], "Tooltip"]& ]},
    Frame->True,
    FrameLabel->{
      FormBox["\"predicted class\"", TraditionalForm], 
      FormBox["\"actual class\"", TraditionalForm]},
    FrameTicks->{{{{9.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 0.], TraditionalForm]}, {
        7.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 0.], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 0.], TraditionalForm]}, {
        4.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 0.], TraditionalForm]}, {
        2.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 0.], TraditionalForm]}, {
        0.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 0.], TraditionalForm]}}, {{
        9.5, 
         FormBox["1000", TraditionalForm]}, {8.5, 
         FormBox["1000", TraditionalForm]}, {7.5, 
         FormBox["1000", TraditionalForm]}, {6.5, 
         FormBox["1000", TraditionalForm]}, {5.5, 
         FormBox["1000", TraditionalForm]}, {4.5, 
         FormBox["1000", TraditionalForm]}, {3.5, 
         FormBox["1000", TraditionalForm]}, {2.5, 
         FormBox["1000", TraditionalForm]}, {1.5, 
         FormBox["1000", TraditionalForm]}, {0.5, 
         FormBox["1000", TraditionalForm]}}}, {{{0.5, 
         FormBox[
          RotationBox["1036", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["975", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["964", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["981", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["995", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["952", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["1034", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["1060", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["996", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["1007", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}, {{0.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}}},
    FrameTicksStyle->12,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->300,
    Method->{
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]},
    PlotRangePadding->None,
    ImageCache->GraphicsData["CompressedBitmap", "\<\
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
T7C8sorTSw1OT06tOs87Zl2jbfPv/g/ly+EN\
\>"]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.722420177717701*^9},ExpressionUUID->"28c92a16-e29c-4ac7-a234-\
8e80268950db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\n", 
  RowBox[{"cCNNchain6", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"60", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"\"\<Function\>\"", "\[Rule]", " ", "Max"}]}], "]"}], ",", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"120", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"\"\<Function\>\"", "\[Rule]", " ", "Mean"}]}], "]"}], ",", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"240", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"\"\<Function\>\"", "\[Rule]", " ", "Mean"}]}], "]"}], ",", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", "800", "]"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", "100", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<ship\>\"", ",", "\"\<airplane\>\"", ",", "\"\<automobile\>\"", 
           ",", "\"\<bird\>\"", ",", "\"\<cat\>\"", ",", "\"\<deer\>\"", ",", 
           "\"\<dog\>\"", ",", "\"\<frog\>\"", ",", "\"\<horse\>\"", ",", 
           "\"\<truck\>\""}], "}"}]}], "}"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"NetEncoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Image\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"32", ",", "32"}], "}"}], ",", "\"\<RGB\>\""}], "}"}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.722422420416047*^9, 3.72242242234123*^9}, {
  3.722422460559527*^9, 3.722422461416918*^9}, {3.72245154934523*^9, 
  3.722451549602264*^9}, {3.7224515984782057`*^9, 
  3.722451630630579*^9}},ExpressionUUID->"738253d1-06fb-4db6-913c-\
c8022e84854a"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{60, 3, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{60}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 60, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
               "$OutputSize" -> {30, 30}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{60, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {60, 30, 30}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{60, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{60, 30, 30}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 60, "$InputSize" -> {30, 30}, 
               "$OutputSize" -> {15, 15}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{60, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{60, 15, 15}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{120, 60, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{120}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 120, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               60, "$GroupNumber" -> 1, "$InputSize" -> {15, 15}, 
               "$OutputSize" -> {13, 13}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{60, 15, 15}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{120, 13, 13}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {120, 13, 13}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{120, 13, 13}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{120, 13, 13}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Mean, "Dimensionality" -> 
               2, "Channels" -> 120, "$InputSize" -> {13, 13}, 
               "$OutputSize" -> {6, 6}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{120, 13, 13}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{120, 6, 6}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{240, 120, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               120, "$GroupNumber" -> 1, "$InputSize" -> {6, 6}, 
               "$OutputSize" -> {4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{120, 6, 6}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{240, 4, 4}, NeuralNetworks`RealT]]], 
           "8" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {240, 4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{240, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{240, 4, 4}, NeuralNetworks`RealT]]], 
           "9" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Mean, "Dimensionality" -> 
               2, "Channels" -> 240, "$InputSize" -> {4, 4}, 
               "$OutputSize" -> {2, 2}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{240, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{240, 2, 2}, NeuralNetworks`RealT]]], 
           "10" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {960}, 
               "$InputSize" -> {240, 2, 2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{240, 2, 2}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{960}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{800, 960}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {800}, "$OutputSize" -> 800, "$InputSize" -> 
               960, "$InputDimensions" -> {960}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{960}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{100, 800}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {100}, "$OutputSize" -> 100, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "14" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "15" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 100}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               100, "$InputDimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "16" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "ship", "airplane", "automobile", "bird", "cat", "deer", "dog",
                 "frog", "horse", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"60\"", "\"30\"", "\"30\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"60\"", "\"30\"", "\"30\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"60\"", "\"15\"", "\"15\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"120\"", "\"13\"", 
                    "\"13\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"120\"", "\"13\"", 
                    "\"13\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"120\"", "\"6\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"240\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"240\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"240\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"960\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{247., {144.4169921875, 149.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.722422605312724*^9, 3.722440092517425*^9, 3.7224478114838343`*^9, {
   3.722451608822646*^9, 3.722451632177535*^9}, 
   3.72245508732353*^9},ExpressionUUID->"5dc44749-4700-49b3-8af9-\
73db8ff5103e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"errtrain26", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"errvalid26", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"errtest26", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"cCNNtrained6", "=", " ", "cCNNchain6"}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", "30"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Epouqe\>\"", ",", "i"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cCNNtrained6", "=", 
       RowBox[{"NetTrain", "[", 
        RowBox[{"cCNNtrained6", ",", "ctrainset", ",", 
         RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"err1", "=", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{"cCNNtrained6", ",", "ctrainset", ",", 
          RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errtrain26", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errtrain26", ",", "err1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"err2", "=", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{"cCNNtrained6", ",", "cvalidset", ",", 
          RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errvalid26", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errvalid26", ",", "err2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"err3", "=", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{"cCNNtrained6", ",", "ctestset", ",", 
          RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errtest26", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errtest26", ",", "err3"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<Taux \>\"", ",", "err1", ",", "\"\< \>\"", ",", "err2", ",", 
        "\"\< \>\"", ",", "err3"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"err3", "<", "0.292"}], ",", 
        RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.722426302646659*^9, 3.722426329068618*^9}, {
  3.722426363733655*^9, 3.722426364219243*^9}, {3.722431162126568*^9, 
  3.722431179419153*^9}, {3.72243214546572*^9, 3.722432147618088*^9}, {
  3.722432301053447*^9, 3.7224323181290407`*^9}, {3.7224340447483263`*^9, 
  3.7224340640089912`*^9}, {3.72243449513065*^9, 3.722434495878496*^9}, {
  3.722434558783742*^9, 3.7224345613845587`*^9}, {3.722438221097076*^9, 
  3.722438223020958*^9}, {3.722451639007132*^9, 
  3.722451640898456*^9}},ExpressionUUID->"ff1c8a4c-a8a6-4286-a45c-\
6cdc93a47702"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Epouqe", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.7224263653215857`*^9, 3.7224311989337177`*^9, 
  3.722432172426597*^9, 3.722432346671075*^9, 3.722434116093173*^9, 
  3.7224349003571377`*^9, 
  3.722438225448956*^9},ExpressionUUID->"caaa6ae6-118c-460b-b2ed-\
2cf678fb50df"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0695`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2954`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2954`"}],
  SequenceForm["Taux ", 0.0695, " ", 0.2954, " ", 0.2954],
  Editable->False]], "Print",
 CellChangeTimes->{3.7224263653215857`*^9, 3.7224311989337177`*^9, 
  3.722432172426597*^9, 3.722432346671075*^9, 3.722434116093173*^9, 
  3.7224349003571377`*^9, 
  3.7224383858943863`*^9},ExpressionUUID->"518b0df3-587c-40a6-b8d6-\
4b04d97e5c24"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Epouqe", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.7224263653215857`*^9, 3.7224311989337177`*^9, 
  3.722432172426597*^9, 3.722432346671075*^9, 3.722434116093173*^9, 
  3.7224349003571377`*^9, 
  3.7224383859509077`*^9},ExpressionUUID->"9edfc8b6-5db6-43db-bd45-\
a16553fbf6af"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.04700000000000004`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.29079999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.2903`"}],
  SequenceForm[
  "Taux ", 0.04700000000000004, " ", 0.29079999999999995`, " ", 0.2903],
  Editable->False]], "Print",
 CellChangeTimes->{3.7224263653215857`*^9, 3.7224311989337177`*^9, 
  3.722432172426597*^9, 3.722432346671075*^9, 3.722434116093173*^9, 
  3.7224349003571377`*^9, 
  3.722438546589325*^9},ExpressionUUID->"8e30e86e-66f7-482e-91b2-\
71087a1f9809"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Taux d'erreur sur test:\>\"", ",", 
     RowBox[{"errtest26", "[", 
      RowBox[{"[", 
       RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], "\n", 
   RowBox[{
    RowBox[{"cerrset30", "=", 
     RowBox[{"{", 
      RowBox[{"errtrain26", ",", "errvalid26", ",", "errtest26"}], "}"}]}], 
    ";"}], "\n", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errtrain26", ",", "errvalid26", ",", "errtest26"}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", 
        "\"\<test set\>\""}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.7224320690851717`*^9, 3.722432069312973*^9}, 
   3.722432164716668*^9, {3.722434008548353*^9, 3.722434019270729*^9}, {
   3.722434095889102*^9, 3.722434103023741*^9}, 
   3.722434730203582*^9},ExpressionUUID->"f4e9d9f5-bf0a-49d6-a751-\
4de0029b88f2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux d'erreur sur test:\"\>", "\[InvisibleSpace]", "0.2903`"}],
  
  SequenceForm["Taux d'erreur sur test:", 0.2903],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.722433943295268*^9, {3.722434003452901*^9, 3.722434020032049*^9}, 
   3.7224345057744513`*^9, 3.722435118289729*^9, 
   3.722438592604632*^9},ExpressionUUID->"19a3f77b-d82d-45c9-87be-\
9bc27f737de8"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.541825}, {2., 0.435025}, {3., 0.391475}, {4., 
         0.33640000000000003`}, {5., 0.27622500000000005`}, {6., 
         0.23329999999999995`}, {7., 0.20132499999999998`}, {8., 
         0.17354999999999998`}, {9., 0.1371}, {10., 0.10782499999999995`}, {
         11., 0.07787500000000003}, {12., 0.0695}, {13., 
         0.04700000000000004}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.5494}, {2., 0.45309999999999995`}, {3., 
         0.42510000000000003`}, {4., 0.38249999999999995`}, {5., 
         0.33909999999999996`}, {6., 0.32389999999999997`}, {7., 
         0.30710000000000004`}, {8., 0.31499999999999995`}, {9., 
         0.29569999999999996`}, {10., 0.3003}, {11., 0.2922}, {12., 0.2954}, {
         13., 0.29079999999999995`}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 0.5538000000000001}, {2., 0.45220000000000005`}, {3., 
         0.42090000000000005`}, {4., 0.3792}, {5., 0.3405}, {6., 0.3183}, {7.,
          0.30589999999999995`}, {8., 0.3113}, {9., 0.2956}, {10., 0.2956}, {
         11., 0.29079999999999995`}, {12., 0.2954}, {13., 
         0.2903}}]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 13.}, {0, 0.5538000000000001}}, PlotRangeClipping -> 
     True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, AxesOrigin -> {0., 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0., 13.}, {0, 0.5538000000000001}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.722433943380105*^9, {3.722434003541013*^9, 3.722434020105308*^9}, 
   3.722434505848584*^9, 3.722435118386054*^9, 
   3.722438592702962*^9},ExpressionUUID->"e1d2a830-d740-48ff-bdc5-\
8bef8af5847a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\

On choisit les autres hyper-param\[EGrave]tres nous-m\[EHat]me\
\>", "Subtitle",
 CellChangeTimes->{{3.722439849514966*^9, 3.722439879911693*^9}, {
  3.722955719874922*^9, 
  3.722955724864279*^9}},ExpressionUUID->"74577e02-6c5e-49eb-a397-\
5be3b29fd5b5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"errtrain28", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"errvalid28", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"errtest28", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cCNNtrained8", "=", " ", "cCNNchain6"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", "25"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Epouqe\>\"", ",", "i"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cCNNtrained8", "=", 
       RowBox[{"NetTrain", "[", 
        RowBox[{"cCNNtrained8", ",", "ctrainset", ",", 
         RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "1"}], ",", 
         RowBox[{"BatchSize", "\[Rule]", "300"}], ",", 
         RowBox[{"Method", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<SGD\>\"", ",", 
            RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "0.00000001"}]}], 
           "}"}]}], ",", 
         RowBox[{"LearningRateMultipliers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"_", "\[Rule]", "2.4"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"err1", "=", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{"cCNNtrained8", ",", "ctrainset", ",", 
          RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errtrain28", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errtrain28", ",", "err1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"err2", "=", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{"cCNNtrained8", ",", "cvalidset", ",", 
          RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errvalid28", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errvalid28", ",", "err2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"err3", "=", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{"cCNNtrained8", ",", "ctestset", ",", 
          RowBox[{"{", "\"\<Error\>\"", "}"}]}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"errtest28", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"errtest28", ",", "err3"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<Taux \>\"", ",", "err1", ",", "\"\< \>\"", ",", "err2", ",", 
        "\"\< \>\"", ",", "err3"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"err3", "<", "0.26"}], ",", 
        RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Taux d'erreur sur test:\>\"", ",", 
   RowBox[{"errtest28", "[", 
    RowBox[{"[", 
     RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"cerrset35", "=", 
   RowBox[{"{", 
    RowBox[{"errtrain28", ",", "errvalid28", ",", "errtest28"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"errtrain28", ",", "errvalid28", ",", "errtest28"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Epoques\>\"", ",", "\"\<Taux d'erreur\>\""}], "}"}]}], ",", 
   
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<train set\>\"", ",", "\"\<valid set\>\"", ",", "\"\<test set\>\""}],
      "}"}]}]}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.722439882304934*^9, 3.72243988271163*^9}, 
   3.722439913195017*^9, {3.722439977059701*^9, 3.722439997277861*^9}, {
   3.722440030961164*^9, 3.7224400776106577`*^9}, {3.7224401151146173`*^9, 
   3.722440116690434*^9}, {3.72244015832931*^9, 3.7224401814641113`*^9}, {
   3.722447490893318*^9, 3.722447498582489*^9}, {3.7224475998235826`*^9, 
   3.722447601890733*^9}, {3.722447631906783*^9, 3.722447637912136*^9}, {
   3.722447880819989*^9, 3.7224479372806683`*^9}, {3.722448112376602*^9, 
   3.72244812533362*^9}, {3.7224490783641663`*^9, 3.722449095638041*^9}, {
   3.722449935070128*^9, 3.722449942793407*^9}, {3.722450717139842*^9, 
   3.7224507423860493`*^9}, {3.722451658057632*^9, 3.722451668890183*^9}, {
   3.722452534403654*^9, 3.7224525420441008`*^9}, {3.722454905582035*^9, 
   3.722454908645645*^9}, {3.7224550983575773`*^9, 
   3.722455112108536*^9}},ExpressionUUID->"319c8479-539f-44de-a65a-\
83836955e43b"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Epouqe", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455126320207*^9},ExpressionUUID->"64aa72d7-ab94-4234-a70e-\
5ed3f7f7b86a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.589425`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5939`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.5908`"}],
  SequenceForm["Taux ", 0.589425, " ", 0.5939, " ", 0.5908],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455288054304*^9},ExpressionUUID->"bb8d00ed-8ceb-4d00-adf0-\
d39db9b7cea5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Epouqe", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455288108178*^9},ExpressionUUID->"d133675a-2933-456b-b277-\
f5338a16b321"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.50925`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.5094000000000001`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.5129`"}],
  SequenceForm["Taux ", 0.50925, " ", 0.5094000000000001, " ", 0.5129],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.72245544764902*^9},ExpressionUUID->"b14da69d-719f-4ca4-b840-0087e27ff461"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Epouqe", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455447739648*^9},ExpressionUUID->"f59679af-1939-4024-a10a-\
693be39add15"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.436825`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.4435`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.4527`"}],
  SequenceForm["Taux ", 0.436825, " ", 0.4435, " ", 0.4527],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224556099937563`*^9},ExpressionUUID->"03bbabeb-9838-4636-8427-\
0030e6e6fec7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Epouqe", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455610047505*^9},ExpressionUUID->"55689273-e58a-4a33-89e2-\
70311f444f13"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.39935`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.41300000000000003`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.41500000000000004`"}],
  SequenceForm[
  "Taux ", 0.39935, " ", 0.41300000000000003`, " ", 0.41500000000000004`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455766337599*^9},ExpressionUUID->"61c85aeb-e4f7-4511-9a04-\
c60fde0cf019"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Epouqe", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455766357276*^9},ExpressionUUID->"ea0eac89-68c9-47bf-8313-\
05e41a127e57"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.36097500000000005`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.38449999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.38859999999999995`"}],
  SequenceForm[
  "Taux ", 0.36097500000000005`, " ", 0.38449999999999995`, " ", 
   0.38859999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455921130086*^9},ExpressionUUID->"ba344d19-666e-4f85-ac52-\
6133836873f8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Epouqe", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722455921151555*^9},ExpressionUUID->"6e42a274-8a18-4daa-b0a8-\
b5e4d21f0506"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.36597500000000005`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.38980000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.39359999999999995`"}],
  SequenceForm[
  "Taux ", 0.36597500000000005`, " ", 0.38980000000000004`, " ", 
   0.39359999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456075889842*^9},ExpressionUUID->"ac476d52-13f5-4b50-b0fd-\
ca17c1fce6a9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Epouqe", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456075911113*^9},ExpressionUUID->"a04f4036-26fd-4c37-a519-\
45396a10343f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.2996`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3398`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3406`"}],
  SequenceForm["Taux ", 0.2996, " ", 0.3398, " ", 0.3406],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224562301884737`*^9},ExpressionUUID->"3d9990c1-8559-4fdf-a446-\
19baafa81e45"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Epouqe", 8],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456230208868*^9},ExpressionUUID->"5372db89-775a-4cb9-9931-\
51abe405843c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.28569999999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.33309999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.32820000000000005`"}],
  SequenceForm[
  "Taux ", 0.28569999999999995`, " ", 0.33309999999999995`, " ", 
   0.32820000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224563855755033`*^9},ExpressionUUID->"f6dd3183-b9e9-4e1c-b363-\
5b75e2db7e8e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "9"}],
  SequenceForm["Epouqe", 9],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456385595028*^9},ExpressionUUID->"04c2f8d2-68c3-4196-a34f-\
4d8afc33f5d1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.260425`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.32199999999999995`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3133`"}],
  SequenceForm["Taux ", 0.260425, " ", 0.32199999999999995`, " ", 0.3133],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456539644185*^9},ExpressionUUID->"0261e06d-6561-4413-a87f-\
80e763cc9f54"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "10"}],
  SequenceForm["Epouqe", 10],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224565396654863`*^9},ExpressionUUID->"ae443148-dd95-4e8f-bb32-\
fb1327e5e400"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.24145000000000005`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.3116`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.31010000000000004`"}],
  SequenceForm[
  "Taux ", 0.24145000000000005`, " ", 0.3116, " ", 0.31010000000000004`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456694978856*^9},ExpressionUUID->"92531b82-6822-455d-9ec8-\
9e26c59c88dd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "11"}],
  SequenceForm["Epouqe", 11],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.72245669500104*^9},ExpressionUUID->"c9922486-7d01-4ea4-b672-b893bcee70c7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.219225`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.29910000000000003`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.3016`"}],
  SequenceForm["Taux ", 0.219225, " ", 0.29910000000000003`, " ", 0.3016],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722456849225959*^9},ExpressionUUID->"5e48e589-c8d6-4da0-8f33-\
8018a0ff36cd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "12"}],
  SequenceForm["Epouqe", 12],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224568492476873`*^9},ExpressionUUID->"29220bdd-ddbf-47a6-94ce-\
2944f14c0aa8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.20594999999999997`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.29600000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.29610000000000003`"}],
  SequenceForm[
  "Taux ", 0.20594999999999997`, " ", 0.29600000000000004`, " ", 
   0.29610000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457004549242*^9},ExpressionUUID->"17fc9023-ff33-4460-9055-\
22745f2089c9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "13"}],
  SequenceForm["Epouqe", 13],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457004569356*^9},ExpressionUUID->"a4863253-3f6f-46df-ade0-\
be354a3db5d7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.18367500000000003`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.27949999999999997`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.28159999999999996`"}],
  SequenceForm[
  "Taux ", 0.18367500000000003`, " ", 0.27949999999999997`, " ", 
   0.28159999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457159209688*^9},ExpressionUUID->"838a4208-fa13-4aa9-8b8c-\
37e31d812cba"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "14"}],
  SequenceForm["Epouqe", 14],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457159231742*^9},ExpressionUUID->"34aaad71-e657-4ba3-9588-\
a844897ad909"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.17937499999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2883`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.29679999999999995`"}],
  SequenceForm[
  "Taux ", 0.17937499999999995`, " ", 0.2883, " ", 0.29679999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457314412126*^9},ExpressionUUID->"56f4496b-eaf7-46be-ab0b-\
ad358accdf72"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "15"}],
  SequenceForm["Epouqe", 15],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457314433723*^9},ExpressionUUID->"ec74c607-bb39-43d2-bcd1-\
2bf6747c4dd7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.16407499999999997`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.28490000000000004`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.2874`"}],
  SequenceForm[
  "Taux ", 0.16407499999999997`, " ", 0.28490000000000004`, " ", 0.2874],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.72245747121175*^9},ExpressionUUID->"86ee203d-5803-4ad0-877a-9277e18a2669"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "16"}],
  SequenceForm["Epouqe", 16],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457471238151*^9},ExpressionUUID->"ba23ee82-4dbf-49a4-bda4-\
894c2ca8b670"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.12849999999999995`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2714`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.27380000000000004`"}],
  SequenceForm[
  "Taux ", 0.12849999999999995`, " ", 0.2714, " ", 0.27380000000000004`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224576269368763`*^9},ExpressionUUID->"bdf82cb7-6b03-4c52-a70d-\
f561e4b7cd48"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "17"}],
  SequenceForm["Epouqe", 17],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457626961625*^9},ExpressionUUID->"4b45f64b-709b-4c77-ba07-\
958e049615cd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.11604999999999999`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2701`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.27170000000000005`"}],
  SequenceForm[
  "Taux ", 0.11604999999999999`, " ", 0.2701, " ", 0.27170000000000005`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457782298881*^9},ExpressionUUID->"2821ff00-7638-4862-aa22-\
5baec3dc8c4e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "18"}],
  SequenceForm["Epouqe", 18],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457782324833*^9},ExpressionUUID->"00594df9-10ad-46db-8564-\
248bcee3ca49"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.0948`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.271`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.267`"}],
  SequenceForm["Taux ", 0.0948, " ", 0.271, " ", 0.267],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722457938174567*^9},ExpressionUUID->"e829d68a-01e6-4b91-953f-\
2378e4a193d2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "19"}],
  SequenceForm["Epouqe", 19],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224579381994267`*^9},ExpressionUUID->"1ca20e60-6af2-4327-a354-\
d0f6857367d2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.08909999999999996`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.26670000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.2723`"}],
  SequenceForm[
  "Taux ", 0.08909999999999996, " ", 0.26670000000000005`, " ", 0.2723],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458093660412*^9},ExpressionUUID->"47e7be76-670c-4c23-9ce4-\
1f124a3bb0f9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "20"}],
  SequenceForm["Epouqe", 20],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458093685276*^9},ExpressionUUID->"32f92e99-6a67-4af5-936b-\
11265f9e94a1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.06237499999999996`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.26160000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.2672`"}],
  SequenceForm[
  "Taux ", 0.06237499999999996, " ", 0.26160000000000005`, " ", 0.2672],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458249549699*^9},ExpressionUUID->"8e47d1d8-1587-4b26-a868-\
d9fdbacd8d43"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "21"}],
  SequenceForm["Epouqe", 21],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458249576364*^9},ExpressionUUID->"ff20cc2a-7604-4d33-a48e-\
3908a281b4d0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.04882500000000001`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2633`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.26480000000000004`"}],
  SequenceForm[
  "Taux ", 0.04882500000000001, " ", 0.2633, " ", 0.26480000000000004`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458404824518*^9},ExpressionUUID->"62ac4a40-8134-4894-a8f9-\
4f0a0ef32b56"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "22"}],
  SequenceForm["Epouqe", 22],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458404851029*^9},ExpressionUUID->"1f9f7d26-fad5-4c13-9476-\
074905148e40"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.04777500000000001`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2681`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.26259999999999994`"}],
  SequenceForm[
  "Taux ", 0.04777500000000001, " ", 0.2681, " ", 0.26259999999999994`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458560443228*^9},ExpressionUUID->"e4294c10-994f-4ddb-860c-\
3439b239b320"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "23"}],
  SequenceForm["Epouqe", 23],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458560469466*^9},ExpressionUUID->"63b920d8-3807-4058-a061-\
443dbad3dcde"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.043399999999999994`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.26259999999999994`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.26759999999999995`"}],
  SequenceForm[
  "Taux ", 0.043399999999999994`, " ", 0.26259999999999994`, " ", 
   0.26759999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458717354845*^9},ExpressionUUID->"3c96e79c-26f9-4b1d-ad05-\
3a67027d75f2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "24"}],
  SequenceForm["Epouqe", 24],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722458717379826*^9},ExpressionUUID->"7cdeef4a-3824-48a4-9a05-\
bc8239d2cf3f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.025824999999999987`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   "0.26570000000000005`", "\[InvisibleSpace]", "\<\" \"\>", 
   "\[InvisibleSpace]", "0.26890000000000003`"}],
  SequenceForm[
  "Taux ", 0.025824999999999987`, " ", 0.26570000000000005`, " ", 
   0.26890000000000003`],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.72245887237436*^9},ExpressionUUID->"b70176c6-1c4f-4b75-8c39-9976e0012021"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Epouqe\"\>", "\[InvisibleSpace]", "25"}],
  SequenceForm["Epouqe", 25],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224588723962517`*^9},ExpressionUUID->"f3a5df5e-9709-4061-8bb8-\
86c01220053b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux \"\>", "\[InvisibleSpace]", "0.037349999999999994`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.272`", 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", "0.2782`"}],
  SequenceForm["Taux ", 0.037349999999999994`, " ", 0.272, " ", 0.2782],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.7224590301157207`*^9},ExpressionUUID->"8caeb232-1260-4c43-b16f-\
637eba8760a7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Taux d'erreur sur test:\"\>", "\[InvisibleSpace]", "0.2782`"}],
  
  SequenceForm["Taux d'erreur sur test:", 0.2782],
  Editable->False]], "Print",
 CellChangeTimes->{3.722440229282893*^9, 3.722444448903426*^9, 
  3.722447579960331*^9, 3.7224477813309526`*^9, 3.722447857602271*^9, 
  3.72244812921944*^9, 3.722449102711561*^9, 3.722449949077992*^9, 
  3.7224507432427807`*^9, 3.722451675015108*^9, 3.722452545185564*^9, 
  3.722459030140882*^9},ExpressionUUID->"34d609be-ac50-4b08-9f60-\
f4b6630f4c16"]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7M9a+12ceOeRPVTAYdPc98uPeT+A8jkcRC64
3Pjw5TaUL+AgJ5bl+7nvJpQv4uAi8/qRmdR1KF/CYdoVzgylHBhfxkEpp6Jq
qc5lKF/BYdYz2eUvPC5B+UoOak+a551ddQHKV3H44ng+7erzc1C+msOJGbun
TeA/A+VrOJwBuTfmFJSv5fDgAffklU3HoXwdhy8aMf2Hvh6D8vUcCtZ0385g
OArlGzgsmX1EYUPRASjf0GFB+uZXxVv3QvlGDgZaK4UvuOyA8o0dCq4LfXI8
vw3KN3EI4NMFBtF6KN/UYUJwicr0/yugfDMHg/+Kf7+VwvjmDh++eEW2WSyD
8i0cDjitzbxXOAvKt3RguMfE2SW/2B4AyMp1JQ==
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7INZF0+yYnxsDxVwYANxfR9A+RwOf1Z+vOSb
dAfKF3Cwue/fOz3vFpQv4nDue/DjpbNvQPkSDnlH/22q/gTjyzhYTTpd77H/
KpSv4PCAe/LKpkAYXwmq/wqUr+IgdSBawfHjZShfzcHvc19wiQqMr+HQk/P8
N9BJUL6Wg9hNkAkXoXwdh44vt683FsPk9RyqIlaYnrWG8Q0cmGZxSM+Lg6k3
dOABOccTxjdy+AT0rUAEjG/s8O9b6YM5gjC+icOLHo23vPsuQPmmDu+inOxe
3ITxzRx2rGd+3qMBU2/uMKHut1XBOZi8hUMIOLxh8pYOc44obCjKuGgPAIMq
dpY=
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.016666666666666666`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7D85nk+7+vyRPVTA4f3Jw05rMx9A+RwOdT07
szl/3oHyBRwmHPqqEdN/C8oXcbAqONdx6d4NKF/CoUfjLe8+g5tQvoxDjILj
x+QzV6F8BYcQ1sWTrBhhfCUHpb7SQmneK1C+isOc0Pmr1964DOWrOZT5y4ll
+cL4Gg4BIO7nS1C+loNe3mLGPawwvo7Dml8xuUf/wfh6Dou2mP84lALjGzhk
uGTmf2i9COUbOgSsn5LakQzjGzl48TBpt4vB+MYOL26CTITxTRwu5cezn5OE
8U0d8o7+21T96QKUb+Ywoe43MEhgfHOHR2ZSB6IVYOotHG7ZVkasMIXxLR0U
wAZetAcAOFZxfg==
         "]]}}}, {}, {}, {}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0., 0}, 
     PlotRange -> {{0., 25.}, {0, 0.5939}}, PlotRangeClipping -> True, 
     ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"Epoques\"", TraditionalForm], 
       FormBox["\"Taux d'erreur\"", TraditionalForm]}, AxesOrigin -> {0., 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0., 25.}, {0, 0.5939}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"train set\"", "\"valid set\"", "\"test set\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.3], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.722449863463619*^9, 3.722450719168639*^9, 
  3.722450767667912*^9, 3.722452468954616*^9, 3.722454134188673*^9, 
  3.7224590303718557`*^9},ExpressionUUID->"18cf8b6c-e2db-4622-ba94-\
1d9412ab4b4b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\

Conclusion\[NonBreakingSpace]: 
1.\tLe nombre de couches convolutif et la taille de les filtres convolutifs \
influencent la capacit\[EAcute] de la mod\[EGrave]le. Normalement, la taille \
3 par 3 pour les filtres est meilleure que 5 par 5, et 3 couches convolutives \
c\[CloseCurlyQuote]est meilleur que 1 ou 2 couches.
2.\tLa combinaison de la function pooling (max, moyenne, moyenne) est \
meilleur que (max, max, max).
\
\>", "Subtitle",
 CellChangeTimes->{{3.7224397780865307`*^9, 3.7224397849193172`*^9}, 
   3.722459921747205*^9, {3.722955736090356*^9, 
   3.7229558096360598`*^9}},ExpressionUUID->"2a31b4fc-5675-4af1-bf15-\
1084949a8f73"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.722434622550606*^9},ExpressionUUID->"f8a6ee60-111c-46d4-be66-\
554e3b7f8d38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"cCNNtrained7", "=", "cCNNtrained8"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"cCNNtrained7", ",", "ctrainset", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Error\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"cCNNtrained7", ",", "ctestset", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Error\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "\"\<Est - ce que les examples \>\"", " ", "difficiles", " ", 
     "\"\< et \>\"", " ", "faciles", " ", 
     "\"\< d' une base de donne\:0301es sont les me\:0302mes pour tous les \
algorithmes choisis?\>\""}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cImages", "=", 
     RowBox[{"Keys", "[", "ctestset", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cEntropies", "=", 
     RowBox[{"cCNNtrained7", "[", 
      RowBox[{"cImages", ",", "\"\<Entropy\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "choisir", " ", "les", " ", "images", " ", "qui", " ", "ont", " ", "le", 
     " ", "plus", " ", "haut", " ", 
     RowBox[{"d", "'"}], "entropie"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"cImages", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"cEntropies", ",", 
       RowBox[{"-", "30"}]}], "]"}], "]"}], "]"}], " ", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "choisir", " ", "les", " ", "images", " ", "qui", " ", "ont", " ", "le", 
     " ", "plus", " ", "bas", " ", 
     RowBox[{"d", "'"}], "entropie"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"cImages", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"cEntropies", ",", "30"}], "]"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.72243463250184*^9, 3.72243469590804*^9}, {
  3.722434734414312*^9, 3.722434774769079*^9}, {3.722458657348763*^9, 
  3.722458658487934*^9}},ExpressionUUID->"7c0362c9-5d01-4d90-9b41-\
9fce0f8a3d74"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{60, 3, 3, 3}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{60}]], "Parameters" -> 
             Association[
              "OutputChannels" -> 60, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
               "$OutputSize" -> {30, 30}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{60, 30, 30}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {60, 30, 30}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{60, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{60, 30, 30}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 60, "$InputSize" -> {30, 30}, 
               "$OutputSize" -> {15, 15}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{60, 30, 30}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{60, 15, 15}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{120, 60, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{120}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 120, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               60, "$GroupNumber" -> 1, "$InputSize" -> {15, 15}, 
               "$OutputSize" -> {13, 13}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{60, 15, 15}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{120, 13, 13}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {120, 13, 13}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{120, 13, 13}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{120, 13, 13}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Mean, "Dimensionality" -> 
               2, "Channels" -> 120, "$InputSize" -> {13, 13}, 
               "$OutputSize" -> {6, 6}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{120, 13, 13}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{120, 6, 6}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{240, 120, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{240}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               120, "$GroupNumber" -> 1, "$InputSize" -> {6, 6}, 
               "$OutputSize" -> {4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{120, 6, 6}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{240, 4, 4}, NeuralNetworks`RealT]]], 
           "8" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {240, 4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{240, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{240, 4, 4}, NeuralNetworks`RealT]]], 
           "9" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Mean, "Dimensionality" -> 
               2, "Channels" -> 240, "$InputSize" -> {4, 4}, 
               "$OutputSize" -> {2, 2}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{240, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{240, 2, 2}, NeuralNetworks`RealT]]], 
           "10" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {960}, 
               "$InputSize" -> {240, 2, 2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{240, 2, 2}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{960}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{800, 960}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{800}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {800}, "$OutputSize" -> 800, "$InputSize" -> 
               960, "$InputDimensions" -> {960}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{960}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{100, 800}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {100}, "$OutputSize" -> 100, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "14" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], "15" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 100}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               100, "$InputDimensions" -> {100}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "16" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {
               "ship", "airplane", "automobile", "bird", "cat", "deer", "dog",
                 "frog", "horse", "truck"}, "Dimensions" -> 10], 
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"60\"", "\"30\"", "\"30\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"60\"", "\"30\"", "\"30\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"60\"", "\"15\"", "\"15\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"120\"", "\"13\"", 
                    "\"13\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"120\"", "\"13\"", 
                    "\"13\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"120\"", "\"6\"", "\"6\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"240\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"240\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"240\"", "\"2\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"960\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{247., {137.4169921875, 142.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.722434804481246*^9, 3.72243519258927*^9, 
  3.722438637103706*^9, 
  3.722459125542659*^9},ExpressionUUID->"d5d76ace-86c9-4a0a-ba75-\
3ef40b22972d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.037349999999999994`", ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJytVnlM1EcUXoqAUBEpClqlFREwggcYFBTz0QWVq3LIqbYgiCKyhWrwoCuQ
VhMOEcWTSjmKoqJyRBCoLqIiV1Gxtei6shy7sOf8VvBiXUJLG9v/5o+NnWQy
R15m3nvfN+8bq+jEoFhdFotl9L7/PR+8uKmuqZigw68lpPx3OTIuF5e3tw7g
TsbNjlcBDFjLeLapHAKdXb0Zl7JlaCrJihIOKeFmpnfNVSxBudo1lD39KVTZ
aQd95zHQuzF/sgNPiWQbvVjD2xIkm8XdH7MhOFV7/KD7qBQ7IvgLpIHPqecH
b8iz5h4gmO4uuhS7Xo6UqlAPG04/dd/616ndrxcxmMTvyHWXKZFfr+FUL5Pi
XWDDo3gnBpNXtiwM3iOEi/ykpaVmG1j/tBcfPOYlr2FXGzHw65SINDFKZPKq
9Y35Q+iKvfpiOIKgNN1ENqtNhpbdZbmPTfpw1vazonXrCc5F79iiVyCD5+1I
44iVvZhrGql/3pngQcaid/VuMvTmk4fOkT2IWht/6+VuBprDlbwbwwTx9ndL
S0RyDLAMEqpFDBi268a55j2YMzvH1st/M9XPcd2ZNSOnGLwZKglWJzPoEpc1
5q9Sam2f471ov88aBjozLIp2fEEgFErTdGbJqH7S9u0NBBzvOAZj3xguv3CP
YO2Zzh/VSfL/7u9PmV6xrv/Z+/W/7cPx0jYPS+zzH7q+JBhZbu3j/7ESSXuO
Pdg2MojmpAfl4foEafZnC/o5Uhz1tNty1fEZtsYvsBKPEwwHtz+KWaHECcOM
J1NjhzC6iz3/+CcqjEQlvNLUP0dT1L3GFefCqPZvWn3nFG1mMB4QU5GXTzBP
r/tY4LhM67i0jdeBK3E6/C3BxkQ/Yx8rOaoEatL1tg+TzruxC2IJSgprkxa/
kkGi/9MZ7vd9cFod1muyS4XFRcUJazUCdHGuS3w9/dDH9WAiBASpJ19Pm1mt
QE/nE+tGg0FcXl1TUPmQIH2vf6buIQVuuvZ/an5SrHW8/xe+CbN1UlPYBOsU
Pv6cRBlCI6ZUbg4SguFZjTlcYmB4Kux6dFYP2Ee4p/ebbkFrzePjm8wn3rs8
Z+e0o0pcDbhoUusrgdop9zDvDyWO4rVvUL4EKUUrp1wg3cjMs0q2zSQw+zrT
MSVFjkKPL/3u9/ZT3wXNzxOH1NMK0xioy0PWdFkyyG5suOIdqkC4UaFdsSsD
3bdJFiEzCHi+I3siyqTUc4aczo15uakQvs/5ruW25xi9Z+z9jruBykOdudyK
BMlE3b41yaVOqAD3zvaiuNRBHHA6/d3AXYL5LMe9O8MVaD5Up7CwEsPrpcFC
l3oC24EsVaiDAqUjTQOJFSKtcaHpAs3e9oXBVz8XqFBVF9BTXSbA0h+UrL52
D2qd0ZZvtPzT8qAtP12ufR5WakHwZ5LxR+kNUjTEKbbP3CRAXwXrrfNOBr+I
+VmpekLM8zS2cLfbSsVFVOc4GDQ6wcMOvnnuUik6JXdmHXDng/eoqqXrBIEp
d0nDkTI5mro9QpKDBmBWs+9pzhUCu2bxdjZLgfTIDn7rKhFV12i40HSflrfz
JpW/pbWp0B0oaMr2F0zonzN7xuzlVHua7tDupfGwvTkj2iubwWibplPszaAy
sKp2uE1B5QntX6Etn/8CWT8uIQ==
     "], {{0, 0}, {10, 10}}, {0, 1}],
    Epilog->{{
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3941", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3941", "\" examples of \"", "\"ship\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9733267473450234`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9830381641307059`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9781583519483743`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3941, " examples of ", "ship", " correctly classified"}], 
           Row[{"Precision = ", 0.9733267473450234}], 
           Row[{"Recall = ", 0.9830381641307059}], 
           Row[{"FScore = ", 0.9781583519483743}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["65", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "65", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.016053346505309953`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.016270337922403004`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{65, " examples of ", "airplane", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.016053346505309953`}], 
           Row[{"Row fraction = ", 0.016270337922403004`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001728821931341072`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0017618927762396174`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{7, " examples of ", "automobile", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.001728821931341072}], 
           Row[{"Row fraction = ", 0.0017618927762396174`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"bird\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0007409236848604594`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0007547169811320754`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", "bird", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.0007409236848604594}], 
           Row[{"Row fraction = ", 0.0007547169811320754}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0002469745616201531`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00024703557312252963`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "deer", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.0002469745616201531}], 
           Row[{"Row fraction = ", 0.00024703557312252963`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0002469745616201531`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000249500998003992`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "frog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.0002469745616201531}], 
           Row[{"Row fraction = ", 0.000249500998003992}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["31", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "31", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007656211410224747`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.007777220270948319`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{31, " examples of ", "truck", " misclassified as ", "ship"}], 
           
           Row[{"Column fraction = ", 0.007656211410224747}], 
           Row[{"Row fraction = ", 0.007777220270948319}]}], "Tooltip"]& ]}, {
      
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.000800854244527496`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0007483162883512097`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3, " examples of ", "ship", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.000800854244527496}], 
           Row[{"Row fraction = ", 0.0007483162883512097}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3724", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3724", "\" examples of \"", "\"airplane\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.994127068873465`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9321652065081352`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.96214959307583`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3724, " examples of ", "airplane", " correctly classified"}], 
           
           Row[{"Precision = ", 0.994127068873465}], 
           Row[{"Recall = ", 0.9321652065081352}], 
           Row[{"FScore = ", 0.96214959307583}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["9", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "9", "\" examples of \"", "\"bird\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.002402562733582488`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0022641509433962265`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{9, " examples of ", "bird", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.002402562733582488}], 
           Row[{"Row fraction = ", 0.0022641509433962265`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00026695141484249865`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002492522432701894`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "cat", " misclassified as ", "airplane"}], 
           
           Row[{"Column fraction = ", 0.00026695141484249865`}], 
           Row[{"Row fraction = ", 0.0002492522432701894}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00026695141484249865`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00024703557312252963`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "deer", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.00026695141484249865`}], 
           Row[{"Row fraction = ", 0.00024703557312252963`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00026695141484249865`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002498126405196103`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "dog", " misclassified as ", "airplane"}], 
           
           Row[{"Column fraction = ", 0.00026695141484249865`}], 
           Row[{"Row fraction = ", 0.0002498126405196103}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "horse", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"truck\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0018686599038974907`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0017561465127947818`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{7, " examples of ", "truck", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.0018686599038974907`}], 
           Row[{"Row fraction = ", 0.0017561465127947818`}]}], 
         "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0019694731659281144`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001995510102269893`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{8, " examples of ", "ship", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.0019694731659281144`}], 
           Row[{"Row fraction = ", 0.001995510102269893}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004923682914820286`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0050062578222778474`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{20, " examples of ", "airplane", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.004923682914820286}], 
           Row[{"Row fraction = ", 0.0050062578222778474`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3924", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3924", "\" examples of \"", "\"automobile\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.96602658788774`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9876667505663227`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.976726820161792`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3924, " examples of ", "automobile", 
             " correctly classified"}], 
           Row[{"Precision = ", 0.96602658788774}], 
           Row[{"Recall = ", 0.9876667505663227}], 
           Row[{"FScore = ", 0.976726820161792}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "bird", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "cat", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "deer", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "dog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0002461841457410143`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000249500998003992`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{1, " example of ", "frog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.0002461841457410143}], 
           Row[{"Row fraction = ", 0.000249500998003992}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            0, " example of ", "horse", " misclassified as ", "automobile"}], 
           
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["109", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "109", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.026834071885770555`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.027345709984947314`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{109, " examples of ", "truck", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.026834071885770555`}], 
           Row[{"Row fraction = ", 0.027345709984947314`}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00267639902676399`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0027438263906211027`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{11, " examples of ", "ship", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.00267639902676399}], 
           Row[{"Row fraction = ", 0.0027438263906211027`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["87", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "87", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.021167883211678833`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.021777221526908634`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{87, " examples of ", "airplane", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.021167883211678833`}], 
           Row[{"Row fraction = ", 0.021777221526908634`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0012165450121654502`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0012584948401711553`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{5, " examples of ", "automobile", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.0012165450121654502`}], 
           Row[{"Row fraction = ", 0.0012584948401711553`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3870", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3870", "\" examples of \"", "\"bird\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9416058394160584`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9735849056603774`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9573283858998146`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3870, " examples of ", "bird", " correctly classified"}], 
           Row[{"Precision = ", 0.9416058394160584}], 
           Row[{"Recall = ", 0.9735849056603774}], 
           Row[{"FScore = ", 0.9573283858998146}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["46", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "46", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01119221411192214`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.011465603190428714`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{46, " examples of ", "cat", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.01119221411192214}], 
           Row[{"Row fraction = ", 0.011465603190428714`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["39", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "39", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00948905109489051`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.009634387351778656`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{39, " examples of ", "deer", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.00948905109489051}], 
           Row[{"Row fraction = ", 0.009634387351778656}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["18", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "18", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004379562043795621`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0044966275293529855`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{18, " examples of ", "dog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.004379562043795621}], 
           Row[{"Row fraction = ", 0.0044966275293529855`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0019464720194647203`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001996007984031936`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "frog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.0019464720194647203`}], 
           Row[{"Row fraction = ", 0.001996007984031936}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["15", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0036496350364963502`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0037584565271861687`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{15, " examples of ", "horse", " misclassified as ", "bird"}], 
           
           Row[{"Column fraction = ", 0.0036496350364963502`}], 
           Row[{"Row fraction = ", 0.0037584565271861687`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.00267639902676399`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0027596588058203713`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{11, " examples of ", "truck", " misclassified as ", "bird"}], 
           
           Row[{"Column fraction = ", 0.00267639902676399}], 
           Row[{"Row fraction = ", 0.0027596588058203713`}]}], 
         "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["28", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "28", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00682095006090134`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.006984285357944624`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{28, " examples of ", "ship", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.00682095006090134}], 
           Row[{"Row fraction = ", 0.006984285357944624}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["34", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "34", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008282582216808769`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00851063829787234`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{34, " examples of ", "airplane", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.008282582216808769}], 
           Row[{"Row fraction = ", 0.00851063829787234}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00146163215590743`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0015101938082053865`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{6, " examples of ", "automobile", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.00146163215590743}], 
           Row[{"Row fraction = ", 0.0015101938082053865`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["17", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "17", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0041412911084043845`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.004276729559748427`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{17, " examples of ", "bird", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.0041412911084043845`}], 
           Row[{"Row fraction = ", 0.004276729559748427}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3783", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3783", "\" examples of \"", "\"cat\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9215590742996346`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9429212362911267`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9321177775040039`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3783, " examples of ", "cat", " correctly classified"}], 
           Row[{"Precision = ", 0.9215590742996346}], 
           Row[{"Recall = ", 0.9429212362911267}], 
           Row[{"FScore = ", 0.9321177775040039}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["42", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "42", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01023142509135201`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.010375494071146246`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{42, " examples of ", "deer", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.01023142509135201}], 
           Row[{"Row fraction = ", 0.010375494071146246`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["86", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "86", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.02095006090133983`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.021483887084686484`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{86, " examples of ", "dog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.02095006090133983}], 
           Row[{"Row fraction = ", 0.021483887084686484`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00097442143727162`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000998003992015968`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "frog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.00097442143727162}], 
           Row[{"Row fraction = ", 0.000998003992015968}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["43", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "43", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.010475030450669914`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.010774242044600351`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{43, " examples of ", "horse", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.010475030450669914`}], 
           Row[{"Row fraction = ", 0.010774242044600351`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["62", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "62", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01510353227771011`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.015554440541896638`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{62, " examples of ", "truck", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.01510353227771011}], 
           Row[{"Row fraction = ", 0.015554440541896638`}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0004941932295527551`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0004988775255674732`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", "ship", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.0004941932295527551}], 
           Row[{"Row fraction = ", 0.0004988775255674732}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["29", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "29", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00716580182851495`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.007259073842302879`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            29, " examples of ", "airplane", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.00716580182851495}], 
           Row[{"Row fraction = ", 0.007259073842302879}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "deer"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004941932295527552`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.005031446540880503`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{20, " examples of ", "bird", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.004941932295527552}], 
           Row[{"Row fraction = ", 0.005031446540880503}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["14", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "14", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.003459352606869286`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.003489531405782652`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{14, " examples of ", "cat", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.003459352606869286}], 
           Row[{"Row fraction = ", 0.003489531405782652}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3910", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3910", "\" examples of \"", "\"deer\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "0.9661477637756363`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9659090909090909`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9660284126003705`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3910, " examples of ", "deer", " correctly classified"}], 
           Row[{"Precision = ", 0.9661477637756363}], 
           Row[{"Recall = ", 0.9659090909090909}], 
           Row[{"FScore = ", 0.9660284126003705}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["17", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "17", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004200642451198419`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.004246814888833375`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{17, " examples of ", "dog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.004200642451198419}], 
           Row[{"Row fraction = ", 0.004246814888833375}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009883864591055103`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000998003992015968`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "frog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.0009883864591055103}], 
           Row[{"Row fraction = ", 0.000998003992015968}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["44", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "44", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.010872251050160613`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.011024805813079429`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{44, " examples of ", "horse", " misclassified as ", "deer"}], 
           
           Row[{"Column fraction = ", 0.010872251050160613`}], 
           Row[{"Row fraction = ", 0.011024805813079429`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"truck\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001729676303434643`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0017561465127947818`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", "truck", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.001729676303434643}], 
           Row[{"Row fraction = ", 0.0017561465127947818`}]}], 
         "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0012039489525644113`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.001247193813918683`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{5, " examples of ", "ship", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.0012039489525644113`}], 
           Row[{"Row fraction = ", 0.001247193813918683}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["15", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.003611846857693234`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0037546933667083854`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{15, " examples of ", "airplane", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.003611846857693234}], 
           Row[{"Row fraction = ", 0.0037546933667083854`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.0007223693715386468`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0007550969041026932`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3, " examples of ", "automobile", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.0007223693715386468}], 
           Row[{"Row fraction = ", 0.0007550969041026932}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["27", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "27", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006501324343847821`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.006792452830188679`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{27, " examples of ", "bird", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.006501324343847821}], 
           Row[{"Row fraction = ", 0.006792452830188679}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["129", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "129", "\" examples of \"", "\"cat\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03106188297616181`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.03215353938185444`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{129, " examples of ", "cat", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.03106188297616181}], 
           Row[{"Row fraction = ", 0.03215353938185444}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["24", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "24", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005778954972309174`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.005928853754940711`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{24, " examples of ", "deer", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.005778954972309174}], 
           Row[{"Row fraction = ", 0.005928853754940711}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3858", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3858", "\" examples of \"", "\"dog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9289670117986998`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9637771671246566`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9460519862677783`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3858, " examples of ", "dog", " correctly classified"}], 
           Row[{"Precision = ", 0.9289670117986998}], 
           Row[{"Recall = ", 0.9637771671246566}], 
           Row[{"FScore = ", 0.9460519862677783}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["5", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "5", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0012039489525644113`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00124750499001996`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{5, " examples of ", "frog", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.0012039489525644113`}], 
           Row[{"Row fraction = ", 0.00124750499001996}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["51", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "51", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.012280279316156995`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.012778752192432975`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{51, " examples of ", "horse", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.012280279316156995`}], 
           Row[{"Row fraction = ", 0.012778752192432975`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["36", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "36", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008668432458463762`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.009031610637230306`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{36, " examples of ", "truck", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.008668432458463762}], 
           Row[{"Row fraction = ", 0.009031610637230306}]}], "Tooltip"]& ]}, {
      
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0023957834211787254`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.002494387627837366`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{10, " examples of ", "ship", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.0023957834211787254`}], 
           Row[{"Row fraction = ", 0.002494387627837366}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0016770483948251077`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0017521902377972466`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{7, " examples of ", "airplane", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.0016770483948251077`}], 
           Row[{"Row fraction = ", 0.0017521902377972466`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["27", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "27", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006468615237182559`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.006795872136924239`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{27, " examples of ", "automobile", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.006468615237182559}], 
           Row[{"Row fraction = ", 0.006795872136924239}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["28", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "28", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006708193579300431`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.007044025157232704`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{28, " examples of ", "bird", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.006708193579300431}], 
           Row[{"Row fraction = ", 0.007044025157232704}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["35", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "35", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008385241974125539`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00872382851445663`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{35, " examples of ", "cat", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.008385241974125539}], 
           Row[{"Row fraction = ", 0.00872382851445663}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["25", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "25", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005989458552946814`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.006175889328063241`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{25, " examples of ", "deer", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.005989458552946814}], 
           Row[{"Row fraction = ", 0.006175889328063241}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["17", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "17", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004072831816003833`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.004246814888833375`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{17, " examples of ", "dog", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.004072831816003833}], 
           Row[{"Row fraction = ", 0.004246814888833375}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3985", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3985", "\" examples of \"", "\"frog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9547196933397221`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9942614770459082`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9740894646785626`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3985, " examples of ", "frog", " correctly classified"}], 
           Row[{"Precision = ", 0.9547196933397221}], 
           Row[{"Recall = ", 0.9942614770459082}], 
           Row[{"FScore = ", 0.9740894646785626}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0009583133684714902`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0010022550739163117`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "horse", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.0009583133684714902}], 
           Row[{"Row fraction = ", 0.0010022550739163117`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["36", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "36", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008624820316243412`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.009031610637230306`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{36, " examples of ", "truck", " misclassified as ", "frog"}], 
           
           Row[{"Column fraction = ", 0.008624820316243412}], 
           Row[{"Row fraction = ", 0.009031610637230306}]}], "Tooltip"]& ]}, {
      
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0002581977794990963`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002494387627837366`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "ship", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.0002581977794990963}], 
           Row[{"Row fraction = ", 0.0002494387627837366}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0028401755744900596`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.002753441802252816`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            11, " examples of ", "airplane", " misclassified as ", "horse"}], 
           
           Row[{"Column fraction = ", 0.0028401755744900596`}], 
           Row[{"Row fraction = ", 0.002753441802252816}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "automobile", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0002581977794990963`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.00025157232704402514`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "bird", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.0002581977794990963}], 
           Row[{"Row fraction = ", 0.00025157232704402514`}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0010327911179963851`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0009970089730807576`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "cat", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.0010327911179963851`}], 
           Row[{"Row fraction = ", 0.0009970089730807576}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"deer\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.001549186676994578`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0014822134387351778`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{6, " examples of ", "deer", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.001549186676994578}], 
           Row[{"Row fraction = ", 0.0014822134387351778`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001549186676994578`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0014988758431176618`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{6, " examples of ", "dog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.001549186676994578}], 
           Row[{"Row fraction = ", 0.0014988758431176618`}]}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3834", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3834", "\" examples of \"", "\"horse\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9899302865995352`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9606614883487847`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9750762970498474`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3834, " examples of ", "horse", " correctly classified"}], 
           Row[{"Precision = ", 0.9899302865995352}], 
           Row[{"Recall = ", 0.9606614883487847}], 
           Row[{"FScore = ", 0.9750762970498474}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.002581977794990963`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.002508780732563974`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{10, " examples of ", "truck", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.002581977794990963}], 
           Row[{"Row fraction = ", 0.002508780732563974}]}], "Tooltip"]& ]}, {
      
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"ship\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "ship", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0008149959250203749`"},
               "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.000750938673341677`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3, " examples of ", "airplane", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.0008149959250203749}], 
           Row[{"Row fraction = ", 0.000750938673341677}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{
              "\"Column fraction = \"", "0.00027166530834012495`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Row fraction = \"", "0.0002516989680342311`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{1, " example of ", "automobile", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.00027166530834012495`}], 
           Row[{"Row fraction = ", 0.0002516989680342311}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"bird\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "bird", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"cat\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "cat", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"deer\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "deer", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "dog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "frog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"horse\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{0, " example of ", "horse", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3677", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3677", "\" examples of \"", "\"truck\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9989133387666395`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.9224786753637733`"}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.9591756880135647`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3677, " examples of ", "truck", " correctly classified"}], 
           Row[{"Precision = ", 0.9989133387666395}], 
           Row[{"Recall = ", 0.9224786753637733}], 
           Row[{"FScore = ", 0.9591756880135647}]}], "Tooltip"]& ]}, 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4009", "\" example\"", "\"s\"", "\" of class \"", "\"ship\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9830381641307059`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4009, " example", "s", " of class ", "ship"}], 
          Row[{"Recall = ", 0.9830381641307059}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3995", "\" example\"", "\"s\"", "\" of class \"", 
              "\"airplane\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9321652065081352`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3995, " example", "s", " of class ", "airplane"}], 
          Row[{"Recall = ", 0.9321652065081352}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3973", "\" example\"", "\"s\"", "\" of class \"", 
              "\"automobile\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9876667505663227`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3973, " example", "s", " of class ", "automobile"}], 
          Row[{"Recall = ", 0.9876667505663227}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3975", "\" example\"", "\"s\"", "\" of class \"", "\"bird\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9735849056603774`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3975, " example", "s", " of class ", "bird"}], 
          Row[{"Recall = ", 0.9735849056603774}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4012", "\" example\"", "\"s\"", "\" of class \"", "\"cat\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9429212362911267`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4012, " example", "s", " of class ", "cat"}], 
          Row[{"Recall = ", 0.9429212362911267}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4048", "\" example\"", "\"s\"", "\" of class \"", "\"deer\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9659090909090909`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4048, " example", "s", " of class ", "deer"}], 
          Row[{"Recall = ", 0.9659090909090909}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4003", "\" example\"", "\"s\"", "\" of class \"", "\"dog\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9637771671246566`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4003, " example", "s", " of class ", "dog"}], 
          Row[{"Recall = ", 0.9637771671246566}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4008", "\" example\"", "\"s\"", "\" of class \"", "\"frog\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9942614770459082`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4008, " example", "s", " of class ", "frog"}], 
          Row[{"Recall = ", 0.9942614770459082}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3991", "\" example\"", "\"s\"", "\" of class \"", "\"horse\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9606614883487847`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3991, " example", "s", " of class ", "horse"}], 
          Row[{"Recall = ", 0.9606614883487847}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3986", "\" example\"", "\"s\"", "\" of class \"", "\"truck\""}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"Recall = \"", "0.9224786753637733`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3986, " example", "s", " of class ", "truck"}], 
          Row[{"Recall = ", 0.9224786753637733}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4049", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"ship\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9733267473450234`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4049, " example", "s", " classified as ", "ship"}], 
          Row[{"Precision = ", 0.9733267473450234}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3746", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"airplane\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.994127068873465`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3746, " example", "s", " classified as ", "airplane"}], 
          Row[{"Precision = ", 0.994127068873465}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4062", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"automobile\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.96602658788774`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4062, " example", "s", " classified as ", "automobile"}], 
          Row[{"Precision = ", 0.96602658788774}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4110", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"bird\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9416058394160584`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4110, " example", "s", " classified as ", "bird"}], 
          Row[{"Precision = ", 0.9416058394160584}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4105", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"cat\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9215590742996346`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4105, " example", "s", " classified as ", "cat"}], 
          Row[{"Precision = ", 0.9215590742996346}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4047", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"deer\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9661477637756363`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4047, " example", "s", " classified as ", "deer"}], 
          Row[{"Precision = ", 0.9661477637756363}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4153", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"dog\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9289670117986998`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4153, " example", "s", " classified as ", "dog"}], 
          Row[{"Precision = ", 0.9289670117986998}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "4174", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"frog\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9547196933397221`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{4174, " example", "s", " classified as ", "frog"}], 
          Row[{"Precision = ", 0.9547196933397221}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3873", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"horse\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9899302865995352`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3873, " example", "s", " classified as ", "horse"}], 
          Row[{"Precision = ", 0.9899302865995352}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "3681", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"truck\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9989133387666395`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{3681, " example", "s", " classified as ", "truck"}], 
          Row[{"Precision = ", 0.9989133387666395}]}], "Tooltip"]& ]},
    Frame->True,
    FrameLabel->{
      FormBox["\"predicted class\"", TraditionalForm], 
      FormBox["\"actual class\"", TraditionalForm]},
    FrameTicks->{{{{9.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 0.], TraditionalForm]}, {
        7.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 0.], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 0.], TraditionalForm]}, {
        4.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 0.], TraditionalForm]}, {
        2.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 0.], TraditionalForm]}, {
        0.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 0.], TraditionalForm]}}, {{
        9.5, 
         FormBox["4009", TraditionalForm]}, {8.5, 
         FormBox["3995", TraditionalForm]}, {7.5, 
         FormBox["3973", TraditionalForm]}, {6.5, 
         FormBox["3975", TraditionalForm]}, {5.5, 
         FormBox["4012", TraditionalForm]}, {4.5, 
         FormBox["4048", TraditionalForm]}, {3.5, 
         FormBox["4003", TraditionalForm]}, {2.5, 
         FormBox["4008", TraditionalForm]}, {1.5, 
         FormBox["3991", TraditionalForm]}, {0.5, 
         FormBox["3986", TraditionalForm]}}}, {{{0.5, 
         FormBox[
          RotationBox["4049", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["3746", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["4062", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["4110", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["4105", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["4047", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["4153", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["4174", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["3873", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["3681", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}, {{0.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}}},
    FrameTicksStyle->12,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->300,
    Method->{
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]},
    PlotRangePadding->None]}], "}"}]], "Output",
 CellChangeTimes->{3.722434804481246*^9, 3.72243519258927*^9, 
  3.722438637103706*^9, 
  3.722459165705312*^9},ExpressionUUID->"77d81b32-0dc9-4290-bed0-\
2e445379f969"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2782`", ",", 
   GraphicsBox[RasterBox[CompressedData["
1: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
HWj6+X/ny1+hR6Oh
     "], {{0, 0}, {10, 10}}, {0, 1}],
    Epilog->{{
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["827", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "827", "\" examples of \"", "\"ship\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.8245264207377866`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.827`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.8257613579630554`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{827, " examples of ", "ship", " correctly classified"}], 
           Row[{"Precision = ", 0.8245264207377866}], 
           Row[{"Recall = ", 0.827}], 
           Row[{"FScore = ", 0.8257613579630554}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["77", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "77", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.07676969092721835`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.077`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{77, " examples of ", "airplane", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.07676969092721835}], 
           Row[{"Row fraction = ", 0.077}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["28", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "28", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.027916251246261216`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.028`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{28, " examples of ", "automobile", " misclassified as ", 
             "ship"}], 
           Row[{"Column fraction = ", 0.027916251246261216`}], 
           Row[{"Row fraction = ", 0.028}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"bird\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006979062811565304`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", "bird", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.006979062811565304}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["14", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "14", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.013958125623130608`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.014`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{14, " examples of ", "cat", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.013958125623130608`}], 
           Row[{"Row fraction = ", 0.014}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.010967098703888335`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.011`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{11, " examples of ", "deer", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.010967098703888335`}], 
           Row[{"Row fraction = ", 0.011}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.003988035892323031`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.004`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "dog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.003988035892323031}], 
           Row[{"Row fraction = ", 0.004}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["2", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "2", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0019940179461615153`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.002`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{2, " examples of ", "frog", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.0019940179461615153`}], 
           Row[{"Row fraction = ", 0.002}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0029910269192422734`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.003`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", "horse", " misclassified as ", "ship"}], 
           Row[{"Column fraction = ", 0.0029910269192422734`}], 
           Row[{"Row fraction = ", 0.003}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["30", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "30", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"ship\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.02991026919242273`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.03`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{30, " examples of ", "truck", " misclassified as ", "ship"}], 
           
           Row[{"Column fraction = ", 0.02991026919242273}], 
           Row[{"Row fraction = ", 0.03}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["39", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "39", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.046263345195729534`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.039`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{39, " examples of ", "ship", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.046263345195729534`}], 
           Row[{"Row fraction = ", 0.039}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["695", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "695", "\" examples of \"", "\"airplane\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.8244365361803084`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.695`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7542051003798154`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{695, " examples of ", "airplane", " correctly classified"}], 
           Row[{"Precision = ", 0.8244365361803084}], 
           Row[{"Recall = ", 0.695}], 
           Row[{"FScore = ", 0.7542051003798154}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.013048635824436536`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.011`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{11, " examples of ", "automobile", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.013048635824436536`}], 
           Row[{"Row fraction = ", 0.011}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["37", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "37", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.04389086595492289`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.037`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{37, " examples of ", "bird", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.04389086595492289}], 
           Row[{"Row fraction = ", 0.037}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["11", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "11", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.013048635824436536`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.011`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{11, " examples of ", "cat", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.013048635824436536`}], 
           Row[{"Row fraction = ", 0.011}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.011862396204033215`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.01`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            10, " examples of ", "deer", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.011862396204033215`}], 
           Row[{"Row fraction = ", 0.01}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00830367734282325`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", "dog", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.00830367734282325}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0011862396204033216`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.001`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "frog", " misclassified as ", "airplane"}], 
           Row[{"Column fraction = ", 0.0011862396204033216`}], 
           Row[{"Row fraction = ", 0.001}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0071174377224199285`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.006`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{6, " examples of ", "horse", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.0071174377224199285`}], 
           Row[{"Row fraction = ", 0.006}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["26", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "26", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"airplane\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03084223013048636`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.026`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{26, " examples of ", "truck", " misclassified as ", 
             "airplane"}], 
           Row[{"Column fraction = ", 0.03084223013048636}], 
           Row[{"Row fraction = ", 0.026}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["38", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "38", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03551401869158879`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.038`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{38, " examples of ", "ship", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.03551401869158879}], 
           Row[{"Row fraction = ", 0.038}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["30", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "30", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.028037383177570093`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.03`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{30, " examples of ", "airplane", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.028037383177570093`}], 
           Row[{"Row fraction = ", 0.03}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["866", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "866", "\" examples of \"", "\"automobile\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.8093457943925234`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.866`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.8367149758454107`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{866, " examples of ", "automobile", " correctly classified"}], 
           Row[{"Precision = ", 0.8093457943925234}], 
           Row[{"Recall = ", 0.866}], 
           Row[{"FScore = ", 0.8367149758454107}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"bird\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005607476635514018`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.006`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{6, " examples of ", "bird", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.005607476635514018}], 
           Row[{"Row fraction = ", 0.006}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0065420560747663555`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{
            7, " examples of ", "cat", " misclassified as ", "automobile"}], 
           Row[{"Column fraction = ", 0.0065420560747663555`}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"deer\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.002803738317757009`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.003`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3, " examples of ", "deer", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.002803738317757009}], 
           Row[{"Row fraction = ", 0.003}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["0", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "0", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{0, " example of ", "dog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.}], 
           Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.003738317757009346`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.004`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{4, " examples of ", "frog", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.003738317757009346}], 
           Row[{"Row fraction = ", 0.004}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007476635514018692`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{8, " examples of ", "horse", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.007476635514018692}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["108", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "108", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"automobile\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.10093457943925234`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.108`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{108, " examples of ", "truck", " misclassified as ", 
             "automobile"}], 
           Row[{"Column fraction = ", 0.10093457943925234`}], 
           Row[{"Row fraction = ", 0.108}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["25", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "25", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.023629489603024575`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.025`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{25, " examples of ", "ship", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.023629489603024575`}], 
           Row[{"Row fraction = ", 0.025}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["74", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "74", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06994328922495274`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.074`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{74, " examples of ", "airplane", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.06994328922495274}], 
           Row[{"Row fraction = ", 0.074}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["13", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "13", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.012287334593572778`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.013`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{13, " examples of ", "automobile", " misclassified as ", 
             "bird"}], 
           Row[{"Column fraction = ", 0.012287334593572778`}], 
           Row[{"Row fraction = ", 0.013}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["642", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "642", "\" examples of \"", "\"bird\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.6068052930056711`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.642`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.6239067055393586`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{642, " examples of ", "bird", " correctly classified"}], 
           Row[{"Precision = ", 0.6068052930056711}], 
           Row[{"Recall = ", 0.642}], 
           Row[{"FScore = ", 0.6239067055393586}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["80", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "80", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.07561436672967864`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.08`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{80, " examples of ", "cat", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.07561436672967864}], 
           Row[{"Row fraction = ", 0.08}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["79", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "79", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.07466918714555766`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.079`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{79, " examples of ", "deer", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.07466918714555766}], 
           Row[{"Row fraction = ", 0.079}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["49", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "49", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.046313799621928164`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.049`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{49, " examples of ", "dog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.046313799621928164`}], 
           Row[{"Row fraction = ", 0.049}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["47", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "47", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0444234404536862`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.047`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{47, " examples of ", "frog", " misclassified as ", "bird"}], 
           Row[{"Column fraction = ", 0.0444234404536862}], 
           Row[{"Row fraction = ", 0.047}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["32", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "32", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.030245746691871456`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.032`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{32, " examples of ", "horse", " misclassified as ", "bird"}], 
           
           Row[{"Column fraction = ", 0.030245746691871456`}], 
           Row[{"Row fraction = ", 0.032}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["17", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             TemplateBox[{
              "17", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"bird\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01606805293005671`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.017`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{17, " examples of ", "truck", " misclassified as ", "bird"}], 
           
           Row[{"Column fraction = ", 0.01606805293005671}], 
           Row[{"Row fraction = ", 0.017}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["26", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "26", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.02566633761105627`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.026`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{26, " examples of ", "ship", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.02566633761105627}], 
           Row[{"Row fraction = ", 0.026}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["29", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "29", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.028627838104639685`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.029`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{29, " examples of ", "airplane", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.028627838104639685`}], 
           Row[{"Row fraction = ", 0.029}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["13", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "13", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.012833168805528134`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.013`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{13, " examples of ", "automobile", " misclassified as ", 
             "cat"}], 
           Row[{"Column fraction = ", 0.012833168805528134`}], 
           Row[{"Row fraction = ", 0.013}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["55", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "55", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.054294175715695954`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.055`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{55, " examples of ", "bird", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.054294175715695954`}], 
           Row[{"Row fraction = ", 0.055}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["548", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "548", "\" examples of \"", "\"cat\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.5409674234945706`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.548`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.5444610034773969`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{548, " examples of ", "cat", " correctly classified"}], 
           Row[{"Precision = ", 0.5409674234945706}], 
           Row[{"Recall = ", 0.548}], 
           Row[{"FScore = ", 0.5444610034773969}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["58", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "58", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.05725567620927937`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.058`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{58, " examples of ", "deer", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.05725567620927937}], 
           Row[{"Row fraction = ", 0.058}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["139", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "139", "\" examples of \"", "\"dog\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.1372161895360316`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.139`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{139, " examples of ", "dog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.1372161895360316}], 
           Row[{"Row fraction = ", 0.139}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["52", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "52", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.05133267522211254`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.052`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{52, " examples of ", "frog", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.05133267522211254}], 
           Row[{"Row fraction = ", 0.052}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["55", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "55", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.054294175715695954`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.055`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{55, " examples of ", "horse", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.054294175715695954`}], 
           Row[{"Row fraction = ", 0.055}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["38", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "38", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"cat\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03751233958538993`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.038`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{38, " examples of ", "truck", " misclassified as ", "cat"}], 
           Row[{"Column fraction = ", 0.03751233958538993}], 
           Row[{"Row fraction = ", 0.038}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007889546351084813`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "ship", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.007889546351084813}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["37", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "37", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03648915187376726`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.037`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{37, " examples of ", "airplane", " misclassified as ", 
             "deer"}], 
           Row[{"Column fraction = ", 0.03648915187376726}], 
           Row[{"Row fraction = ", 0.037}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0029585798816568047`"},
               "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.003`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3, " examples of ", "automobile", " misclassified as ", 
             "deer"}], 
           Row[{"Column fraction = ", 0.0029585798816568047`}], 
           Row[{"Row fraction = ", 0.003}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["87", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "87", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.08579881656804733`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.087`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{87, " examples of ", "bird", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.08579881656804733}], 
           Row[{"Row fraction = ", 0.087}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["55", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "55", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.054240631163708086`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.055`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{55, " examples of ", "cat", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.054240631163708086`}], 
           Row[{"Row fraction = ", 0.055}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["679", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "679", "\" examples of \"", "\"deer\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.6696252465483234`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.679`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.6742800397219464`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{679, " examples of ", "deer", " correctly classified"}], 
           Row[{"Precision = ", 0.6696252465483234}], 
           Row[{"Recall = ", 0.679}], 
           Row[{"FScore = ", 0.6742800397219464}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["44", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "44", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.04339250493096647`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.044`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{44, " examples of ", "dog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.04339250493096647}], 
           Row[{"Row fraction = ", 0.044}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["25", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "25", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.02465483234714004`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.025`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{25, " examples of ", "frog", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.02465483234714004}], 
           Row[{"Row fraction = ", 0.025}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["68", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "68", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0670611439842209`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.068`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{68, " examples of ", "horse", " misclassified as ", "deer"}], 
           
           Row[{"Column fraction = ", 0.0670611439842209}], 
           Row[{"Row fraction = ", 0.068}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             TemplateBox[{
              "8", "\" examples of \"", "\"truck\"", "\" misclassified as \"",
                "\"deer\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007889546351084813`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "truck", " misclassified as ", "deer"}], 
           Row[{"Column fraction = ", 0.007889546351084813}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["16", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "16", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.013513513513513514`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.016`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{16, " examples of ", "ship", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.013513513513513514`}], 
           Row[{"Row fraction = ", 0.016}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["12", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "12", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.010135135135135136`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.012`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{12, " examples of ", "airplane", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.010135135135135136`}], 
           Row[{"Row fraction = ", 0.012}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["13", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "13", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01097972972972973`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.013`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{13, " examples of ", "automobile", " misclassified as ", 
             "dog"}], 
           Row[{"Column fraction = ", 0.01097972972972973}], 
           Row[{"Row fraction = ", 0.013}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["64", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "64", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.05405405405405406`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.064`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{64, " examples of ", "bird", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.05405405405405406}], 
           Row[{"Row fraction = ", 0.064}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["186", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "186", "\" examples of \"", "\"cat\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.1570945945945946`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.186`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{186, " examples of ", "cat", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.1570945945945946}], 
           Row[{"Row fraction = ", 0.186}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["53", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "53", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.044763513513513514`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.053`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{53, " examples of ", "deer", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.044763513513513514`}], 
           Row[{"Row fraction = ", 0.053}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["695", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "695", "\" examples of \"", "\"dog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.5869932432432432`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.695`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.6364468864468863`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{695, " examples of ", "dog", " correctly classified"}], 
           Row[{"Precision = ", 0.5869932432432432}], 
           Row[{"Recall = ", 0.695}], 
           Row[{"FScore = ", 0.6364468864468863}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["31", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "31", "\" examples of \"", "\"frog\"", "\" misclassified as \"",
                "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.026182432432432432`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.031`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{31, " examples of ", "frog", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.026182432432432432`}], 
           Row[{"Row fraction = ", 0.031}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["94", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "94", "\" examples of \"", "\"horse\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             TemplateBox[{"\"Column fraction = \"", "0.07939189189189189`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.094`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{94, " examples of ", "horse", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.07939189189189189}], 
           Row[{"Row fraction = ", 0.094}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"dog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.016891891891891893`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.02`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{20, " examples of ", "truck", " misclassified as ", "dog"}], 
           Row[{"Column fraction = ", 0.016891891891891893`}], 
           Row[{"Row fraction = ", 0.02}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["10", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "10", "\" examples of \"", "\"ship\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008710801393728223`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.01`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{10, " examples of ", "ship", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.008710801393728223}], 
           Row[{"Row fraction = ", 0.01}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["18", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "18", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.0156794425087108`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.018`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{18, " examples of ", "airplane", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.0156794425087108}], 
           Row[{"Row fraction = ", 0.018}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["22", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "22", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.01916376306620209`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.022`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{22, " examples of ", "automobile", " misclassified as ", 
             "frog"}], 
           Row[{"Column fraction = ", 0.01916376306620209}], 
           Row[{"Row fraction = ", 0.022}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["75", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "75", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06533101045296168`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.075`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{75, " examples of ", "bird", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.06533101045296168}], 
           Row[{"Row fraction = ", 0.075}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["71", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "71", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.06184668989547038`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.071`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{71, " examples of ", "cat", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.06184668989547038}], 
           Row[{"Row fraction = ", 0.071}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["55", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "55", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.04790940766550523`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.055`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{55, " examples of ", "deer", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.04790940766550523}], 
           Row[{"Row fraction = ", 0.055}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["35", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "35", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.03048780487804878`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.035`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{35, " examples of ", "dog", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.03048780487804878}], 
           Row[{"Row fraction = ", 0.035}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["833", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "833", "\" examples of \"", "\"frog\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.725609756097561`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.833`"}, "RowDefault"]}, {
             TemplateBox[{"\"FScore = \"", "0.7756052141527002`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{833, " examples of ", "frog", " correctly classified"}], 
           Row[{"Precision = ", 0.725609756097561}], 
           Row[{"Recall = ", 0.833}], 
           Row[{"FScore = ", 0.7756052141527002}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.006968641114982578`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "horse", " misclassified as ", "frog"}], 
           Row[{"Column fraction = ", 0.006968641114982578}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["21", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             TemplateBox[{
              "21", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"frog\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.018292682926829267`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.021`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{21, " examples of ", "truck", " misclassified as ", "frog"}], 
           
           Row[{"Column fraction = ", 0.018292682926829267`}], 
           Row[{"Row fraction = ", 0.021}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004540295119182747`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.004`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "ship", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.004540295119182747}], 
           Row[{"Row fraction = ", 0.004}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["13", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "13", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.014755959137343927`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.013`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{13, " examples of ", "airplane", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.014755959137343927`}], 
           Row[{"Row fraction = ", 0.013}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.00340522133938706`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.003`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{3, " examples of ", "automobile", " misclassified as ", 
             "horse"}], 
           Row[{"Column fraction = ", 0.00340522133938706}], 
           Row[{"Row fraction = ", 0.003}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["23", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "23", "\" examples of \"", "\"bird\"", "\" misclassified as \"",
                "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.026106696935300794`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.023`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{23, " examples of ", "bird", " misclassified as ", "horse"}], 
           
           Row[{"Column fraction = ", 0.026106696935300794`}], 
           Row[{"Row fraction = ", 0.023}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["20", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "20", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.022701475595913734`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.02`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{20, " examples of ", "cat", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.022701475595913734`}], 
           Row[{"Row fraction = ", 0.02}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["49", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "49", "\" examples of \"", "\"deer\"", "\" misclassified as \"",
                "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.05561861520998865`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.049`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{49, " examples of ", "deer", " misclassified as ", "horse"}], 
           
           Row[{"Column fraction = ", 0.05561861520998865}], 
           Row[{"Row fraction = ", 0.049}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["26", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "26", "\" examples of \"", "\"dog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.029511918274687854`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.026`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{26, " examples of ", "dog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.029511918274687854`}], 
           Row[{"Row fraction = ", 0.026}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"frog\"", "\" misclassified as \"", 
               "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.004540295119182747`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.004`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "frog", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.004540295119182747}], 
           Row[{"Row fraction = ", 0.004}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["720", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "720", "\" examples of \"", "\"horse\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.8172531214528944`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.72`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7655502392344498`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{720, " examples of ", "horse", " correctly classified"}], 
           Row[{"Precision = ", 0.8172531214528944}], 
           Row[{"Recall = ", 0.72}], 
           Row[{"FScore = ", 0.7655502392344498}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["19", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "19", "\" examples of \"", "\"truck\"", 
               "\" misclassified as \"", "\"horse\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.021566401816118047`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.019`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{19, " examples of ", "truck", " misclassified as ", "horse"}], 
           Row[{"Column fraction = ", 0.021566401816118047`}], 
           Row[{"Row fraction = ", 0.019}]}], "Tooltip"]& ]}, {
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["7", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "7", "\" examples of \"", "\"ship\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.008905852417302799`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.007`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{7, " examples of ", "ship", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.008905852417302799}], 
           Row[{"Row fraction = ", 0.007}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["15", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "15", "\" examples of \"", "\"airplane\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.019083969465648856`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.015`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{15, " examples of ", "airplane", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.019083969465648856`}], 
           Row[{"Row fraction = ", 0.015}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["28", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "28", "\" examples of \"", "\"automobile\"", 
               "\" misclassified as \"", "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.035623409669211195`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.028`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           
           Row[{28, " examples of ", "automobile", " misclassified as ", 
             "truck"}], 
           Row[{"Column fraction = ", 0.035623409669211195`}], 
           Row[{"Row fraction = ", 0.028}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["4", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "4", "\" examples of \"", "\"bird\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.005089058524173028`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.004`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{4, " examples of ", "bird", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.005089058524173028}], 
           Row[{"Row fraction = ", 0.004}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["8", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "8", "\" examples of \"", "\"cat\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.010178117048346057`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.008`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{8, " examples of ", "cat", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.010178117048346057`}], 
           Row[{"Row fraction = ", 0.008}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["3", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "3", "\" examples of \"", "\"deer\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.003816793893129771`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.003`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{3, " examples of ", "deer", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.003816793893129771}], 
           Row[{"Row fraction = ", 0.003}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"dog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001272264631043257`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.001`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "dog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.001272264631043257}], 
           Row[{"Row fraction = ", 0.001}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["1", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "1", "\" example of \"", "\"frog\"", "\" misclassified as \"", 
               "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.001272264631043257`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.001`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{1, " example of ", "frog", " misclassified as ", "truck"}], 
           Row[{"Column fraction = ", 0.001272264631043257}], 
           Row[{"Row fraction = ", 0.001}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["6", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "6", "\" examples of \"", "\"horse\"", "\" misclassified as \"",
                "\"truck\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Column fraction = \"", "0.007633587786259542`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Row fraction = \"", "0.006`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{6, " examples of ", "horse", " misclassified as ", "truck"}], 
           
           Row[{"Column fraction = ", 0.007633587786259542}], 
           Row[{"Row fraction = ", 0.006}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[1.], 
            InsetBox[
             FormBox["713", TraditionalForm], {0.5, 0.5}], 
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 1.}], 
         
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "713", "\" examples of \"", "\"truck\"", 
               "\" correctly classified\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.9071246819338422`"}, 
              "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.713`"}, "RowDefault"]}, {
             
             TemplateBox[{"\"FScore = \"", "0.7984322508398656`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{713, " examples of ", "truck", " correctly classified"}], 
           Row[{"Precision = ", 0.9071246819338422}], 
           Row[{"Recall = ", 0.713}], 
           Row[{"FScore = ", 0.7984322508398656}]}], "Tooltip"]& ]}, 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"ship\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.827`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "ship"}], 
          Row[{"Recall = ", 0.827}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", 
              "\"airplane\""}, "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.695`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "airplane"}], 
          Row[{"Recall = ", 0.695}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", 
              "\"automobile\""}, "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.866`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "automobile"}], 
          Row[{"Recall = ", 0.866}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"bird\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.642`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "bird"}], 
          Row[{"Recall = ", 0.642}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"cat\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.548`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "cat"}], 
          Row[{"Recall = ", 0.548}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"deer\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.679`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "deer"}], 
          Row[{"Recall = ", 0.679}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"dog\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.695`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "dog"}], 
          Row[{"Recall = ", 0.695}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"frog\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.833`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "frog"}], 
          Row[{"Recall = ", 0.833}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"horse\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.72`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "horse"}], 
          Row[{"Recall = ", 0.72}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 1.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1000", "\" example\"", "\"s\"", "\" of class \"", "\"truck\""}, 
             "RowDefault"]}, {
            TemplateBox[{"\"Recall = \"", "0.713`"}, "RowDefault"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
          "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1000, " example", "s", " of class ", "truck"}], 
          Row[{"Recall = ", 0.713}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1003", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"ship\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.8245264207377866`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1003, " example", "s", " classified as ", "ship"}], 
          Row[{"Precision = ", 0.8245264207377866}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "843", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"airplane\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.8244365361803084`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{843, " example", "s", " classified as ", "airplane"}], 
          Row[{"Precision = ", 0.8244365361803084}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1070", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"automobile\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.8093457943925234`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1070, " example", "s", " classified as ", "automobile"}], 
          Row[{"Precision = ", 0.8093457943925234}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1058", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"bird\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.6068052930056711`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1058, " example", "s", " classified as ", "bird"}], 
          Row[{"Precision = ", 0.6068052930056711}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1013", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"cat\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.5409674234945706`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1013, " example", "s", " classified as ", "cat"}], 
          Row[{"Precision = ", 0.5409674234945706}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1014", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"deer\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.6696252465483234`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1014, " example", "s", " classified as ", "deer"}], 
          Row[{"Precision = ", 0.6696252465483234}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1184", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"dog\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.5869932432432432`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1184, " example", "s", " classified as ", "dog"}], 
          Row[{"Precision = ", 0.5869932432432432}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "1148", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"frog\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.725609756097561`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{1148, " example", "s", " classified as ", "frog"}], 
          Row[{"Precision = ", 0.725609756097561}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "881", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"horse\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.8172531214528944`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{881, " example", "s", " classified as ", "horse"}], 
          Row[{"Precision = ", 0.8172531214528944}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        InsetBox[
         GraphicsBox[{
           Opacity[0.], 
           RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 10.}], 
        TagBox[
         GridBox[{{
            
            TemplateBox[{
             "786", "\" example\"", "\"s\"", "\" classified as \"", 
              "\"truck\""}, "RowDefault"]}, {
            
            TemplateBox[{"\"Precision = \"", "0.9071246819338422`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
       Annotation[#, 
        Column[{
          Row[{786, " example", "s", " classified as ", "truck"}], 
          Row[{"Precision = ", 0.9071246819338422}]}], "Tooltip"]& ]},
    Frame->True,
    FrameLabel->{
      FormBox["\"predicted class\"", TraditionalForm], 
      FormBox["\"actual class\"", TraditionalForm]},
    FrameTicks->{{{{9.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 0.], TraditionalForm]}, {
        7.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 0.], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 0.], TraditionalForm]}, {
        4.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 0.], TraditionalForm]}, {
        2.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 0.], TraditionalForm]}, {
        0.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 0.], TraditionalForm]}}, {{
        9.5, 
         FormBox["1000", TraditionalForm]}, {8.5, 
         FormBox["1000", TraditionalForm]}, {7.5, 
         FormBox["1000", TraditionalForm]}, {6.5, 
         FormBox["1000", TraditionalForm]}, {5.5, 
         FormBox["1000", TraditionalForm]}, {4.5, 
         FormBox["1000", TraditionalForm]}, {3.5, 
         FormBox["1000", TraditionalForm]}, {2.5, 
         FormBox["1000", TraditionalForm]}, {1.5, 
         FormBox["1000", TraditionalForm]}, {0.5, 
         FormBox["1000", TraditionalForm]}}}, {{{0.5, 
         FormBox[
          RotationBox["1003", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["843", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["1070", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["1058", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["1013", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["1014", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["1184", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["1148", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["881", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["786", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}, {{0.5, 
         FormBox[
          RotationBox["\"ship\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {1.5, 
         FormBox[
          RotationBox["\"airplane\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {2.5, 
         FormBox[
          RotationBox["\"automobile\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {3.5, 
         FormBox[
          RotationBox["\"bird\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {4.5, 
         FormBox[
          RotationBox["\"cat\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {5.5, 
         FormBox[
          RotationBox["\"deer\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {6.5, 
         FormBox[
          RotationBox["\"dog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {7.5, 
         FormBox[
          RotationBox["\"frog\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {8.5, 
         FormBox[
          RotationBox["\"horse\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}, {9.5, 
         FormBox[
          RotationBox["\"truck\"", BoxRotation -> 1.5707963267948966`], 
          TraditionalForm]}}}},
    FrameTicksStyle->12,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->300,
    Method->{
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]},
    PlotRangePadding->None]}], "}"}]], "Output",
 CellChangeTimes->{3.722434804481246*^9, 3.72243519258927*^9, 
  3.722438637103706*^9, 
  3.7224591761600323`*^9},ExpressionUUID->"611bf5c3-29ba-4c71-8393-\
9579e0e56963"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtVumTVNUVt5Iv+ZiPqXwxBCKJpKIpYxQtlxnALTFRXFDASpRBiypFMxhQ
EGYYYGAGepae3rvfvm/3Lfe+5b61t5lBU/mfctpK1etXr2/de+45v/P7nXMO
fPLlyU9/8sgjj1z6GbxOfnxlbnHx42/f+Tn8ee/ipQufXTy/8PrFr89/dn7x
2U9+Cou/+v9v9n3sldf++MSRZ1946Y13P3rr9MdHnnzqqWeOvnz81T8fff7p
o0d/+/jhw7/59e8ff+zw4UOHHjv4/Nz8paU7t+rM0oP20uZgZUdaa0nrHXG1
yd+q83db8oOOeL/J3FrfvLF8c/GbpUu3tq8t33n3/fdfnj925eb9Ow3u4tWV
819e/uq7O5eX7369fO/t0/944eW5468cmzt+/M23T16+em2n3ekIGme4Pc3t
aw6v233FqvXk9Y683lU6gtHi9c0ud3Nt49pa6/YO3+wwt9c3rl6/0eoOOpy8
srax1uI2WG27y93f6dxpMFfvbV9f375X79a7vKhZsqr0BZGVtZ2+0ORURjUF
A63VOyu15u2N5vLd2lZf2mGVm+tb361u3a33RcXgFUPWdEVVavXmd7fXr93d
eDDQtgfyWr35YKDUGHNHsAcaEg3UYbitLsOqDqfom+0enN7pcW1W2unxtTa7
BS5t7jQHQodXWwOp0WE2Gj1JMQTFFFWL4cWdLtPhpK32YLvHDVQk6PZ6vXHt
Tq0t2rzh6I7fZZj1eos1PMMPFSdgRIUVZVZSedXSENHcSDJ9HkADZzTECyrD
q2C/O+Aa3QEryJykipop6xavGqqJVMPq8fyDRlOyfSuIvSgxPThugWWbJIZH
BEXHUYhI7HgBjqnhRaodSKanGB7Ly6u3Vx9sNZqdvum4nKTwsgYGLY8gjAPY
7LiSqjk4AvQ43Q1pnuYpihI7zIIkzarS9glOQjeOVMv1sGe6AQTo+J6oGoYT
6JaryJKimz1OkU1XsxDYd/wg8Inl+qYXyIbBqYYfIMnxtSDywsj2fZxmJIrK
svj+h+nuw3FI475sYBonRebHcRSHAYldTHTbJiHElUiGZzqBaiET+YaLDZcE
YSgaTgectsweAGgGuh+HaT7en/zw332XhJIkZnlWVGUxzFGYkiSuqiSieQir
sFiWWVWQJEOE8oYnWwHyQtvDthcgTEzkxWnih5FPAvDTC2PVj1k7ssM0LMrh
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
yj1W7DJ8q8d3YQTtcY02s93s/w+T3cwr
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
nxVZgmcLHF/hcQoy/V+4OeYa
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtVWdUk1kanrP7Z3+4u3PWUSmhhCQkQKiBIH0soyjFUQddRywgjOKo2Ma2
MzuIiDDqqPReg2AgIT358uX70isQEjoJEAiphKZYZnf/7Ddn957nfc9777nn
eZ773nvORecXH/vuD5999tmtPyHpWN7dPTdv5t0//jkyybl2q+jitcKCQ9du
F14svLk7/4/IYuD/4/faaLaPzi4bTbbxOfvUgnNy3jExZ5+2OGYtNtOi3bzk
MEzP6WfmZpfs81bn4rJ70epasjptdqfTaV9zrmy619dX1j3uNbfb43Q53U6n
x+H02Oxuu81ltTrnLdMW5/SCY3bJbV5yLSy7f4dtxYrscnncnnX36sai1b68
7HA7Vtacq1uet1ur61srno8u95bVujm3+HbB9n7Z/c7m3rA7Vu3WDYftncPx
1mbzmOdWZkzuqZmlZZd12e10r6+41zzu1bWV9Y3Vzc21jbdra+/W17c2NrbW
1j6urG7ZXG8XbetmhHDh05Llt4WF30zmLaPRo9F4hnTvJsbem2bfz83/H+Z5
9/iUXW9cHh79uP72w+rGh7XNj561T27PB9fKR5fnk8v9yen45LB/cvyef1u2
/ctq+5fF+m5qdmVk2KMfWtPrV3TDHqXcDgkmB99MsQecSvnm6OTm2NSGcco1
MrY0bJzT6nVC+D8uz4dl+3ur7YNl6beFxY/zlt8xN/fJPPthZvqT2fTRNLtl
ntmamXo/NfV+YmJTP2yVSgxsziiXb+DyhO3tI1z2tEwyI1eYFLr5IcPS2KSC
D0IsYHp0isPg/dtifT8ztzk+vWkYf2swbuoN68OjHo1uVa1yySROmWRFrXJq
VU610q1WrWnVGzqtQ6mSU2nTCq1JP97R2DamH1+yLFvmF02zZrNp3rK0DMrk
/QPssQlTH529odWvKXQescolljglsAMSOyAZAhcs9sAiGwiYebx5AFwQQJOD
LDOPPUTt1wxyBL2DY6oRPoPd3t5lnDSbF6xmi2XGumS22MwLdqZM1vmGrtFP
UgaYHgh2g5BbKHKCIicktkPSZUhhgRRzIKzs7GK+qtHQOf21zbT6jqayp5KB
/panz6vLnz599KS+qrYwL49KHdAOj6nUOqNhfNJkMc3bTKYlPixr6+kXq4b7
WQLE5yIAaCgUXV//FFdk5IKjfFgvlMoZ3MfXfyi/U8Lo5RXkXfnuwo1LBcUD
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
KgiUCrlCIYUgEQxLYFgmAGVMDkilcf4LETUOHQ==
      "], {{0, 32}, {32, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
x+XgCIJzERy2TozDA1Ukco74H2S19Sg=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxl0XdUU1kaAPA5OyKhJYQAAoKADWkiKj0EpISEEkICBAik0AMh9I6FltAh
dBJCKBEUaQEVpEqvVhRmdndmzoyCIM1KCf6xD52zZ8/Zd37vO9+9973vu+9d
Tf9IXPA/fvrpp1gQEHDUxGsxMdRkvCww8GDE0kIYQYFoRlxQSFCMqf/PwKTG
3/dR/uCvXcDDN3u9b/f7ACsHj1ZF/e8OB74bOvJteO1wZF0EGP4/I2t/G147
OAI8v3o4uCICDLw96H+zN7RyMLiyP7QKLIlG3h2OrB0+Xv82+v7b2MYhYGLj
23eHk5tHJrYOx/8HMJz8AVjaFB05euVw/L1obF00unbw+N3e6Or+6Mre2LuD
8Xei8TXRxPrh5Pq3qQ3R1MbB1ObBzIZodlM0uyWa3T4AzOwARNM7B9+JpoGZ
H7aOTB8RTW8eTG3sT27sT7zfm1jfHX/3dWLl49Ta15n1vemNvdkj+zOb+3Pr
n2c2dufXdp+sfXqyujn/dmNuZXN+ZXthdWd+dWd2/dPsxue591/mN77Mbe4+
2Tp4snM4vyNa2DmY296f3dqbAyps7gPVJlc/TL/7Mrf6FSi1sLH/ZFO0sC2a
+PX3yYGhqd7e8faOkaaG4erK3mJ2d1VND7e2p6m+u7W1r7e3f/DRYH/f4OOh
weHhyWdLLz8cPvsger6z/2xn/+n23rOtvadA343d6eV/ji//Pr7028S//pz6
bWX2t3cLf7wZ4PM7vXy6XbBdKKduJOo+EtXqhmmg+NVRSfzY4KrosOYbafdY
N7jRIU2xjMaQkK5yzuuP+0ufD5Y+7r/6sL+4s7e4/fXl5mdA78OuxqqahvLq
xto6QfOdls42QVMtJyzgjjO6FYVqQ6LvIlF30Y48F8cCLJaN96wNDagOpAoS
EpquJ3BoFF5kcG0wubOsbHnn8/LH3V8+7C7v7L7e/rK8/Xlp69PrzY/Ce4JG
QUNFLbe4ppYjaGpubeKU5ma5orKt4Ew7RLadVbaNJRPrkEzAkuwso2wQZSRy
JYnEDQuqiQoV+PoIQkN5UcFtJbnP364tb31Z3vj0y+bn5Y2Pv2wCyScg4dyI
Ka2szi0uS88tzsgtyWTlZybG5LvY5lyzYNlasGzM8q8ZswmOxRHU0jh/Hglb
5e1RQSBUB5E49ACBu3sD2b8yPKA+O3X6138vrX9cWt1+tbbzem1nef3D0toO
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
VR6cXUNjcUJzOWEFvP8ATunBbQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtVvmTG9dxViW/pCpVjijHlhOrbNNWUSYpKZIohofES0tSlElKa3JXe5LL
XRK7BHYX9z0YDGYGMxjMfZ8YzInBANibXCnlVP63wJVU9evq9374ut/Xr7vf
2Y3Mk81/eOeddwr/NFVP1it38vn12tN3p5v5dCG5lU68+i5dTGwl8lc3/nF6
+If/X3+3rUJBzmflUk4rF3qVslMva5WMWi5KxTJfLHYzKTj5fOP7ma/O//bK
ufeu/fnM1Y/evX7+/a8v/ObOhffufHLmxie/uP7pmdW5GwIFqhTCQoX1hW++
uvTrr7/419v/8etvP/vAb4JhB2VLWbaQ0YGKViuK1ZwK1oRajSjk0UyyubPR
2N74/ubnl/707uWPfvHluX++fO5frnx05sb5Mzc/ee/mZ7+88vGZezf+DFVT
EolIJGzI8LPFm1c/fe/+pX+/d/FXJlDzSGyiCzoGiY2K2CjLcJ1vVlQcFtCm
wbQtodPnO9Xks0vnzsxc+eDJtxeWHn/xfPbK3MyFO5+/f+XCu5cv/vLbWxe3
Xz31LN62RF3tUN3i/MNL9z7/t28//pVcLfNAxeHJSBMmlhqpXKgxvkoeD3uT
QHuz704i09MZCsrVMksamwt74KAHDaxWn692gVeby/fm/vKfawt3N9ce6XKH
EzqChBlmF6omHlw+O43fgRENgdlWg0ObsaWNbNWW8aHD/nTUGw9F32U0pa1w
TZWrOgbo9xrjAbYXdX0LcVRwYHU8DSfhbKO4vjp3m+5WVZMWVUJRSVPprM3e
uXX+/QDBejgutmGJwMQOChVShtDUhbouV1g6gyDJLlEQ+bJtAK4NGGrRsyHf
bvd1tK+3+lrb1bo6B1NItpxeyKUXdbOrGLTtqH1LalV2b356Nmi17TYWiPzI
NjMbL/BaZhLQllIR2ZSu5lW14jqY7yOeBwwGzcGg5TmIoSI9g+hbUy+4KeEq
i0hUTWaKcGNDliHHl4PIcV3bNuQXPz4e4vSBbHgsT4GNxYcPDAY5jNjYRyIP
tM2y14f8Pt4zQccB4xgLfMR3cVNvT/ENFVYESGJaMgPbakflAVWscVwpiqXD
4zAeBXHk93UlJFmPEvgmzECNl8uzKtN8M1EiF7W1sibkDbFuy5itdVy7G3r0
8aE+GYmOjQ0HTBRyA58LPV5XMFunpsmVpaZq1I1eM4jot6eD/b3of/7232qj
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
QXZS9cR6an72fwGa0D+M
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
xSkpyUtTFyxJSUpOTli4MAlUCnLSwYq5NUVylKGVCWxGRaPXYmvfZu/oVTet
F9e1qerXm/3bG7bs8WzZZW7fhmqb6nybTp699ubxU7v3Hdi6c4/b50akNVnZ
aYsXPb5kcVJ+bnpq6oKEhHnJCxJTFi/IWppamp8BRoRzy1RilsUgcbv0uuYN
CncnYmwRgrFYWjUNPd6NffU9z6i83TL7WpG68bUT3zz34pvUikq13mSw1XFF
TA5SWVaYRS1cJoTLM7NT58177PGk+cnJiamLknMzU6uKsji0lTC7XKsU1Dt0
IsdaxNrG0zzJ0zYJ9S3AQvfkBv2qTSJbu8TezpXWdfX2v3H8q+KyKgaLrTPb
pWpFXYNBzCpSSngas7y8YsXC5PmJj89LTJyXnJSQlrogNyu1rGBZdVmeDIMa
PVa0bi3mXAcDKa1PoGtGzKtRix+1rEata6SuTq7SrbavPvrh9yKFgVZDU6h1
LKHAYZVbcZrDqbF5jSo9kpP5RELCXKCfkDA/KSkhdXFSTkZqaUE2Lqxe1VSH
ODpgZ6fI0w2b/HxdE2xqQcx+xORHzC1iZ5tQ18iTWF48cmrtxj7wa5JJcDqT
KWJVOeVMpYFj9eEev5jNzwcrTkycm5AwZ978eCNgOzmZqTivqrXFxbO3sa1r
hI61PH0zR9PI1z8JG5pRYwts9MPWNbCli46YNu589bmXTxjrXCaDhieUC8V2
WCBKz8ymC1FLo1Rrp+VR0ubPf6A/b86cOY+CjSxZlCgR0Fv9HobSRVfVMzRe
SOXmarx8bZPAuFpg6eDbN/EcO9iuvlK+0dfee+itz2Vas0wp44t0HNxSUcNf
sHBhxsoirphn8NDZ6Mqk5PlAFjB37qOPzXl0QdI8lF3hdRnpYnu1xF4jdTKU
XqZmFcvQwbFs4tq3c+u2s9xP012b82vwOt/6Nz8472xoE0ulQlxbyUTLq1j5
RcXl9ApUUWP00pXmypwVKUD5IY8+9hjohU7NVeBQJWKuknor5asqlG0V6q5K
XRfN0lPj7GE5uxjebqrGVUgTrN7Qd+L0pS3PHu7cuKNxdQ8bVkqUKp1Jo7eJ
TfU8k5ttdrMEWEn6spQlS5JLyjLS0hYmJSdSVqRBlbmUKoTCVORD6jxIk8/S
5HHU+ai+UGoulRpLMC2lGpbpPXtf//DYqZ/2HnhnR9+rew8fM9c31zV43D6X
w22xu/RGl9jg4mhtXERSBUH5tcZqOmNFGTWrrGgZlbLU4m7T1/lVZp9U68ZV
Dlhh48stAJ7YANA7/L17Dr/yzul9/W9tcfrXNvf07Hyp3teit2ocbhvAVq81
uaR6J6yvF+gcEI6VKswMGCuBsWIEL60oy2zvfqpj087OLbs6Nz8LWLdld9fW
vnXbnut5am/P0we29x3ate+N3f1vtTh9vkqoudba6N/ocvm0JpXNZbI6DFaX
zmCXG+wSvUOs0HOZzAKJliVEKpiMEmUtwubS/geRhI6i
      "], {{0, 32}, {32, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
/Gg4GAp6fVW+kM+h0ymMhjpqHaWBe5Qv5mgJwmE3+9y2cCg8MHJy9f7Tm7e3
+TymUgk7SItJrfST5q5Sc3expRCJZQKBllis3JRsTWePpTLZeCIaiUfCiWg4
6vd4cUzL47Lq62vraZR6GjVZDpRGIridqKqTSsXD4Ui+3Lxw9/TdzXU+l6WU
S024FpOJQjayNZXO+QNBqzVAkhGHI+H1poPBmM8X9Qeq6jTFk7FoIuQPmo1G
Pp9T1ZdS97Fer7u/cW/vzbNPFs8ZHYZQJGS1211+79BCYXln0OW2e71ul83i
IPBM9dxIOOl1R5zOkMMRc7uTfn8qGAz7vGGfL1Hdijcl4sloOOayOcSgsJZS
IxTxFhcv/cs//+E//v2/fvv7348uN9tDhAbDdEb9wJnSxc/a1m6tr67eubqy
cmNlefXatU9Xlq6vLF9fuXJteeXK0uWqXZw7f2b27Mz0zOTEidHhka6uSjZX
jESTFptLJJYMDAx9/f53//2f333/v9//8U9/vLw34C1rxFKxK2I5eTN1eavy
aGPj3vr9tZurlxcWZqenxocG+iqVSkdHd1t7V0u50tpazheai8Wu9vbB3t7x
sbGTJydHRscS6Vy1quWaW1+/fvuvf/m37779n79+/9f3v/367EbH0Fo4VMYr
8/5PnqdmN+OLC4u3bt198ODRrbXbqzdu3Lm19uTx41cvX7384ovdZ88ePXh4
d+3WleWly4sL1QAuzM9PnZzs7e1tLZej0fDMzMyjjcdffvnVn/7852+//W5n
5/PxpcL8ftWK5w+qlp/fS01Nnzo1e3ZufuHihcVz5+bOzc1dunT59u07d+/e
2Xj0cO3WrSsrl6+uLK3fvb23t/Pu7ds3X371+PHj3Z2d/f39re3tJ0+eVtvu
zrOdz7fmLpyauJqf28/PHaTO/6x44aB0fjdbvezwyNjEickTJ6ampmdOzZ4+
fersJ5/Mz8+fX16uhry4sLBw9eqV9fU7+/t7v3r37pv3779+/5uvv3n/5u2b
J09/eu36lTNnT09OT4yPj/QNt09ezy/+rPniQfHiXmnpoDz3vDAwNDh+YmJq
empycqpKn5mdPX/h4rVrN9bX7+3t7b148fLFixevX//i17/+1du3b6v+7vOd
hw8fXL2+Mj4xms42Ob12l9deKhd7BwZ7htpGl9IX94pLP29Z2m9Z2T+28LxM
mPTxeHRy8sTDB/e3Nrf2D/aryNevX79589W7d29fvXq1u7uz/Wzrs63NT1dv
Ts/OtFc6ok0Rs80ISgEGh84VcrQ4ki/mhscmBicqQ8vZU9upc8+ziwctlw/K
S7stkydPrK7efPnyi9/90ze/+cdfvvnqxc7O9k8fP9l49OjO+p3lqyuTM1PH
u9rimYTd58TNeoVWASoArojD4NI5ApZcIzeRhnwx290/MHSyZ3qtbWo7PfN5
6txe8W9C72b393b39nc3P9+6e//ep2s3l68tLy4vzZw5c7yz3RPy4CSuwBQw
CkMoLNepUCOmJwnCbtTo1WK5UKYSawyozWEqtWTburoGTnZOXCnPbhZntjKT
m6nJz+LTm/H/A0KqPtY=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyVUllwFNcVdSU/+UwCGGOBkEAgCUkzo1l6epbeZ+nZeqanu6e7p6dn6Znu
2RfNIrQgBAiMWcRijFHANiFQwcaFU3FVFseJKxUn5VSC7aosH04+bMdVcZxy
Yhy7ggEjpSkn+cmPc+u+9857r+q8+865g0ozrn3pgQce6HxFn+K53Vi7nZtl
vqpvuEanXGyohUCjqxbVNqh8WT8c+Pe4j1Ocr6HE5yuxM4fUYwvZ8ydKK8eU
51amr5/rXTs3+/yl5auXTt+48bMPPvro9mdrq2tra6v6dH/9gqGlg7Us1dOo
UwfUowvS+ZOZx4+IF44WLy83rpyafu7po1cvnnr9xs///uFHn9z69Pa9e/dW
V1fvfbb6xULnL8q+ihwupwL7O/KReWnlRPr0I/zjB5SnHqlePNJ8ZmXpW2eX
Xnnp+pu/vfHHP/zm5icf6dRrq/e+eP35BJaiUCGC91RhsSWcOCAdXeSPzqYf
m1POL6mXl7uXlnvfvfToS9fPvfLDK2+/8+Y/79z5v/TJ80SW9XMhT4GneiV6
bye+2BUOdjPHuplz+3Jn9xaePly/+nj3hYuLP3lu+cYvv/+3mx989vnP/zfu
S3Lvv1efgxSLZngyEfWkhUivTs136XaJO9jVFqvSwSa/1BRO71EvHC5ePdN4
9onOKy+ef/fd39+6c3t17d5/BF5d+9xwfdXJV2/r6M7dW3fu3Lp799OPP/mQ
j7nFOCbEPWIi2KqEpxvhuhLb28pVRLKnBA9OSY8tqhceVS6fyl9ervzg6qGX
v/f0W2++8fHN99b+y7t2/zG97ruf3X3//Xfe//O7v3vj1R+/8MyrL3/nRy9c
EFlEYnFZIDnO3yrHpqvhaibc1hJ1ObS/xR3qpJ5YKl15TLt+Qbt2pnl9pfPk
ser1i8dffOHbr//q1Y//8fGHN2++9faf7uh9tbb2l7++9+wzF8+dPr5y4uAj
09qZpfKF42qCgXX+lOBleX+3JvaKoWY2PFeTZovc4Y5wYj7/xJL2zZPZ559U
nz/Xub4ydeZAan83Vc6nUoL43LXnT546W6t3Hj977rXXfv3KL37a7pSzklDK
it1ycl9POnM4HY04Uhwu8Z5IHM8IZK8QmtXiS1O5eY052uaXZ7On9yrnj8hX
HktfPV2/ttL6xgm1VWUdoHPS6EiwMk5ErTYsHAgfO7T/yKP7VS3FMCxN0wmB
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
0YEzMOHC/wX1R/YL
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtlGdMm2m2x0d7v+yHWWlXO5NsQi8uuPfu93V93W1sY2yDIaZ3GzDdGIca
AskAyUAqKTtkApkAIUMLJfSeAJmEOhA6qZNsZm+R7qfrka6e/3N0ztGR/jq/
R3oCYu26xD999dVXjj97gi4mn5+dHVOo/6unMNgcKUm2hHiZLSchKSGbEfsf
nqb//98/8qXO+OUu62pfwque+I0naVuDWb8OOHZHnDvDrr0R99ZAwXpf5taQ
fW8i8Wgm4Wgm42jafjxr2x2zbQ8VrfY6Fx9nzz60LXQ4nj/KefbIvtRjWx3M
XB3MWuq3j3Wl/HTbMvNjzGyrZf1Jys5oxu6YfWc0a73fvtGfuzVQ5LFY681Z
6bat9qZsDke+mY8+nk3ZHkn2aGvItj9autZXMt9uX3qc+0uPc6o1fbItebnH
vtidOvsocaDVeq1OVpBLXexIXutL3Rm1v18oPJ7J25/IeT2cu97n2B76Y4X1
3pzVXvtKb8pib8zIT+au6+bJtpSV/uzNgezdYddGf/HSY8cvPfkve5wTP6Yu
dztWh3KXezOW+zK770TWlQOFueTVvrS1/qSV3vi98ayDifyjyeLNJ475toS1
ntyd4ZLXHpeRgv2JwnvfR4g4fkjvr3UgrLMxcXuo5HjMvT/i2hwqXhtwrT1x
rw26dycrdqdKNkfy1wYKZjoyuv8Z3XbDuDZo2/IwGbLtTObvThcfPqvYnjq7
MpC3P+Y+nirbHS/em3DujjqLUgEi4gTof5Ln9fU5m3B9smx/0rneY1t5krMz
VbY1Uf56qnJnpup5n2OuK+OX/ryVwcK14aKlvuzt8aKDmZKdqeLXM67XC+6D
F1UfVhrezJ7/PHfuzbR7c7Jwa7pkd6Ks92b6tXzTkDNmvCRq+b7j6EXt4WLZ
0bz7+HnlwbPK9fHitXHXynjJSHvKSEfKjAfpSNHqYMGzR+l7Y86DqeKdiT9c
Dmbdh7NnPz+/8K+Z2nejZw+n3Nue5kzlm/7StXpbZ6T0gR6cjlccOC2fr9u+
TFd93rj0++aVd0sXj56fP3h+bmOqeG+pYmk0t++hdagzcbbbPtRiPZ4qeTNf
erRQ+vZZ+fu5so+zZYezlduTpVvjrsO58vfTlR/bCjbSNYsc8jMGZQQgL3JJ
xxT8O4jxturM28HSz8sNn17U70ydPXpe8faXqo8bNYcrlWuLZxfGC15Mup4N
5m8+zf11umhjxumJ+5PFe4N5r7qzdmcr9ucqdifc73tcHyviDwWcTxTGJz7v
tYj9DgL/FwC+UMnHauBtfeK/5qv/vVr3Yfncu6XK/Xn3b6s1H9Zr1+dc929o
b9TLnrSnvHyaszZd+GqmcGOu2INo7m50X7nszeOi7Y7siWuR7x+XfK5I/ggC
/8UBPygEL7nE1zzaZzG4TyHsMoiHWZrfx13/+ar6YNp5OOdeH81/96Lmw6sL
+4sVz4dz+9uT7l4N25s7+3bBfTTvPFxwvZ8u3biX9nMm1GkFWk3Ee3HkpSuJ
R1UJn+Si/+EAX6T8TZC8DhAPAco+GX1ARu1a+V96C39fqHj5c+qLwcxX4/kH
L6uPV2o8NJZHc6f6bT9c1e7NFr+dLTqcKdiZLth9WrhyN3nYqW6PoPWaKF3R
tKZQ2D+VmHkZ+71U8N9ywRc1b1fH3hLj3tORn9ioIxv0abj409K5mc74xaeZ
88O2xdGsl5N54z1JrTc1D27rW28Zfp1yHS2U78yVbc9VbA27hqq1jzNYPxkQ
vQbseCL/thZXwfapJJ6+xUYOhoMraWEHkapNEeOZgr6cptz7Iee3V5ffrF9a
GMp7NV3S/aNlsjt1qD3u4R3jvRv6x63W9hbLw+a07rtZHbcyum6njzZndGaL
H1owA1bC01jmYyPtjoZ4SY4tZHjZcd8UsgKvRImaoiVOAFUhozfnRDWfT7xe
H9vcEPPgevLQg9xHzYmPbsV33U140mbzaKQja/BBhkZKjlCzrXpOsoFeYWbe
s3CGomjjcfTBJN4lQUA9GNisItbw/MvpJy8AAVdjeCWJglg1wcrDnhFSwiGK
nIOwSCmueNV5W1hDoflqufXOxYTWhqTOptTB29kTPxZU5YfVFYd97w5rLFJe
TgEbjeR2C20gid8SxSllnWqEAh8YcVdlvtWMvzUpYB1ZkmtR1FoDxWlkG/lo
Iw9v5OAieLQoCccM0SxySqyWVRAvv5iraSrW3So1PbyY+OtE4f5s0dGs5yvO
vVeqKQzFuLToi7HcxmRVuQz7g8HDCt9lgl/gfXPNiJsqC7+uDa5RBFxOFGbo
6bESZJYCGS8MPp+jra/QXCwDr5wTtjWG9bfEdDVH3q8ztH0X3Xs/vaclpa/F
1nE1ozpTl6BgJmiprkxNdY6lJkZyVY9pD4d1mxE/RKGeVmrnS0Nvybzr+Kca
z7CyTZQYCbxYS08C0Rcy9bcvGG/WCLtvasfuR420RfXdNfc2W3quxYo4VDFA
lgooCjFNLmYoIbY1FMiIgBxnQnPDAJcsuEEXeDsG21nAHzunepoNNAtP1nFO
NIQTC0zEOCk8U82MBmliAlxE8c2LF13Kj7zpir1bHv3gYlx3U0p3Y1KSUZRs
hqK1gE5CMSgYUXowRs1M1YvyY82JUmaOBF2lQ9eY8U1RmEep1NYobB3/ZCX7
ZKUU7lKjiwxodwwlx8LUAD5p0aSbtcbu62m9jbauhpSuhqSHtdZ7FeErffbV
vvzhO+k3zoaXpcmKk+RWHT0mUuxIs0TyybEknyIgyAkEfKeA3TejL0tOlzD+
ls/6Ry7Xv4iPLBDC6uMEjVmGqjT5cGvOfLd9qStxssU8ci9yrNXa0aBuPa9p
q41sqTI3uQyuNHmYggiykQAHI5Mzw7SgjouKIng7GAE5TN8SMaxBjfxecPoc
6xsb41QcOziFg0gi+mTzMQ4NN1kvyE5U5abwzxfwq7KojeXQT1ciWy6GPqgL
F5FhAmIAiPdn4YPw6OBgWFCgrzcG6c/nEkSEoAhcQAYZFo86GYP71kb6e73A
73sFIp76jwgOTIf31gR8HU/3jmQF4/2+PfnXv8B9T4dLgAwTVBQrrMqQ1jkU
d8rM4QqSSUGwKEkWFVUnpag8r8wjQXyCSknVirFRbFgmgEyn+5mwJ84QT1VL
0dVKTAT1tBh/ShJyIo58ukQCz4SQSoqfhIWM1oJ2i8Ru4mWEMwtjwO8ciuZS
w9X66KZa0+UqQ22JLi2WZTXTzpjYRiMrNl2WmiaJDyWkihEOOSZORjLxsDY+
Kk+KNbKDVCyYkRmUyQnKY/mkAb5FVm55gbrcKXc7uKlRaIMaERdBuuBS36zS
6yOwah1crkKI5SgKACMBaC5IYINYshBN44cA1AAVKcBIR4AUOJ0cpKMHRjL9
ZSRviOSnxXtZ8V4WgreS6CUC4ACE48rwslC6QscSaWgCGcagx2bHMaPtOEsq
RXeGCirRBDAA0BCVYQyZiihQ4gEII+KhJTSkhACDWGgIQKlpwaHkYDkNISYF
ydBemhAvCdKbjvCGI3x8UIG+GFgQGg4nIBFMJEuGM0VQ7XGMVDcj2ck3pwJC
PYajDFJHE40JrNBomtxMEukIkIYsEOLoRH8BiFLJSVJmiJCEFLBwADOEgTrF
RZ1iobzopGAcPQTBQCEZIWg6As9GUcQ4KIxqsTJsSWyhFg3pqRwpgcILoQqQ
FEEQiR+I5wVh+TA0CMdyEVg6HIH2QRH9qWwklRBMCAnA4IIIVBiV6Mci+lII
3gRKIJ6DJorIRDGFIiYxpRSWlMQQhTD5/iIIzqThBCCLw6SxGRQWnegpGQwc
mY4l0LFEFoHMJmHwqKAAXxjcn0zCcAgEtK9/cIAvnYYVsnAQEyViYzhMDIWK
obMpTIDGFdBBEYMtpFIBHA3AUthoFovNZLJZLC6LBbJZAh4ogSAlXyRlC0Rc
qVSgUlEB0DsgKAAZAgpFcqEc5gvz8vFhgQylHNQpeRqVSCoRCgWeA/FFkEAi
FkrFAgjiCgSgSMwVCLlKJaBSgWo1T6MThprEuihIFwHpTWKDWWQyi01mihg6
EQz3wxM8kwxQ+K2X7zd+3nQxR6IRKbQSSCMDpJBIqZGGGsQavThU65FMEyZT
hcnVYVKl7v8AXwdjrA==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtVFdwnIdx1iQvecxMXjyTUUJJIEETBNhEFKJf773g6n+9915wveEOV3H9
DteI3gESIlhAiaIpyrKiWB6RtooZRpZNcSIpiUWTjCQCzDmTmd2d3X34dr/d
2X1NoCVJ/uaVV14x/l3bkPjWcYOBbyf/fTugaoxyqUYsQmpMYqnY0C/423by
yP/rX32fnmwWYQM2XiJsrJXClUKo1cxnU6FiItosZrY2FndvXF/d3S/NXcrN
36hu/Wrp5v2VOw9X7/7x4p3/2Lz35xv/9uzqg2dXfv989/c/7P/hh/1//3H3
wU+3vjr45L8Pnx8eHr48jJioLjnSr6FbZfTwpLpVjdWryWY11Sok8jH/6nx1
c3tlbWe31FjNty4XF/eXrn44d/Xj1t792SsPlu882v7om2u/e3L5k+/XPn5y
/cGzW1++uPLgx3cf/fSbvxw8f3n48uXLgIbgECH1ACJgYHl0QCpormQj1VJq
diZcSoRnZ2LLC7MXFxZzpVa5tZFrbNVXb9Q27mQX36tf+njx+meNvd9d/vDr
7Q8eL939dv+Lp/tfPL/+8Kf3vjn45NnB//wffsxCSTiYWgBul1GsEopZRE0H
raVcopyLNwuJSjLULCVrs9V8sVafW80V56Yzc7Wl6+HsdnH59vzuvxaX3t94
54vl/Qdrdx7d+PT7y/ee3Hz4wy+/O3jw48HBy4P2hIIqcsrJjNmYLgXFqaR5
NOyQWZAO2ou5/HxtpjztqiR9hWwmm69W6vOZmdnwVCVf3/JNz6dru0u7H6TK
e/XV96srHy7s3d+686eVX3y9/9nzu9+8ePDTwQ+Hf60wZaSGdNiIkThlpPm1
NL+emXDJ00FdvZpbmCs0Mr7ilCOfng4GYm0KiXg+FMxmyqveqXqyvD63+XZy
ZjUxs54u7RUvvtPa/M3GrT9eu/f0F49e/PrpweMXhweHB4UQL+VkhzX4uImS
srE9KqpHx8tOO4spz9JCfbGWnvGbqrl4ODgVCMTTyYLLGY1n552BUqq6UV+5
UpndzBXWY+n1bPlqZe72zp2vtn71n+0t3P7Ti99+/+LHFwc5L6cQEhQCvLST
HTdSAyqqT8udduuSfnOzkl5o5bMhay4ZTidjGvVkKJiJhmfCsYrRNp0qLeWq
y7P1rWptJxxbyFevzM7f2rn9cOXtL6998uT6/acffPns2ycvokZKKSKppxRZ
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
      "], {{0, 32}, {32, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJw1lmdUVGcax7MrCjMgRREbEcUoFhSwoIgOShEBE5GiUqTMMIU2vTD9Tu/l
Tu/DAMMwBQZGBdEQUTTFWBODUZNIcjyJyZrNnj17zn7dS3b3nN99z/O+H/7P
8/7Pvfd5tiEJdZi/vvfee5QEaKnrZJwikzuZ9anQphFP6cbi0V1VeCoaiyYf
Ra6ADrf+71mO+9vrycgLDHQzE9vKxrVxcW08bCuAuyzAtUp629REpIqMFkNQ
ILpE5A4h6TK/v4nTfYmNaxroukjtbKBACm31xLY6/OU6fOv5vuZa7IUadENV
V92ZznOVdEwTq7uV19vO720HIHra+LhWYXcrs7W2/8NTUlSjloBWUAh2icir
UZrEAukAVcakShndInKnEN8B9EDFtPAxzRxMMwvbMoBpoqMukjsaoHTLGVvO
C4idEnKXjIyWQ5DQUjJKSEbKKCg7QFTj23EVh/uqilmXz7sl7E8i/puT45HA
mNPudJpAq1Ks4zO0HKKW2atlYFU0jIKGlVExEhJKTEQKCZ1AXzsb26pm9uo4
/SCXYOSTjDyiU0YdBpmxIfn9We+nMbtHQlD0N3KRFSCjQ0lB916q9ZnU8zNR
v3fQY3GZlTqLXO5SAF4Fw61g2GVMm5RhFlIhKQMPytsnp2CtYrpDxnTKWV4N
L2JX3g5bP49ZHn3iW7wf/Wlx7tWjmYWY/caoXEVr762vulxe0lqOMAP02chI
LBSIhcJj3sGI23Zl0Djp1oYcar9ZOqgTeNU8l4JtE9FBHnFQwx/WCyGgFEB/
B6GlBui/4FHTxmyCR7dDr57ceLwQeXR77Mqo0aEWDmA7SM117M6G2RHNkzvj
zx8vfP34/kw0cnMiOD85ejPsujJkCttVo0bJsE7gVrAtItqQXug3iJdP9ELo
IgYBWQ8QdGycjtHhU+IXotqvFwIvnt756uHdrx99eiPqd0npelLzjI39/WfR
F0/uvHy5uHD79pVQZD4WuRMbvhFyTnr0AbMMUvMquXYpEwpGQPEwKBrSi0ZA
0bBZMmyVBS0SCwcn6z0/biB+9Yl38eHH33378OXzB7+8fvjdl9GIod/F7bgb
sT77fG7MHwiMTtrMniGb9dbE0GzANuVSB00ivx4YUvO8So5PCwzrBT4dMKTl
j+gBPwhthdCLQUK2EdsvepXM2xHr49sTS4sLPy998Xbp3rul+afznqtu8XWf
9uHclBu0D5AlVLJAyAZ8Bs1Vn2nKKYtahSGjMABVrgVGQGHQKAoaBUGjcFDD
k9F6iKj2LkwfiSsH1CalTum0asc8jlvTocUn15de3Pp16cu5qM8jZ7rE5Am7
eszsYON5dCIPYAkJaKxHJ495wZhLFbUrwxbFmFEatimiDsW4XeE1yOhkfN1l
VBdP6ZhduPXjr/d/+2Ph9Y/z33x747MHUzPXJyeDn85f/WHxiy/vTMdGrGYR
UUpGSklEEgoPsKUSsa7+XBOTSJz02a75TNOD5pjbOO7QTjhUUx5NyKGnECkd
JC7XP+d+8HZu6Y8HP//6+M2bl+/+9fKPfz96+9vdF69vfvo0PH41NDp4by78
1RezVwImDadHQukb6Ccz6AAaRz9xrArZ3BZwmGb8juujLoirw7aoXT3pUhlk
YiJbJYksmL5Yst97pR//JHz3wfx339998eqrN78s/v6PJ2/fPfjln7devnME
ZvRKjUMnGwQVSnq/nkdGXqwvKqw4VdJ4orCisfq8Q626GfHPRgZnJ4amg4Nh
o3xIIafwlVhjgB9csM0tMszjecV1GLLo5vMf7v3t92uv/y6JPsMKnN10UWc/
q7a171wDsvJ0dXVZRXUJor2uqrvt0tG8ovw9JXm7EccPIBRs7p1YZC7qvzXl
vxHyOhUiLkPZSHdXi8f7bLM838fnSZqKSxQwPD/y6LXvmzfKuZclSLDkdGf5
kaKcjRtS4KtTkjM2b87O2Zm3e0duYf6+qtLjeTv37t9dnL+/dEdmDg2Lhb61
uXHPXNg5PWyU8vi1OOUJXPgYbrwU76xh2Xvdc8C1p5ZnvykeLGEGb57CaXcd
7ywrrW89e7b08KGsjVsy1mamr9mUlrJp4/rszMwt+3P3Hswr3Le3OD+vJGtD
Vn9H87TfNDUoj7qkAegHQWTv+4i3sdS6qdi0Np+wrYp7mnv9vPXJOe8z7JWf
0CPPDjaJtuQgPti+/8C+g4cLig4dKjtUWH2sqGbXzsJ16duzt+3b+cH+/H1F
RUfKShEfFhcguPieSa8sYGT6NRwnQOxEM7acGEjMV6fmqpO3U+PWXU7ailub
R007yEg7wttYbni/iJWVfTKv4Ayisq2spq3xEgbZ3odGUnAY5oUGbAnifH5e
WUFB2ZGjZxCI2q52klYsD1gVfh3LJ6WZOb0tbdTNhezkfC38A3FStgC+lR6X
0b4y5cNVMMTK+CPxq0/CkiEKdxxsqkXLK5spNXVtWBSGRqASeiHoqE5C06We
05UtR4s/qr/Y3UcAaBShTqrx6WReBd0iwLe3kDL305N2i2A5AvhuVfI+a/Ie
MHG7IH49Ni6xOu6vhxJW5iYk5iQmZx89erIfiwFoeB1AA0UMUldLQ3VF2fET
pYiKmjP1Z6svHT9eWVRSc66+D9MlELGFTi3foaRfbiFu2EVKyGLCtwNJu1Wp
uaa1B1wZp6Lvn51JLzIkZ3UkJBXm7iyC6vCpBVe8yms+6awXvOrRT3o0Eadm
EJQo2WRcc0N5cfG+3Pyt2Xu27ijcnVt+sqyRSR+wKTgoJHXLXiJ8CzUxi5e4
U5pYYEk85k4qC6afHk3eQ4OvLUlLzum40DzpVk67DFNuw+Sg7Kpbc8UFxty6
Kbc25tZOubTjNqVTxad2d9aeqSgvKS1BVJ4qb0C29yoGqMjWns0fdCRsQCVv
paXuEqblm9KPepIPOTOOebYUG2CZqOT0M30YUswrvWZTXXVYp9yqmEs25VBN
OtRRuypikYdNUohxs2jCIhzWARJaf/NHZ0uLEDUlZcSWi4Re9p6DuLg1tbB1
rSvXtsdvJMKy6AlbWbDt/LQ8VdoJa+oBRX2L1mfXTtgkUbM+alNOWaBAPm6W
RUzSkEEcAkUQQZAX0LMCeu4oKHTJuQxUK7q2SkpA8qj809X8hNSz7yV+FJ+B
SsuRZhTZ1xTo1uxVJWQLVx+2v18XK+2c0Gs9YZskZJSMG6Rhg+S/hEBxUC8a
A5cZNQhGDADUQYa1vCEVd0jB9UqZTjGVh+lFHOmCp56Nz+xevUuRtteytsiR
fsydcdyfjvCnVkwVsx81sWaULGPELAuYgJBePAoKxgzCiGE5XdAoGTWIoA4F
9XEPhJrnUXK9Co5XxnZLmQ4xo770TGVJU8r6mrhN3bBtksSdeniuCZbvXFMy
nlk5UY6cUbsWeXSXjyWfsih8ZmnQIA0aOUEDf/kKkD8mqR8U+bR8aGCwiOkm
IdUqotlFdIeI4RQPQEEqPCVn044Nm6rjkhvj0xphW3vW7AfT8m0Zx3wldUEP
0xulGdgXgWtC83WT0g9KwnooBWdUzx3TCQI6AdQBB9Vct5JtkzAMABnkk0wA
2QJQrHyKFaCY+eQVcXGbYalZG87BYaUr4zatTNm9PhuZmSfMOAAeK7NPDzin
UDJGk+kad+iGSDQq50R04qCG71dzh1Vc37IVbJecaZcyoFEEmqwgLAKqTUCF
xI1sgnagL2FFPHxVInxLEzwFAVsBW7kKFr8qJSH54Lr3G8oO46YJmttk0MEK
3TNee6oyjzKpkOaIkuuTsV1/2gs5AGGFBP+UhbALl1cTl6gb6FWScbC/JMHh
Kcn7axPTC5NWpCSsXA2Pg8Ng61bFp1cWHP9GZ3vOUE9TjbdU1kWuNIbtMwvo
DgXbLR5wSJbttQlpkAlGLhFk40E2wcghGbkkA4eoZ+HV9B45Gbti1aq81WtL
N+9Kgq1ZEQ+Lg62OS1qfmLYJBk8p2LzNjyLd72DdqOuZaUG/QlGvX8IpujFm
Ac3GWzbZ8qfDBg5Bz+pXM/qU/0dO65FScGIiWoBH/QekQaRU
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJw1VHdwG9ed9uQyLtFYlmzKVKXYKRYABFFJAiRAUmwiVSjTpCSrsIIFIIi6
qAtgd7Eoi0JRJC1RoaUUju+cce4ycTLKP5mJYydRYsclR1mNRFlgsQsswCLp
nPvvlnN3b7795u1v3/u9732/97ZoWN03/oOXXnpJ9ypDfUOAXKsdMp/fx7z0
z+gmFTNjo10z+jHFmFY8/C9MsPD/nt1+PJ6JRJPRWDKRTCWTKRxPxqJ4Ak8m
8RSVefEk/uybJ5tfr+e+Xs9+vZH7NrK5Fsk9jG4x+M91ei2y+RjfwlPbOzv/
fPHi++3nLzZ3vs/Q/ySp76nsi3RuF2uP0/94mFx7nNiIkk+fxB89jEQjxMY6
vvEUTyS312M7D57m1jYyaxtpBt9F6QixmczsEPTzJzEyQW1tPfvv7a3n29nc
s83czlbu+fazndyL7dx/be48z24/237x/WNGzzr1aINc3yDWn+JPn8QYjsdS
KSJDJLOxWHYjmt2Ip6N4JoJnGE6SNJnJpahsPJEiUlQum9vK5TIkQeJxKpHI
khSdSufSOSqdSWcyaToTi6cZfyKxRDSGx+MJHE/EYow7yWyOzmZzaYomkhRJ
pFNEmiQyDCcTKTKV/n+QmUxmZ2dna2srRZBEgkyTdCpBMmAmbua2kwmSwIlE
PJ7EY0QCJ5i8iUSaomhmZZrKpMlsOk2TFKMnS2Uzu3NTGTJDp+ksE0lv0hma
SpPM0CSVSTAyEtTuGIJiJGUyWzl6mxFGMmnxOJnEmSiZTDJ9KpmkKTKTSlFJ
gtkns0Quu9sYqSSZ2tpMb2apzWwmR9NZmmYieIJ4sp54/DASW4/EIru7J9KM
jRTzicmZSOJxnInhBIGTRDyVjDH8v6DTRI4m6QxBZ1MZOkUx3iSjdJagcwRB
xUg6kWbsoBgTt0k8G42Q67FULEnGGBNSiU3GWiJJJFKPNojvnuIMr0fwaCQW
jcZ3qxDHmZZIJJgykyRJ7TaS6cdiMSpNM4VL4JFsJrGViabWHzz84n70m78R
T9bwjccPvvzs31bCi6jh3kc/iT5+yFRkPZ7eBZ5ZjyQiUTwWT8bx3S0nd08H
ubtLitqtKKOVTMXjeJrOpVOp+Nrf6e++uP/Jyh2/DlIMQKM9PwZHVz36D0DF
dfV56wXpUGfDDT/65PGjX/5m9Vf3/vUPf773zcM/f7X22VcPPvv20V++evDp
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
FaPKgjFN0bWZg8Ozb48b8v8HNOdbuQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
igOl
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtVllz4liWrph5mcd+6U7bZHoBY8xiY2yM2RH7IiEhoQWEQCAkBGKzWc0m
jG2Ml8S5VVZlTWV0VWdHVL9MV2/zNPPS0TFv86eGiumI735x7n34Tpxz7zn3
7HBNrPQvX331VfvfVoQV+t5WqzBI/mq1IRrtitgQ+GijI4hCy8r96+pw+5/r
F7uRJ4Z1dtYp3vS4xaDwMCo8jLn5gL0dsPNh/v9xP+HuZf5mzMuXxSqHCzRW
ZIg0j2dYGIdcnRp9d1WbT6Q7uXo3rc1XtiwtJtXFqDofVPuVzKiWmXe4hwH/
MOWfbsTlvLLix5lwf83fXfMPc/HhtjS/4m4mgnzJt6rZQgqlkhCehUvltMii
RSZ2LUv3N9XFrHIrl1aYT8TbQXk+kGbdym2vMu+Lj2PpcVJ5vCq/nlXezKrv
rmtv5PLTVLifFB+nwtOV8DAV7uTKsM1JQiqbxggCIbNonsVbVTafAZsN+nZW
vr0qXY+4aS837bDji8KwUehXC70SOzznJ5flqSzdTuuLSe1xXH8zab6fNN9O
689T6VmWlpPKUpYerxrjXolj8TSNZdg0nSOyNNoUsw2JEUr45aB4NRFnA0Fu
sfI5O6ixHTE7bog8RuRoIi9lK2Opfd3qz9pDuTUZXtyM2nfTi/vr1nLRf33X
n8uN26E07UtsNplModkiy2SpQoaQCnS9yuY4rFDEzmvZ81J6KOWmjaJ8IQ7q
/FWrwWMZmskUB83Kclx6My0vp5XFqDLtlfqNYkuoD6udlcf7wfiuLw+rg245
z1F8TeCqAorFKSzOEDDLYnQ+gZGRbCZRTKN9kbu5qF13apdVftyscmQ2Xy5J
86H0/rr24aH5cXnx7Zv2d+/E5S17121+fd18e3XxPL14LTcex437QWlUq4xq
zek5nkokMShNwEw6kU6BCQwgiGCJo7o1cdysnXPZMk2WGbqQyqEkAeWpRI2l
27XiuM9fDSv3M+5mKDwM2x/ng08P08/L2Q/vRl8+jH58Ky66eCtLnTNULkWQ
eI5OZTBMSKHzbuZpVJw2c10+0ymyOTSRjkPMilHSYj49MB1aXBZ3yBOEwwE0
Gk0hcI7A8lRazHGdSnXauViM2q+njdcTWq4mh0XikheHvVqvX5YapXylJ4o/
PTb+/HH45lI8Z3CeSJJwAodgCkaoBOk+tWq3tg3K7f1thV6zrdcp9Qe7h0ca
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
JgZ1Tr5gbzv8oiP+H7vCKGE=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
GymX1HBJP/8Fs8b+YQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxVlvdXW1cSx3N2f9kf90/YPWcTmw4WqKEuIRAG0bsA0dSQBEh0G2zHjXWL
SwjOuhCvncQmcW94CU5wXAIGY0xR7wU1JJCE2lPZKzvJZt/5aM68+9753rn3
zczV35s7Sll/+uijj8R/Aaa0qY8oEjUNlP0V3FQIxVy2sK2VJuxuY7eJkM1/
BoN/+/UX92OxDa/fYd10Gja2VPZNhcWptm5qrG7tuststdg3LC6nxWZWKyQL
r189mX35eHlxRqNYsJikLrvW5dA5HVq3y+h06F0ukxPgNALH7TKAQbfLFPQb
AxHvZhiyBKJ6b1TtickdkMLs11v9Vtu2WatfXZifun/3+uWLE1cuT08+ePdm
zqBWWI26dYPGYgBWa9AorWaDUae2rBtNRr0RDJqNNrPBbjZaTYYtp3E97JNs
B1Y80JrLZ3J6HE6vSW9dnV+avnP/2wsXL5/7/Pql8ZlHk9LFZa1cbVDrzFqj
SWPQq7RGtQ7cahXqdb1JJVcZ9SaNSqvV6A06o1GrM2h0Ro3eZTNrfFvzts3X
RvvrNenci2eTtyaufH5m/NTx62OjUzdvLv8yZ5CrNDKVVq5VS1UqqVKv1BnV
Bq1Co1NqdEBQrjLrjAqJQq81qJUaFRjU6HUqtUauBC9s2Ex62/rssmxycurS
6WMn9vd+eerIw4mv52d+1Kwsm5UKjUSqlChkEo1SBkLV6tV6i2HdZrSByI0a
rVapVEmlBrVaIZXpwGwKlUKmUCvVGoVCJZVpFEqHVf/y6f0rY6Pnjx/77tL5
mUd3ZQvzFpXKZtDazfot54Zaofzq0rULYxPXxh9ev/rw3s2nU49ePfth8cXM
wpu5JcmKdG15RaOSS1ZWtGCJa3KASgaWCaKSq2Uqh9Xw8qe7L57+R/runVGn
tVqsLqfb7d72+f1QJBgOh/0+3/07jzrah4WcQx3cQ2LBSE/HsQHxqQN7zh07
NDZ6enz0zL/u3rq38nZVJVFLlqSyZblyTSlblihWlSqJxr5u8gUcnlDI4fVb
PT6dKyC1BmW2gMLm8UWiUAiKRSPuTe+JkTE+e38Xb6STN9LBOSJgHepgH+lg
HRS0DXOY3WeOf7myIJEuShaez8/NzC6+XFx+vby2KFeuam2mdX/Yq3b553XO
Bd3Gj6uWyXf2aZl7Tu3aDIaj0RjQj8Vij+5Pd7bvA/ELOQcBAvbBTs5hEetw
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
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
S4cdFG4hcS0SkGgGBy1WOEL6I+T/AO7DMng=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
It4zEOPph/LwDr8A87dHXD7/H1atUyY=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
GrW+vgbir6go+y+3cJey
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
NB5P573Hwf8Ftn5y4A==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {
      32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
i+PABDioSBc9w8X4L05Zte4=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtlvlz2+aZx+1athXHqe3EjdO0zdRNvLNtJqmT5lAS24mdiWPLh2zZSmMp
liUe4n2BN8EbJEACJG7iJAgCvA9RoiTHTrNts922aTOddtrZH/bHndnfd/+F
RWZ35otnAMw8n/eZ9/m+z7ynTb7Fje/s27cvOGuExfXoRQBYj985bnwseYMO
m9dqueoNWW1WYM50wPj54/9/vn0fbre746bWk+s61+wo3VG7M2z1xp3+Zndz
tz/e6Y6mHSMOtvTOqKn31bouqp26rAnNjqS3+VZH6PTkTk/qjxp1nRVVutkT
xSYtNVlFlfWWavA7I7XZlVp9pT3Uhlv90fbAiINJbzQ1sC2Db8T/K0DWWK0n
tQZKrU402lxnKOs9vtUXZJVkhDLJIYyEik2SFsusVKnXBUnmjVyjPCNd7Yj9
SWf38fThr3Ynu2OjfrX9LcqQ2pUElTGqMnLVLt8aSq2hrPUFpcs0B5w+Evgm
TokI36hwCkYJMC0iVRpCEAhGIH2oNHuyrHONFt8Z6ePpYHNnONzuG2qPmtqg
Pthq7z4ajSa6olKySsiasUStJqM4B3FaReoQQgunGyVOw+ptklexmlJmZLjK
5LFykaJxrI6WeVjp8e2R0uiI9Zag9RVtoHQnem9XV8ey1lb6DUGCwSFZ+NPe
4MuH3eGm0h1K7R6ndii5TdAKUpEgWkUlnam32eaAZ+olWkIEgVIaYllGKLXS
39M7E6W/rRnSBlJnszGY6sNdrVRNA277yvw1y7X5EZz6psP9+VFvMlY2d/o7
j8e9sdDsM5xeIVVE6jGizkotQ3SZzuB8oa4LnFLj9ao25tsTqd6ltaHQ21bb
m/XBjtafNqOg22lZjpjXrv/izYW5c/1i8tdUsgWHHg4Nm7WGu/1Wn9WHNbFN
1NpVXEYIvtzsi9pQZJUyymSLRAFEUnqX6m0J3S2hppXVQU0b8v1po7etMPXy
xSvn71z7iI76EMtnBevqDp77FZ4YI9G/PR795svJeNewsWDwhVaVbBhbVKSk
itLhDD6nVgw+Ui3AONzpkYMtXhvTrIZwOopQIK3AhAjhYsHi33jvvTdLftND
Mv1rAZ5goByy/QuL/OdXO//xzeOHe01Zr/JNjDS6KcNyjx1MW+O9jtrn2AYq
tQhBJqtkafi51NnhlBFBNHJg1RcsOSKYFyTDWRasKuji/Rtvvf2zXNAzqJCo
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
T/33f+l9YEl47nnWFm3L/wt2dBTH
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxlVmlQG/cVz7Rf+rFfkyaZdKaTNkeTTOMjx8Rn4sQ22CDEKQ5DAJtT4rSB
GhsBAgECicPICARIgCQOIUuArpV2Je1qV/cBOGAHbIwxVybtTCfTr32rdain
nXn6z3939e73fu/9MY/LKvzNa6+9VvU7OFi5N89WVubWJf0eHpLLq4qulxfk
XyyvLrheUPlZ3m/h5Tsvf/TdZSdw1A1EOCjC6XG7vG7CR7r9FBmAM0YBuDOP
8AmIwL24y+NyUC7UDexOO+GKkdOGOxCn3YwiRhuyhNhMdrg4UMLlIF0YCSfu
pIARxz0EEZPgpFzMm1cJ94Ainzfs9YTAHsyOY3aCFkJTTJ3N5UBcmNUJulAL
FgysUmSQsdBDBj1U0OMJMexwZ97Tnyj6E7wMBVccGCHu6bt7h6+d08MnxinS
5YUIQBzAHQftiAtODHFZTY7V5Q3QEvBH/5/8vsirFA49tJjR0uLSd95+868f
fNAm6ARLwB3C5aGFY+RLgoBjQCR4dOHc1+KufsodjkbWgoFlRqzPFzlyweMJ
wj0YoN8rFaqrV66+/dabZ0+fEXWIUTt+5OPL7OC+lydOJxHO9//87nvvvluQ
V2hcRKLhNVq4N8wIB2IY4eL3Rvok904cO/aHN97IyszRzS+CL/6YGa8GkykJ
RiPDPtAnTUtN++jDj86fOS/p7iUJH6h4aXmMgB3yfreRf+LY8bOnTgsFnZDN
YGCFkez/1dNXWY6SBbSyvE7gnq5OMQTqL3/6E6+M58DcEKuAf9lLM4adqLum
ovqLkydTk1KGpXK62BwkhhK4y0uStGsBfwS8Y6xlXPifkgiHVsEMi9EmbO3g
pGbWVt4clyuXFsx2m8OJEYt6Y3MjPzsjk1fKHewbHL4/MtB7b2xUqVbNzGv1
kG67zUX82jV0rnEv0yNwQj2Dd0zM/f7oSnTdS4WAvaGugVde3lBX393ZNTE2
IWoXZaZlcEvKhC1ttZXVleW8Vn6rpKd3TK4wG1Ht3AKCOGyIC7XhR/Fn1Fkt
GCP/12qMYnb3jEbb29MrFLTdqqmp4lYI+ILczGvfnb/ASU3LSktPTmSls5ML
ruXdqqoZ7LvnRKEHfTabE6Q5bQSBka+mQD4y8ar8SPihG/c21N1ubGi8f08q
HRhsaxGUFRefPPYpO5ElEookXZKG2vpcThY7/mp2Wlp9Te2wdHhaNSu7L5sY
V85MTWs185AvppY8VEAs7vf7aPnB4HI4uGJHHN1dPWwWK5WdXFFaIe0fkstG
BS1tlbyqHpFEMzU3pZyeVKgnx6dkg0OdbcLWJr5Q0A42tDY3i0Ui2aC0q71j
cGAQsWIUCYmg7jQ2QX4joR/83rBmYrqksOjShW/LikqTExLjL13mN7Uoxqc0
qrkZjU6j1irGVbL7o0PSEenA0NiwwmZGgSvgjXqpsAOlSCIYDjyESlZr5nQP
FnEXhTvJal4VFA9ixu7UNyZcimfFs+4PyNQTM/W19dkZHG5pmbinF1Qoxqbk
MoVyXDWjmZ+dnpdJ5QOSQVChHJsy6IykC/o0gCJut8PnIQIWox1Mslkx1OYA
x7tFkqtxV4998klmOkejmvV5wlDMbS3CvJzca1nZvHJuW7Og6fYd/p0moUDY
19M/PTVrWUKsS7b5Gb2ku6+irDI/J/9GfnF5CU8s6p1RaY0G64LebEecD3SL
lRXVOZzcFFZK8fUiiwmNhACCVqHxwYDh+6OC5vamv99tbxZUc3lFBQWFeXkF
ufmgWjujA2A3aBeELR15Wd/nZuW2NLWC2TA7oLyh6chYfcpHlDXVt2gAR3Fo
YWj5GIouw38QCzalUBu0i3rtIsRE2NZRcr2orubmrZqbVRXVTY1NcGcnsE78
7Vj8xcuJ8VeuZeVYTbT8gC/CwIub8GrnDBLxPa83EqvVEBQ/Ld8HwBL1e6NL
BiuKwIxwGeYX5UNjbfz2TkFne0uHQj6xpDcCYoDwxPiE23X1nx8/npyQZNIb
4c+gAsILMwKIxgQzHZNoZB1iAomORh4tRx5HQo/gAhoJF0XiXuCa1+jEHRKI
RrewZ3py1oP7QOmIdEStVEFq3nr99SsXLxvmDDhKuB0UEyUoeFABzRUKgPBH
Af8KoFkkvLayvLEc+TEafuT3LdsQuispwodaHUr5xK2quo7WjuFBWXNjc2N9
4/yM7vmTHYV8/NzpU59+/HFFKW94cARZsuEwIjE3xB/CAi4shx+vRjejofVI
8CHg/0oUHn98GN1YiTy2IbjdjsfAxGuzYCqlek6jRUz21rstnNR05ejUi61D
H+mXiHqKC6/HXbyUzGKPj0BfYKjFgVqdmA0HpN15srf79PDFk/1Hqxs/RB9t
/fh8e2N3e3N3+8lu0LcMAXS7/WAGFABgKVQ1hfsmxiZFwq5wIEq5fNwSbg4n
i8I9GtVMfl4hr7xSNaHRzRmMBgtitNvN2N72weHOT0BhyLs7sL35Ynf78MWz
/Z2t/Y31ZzaLAwoM4kaRIbMZhS6Wy8b7e/oBUYelIxKRJCWRfeP7wo21JztP
DxCTray4RCzqhh6fVmsfaBeNC5bdZ/sHzw/3tw8iwVUI9bON5y+29nae7j3f
3N/a2HPYCZ1WD2PaT4bcLo9Ou9BQ11hdUV3Lq0qMu5KXlctOSLz87XcwFwgH
+UBrmFSqMTtdcrpZ/Yxqblatjcn/6WD7cDWy5nZ6tjd39rYPd58dvHh6uL15
+Hjt2cjQSAqLffVS3O362wt6Exg2Kh+XDkizUzkZ7PSSG6VtAqFsaKRX3A+d
YjVjsT0ngNM7ldu8hPzyz3//6+dfft77x/rKY9OiNRpc2VjbghTsboGKg52n
+33ivjOnvvrw/fe+Of91c1OLXCafUExaTMjCA+MD7QJMEGYUwqpAuek+omLg
DC3GzDJIRIAKba4/BfshLzqtQT+/MKVUqSfVQIpRhaijq4XPFzQ3t/L5AMgC
fjOMnvHRcTfuiUZ+YPqIXjBiJwXLJMQS99EbEb1DktMqrdWEwtrgg+WNDALY
Ek5KJOyoreRV88qruGVVXG5FaVl5UXFZ0Y3y4qIY3eCWFEMeAYEZNCCP9h/Y
YKHFMApOmGXQC14Y8VTov3tLbOIrxhQlNwqvcdJzMtJhJuZyMvNzsvOvZX+f
k5WXzcnhpGWkJOVwOJ3CLsD5WIP4idhaBZbDonikhUDdsI3AlIdAAR2tzbBh
QpGkJyVnJqdmJqfBJSWBlcpiZ6SkpiaxE+LiLn5z4dyp0/GX4jqFIrCQ2U9g
nQNwwB0Us4ICfAHoMfIZYrQwrT3QN5iTnpl0+QrrcnzchW8vnD137tSZ019+
9eXJz748eRLo8+MnvjjxGaDokFRmNiKw6xqXENMSYrc6ELPdYrKZlqwGvfE/
NhoI8A==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
tuano32+peF/AvV03BM=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
ViKBOqyvnhw8z1xYsB4P1FH9Tf8FK+D+uA==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}]}], "}"}]], "Output",
 CellChangeTimes->{3.722434804481246*^9, 3.72243519258927*^9, 
  3.722438637103706*^9, 
  3.722459186242248*^9},ExpressionUUID->"edf68085-0faf-4965-a540-\
25839a6573bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyNVgdYU1kaxVBDSAiBxISEBAi9JRSpBkik9wRCaFIHlJEOImLBQawjMKiI
FEUUEHQUR0BBsYEFsYsOKgozozuWdbFAIOWVfREdZ/fb3dmb8+6Xe7/3zn/u
vf97/zFKzRVkoJSUlAo1kE6QsopbUJCyOhKPDIQ5hZnLctK/CcwpSl+WXuCa
qoxMGn6+FP+h/95gQA5AMAjLQGhODoIQMgBkczLwIyCdhsQyaBYCJDAohUDZ
LAiIYWgORp55D8MfYQi5G/4fzF+aXArDMuQnl8AyGSgdn3nX/evdPS/u7Hg7
tuXlo60vHlU+H9vx28PKies1owObfr/f8HKy8ZdnvaBsDgL+mh+A5XMwLIWk
8ukJ2btLvz/ZeGswuGcf83aH6XiP0ZOTJmM/mj08YvLwmNWx7xlHKyiDB9jn
2vnHWoqA2few/P9QD8lmQGBOKr59vqmrNrR7f8Bgd+TK9ayGGu+GGsdD9d63
LmSfPCRYlW2cnMzcvT0iLdW8Zo1w+vUYLPsAy6Zh+C+WACDrBADxx/ddtRsb
SxPHznT0Ne1OFCXUl29fmZoaEhaSV7JKmBBPMTRxZnlnRWfbmbmFBy3dXH1w
eHQUAN7/JT8ISAE5KH79+vjW7T2b6yuExULLyAiaWxzeOUTH2UfXxRfrFKjj
6q/n5ktyC9Z0DGYsITom6ISs8Smpej4zDSKH/AfVF/xpCMJy+Yc37/dt/2GZ
p38obZEfw8OX6R1g5BKn7+1HXeJlHeptGeRlEbTY3I9j7OGv58AxcjMtaDCv
u8trvnXo5lPgT/xIns3A4Kwi2wBE9hwkkYLS2afTBWkV1h5LWV4Jjn4Zjsnb
HRLWs5M2RNpnuDsJAyrqPTfUWqdvJvPXM+MqLM3cnI2WGPzQT2++53LkWeyp
0ak5ROHs562GQDkEIACRUwUkgFQmfju9Nrc6JGMrd2M7M6lsyer9HtVXvCv7
rNcejOStEXimRXacC2w7t2jrCXJ6s/U37W52/FgtX/qGLmrziE3nGKf30bUX
U9AXfiSdYKniTQIBuQzJyvfy1so20do9Ob0jyT9dYyQUeZc2sMtPuG86wlhR
yeHlZdolBx04G9g57LT7vOG6HqOiLtOgwjScv3VmI7Vl2KzznvvpxztvPZUg
wuf5ARiWw0jGIxGkoOz+0IPV6+pLe+6UXvx5U/8956SVBd03Y47cDq3vDdx9
gpu0fo3pUm79Ke/Wq+zGyzZ1V1iVQ8zsxnydYLfQjYx9Q9Y/3vM4/Thj4N5b
QMGPHLQEhmdg5IWHxDA4NfWP7LyyvKNn8vpvfzdwt/LwgF9cVuHx84W9t5a3
9WcePiMs2VFhGhvTfDb2+O3AjhHewSuhTTe51edKF4bxHL+1ruojFjdx2odj
Tt4ce/thPovEEPRRkTEw8EFypHKvd7Co5MrIhqv3aq8/+P7A0ez89X03xod+
ft19cfT4hbstzT/tYseVVXftOTVa2XM//+C5xL19gTUnilginpFoUWG7UXKV
Rf5u320d5++M/7E/0pezL/runc6qLGByrfStVm3be+X6k8uDdzt2texIKb5a
c/TSpuafcrcfzt3Svaz8TNCKA/EVe7/ZWJu8YYuouNy3INtnRa2JMIIssPVa
7xy6xSK0wHPphkOdZxH1AAD+MnDnZMrWVtvk4waiOkpgqJblcgNep3tai1Ns
k42g1Tqyw4Z/wjy4yzig3TzwkpXglBP/sm1yj13kaavwk6ahl4mCU7SwflJU
MlnIs1/NYRU4eaQE+WftqWmXzwITrUMHFmd30KPO6gsHKfF9dP5eMq9Fl3fO
wP8sgztg4jlkw7tg7X3RinPW3PWkNXvE3O2qpdcYI+iaiddl48XXGL73SQFX
yD6DnMzdWU1R7qv47G/ZNuHx3Iym8rrfbjxuc8huYSReNBHdN49+YJvydFHC
hGvSrx4pT7lJl6w5LyOj59JTZJnp4qyMyaSoQb77y4To6ciU2ZD0v4cIf/MP
e+bCf+UkmLQX3I3N7a8/XRRVujIgj+PEj3eN27w098TWpp32aQUk92N2fjet
eCMMjyG640Uae4Bs00tyaEczzhvb3mCxn3i6PAvz+SUu7Hn+8ndr194UJFzg
BHxMSJIKRTMhURK/yDme8LEPf59f/LbIZWt4CdGc6Ah2uNCed2ZDfRrd2wlN
TCcurNMhNSqp70Jp7lbG1Kpgaxfo16vR6pQJDcro/aoL9msoH8Bq1FMYTR7c
RDItSgPTamk9xDQdMjUZYZpdpzC7SYwfdIwTGRYCfZtkz2ieGW8RxWJnRKYL
ztDVyYVDp+YuJJepaeaiMDkoTJ4Kthi1cBWKWKKis0YZtw6FKVPFlikjkwQ+
RpeipERSVg5TxdZo06pw+J0Y/F4VQo2KbgWK6K6qbaumb6FpaoRhsmmWEQRz
lj4zdnmGp7e3ly4lDkuMwtHnEaOlH6tFjkbrxmmREzGGKRijZHWDpQv0rFDq
JDyWoE9jqBHi0YaZWpQVWEqBBi1fhVasbuZEMDHTsbGlunra8TwdOH56TEdr
2/p9dYmpqUZYkieewtU15RIQmPgQaL4EfS8tog+B7qdnHqxrGYw1WYLSIymr
sVhWzl5eenpGdmq0OIKJSJcRr8NMwBjHaFhYkSwdzTiWxi50XaYenrLEwILL
87zZf2xn+Vo6jmCDwTmqERxU8WxlbXsVrIMKzkmdwFInWGlo26vhnVUJLA09
vJZmSmJccfZyYysrsjohFE0K0ML7ovEBanpeaDpZVYesoo1Rx+vhqC4uXiGu
noEh/g/7ju5an79QS9NSS5ulhmWr45CepaZto4JjqRJsNQg2mjiWOtZeFWui
jtMlEdeW5Jxq2xURHYRHa3qiMF7KKpwF6l5KaJYqnq6OM9LSJhOJdKqxr1/w
nto9IlH0+a620tXLtHBoAzVtKkqTroYz1iRY4kgWWKI5hminTXHA6TvhqU54
fTvdhXRDs9a2Xc/udwvjAjFoTZamLg+7MEiPEahLdyHQqKoYBpGckpxSXV0t
EomQKlxVVbVtXVFIyGI6g3qwumFl+oq4oAi2oSlhgSoTRzTQ0KapahmgMFQl
NHWBBlUdTaObHGyufvVo4LvyIg00mqiEMtTAmGK0jTQwhmjtVEF0a8tBqQyx
TrBYLJbL5T09Patzl9mzzX18eJAYKQNIWZNMPh7vauu8MXh18PSZ3iPHD+1p
3FFWUZKVkxIbExwe+eOh+onh3oSYcBweHyvgMxhUVTWUsrISy8zi3Zu3CPMc
gBDLZTIZ0r969UoYHsSgUzo7D4NziCeEZCDiBf9zAwBpa8eRTaVF/YfqlkYL
jE3NXr95mVuYr/SprS5eJZFKxYB8Vi4DAADhV3ycYWhi/NHw8JAckCEFTQYr
gNhK4E+QzwMGARi8Ony9ND+3YmWOP5fL8/GblcxMjD8T8oUxUTGTk5OIMZTC
kPxfvQ8SYt4OIZ/reX4E4BcA8NdJJNbU1BQ/PDwzI1WfTNu2vUoiEcMSaG5K
LP0oQRwxqDC3X63OZysIgnJkYxCPrFAIzUMRF1QAuVn+SdL8JGICGpsPWNjZ
+PmHPP/1b4inRmo2KEEqN4SYAxAAYIXt/jd+SFGKP/F/XRT4GQrOL2tRhAOB
aan0+oPRF6/egDKFzUOkSeUgol2hX/6J/7NxgP4JlYLOeg==
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Vhg2GM0MwXH/Bw2dfQo=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
iWeE5te6ZRPvZzc4/geGGqbT
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
kwggSPkvmo4zTQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
zNXJ2bHRr0aGr/T29HV1f3nmzOmjx1o6vzhz76fvn/z6cOFfvz3+5dHYWG+O
JXkjeT1ZQZXrVaJgCazhQDoO5MvB0HCbiB4MKWgwh1S25BfVGEvKspBXIzJS
HxIcERoSqdMG+uuCEEjE8neQeEMsjjE9496DH35ZePby7YurM2PRhgiOhL3G
fc0H7h9uQq3f4LZ2A3oDjk3GskhrNqzb5OFBg0BDcrj142JrRWF6WhoG64Zc
biBAIxIoGDSewxYAJCoahadSWBKxgg0L4mMT7t+7/evCsz/eLLadbPbwcsMB
RIwXZt3atVQsAQaoyJshUMoYXIhMIFFIdAaVlpGZ1NZ+6tTx9mprDUDBqNXe
3nKFVKKQy1QKbx8+V8zjChFP4OYgjdbflJ7267dTC0+fPH/xh213uSdqIwrl
QSLgyDisjMuVcrl8DlskFdIYAIVMoBApIh4/z5xZZ6vLN5riIrdzeGBcfIzN
ZmttPVFYUGLKyc/Jzjebctvajraf/rS6purwXtvlI3UvH/38y28LufkmKskL
xGMAoheDRhYJOSIBm8UEkX8FlYIlk9EUENBqfLOzUnIzM9IMhl1bo2gMYsKu
uGOtbUif2/ftq6vbU1fXYLPVToyPzs1ONjfZuzraRjoPfvfNdH9/f2R4BB3E
0gEMhYTFYVAoTzc6DUR7unl5usNMCpNOZkMMS55paKBnqO/8pQvdw33nmBBV
ofKOjt6asDN+R2zMjh2xO3cm70rYlW/KQmDYqjdlppaVmGINkWI+j8OC1AoB
BwZIePSav7/vsXGjv5+Pl6eH2/p1fDYM0WkAAW8tsAwP9I0M9o4N909cGdZp
lFyYQSGRCHgvAgFDpYAUkErA4gleaIIXiohF00Eyi8aAGUwynsii0TQ+MgGX
jujjtmGNl6cbiw56bFy3ce2HCLVMzNf5qfbYqs53fT58qQfhR+xmX7mPTCxg
MRkUotJbWJBvshYWBWi1AAFLwmEQfg6LxWXx5SK5Sq7gsJhyMV/Eh+gUApmA
IuFRIMlLyGPp/BRJOw2N9t0Xz3UO9p8/19XRe6EL2QKSf0yYLnGbPj1uR3ZK
gsWcFr0lOFin5TAZCEVYUECQv0YllyIlZFKpAIEIEklCLlsq4kmEsEwMb9Yp
UhK3l5WY7fXVLYft7ac+uXiuo+f8mfZPW/p7uqcmxmanxhvKLUcb6o432j89
0tjS/LFWKV33/t/W/M/fGBRygAb5dUq4EI1Jx1ABNMbTDSSQEaHkYuFWfcjO
+MjyUtOh5t3HWxs72ls6O451tH+CnPiRobNXRnu//efMrRvX52YmPm87dObY
odamhobqstK87PjoCCrOy3PDWqRm7pvWuW9EJmvd3f+OQa/3dN+ARXvSScRA
P5/8rLSG2ooTR/efOt78ZUfrpZ4vxwYvjgxeGB68MDdz5do/vrp9c+7e3Rvz
N78+13Hi5JHGpj3VlozUmLCQQLVSAiGNhicRMHis5zvg/mNROKwn4vSRiiwZ
xgP1u099cvj08UNnO1v7zp6+dKFrqPfC5ZGB8bFBRJapidHZ6ZHZqbGZySvd
7W2fHT1wrLlhX21lTYklz5gUHx2+ZbOfzleuVgh9lGJ/jSI8VKcP3xxniDSm
xFVZ8w/W17YfPdTdfuLMycM93Z+O9HWNDVwcHXjXMJPjI9OTl6cnx6YmByfH
EYz+H8Z1B8E=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {
      32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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

      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxdlHlU02e6x3vmzh8zc3pPa6vV6apsIoJAwhICIexgUURkiywhQAgJ2QNk
T8i+r7/sCYSAgAiIokDDIltxqzo6zhSl1dp7b/W2th1tlSUJcNOe+eue83mf
83nf95zvc97nj/dAPamk6Q9vvPEG7U/BUoKiZ1KpKOapt4ObMiINiyGiG48S
W9EYNBVS/x/Bw/3/Xr+5aGJLdMknGtuUjG1KP9uUzfhk079VxaxfNeNXzwR+
Y9qvnPIpvH651y+d3BSPb4jH1yWXXkjGXogvrgtG/Pxzm+yhdebQGn3wNf3s
env/RuvAOm1gnTrgk07tyL3b8slt5eS2amZLPbeluhJQBsOvBNSzAd3ctmY2
EOT3Rtuq6R2Fd1s6sRVEfNkvGvNLxgLiiz7+yCv2yBp7dJM5skEfWms/92vb
4Kv2c+v0Yb98dkc1s6Oc2lZ7tzRXApo5v/qK79/Mbmrn/JrZzaBoZn3amW3N
1I7KuyMfD8jGA6LJgGgiILvsF4/6eMMB7tkNXt+a4Kyf37/G6H7O6f1XR/8r
wdk15Vwwf1s5FVB5/borAe2c7/+hm/+dOb/+yrZ+ZkczFVBObMrH16XjvwgG
vxZ6bnIdcyznIst6vlXZydINMTQD2A4jy+hgGsx0A6Ca31H+nq/2+g3zAeOC
PwiwGDAuBgwLAf2C3xCU390YvL0S0M9sKsZfysd+VA/9jaM2c0XtHdJmuriO
3oFgcWqVCpZI1N6MLW3nltC4uTRelmZ+Rzq7LZ32qaZfGRZ8+kW//nOf7uqm
Znldv+QDlncMS9vGpS3L51vmz3csSxvqSw9IWg/HbJcaW2VShIxXxiYX0onF
YnajSy8cH+yxqpRqAc+gaiO0wOl0uG1uXRsc0fSO0euzzgUsC8GobcuNHeO1
YKzPtBwwXd2yX/c5l15Ypv/bfOk2RSqtQOVyuIUaRaFCWNSOO84hom1yeQ8A
nHVZz7ptPQ5rt73ToBRjm/IplHSO3qzsX9CPrNgvPLKM3NL2L5hH7jrHH/fO
PrdPPVOPfW3yPrJ+dpcNuBlCDofbgqzJriyJFTKLhIxidBWcS24Y6nSOdnt6
TWanVmWQC5QCntvu7O20qeVkEiEbg0sh0MvahC18VRtLVN/KrWaLSCYHMDQ6
1js8bXSPKi2dUo2UQUfRifmkhhQsEkrBFrKpVS11J1V85sz5C8uTM8Nd3S6N
1q5WcGgtyIpinVLWbbec7TEKeLUsMoyCh1LIMBo1nUyEcxjFbitr+kLXrfmJ
lZvLX8xPXx7qtqnb1GwEh3yU3Vpi0dM/Gx8YGTzT53LenFv85v5Xf1u6Mezx
uHQak0JQ8iksFw7GohEMCn5i9IzZQNdIS9TCE1pRsYx7XCXAjZ5xLF4amuh1
ryzObzx9vPWvpxsvnv383erj+4v/uDO/+uD2y5+fbW28fv4/3927fu3m/OJX
d79cuX33/Jkep14upGOryzOO5celp0bUIop1Cr6Ai5bIMhTiDGVHrqA932Xg
XTzT2WfRDznN170Xnz24t/7jD5uvN/y+wFbAH/D5N9c3tzY2t9dev37+/XeP
Vu9/cePutesP796dGB4EFCwargTbkEPA5jXUwStOwY7lgxGlEAoVQqeA6EQI
rj7dKKfqOqhurWxubGRx+vLDO9d+fvLk1Q8v/GubvvVfN1//8stPP7788fn6
ry9/+v7ps2+/ffJwdeX2rb9fuzo9OiJgNKKRMAwKRsRlt1EKGK1F1YgENCqF
SIDQCKCWetDJo1H4xuOtzWU9BvE/lqZXvli6vzz91a1rTx+uvnz2v798/3Tt
px9ePPvu24dfPln98vHDL//r0dePV1Ye3f/7tRnvsNuJQx0rOXa4tjIJj8lC
10HJ+HwCLoeAg9OISTQcGFMTn5bwfk7mISzqaJeGeWvy7OrVmYWLvbMXeu8t
zqzcuPrk/r2fv/n6h9UH/7yxvOC9dHN57vHDf67ev/fgzu3PveOAjHP6ZGpB
ZlhJYUxzfWZTXTqmPrO5IRPTmELCxFCbQGgEOCFmX2joW5/mRfMoFQMA39tn
B+QMk4p5od88O9Z3a27imzvXH1xb+GJucnTQ7e40zs+OX1+8sjwztTA5KuPi
6iphyMrUmnJIfXVqQw20riqluRHeTssloyMJtTHIkjgo6JN9f/3z4ah3T59M
FLRWi+i4wvzUslMZjLbqbodgctR5c+bCnfnJmwsTQ+dcpNZGEyCbvDjsvXD+
woBLwkaha2H1ValIRHIjEopBpaJqEhHlh1HIWEZLNKkurqY47ng+6OP974aE
7sqBR+RlRB0M3bd7z39GxezNyg1Do7NU8pbRPmDJe252arBv0FKFLm5oKrMD
6vmJ8X6XnkMrw9Sl1VYmni6LbW5MJWLT62qOIMrDS0s+JjQeCM6n4mhE1alY
MHjf2+/88YO/7tq7++03//LHTNjBitKYnLy9kLRdGTnhtcgcKrVcria7+9Wo
lpLMghhCS13wMYCMganJQlZCT504UlediMOkUMmwdipUwMmikRMaqj4m18dW
F0agETGViMMFhXFZWZB33vnLgQNvncg/hEGC8S1gLB5cVBqelbc/Ffbhp0Vx
9ZhjmflHwKn7aVSMx2rgUCuQlSBsE7y8LAqLTW6jw7h8uFCULhKn8UXQ+sow
Li5NQvq0rSkRj4cwWIhmTMUHH/45KXkPHLKnAP4uBh3RSj/M4IL4wmwuL59I
Tkfj0iprQfGQjzDNSIu+Q8A70Yw73MpIRdQewJGjueIUgSJFoErkqUB8NRhX
FenoOHkewErb00uKwyvLswtyUkMOvJlX8EFe5jvFhXuamj5CNrxJY75vtKVa
XdlGW5bGki3RZsELwkrLiwz6NomygC6MYUpABEYkXXSEr4pny6OY6qg2ZQRD
E2ngwC6bq+b6SGJWcnbG+9ERn8RHhdWcTuPwYTxRskie2iEFYwjvNZN3ywyR
Bmec2honBWI5yhhI5kc1qNP2TjZPmcZQRbXLD7dLoxnyIJFtsjCyLJQoC6Uq
wkZN+Z9ZTlzuPM1mHsnM+Cg3HZwLj1erTmvNiQprtMwMJrJCK+p3IZv3ceQR
OhdY40qW2RLpiiOR4N1Hj+eLlI1MeWKr6iBNEUWVHKJKI6nSCIokjCgJx4vD
KdKIfgDap4P0WWFC3pGkhPcqK2KzYCECHszmjDK5YqyeJJ0FpDaCtUCy2QWx
eaCW7jRzD1xuhh6MezssIgRLOio1wcTmBKExma8D8XWxXG00RxPF14O42kS+
LsnjArmd0T3ugxppTFryPjwl5uSxCAkPfsaT1NOdOjCQPjyScW4oo68f1j+Q
0d0Lc7hTHR640Q6LS9y9d9/uwuJIjS1FawdrLKlKIFkBJChNCQogXm6Klxji
xfq4nu5Ejwfk8URrVfE5OXv50gQiHiQTpfT2JHd1g12e+E5PorMrydkFcfek
uDzJFleyyZUm0SaBU/ZCYbHFZVESbZpUmyRRwoJfvViaIVPkyhR5MlWOUJ7O
l8DUukNKbYTWGMHviM7J28Xkx7W1JVHIkRotSK0HK3WJWn2GQpWh0eYAQDFg
LNfrTxuM9SxuCShxf2lFPqoxT6fHAwAZ0BMBHQnQUc16hlnPthpFZr3ErJfK
FCek8mMKdVEHv7y8BCoTYQScZgqh2GzAO+1Ml13Y4zL2dJp7u4wDbltfp8Pj
cJxx9wh4ohRocmNTOYFY67Raz3T1eFzmbpex22Xqdlq6HbZOh9lpB1x2i8Mh
djglrk6pVNRRmJOtEooELEZpcZ5SxgD0si57l0XXZdI6bYDJBii67CqnXWG1
Sojk2kNRB4tOZpZVwPQ6nt3GM9tajdZ2jZGsM5G1AFGub5DqaqU6ZC0agsJA
EXXJ+cdA0JQP0aj88jIIBLKnoR5cWRWFxsFKEfEnyg5VN8QiGxKxLVnoZnjB
ifDiioPw3LCso/srkQdbWTAq+wiRHYNjgpvaokk8EIkfj+fF4nlgdHtcZuHe
nML3UrLeyizai2yMpNKgZZUhtbWhXBaYSAvBM0LwrFA8J4TID8MzI5upUY3E
yCrM/t+cEdFA+YTECiexwkj8MCw7pJkVhuOEE/iRhI5IXEcYmh2OwIf8HxWq
KIE=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxlkXdQU/kWx3fe++fNvPdm3FkrCgKGEkJAeicBQ0lCCFJEyb2BAAYiJKFI
lyqgAorsgkSELEU6hN67FAEXWBCkh5KEhBA6ttUd3w06+3ZnZz73N+ee3/md
7ykKnkxH6j++++674H9BhyMlzCIoiBLhdAL6cWEE03wYN72xjNs3fW4GGXr+
E3LKf/ukNljDB6rXwOp1oHqdxFkDOOtADQ+EqOWDtTzIBr7ZfPDYJnGgsHWA
swJyuEA1l1TFBSq5QMUyUL4Mli1BkEulAMULpOfz5MJ5cq2AXMMj1/ClQlCG
Oj6p/u8I/oTUA4VJqV0n1a4BNWsgZxWoXiFVSrXAimPKlwFIq2QRrNsAaqXB
YL2A3LABNGy4NR7TIHD7iy0gNW6QGv/wSPkqB7UGlQcVCXLWoTmQq9bIlRAr
YDnXvWyZXL8hraReAGUGofx/ZPg/wr95vkFqEEAPwToBuU4AqQDHMwSreccq
q2CltAtygwiqHDxOfpxfCDQJSX8CaPrm+Uvmr1eNx0++cTw96dB4EGDNGjQx
oHLFvVkMQD02b4DNQrB58xgRdAKQ0SIGWkXkZrF7ixhySoW+OqW3om8nJPSn
uUEG+HVl0B5r1qGJZYzu0lo3vVpF7q0ijxaRR5uQ0rLhCdltYkrHlmeb2KeB
690qoLRvebSKPdshtihtYo/WTQhyyyapSfSXjpqE5CYh2CCAZiLdaS3/xerb
tOHtW+1iascWhHfHZlDpkF/Tmm+n2L9rK6hbfC8l805eC7Vnz6dzi9Yl8e3a
8umAgjchPNs23VvFYMvmN6S9i31r5z3rVq/Xi0jSnQoGVo4KJ/eDuneY3WK6
FNHd0u6I9pWIHlFcFz+kbyuHfjMlI4fRf8js3gns2WV07/h3bft37d6ChHr3
qJ0SaoeE2i6BWnNv2/Jq3Q4r6varnqF1SnzaRORGQdb4XtrwTviLnbDBvUR2
w/34+Mz4u2klnXEdS3F94pCXB88YtMfZhWFDh5F9u1H9e2F9O6G92yG9e+Hd
oqSSgZCujYC+bUb3VnCfJKRfHNAliGHXJjRMVs0eNi8eFYzvxQ7uR7/Yju2X
JAwfpuZUPwhgskIDfwwKygig/5T8MJVVzgKJmazihNGDu4PbiUO78YPbcf2S
+KG9pI6V/MBbqa1zsUP7Mf2S9JG951P7j1/tPChuf1TaWjz1doz/fpL/jj1x
mDAoeTAkuTdy8KB3OaOmL4td9ZAzlP6sOJvuxSIa52Ng2TklaWOHj0a201/t
pY3upo3sZIwfPe1eLqGRszvmn4xsFU8els0clE/vl40J2KW1FSXlFdO7RZP7
+RMH4xsf8id3cid2H40dZA7x8tte/ZxTlPtyLW/6LfuVqKCs8SeCaUFeScEs
FLZf+Prw56lD9tRB0ez7qmFuOY1U3jtb9HqnclLSOr/TOSNo7hqsq6nv7ukf
nl4tHhM/Ht2bEH58sf6pc+1z2eIHzii3Lju7ONivIuZOTXZe7Zu9xvl9FsWp
vqCsaeW3+rmDpoWj+vmj+rnDhqV3bWPcYheLkrCwkryKkrqelv6pwVfTE+OT
CzOLQwPDLye4JRPbRVO7rQu7nOFFzsgSZ5zb3tjaTMZU47Q5xootNNII7+2Y
4KjK9Ur7s2cD/M/9a+8G1t/3r71/sfp+gP9b//TK8xs2nLT7zQXP69j55eyC
oRfD/GXB+gJPvCKY4+03Lb2re3PYsyihMkNRKPMrVpb2NnjcZSUc/OJVFXkf
W8vk9OzHObnPbbVe5bOmd7/8Kvr0q/DzhPDT+MbHic3fhyfny9yJw6+5o6JP
v6wfjEwtT72a5C/xV2a4G1zhm8HB3peve1c+zG5/LqxuVlNSOnnye5nTZ09+
f/LMGRllmAoCDtfR0lZQlCfIn3759PGKQLjA21zYfLuw9WFR8nH56MvMzFLN
Naupydmloy9ze79PLqzNjP7C5wp587y1RcHLspKBpq5x4aeV/S9zgj08Fv/f
f//nzBlI4KTMqTPnz5y9cE5G+aKCwjmZczJnSSgDFkAo9XdriA7qSk8eZmdN
d7f82lzT4IKZGxjgSd7OrfBGB4cW3yzxV0WCZYFwcbOja6BncGx243Dj4Atv
+31BWaW2Ekzh9GnZs6fOn/3h5KkTJ344IXteRukS7JIqXFlJxRiujIbD0IoX
CAhFD301GkqbZq4Toq+S5GqX6uuRTadm0oCiiOCymPDi2GD2/ftREdH3kpJH
ppf333/Z+/C7aEOYj0Olws6nKsslqcpFweUClS8wVeWYCJi/hgr1srqHlsY1
dTWs4kVbxUtYOMISiUQj1FHqGmgNNUsNhBVC3QqJsNZEErQ0CDrqljoGOjqG
VniHgYnZ/Xcft48+zFdVNarIN8vLtMlf6Lh0oVP1QgdCth0p264h16Z5sVNL
sU9T8YU6rFsN1o6AtakqNcGUahHKZepqxVqIIiPdbB2th9qX4/QuB2tf9tPR
9tLVJcCVGMygVZEktWKMVdyX4+AcDZOPVlOOVIVFycslyJ69K3s6Xvbk3Yun
0hXOZcHOPYVdKFSWK1dVqFVTbIRfalZSbEPAWlQUWlUUerVVujTkG9Xla5CX
ChAKGapy8Urn6UjlxPisXM4vzncafeNqKO4hFqY4jDnR0hSP0kabww3M4YYo
NSO0ij4eaeqKxnsRPZkAM5oakegf8zAwMe1W/AO/6DskeuR1Zqx7WKgLnXGN
TncJcEO7WGlfMVJH65o4O9BZQGSFa1Sta3SDQ1i1iWuyPiFSHxesifK6bEnV
xwUaOYQbEEKMieG2vqxrMS03EruApB4wsRNMaAfvdtyIbcbS8xwCy5zCGxwi
6ojh1YTAUjSYZuwYpWnrr0cIxlFZRP98p9BqpwiOc2QNkVmI92HhqU8sgRRL
cqrNrSfYADaWmYe79dQ+sNg5usnpToNzdOO1sDrn4OqrgeUEWoGpU4INJdMx
oMyBUUjwYxP98mw90i2uJ6Jd4664JWM9Mm3c068GlUI4hVQSmUUE/3wcLdfa
h2Xr+5QQUGgfWmYXVGDnn2fPLIbqtGcUOQaXOwZXSgkswd/MMXOORZNSsN4s
G88MrHcWzotlDaSaOsWYOcWZO0ejnKNNiRGOzCIHRj7Rv9COxrbzfQa1gKE8
tvHOxNHy7OhF9ox8nHcWgQYFPLf3Zdv7/kzwzSXQcm29nmBIaYYOkWi3B1jP
JxjyY2v3H61IP1qT0i1uJBsSo8ydYiycE/SsA7FeWfY+eVhP1hXSQyvgIdo1
Ge2aZEG6b+XxCOeTg6fl2lDS7ag5jgElDoxiwq0C7M1svE82gcbGUp4Y2EWY
X0vCQlrkDIsbKSiXJHPHBBO7CH1soK5tkJlDrCkhCuWahCGlWIOpKOcElFOC
6dUYs6vR0h5dEiyBhxZAqplznDX4CE99ivd+akt5grp+D7pCuSabEKP1bZmG
hHCUS7Ll9ftQVcZXo/XtInRtgvSwTISpu5oJoIPxVzMnIy28TOwj0C53TR1j
DHAh+tYBJsQIqE1LtxSLG/dQLvHQFcol0RxK65Jgan/HCB9qRAjVsWZqWvjo
WjMNccFalr56NlItQ0KYDu62ASFc14qONPNEoim6GD8dDN3U7o6ZQ4yBfZiu
DVPbwlfXys8Af9uIEGFoH27iEGlgy9RAUXVsA3Vxt7UwdH2b20b4MH3cbW0M
A3qrZ0PXsPCGG4NwQxLc0E1eiyCrYauoffWSrpOSvrMehgnF6ECRVnRobpct
fRAmZDVjQAPtqY2haV7xQaK9kShPDfRNLYyfni1Tz4ahdcUPae6lifZCmLmr
GLupGJHUTN2R5hS4Eaiif0NJ10kOiT2nij4Pt4T4H7eqdXg=
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJylVglQ01cal1vuACGQBBISyMFtBAS5EcORWI4gAoFwyBHOKCBXJMgph6zW
BXZFkKJurdZrGcvi1q0Oitppu2y725kqO8tq6bDqMB1vFDn2l/zXDHXatZ1+
M/x5PN77fb/v933vvY+1fYekQHfNmjWVa/GR5NREVFTk1CWR8EeyorJIrsjP
i1XsypfnVwRs18Ok0/9+1OOVlZXFX2GvXttPLVj5dbassbeueSvC0tISQRKD
1euJMbGAMO0W7bK34i8sLBAbCYOjly9fYpIYPH/+HAMCjtAEo5+PD9ZLGqFn
Z2cnJiZOnDjR3d1dX79bpVI1NTX19fZ+dOHCF59/fvfOnUePHhEBaly8DX+Z
iFoN/Z/79weH3osVb+HyXe3pDlQHR2cO18fXL0YkLiwpqVM1KFUNtcrdjS0t
7x09duv21Cu1k6Xl10q+gb+sCW9laXnx1cLCy/npO9M9R4ZLa5SZhSVBwtj1
4cJ30rMT0rISU2TNHb/Z1dhS2bI3W1EVs1VaUqMsqqzZWaua+PQL6EeI9gb+
sjad6v8v/uvut4Pvf9A9cPT0pfGB0yPijO2Z5coTY+OnRi93Hhwoq26Iy8wb
+ujSgeNnY6R5B4+e+uPlm8q2d+WKmsnJvxEq/RT+ytLS7P254+dGe/5w5tz4
Z5cmvzl89k/ClJys8sbuI2cu3fjHwLFzCdI8/1hJUdM+5buDm1Pyi+s7B8/8
ue/YSF5pXXlF5fT0NGrgR8vpxfP5mbsz50c/PvTByIVPv774128++fKfXUOn
QiWyGGlpirzuwOGTje2/FcalhSakR2cVp5fv2ZKliEopyFSoimvaK5Qd0TGx
RUVFV65cAeDqkn7x4gXKZebbGVTH0Psf/uWzv4/e/OrDT64Pnh/L3FnrH5sk
ylBk72wuq20tUOyKiEncIs2TFOxMLakVSeXBoq0JGXJJRmFqVpFYvMXHx6e6
unpl1QkiSmt+fv7ixY+TUzJqG5qb9x3IKSsXpWWGxiUFiuKjU2Q5lc351W3y
SmXwZiGFzvQOCBen58bLimK3yoKjRSFCUUBopMA3gI9Ks7cXi8UrmkNBVNOD
Bw+uXbvW1dUVFBRKptApVAc6g2lLo1GYLI6XwD9sU3xqRklNU2ltU2H5LhaP
Y0+jc928ohOSI8WSwPDN7gIBjcGwJpNNzczMTE30dXUF67whD2rpu+9mz5w5
W1xcHBAQQCaTjY1Nzc2trK1t7OwoLDaT7+bm4+cXGh4uzcho6+jq+31/2Y4d
jgyGh4cn39WNy+NT6Q72VBqVTjM0NNTT09PV1bW1JtmQLFxYzMXFhatXr8oy
sr281jEYDEfCHBhMJpvH43l6unt6uQnWCzZt2pSbm9va2lpXV5ecnOzm5mZq
akoikUxMTAjAtWvXYgZjHV1dHZ01luamVhZmtjZWExNXfXx87exoPJ6rl5cX
RLO2tqJS6RwOn8eDilwfH+9t27b19PSMj4+3t7fT6XQ9PX1c7Do6Omo0HeCp
Db/WvDZM6sP09MzNzLq6OuCXau9AozmAOIVCYbGcXPluLs48NtsZ/KXp24aH
h69fvz42NlZWVobFQNPs1iOYAw2YxKSRkREREUR2cmIZG5vU1yshI4VCpdPh
ghYSEhIfHy+TZaWlZiRJkoTCyJDQjRERETk5Oag3RAd8AwMD6Ewwx9jY2Bj5
hFY2GsPAyGhtQmKSNF1mbkEKCtrIYrFpNEfwh1MPDw+BQCCRbJWmybKzsxMl
8UggOEJe4OALbnBhaWkJnlZWVmSNWWsMXuBOvcDMrLhsZ1XtbidnLofDZTJY
bBaHSgV91BcDWQgLCw8JCQsODnF2YVvbkKCCianpxsBg3w0BhobQwAj45ubm
oApMxEKohK9aMR0dGo1er2qqVTZEx7zj4syPCBcqlQ15efmJiYnr16/39PRc
pzHEgowgZAjsvU4APlm5ckuSFTDAU6s8ZDfUeEVchPhMplP73u7OzgN9vf1U
e3pISHhf36HDhwfwcMTFxfn6+gbhgIWG+vv7BwYGomYNDPQDNgbu7eyuqlOx
2M7amoEXwCIQiAOtMMCf8OXoyNjb1tV/aGji2k1vb28y2dbdwwNJTEhIgPju
7u5+fn5ARq6FQiGHwwEtYVR0+779TW2dfDd3bf0AH5zNXxtcQF4UMBJaVFja
oGr66suv5XI55uFfQ0FtKBIkAsvYbDa0wimzsbYqkBf+7vCRPS3tzi4cdWeD
M6Cvj3QDFrmwtbUFMpfLhao4etgSEyPa09A4Pf3vGzeuicUxZFtrGxvcHGTA
AhynACFTqVRXV1dv9aGzixWJh4+f6Dk0gJcREhBs7ezsAOvi4gIRwsLCJBKJ
QqHo6Ojo7e09f/787dtTeP3nXzw5emyIw2WTSJZgDnEgCJCx3cLCAggsFotG
o0KfweHj9Y2tuGfAFnnn8/nQEEcbl/DAwABO3+Tk5MzMzOPHj9WX/OIrzWW8
+P33c6dPn5JKUzds8AM4CAOfyWQiEHghwsGXw+Xm5OYFh4ZzubzIyEioCpKX
L1+empqam5sDoPYpfN3QLcAFcevfu3cPjUd/f39VVVVqampUVBQqB6eA8AX+
cIcvvGdlZo2Ojt66devhw4erOyJto7j6qVrdNWD+2bNnuP+xF1fNyMjI4ODg
/v372zR28ODBkydP4mnAAu12bUe3+h3X2mpHb/glNuIVe/r06ZMnT/BFmohO
FWsIqqsbxeX/az9oG344+UZT9HNa2R+1V7/EfmkD/1+fWJUv
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
G2X9gQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
/gMVAst3
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtU3lYU2e+7uN0WgcdRUjIcpKT5GQ9J/tO9gUSlrCFsFREorJaBSHsFxQL
ggIim2whQFBwAcISCAjUFu1mW9ve9jqOt73t7bSKRbtMp507d/67352Z73m/
83zfOc/z/n7v+3sP49ip9KJdL7zwQuVu8Eg/WmvxeI7Wu8LBJbOs8nhxWWFB
QllVYXGhJ/rYb8BL+r/2/58TbBK1HqWiJBij0gV0tpRN49MYQrogmi/U8J2H
02LTrBITJjKyBTqO1CQV6gSoBuNEo6iJq0mRpOYZDpfEJWTrlHFigQllqxGq
GBIaMLlJIDRRo5MYFrPIYJXTMAoVpTKEDAAyh0zjw6iSLdRihgStOlYhNqIS
E0do4PJUXI6czVNhLAUXNXJ1qbKUw4bUHK3MxOaomIicSRVBNClZHiPkyhBU
R0o6KsYEMF/KomNUCo8CmucpeOBARSGIF8WRI+pYmdIqERl4IiNLZhVQMIjC
hagojcSlIEqG0alKyzMnZqoZ4iiqgAILGRSMzFLAYgNKQyFONCHpqIQM4yGE
SGBERTHwMAYDfhKbTEXJPCUi1HL50WxMzQL9S81coZ5LE8AQGyIxISILokto
0hh+fJY23qVGVTQCGw+E0wUwW4bQ+BQGH5ZYWFIbmUwnkRgkHIzD0XAEJgG4
BHEhiEsUaDgau4ynZCBiiKdiCPVMoAIRMygsCGLCFA4NkdAxLdPm0sSlq+Vm
PlPGAF1BHBKOhoc4VGAITwuz1ZEEOpGEkCkcCpUHU1EYOM8U01kyuswi0Ngl
qILOFlFZUhJbSuVIWAQGMZwQsQ8fvp8QHkE5AKE4fYLY5lRH2wSKODmoDpFx
+/FRJA6VrYZ5RiKi2RdJPUBkEkhMAgEh0vh0hpCGiGGOkik08KLjhDqbWBcr
FWgRsU6sNBtVFqs1KcXiSDI7EqzJCbGuuJS8pJQcuz0NjFiAYkQx7QAFIoBO
NEkSdTJHZCNCnCgGGA2PROVREBEC+OlCCkfB5KgYShtmTlZYU3WKxOhD5Sdf
uzzed3Vp5Obq+NzadOj1a6GN0fkl79zs+b5Oh9MmU3ANUlKqlsxBIvkSFOSH
LSfytUQ6n8yTI4iQAvIPYzSQHCYYnFEA3BabOWIzTxWvTjp+5PSI37tyzxv8
oO86oH1z6ta7/pWt/pnV877phvMdcrVcrZbZdKhNQ4IYkahMAiFROOpuGrqP
yMRReUQyGx8O7ScyiYCfJaXLzAKlTcTTsrjR/NiDmVUDw5fm3+xZuNc8sTEw
9+b0xvvTm/cm1+6OLG4eKq9z5h1jCzCWAI3WijncqH1wFEPCUZm5ciONJ4+K
pEaAcOJpuEgajsgCfzEF8EuMPLkVM6QYYrMyKi9c7l3aGgzdbxgN1Q8HfMGt
m7ffm9t6b/HtD+bvvpOclxfrcrLl4n0UHJsPi4AzcoHKgsRlocYUBIvGR9Ii
I2EcAY7CUfAEhExmgwxTQCAlFmF9R1NF87kzveMdU6ud069XdU3V9kx2TcwM
X1/yL9ya3bx7fe11e0a2LiFeoFGaHDFSlVCmEJniVPHpXE0CQR5LkFqpdCGC
Z5AiCJG/jziwn0Dci8NH0YmqGHXuyaKha9euLq4FNt8NvHF/cevBzMbHvsBm
30SgY3Cqrd/fNz43PBUsLG8wxicdPOYem5pwHcxMy05+5WicJYUjj4GUcYg2
RZSem8WPVkAsVjiBEHYAJ9NY65rars0vbbzzwVsfPfz44fYfvvzx4dc//Oc3
v365/b9fbP/y8NufPv6vnfufb3/0+dM7H33RPTKdcfiYyR6b5Eqy2M22JEuW
O86eLhKZyXwLJI1nZeRmyc16jkzCk3C1Zk1gKfTVNzvffPf90x9/fvzsz19v
//Ttzi9Pdn55+vzvT5/9/fHOL9/88D9fPf/royc/vvHhHy4OXTlS4nG4shRa
lUDKFStQgLQsa/ZRizIBNmejpoO8BJdNn2iQG5WJ6ebewbYnO4+/3X7y+Lvt
J8+++9P24+3nz378y19+/vVvP/z5bzvPf935/uf/fvr9Z1/8aWZ5vfpMS+or
eXGp6TqLQa2XKjWoRM4SSlhprtiG5hJ3uT3nlCExHzOlSGPSoxNd+uxDjsXl
2Z1nz2Zm5y929Zxpah0YHB31+UNr62++/dbm1tt337v/7ocfrm2ud3R15hcV
5hzOTcvOjE9L1FmVeovQaOVrDZhYwtLppYPedu/VixdH6ktPp6e74/PLcipq
ClvPv/bw0ec//PTX9Y2tjs6+tNRDycnZTuehlnOduW53R1fP+u2t5dXVtfW1
ysrygwfTCwtzD7mz+BIel0/VmTCVhiGVw3wBrFBgl7pbR3wDo5P9TZ1lrRfa
O7u6u3v6u7r7N27f+fLrx989/+mPn3+1HNq4diOwuv7GnbfuLQVX79x999PP
Hn724NHm7a0zZ5tKjh8pP5V3OM9JJEeSKRECMZ2D4hUqulLF1uvl3Zfa+wd6
ugc7ijyZvX1D3T2Dff3DHRf7Wto6B0fGbm+9A3D/kwefPngE8OiLr//jj1+9
8/6/v3Xv40Bw/cxrre5j7qzslCPutORkK41OYjDJAhFDpmAmJmnMFpnVoh0c
6B0ZHbjQdTbDbeq/PAIwMODtH/A2Np0729LuHbviv3pjeXUzGNoY809fn11s
PNdZfKqmsLTKedCtMRgVaplSJbTbNEqlQCTGRGKuziAzmeUxMWqZjOdw2AC/
1zvQ3FbjPm4H5EAC6H9gyJeclikQKwxmW4oz60h+SWl5dUVVfXX9merGs1UN
TRV1jQUnTjmzMhzJ8U5ngstp53JoGq1KqRKrNRKFgo9hTBgmxtmtZ5saOzta
m9sqik7FXx7wgpx4R/1XpmZGfJNlntoYu4ODighkWmQUBU+EiRQ6jCAcDOPy
+ahQKJKLZEpRQqLVkWim0yGhiC+W8IUiDoVC+P2ePXvCdnPYzJQkx6vFBSfK
srLdiunpmRs3AgsLy8Hltffvf/LJpw/uvP1eMLQ+5p9qaesoOVGe7Mwwmk0y
hRzlY1yUyxfzlGpxSqo9NkZHIuI1Wg2Lg0Tg9oWFvbQ3bA9EJms0Skei/Xjh
kRMnXRm5srXQ2urK6sb6xsbG5spKaGhouKGx8UJH59Do+PSN2aXQrZVbm0sr
t2YDwZFRf2396dzDr7hcjqyslNhYPZ6AN1mtkQTc7/btxkWFs1l0tVrudCW6
3el1nuKKimxXjnxtJRRaXlkLrS7ML3i93uLiYpFIBFGoVBqCCkRavTExKfWV
HHdR8cmCohNpzkyTSa9SSiRiPotJi8BFsLjcA7gDREqUUMyNsepdztSS4iOe
8vz6qmMej8tdrA8uLi3OLwDMzs4ODQ9XV1enpqbKZDIYhveHh7/88u5du36z
a9eLL7740m9f2h0WtndPWFjY7t0vv/RbgL179xBJBBAho0njSIrJyU6rOHmi
qa7m3OnK03Xu8gpHQakB8P8TS4uLCwsL09PTQEV7e3ttbU1BQX6602mxmOVy
KYbyEIQOwxSYSmHQaGwmU4BhCrksMdF+9FhuaVmRx1NcU/lqS0Ndc21FU1VB
Y11OVU3yq5Uxy0tBgJXgcmgltLq6urKyEgwuLy7Mz8/dvHFtanLcN3S5t6uz
reW1xvraSk/5iYryEx5PaaWntKa6oqG++lzz6c725ktdLb3d5y53t3W1NJw5
lVdTklxdkV5R6SgqswLn/1ViGXCvgBJLQMp8IDg/uxSY+ScW5q4HZqZuXvNP
Xx27Mun1+4fHfAM+32VQ/Mr4yJXxIf/YZd9Iz2BP+6WWmoun89vqMhpqs09V
OI6WGIPB4HxgHlizvLz8j+aDwCVwDS4uAizOAyGzc3MzM0DN9NUrkxP+Cd/E
hHdi3Dvp9wF5166MXx33+ob7B3ov9l9q7Txb3vpveWdqXNVV6SWlsXkFWsAW
CID8L4C2F/6xACXYS6DIPPg2H5idm7k5c/369atTUxNgjfsAxsd8/omxyfHR
Sd/IYG9314XWnq4LA73nLzZXNHqyS0vs+fnmvEJdZq70/wCb7ZAa
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyFlgdQk1kewHfuxmG9c++8WVlYCyBlQUSaAlJFAh6g0ozSlBoIIIQeCCUJ
BAgJIZQQmhSlKgdSFAXEAiiyKq5YbvfOeq4DHigqkPLV3PuS1XFnZO4//7z8
8773fv/y3pf3tkYk+kX/4auvvkr9GjR+4Rl7U1LCGYfWgx+HaamxVFoUxYOW
FkWNStkd8UfQqfPbh7CxLwmKo7AChhUQisM4plIEdKNKC8UwfDVFFUAxTIFg
ChhXIDi+Cl8FxX9DoRgxFFV9K0C7mir5yhk4iIwIbhXBVeMxZTwKhFBVYCoX
8JcUIfhgBKrMFEWUQa7GB2QVXMVXwlWp4AiR+BeUiF+ZOgaKiSMqF6sngH9U
gosRUYEpSiVWYLWwABLCcGLhVINXGQgYMFAElmEYjGIQjMggTIrgchiXoagc
hWUIJMVQSAEIiBwoCloUAjEgoMURBMzCiSqtxkdgKQQto5gMxWUyRAJjMim6
jChkECqFYQmGynAMMGVAwUgcJWwIWpEjclhZI4xwrDRWix+QMYkcXoZw6Qq8
vIKsyHC5BJXKULkclsEIBKMwUBRThgpKRxgIhOOQQgFamFhnws3qfDmMrECY
bAWVSHBIokAWIekbqeT1hw9zi+/frEhfv196K5G9k8oXliRAFyXyJRh9B6Ef
QJJg82NKOPplPooiCCKDUfkSJFnGkQcvnnePjIpbO4R1zTzRCW5Vg6i1q/ns
hbOXb/SMTnQMXu4aGeu/NnX++u0r049mns09m12UgtyIV+Z3/M+rBcMQhIBC
4+PTPwXH0TyDwt3IIRp65m6+YSmFIo/Q+DA6R9DaxyhriMoujsoppjJLEjjl
OcJ6fl1ba8/QL09mZVJMtatx4i0mdiwClonYXSgoLajo0rLk9LnB9GJ+wYnm
01cn/ePS/rLRMCaZXd5yNoUnSuWLjyRn7/INVrd03Lib5J2QmVvfkcgVOfoc
jUxhVtR3vH6zjOHE64yAWFE5sfcwGYRIQOzA69v5+RPNJ7nVtd2TU9137g7M
PCQFhdqQ9nt4BWzb5Vhx6kxkJmud4Y7vrBzWGlt+b++SWtWYLm5OKqkxcPAI
iGdEJDN7hq5BOFEfOQT2NiQBm1ABQzjYl/JXr2ZLBEIf/0Bh08mIbKY3LTmc
mb9efxs5nEry9N3nE9jSP+weHPE3Y7M/GZr82dhcj+QezMjT2OXoGZ20JyDS
m5KYW1obEBE/9/Y9BEMwyECBSjDo1eL85My9geFRQWX10UhqZELy4ahYK08f
p8PBtl7kb7T1tYzNvANC2nqH/EJjDkfTorPzd7h5qm39YZOVvbGrh5a1o92h
II/wGDsvfxqT6+4bdGViCkbki5IPM09+Hhy7WtPexi6rYBQKsrll+WViXk0j
r/ZkobiRVVaTza/M4pbmCcpHrk+dv3LT1N41IDqRI25I4vBCUjJo+dykfG6O
UFRQ31h5upvX0FLe3F5ef7KuqXXh3fzg5eGyhtpcYWm+qLqotplf3yFq661o
6y5r7iwSNZbWtLSfHbo0cefmvX/ef/L80ctXQ+O38gTVmRxBz6WJq9MPL926
e27sxtjdmWvTP43cnW65cLFtcKh7+HJn34Xi0sqRsZGj1MgUNqvsVGtD34XG
/tH2oUneiS5KJudgaKz7odBkev69+09fvnrzr+e/Pnz+n5kXL27c+/nhs7mp
+//+8eHjO48ed18crmtp6z5/8czAubozHdxaMbe6uq13oKH1TCFPmMJINTA3
cTx4gBwdR8lk0fniNK7Y5TDF0S/E0tXLNzj6RMPp/86+f/d25cmLX2/cu3f5
zu1zVycujt3sG77Sfnagpaunoa2jsr6+tLKqqFSQW1LEKOaITzZ3nR8UimsL
uILgiJAdNtZmjnt2OLka2u41sHHRsdyzycR2Lznk7/5hAlHj7duPFl6/u3Xz
TmJKemR8fHlTY21HZ31bZ3ndCYGoWiCqElZVcQG5gMPiFmRz2VlF7OqTTaT9
B3c7OKfSszjFxSwun55XRE3PCaVleIVQHfaTnQ4cORAcmV1Udu3Gnenp+zcm
Jn18fNet/+s3G749GOjPr6spqanOFwjyios5PB6Hz2NxC7M4bCavMIfLLq8T
xSQnGJmaaW7ROeDtl56ZU1BSJqxpKqluGrgyeX3ml6rm9gw2NyE9t/0f/VfH
J69dG2ezmOrq37p57NM3MdbaZpjEYmTzC9LzclJzGXRmDp2Vk5idEZeRGk1P
SshMTqQnu+13T8vM9PTy3mVl40xy1zU0tXZwc3b3TWKwuwaG2Fw+JeZ4FJWW
xymuq2/oH+jz8TtA2uecy2Ht8zqgqat9ND6SxkqLodOikmIpCTFhx6nBsZSA
WAqZGh4SE+Hps9/RZQ+Lw4mMoianpDo6uWps1FX/Xldzi8FBvwDfI0H6RkZm
5hZ7nd1SU+n9/f119TXWtpYZOenswrywaMo2S/OAqGNU+vFjsWH+EUFHwgLJ
YUEHg46QyL5u/n4efl66hnq7dltlZmXnMtk/3rqdmJhiYmphYmppZWPv7Ut2
3LNXz0B/+/btzs4uFRWV169fZzAyzcxMWHlMZh4rNT1tp42Vk+seF3eSnbO9
jb2NhZXlDktzI1MTUDoLW2sbO1u1r9VsbHfT6XR+Scni4uLs7GxPTw+ZTNbU
1NTQ0NDS0tLR0dHW1tbX1/fw8AgICNiuFD6fx2AwqFSqmZmZrq6uto721q1b
gbF58+ZNmzaBWXp6esbGxgYGBmvXrlVXV3dycmIxmTKp9PHjxzQazd7efsuW
LZofRUPjOyBg2IYNG9asWbNx48bAwMD8/PyMjAxAADRABmGAKSq+yoWq38jI
yNbWNjQsrLe3D/x5PnjwgEKhWFhYgIBB2AAOyGCWKhFgrFu3Tk1NzcHBIT4+
3s7ODuQIOkHwwJGJiYm1tbWLiwtIPy4ujsViicXivr6+ycnJly9fSiQS5TkF
z83NDQ0NlZSUREREkEiknTt3/qAUQAAegSPABDaAA9SxY8cSEhKysrKEQmFn
Z+fo6Oj09PTTp08BZGlpCdCUpxUml8vBEQtsFAX3M0LAz4WFBZDO+Ph4b29v
R0dHU1NTbW3tqVOnwAINDg5OTU0Bzvz8PAhMKpUCguL3AlBypSwvLwMaqhTg
Edig/eRI5RQmDmBIJpPBSvkEAU9Bq7wDEJcAFQe0n90NCFFBPu//9Aj+f4J+
lNUuT5/L/wAjejn1
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
PvoP2I44DQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxlVnlUU2cWtzPtmS5znCpalaJFdhSibLIq+06AJEAIJEBCVrJACGEJ2ReS
vDV7QliCKKJQKSLVKtLqlNoqUK0LTjfbWpcuVh2w7bFOdZ7Tmb/mnt/7zr33
u+937/ud8977tjKaiew/rVq1SvIithDpHZmtrfQu0qtYUCmS8DgiFrNQ1Mbi
sFqTGH/GkoH/vZ75nTpTBaU4Oz+WSCogVubTaSVOTd2AiTdp7xm1CUdsvDfd
TQfsdWMWxZhdvNfU6lJxke6mNlZVE5WgbWWZpRwlr17aUN9Cq2pjVatb6ppq
CQxSUXcTrbY2v4qUWU+tKSRm5FXtotaVVFbsbmaRj1rQg2bjYaNp2mqdBOBJ
k2US1I8aFG+a9fsNnSYxFZCxvEaBsY3eI2GCYrats0nBpbUyqG0cWgu9hkYk
1hJL6qqK8AUJhcUxKpVc3ExqZ5QL6YWlhN2QSnTMiR5BwGGd9AgI75MrR1Sq
91yek3bXMdRxyKS3dvKgrqY+M9+j40Id7F4Dcwjk95u5MlatlFkjoWOg0MnF
wkZyB48qYpLEXIZZxnCr2EYplc8s9iEcn1oyCVgPmY1vW9CTrr7jdteEEZgC
kWM2YAzqdstFTiV3EGYMw40DBvaoWzDqEu2FmWoepZ1eo+BSrTKuQdygaKJJ
OdXaFoZGxETkPKibC8s5NgV9HyTq7+ocNwCDXd32FuEhg2HCaDoCQAd1mmG1
9BDS6lE1e7T8XgOvHxAMmVu8Pfy9UNOwlY2o6ppryzsbq3UtdJWwvq2xSlhP
VIgYUi5FLaLr2xiwjG1XMA6B6pNW97hJN2VBPO1tJg5zzKA/oNce0GmPW9HD
FoVDIUS6Of1mziDIdyrFqFzYZxYPWzmunvouJk3FrleyapsbyfyG6sI9qdHB
QXwagU8j6lsbgQ4m1M6wdjShAhEgYPnU8n6ZTNlAHTXoTVzWuBGTy3oYMdu6
BFYV161j+QCBQyX0Gtr7NE0+Y2OfmYOouzV8jqi6qiAlMTQgYMNqv41/W9PV
QOFTiGphXY8U01OKtjTLKBQVowYW8vepNWpmg7NdMqCQHzabp+2WPnmXXdZs
U4rMUq6ILahvlAwPjRzo6xv2OCxmDbO2rjwrPTMxKWSj/+tr/QLWvRbg56dk
U4XVZdoWplbCHOrpQIUCLYs2pJYZeUybRCRn07VcmrNDrmc2Tph6hnoMXW1y
WKN0arp5dGFJKdMM99u8oz2gOz+zuGh3dmV+ES4oOHDdusDXXtu4Zp3/Wr82
dg3YKp4aPTzisQ/p5O1ksobV4OgUqdnVykaahEIWVRHVrAawuW3Gt3/po9nR
kdHDBycnD09/+P7Z+Q/PHn/7nXdn/35h8fL5D84vXbx0afHSmdnT+Py8TWvW
BG8ODA4Mb2NTRgb3e3ttp6anp11eV1eHhsXQ8ihqboWKSeeR8AIK0SAH3nvv
jG9oBEUc8k6NWCzlc8Vclkgh09+6fWf+3Dy9nl9La6qqZlLILMwpKKzAE+jk
WhGVIe7k0maOTYwMDs0cP9Jv7HF3yU3CFhWHLiZXNtdQWSQCmaFQQb6iUmpR
OYXF50dEJIeH7grZGh8cHBOfkDX25tT8/MdFBZUlRWRJk7Kdr6BSBMWFtUX4
qqyc/NQ9mZr2xneOUAa8Bivc7YD1SxcvL55fWJibOzc7Z9VpWZxuFTxMofNT
8isp9CZBmzQ9g5SaXBAfl5GUkJOXXaHTIT/9dM8Kud1w75cfXvv+6tez75wd
PTAdtiVi9Ysvr37pJa9JoTextDIKLKbut8FffnXj/bPnzs1/8uD+A9/kCZJQ
LRArduzBR6WV5BEamiSSxISCXbty4mKz4uNzszJJNJpoeXnF6xoScjrOn5y7
cvaSxzO2d+R42q6cLZu2vL5+/ZAXHPW5hi0qdX35YQ9489ad69dvfPjBvNrk
qWmHJFJFUGhCck5N5C58VglN2CaLCE/D4TKjtmdEbk9PSsTvii/4x7XPjh45
mZaCL8O+akRWdm5NXgF1x/aUTX7rNr3q12NjWGCBTSN0GWRzMydu3b5948at
Tz65dOitk9NHZ6pJ1OTU3LTShl3ZdbnlrAoyMy+nqqy0nkCoI1ezWI2tLSL5
1avXfvz+LmS2y7oMOg1st/YP9O0btPVGBgb7v7qhRV+Oejs+/2Lpux+//+fy
z0+ePHn06NHNm7e+uf71r7/8AiLuiYnjc2fmzp9buLZ09ctPv7xz+7t7P927
f+/+8vLyzw9Xlh/c//XXX54+/f3XlfvffnP91s1vV1aW7357Zx7PiFntt+6v
f6uWZlh84JXFi3fufHXz9u2n/7EH/7z74w+3/vXk8YPllSe///5HcmX5/srD
B0+fPn7y+6OnTx4//OXh7Tv3lq59cfPW3dmF+yOzP7jHrpvdS+3AhbbmqRMb
wmP+8vILz/+JIs0bnZo4pBXZBi+YHKdhwIbCe3nQlWbn9RNnljpNM+3mU93w
u1r0dIfmRItyZmjyY17XkQ7jDEs6wWx9q5JxwOo7TxJM1DWPp9edCsqYDUqb
wuc5P6ijF+3JW/PierI47+jbx1zWkR1Z7pCQ2PV+aze+tjEtk9FpPb9w9ebe
8YX9b13uP7iwd+zs5LGFN6c+Wrj42fTxj0+dvnJ+8dNvb9/9/NMbXRLlzvDo
bVsC0lMzx8bffvjzb/96/Ah73plTR4qImRXNORcuL/208rAcX7E1wD8rLRtf
UBQeGOiEXU//Z9988/kHc+++f/q9xQuLiwsXz86duXzpwtKVK08e/zY5MRG2
NSwxJolYWvnG65vz0gs+OvvR4vzHp2feNyH6Mm5SpTBb0ixDTWhwYFBcVFz2
7hwOnU0qKc3YXfDW+PTEwaOT48cODmMv+Pi+gVFf7z6kB7UaLYgBBXWQXCov
3FMQExndWEttF7ZQK2s2rtuQl1FYkFGYFJ0Um7ithJ9Y0hgbtDUkPCgiYIN/
clwincakVddW4gk7t0VnJmanJ2aU5ZNKc8vxuWWleaX4bHxuSk5OSjY+r7Qk
B1+UU7w9LCo3LaOztVXA4xPxhPDg0KhwXERQZFRIRFpWVCETZwGEuemp0eGR
qQmJXAb3wP6JkX2j1UTS9vCI5NikpJjk5Ji05NjUxJ3J8dEJMZEx8VHxMdt2
4MJx0WFRCbj44ICggsx8m8U+O3uGVF4ZHRm5c9t2WmXFgMXogGSgsXVqsFfC
40eE4WKi41j1bI/b53L0EYqLI8Iit4dHx++Iw0XgcJHYbmwMLi4xLiUxNiU5
Pi05LjU/ozAzLWfTOn98fvGB4UMnpt9t40trCRVuyOyzwMM2mw9FekG0tJi0
eWvs2g3b/P1DxfwWtVKvV5uqSRUB/sHBQbjU5Kz4mLTobfEYtoXHxexIDg3Z
sTUQt3VLVGRYnP/GkNWvrM1MTdcoNWqlhtvQuDNiJ5Nab5YrjDKlsVup7ejE
RSe9vDpw/YawV15eU1ZUNtDrYzfyQgNDn3t2unt2Jvw/e+6P/J9X/WXVqhdW
rXr+Df9AG2LfP7SvODtn9SuvbvYPULVL7T16W4/eotOCOr1YwG8VCdJT0iKC
wxLj4nGR2zOSk8hlJYTCgvz0PTXlZVQigUIsz05LIRRifw48Pi83Z3cqtZJE
IZQl4KJDAjbvTkgsyswhl+A7hQJFazOg6IJUSlilgtUaJwC6QMBpNjtBCDbo
tQoZoFF7YGjAig6gSL8VHbRZ9zocQ3ZbP6YnDPVCkBsE3IDJYepxmow2nQHV
6gwyma6jE9Vq7AadTa/FyAGlClSpDTKV3Yw4zKjLjHgg7HbYa7V4LZZexNIL
Wz0w4kUtHgTFtvpgrJ0VQz+C9iEotnpAyN5jtOuxLkC/xeKFEReAzQlgIao3
WHQ6paQjIWa3wwS7INgJQS4AcQOw0ww5zJAThF1YPQx5IBhr0YugvSjqfQak
F4ExeBGkz4IlYRdgspsMTrPRBYJOAHCDoNtkwsS3aLVqaVd4aKzDbHEAiAu0
uCGrG+PEmEEY0wrz3TDqwYANbLU9awE9E6cXRt1YgRlwAdhIkBMwP+P8D7MH
gjwAVgP+oSQW1lfV/RvaBLA/
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
MzcHIQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtlPdXGljax+fs+8v+tvNONsUCKL2DgIKoiCgWQAEVsWEnBruCICBFFKVK
VRRBakSxTSyJRieJ0YnJZEp2J5nsbJmz7/uXLHPOnnPvc557f/h8n3Lvk983
3vjwD1988YX8jxnT2KuqmJrqVTd9mTmIxuSywTHpQN2YQjoonaL1/U/mMu+/
+3e/bUTbOaHvU5oHtXbZrHNszitfDKjsG2pnSO3c0HnCptX4nD9hXkstBlJ6
V0TjCCutwUnz+qDR16VxtM1YW9SOdr2vQ+eV6LxdGUfrFqns3Tp3v84jlltF
o9r2SUPPjFk6a5fqnMPz3knrusKxoXAEpx1B5XJoxr2p8UZ1/rjJn1xcTdkC
aYt/2+iOa1xRrS8hd292Gd2iGWezyi6edbXpPS3a5Ratc8S80q+2NU+Y+UOq
pjFtq9zYpV7q0zkezXtHLauT9nWlO6z2x9S+xOzqlmYlrvZF9Z6o0Ruf9z82
eZMLvoRpJWHwx/VrSf3642lXqM/kbpyxNqqsQpVNYnSZfWt1TZ08qZojU9aP
aIXjxpbpxU6Nvc/gGlzwjixlJIJK1+aMJ6b1ZyTisysxrTc+44rMuKM6d9zo
ixsz/JW4YTWhX3s8H9leSKRnVjYmLJ4+jcPgDQSCK83C1vpeJVsqr5Op+WPG
pqkFsdLaqXH06l0P533Di4EJW0jujCgyTF9U5Y0q3bFpd0zhis44oxp3TOuL
6Vcf61eT+rVt3UZqYXM7tHdycf367OL03eunt1enfrtFplpk9U/UPFTWD+sF
43PNcrNYZW3TOrsN3gHTimxxfcQaGrWHp9zRSVd0zL45Yg0PW0MTlrDCGVV6
4rq1HV1gezaQ1gfT6vWkPpzcPt2/eXf166cfPv14/d3LJycH26z+yeqHKo5M
yx+bEykWRSqbWLPcofN0GXx982vSxeAjS2jUGR1bjo27EuPLiRFHbHgpPG6P
THszfdlWr6RU/p2Z1R1NYMsY2jo4TP3w9vpf///bv3/79P2bZ1uRVVbvNHtA
XTuobRg1NU0tNissYpWjTetqN/i65wO95vX+pQ2ZNTzqiGXgo864zBaTLYVl
tvCYZysjofRtq1YyKewsBXfWoskXx8nrs52r2/N3757dvtzfi/greqYr+1Q1
D7W8URN/0izISExnnrRTrHN3zPkl86s95jVpRsIeGXbGhhzRQdvmqCUmd8SG
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

      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxV0glUk9eeAPBUCrIlhCQkZF+BEEgIWwhBkCUhLAkiEFkDhFWw7BACYS+y
I4SEAIKI4AK2tUoZn91elzedGQsKJGzalvqK2toKyBZU5k3fh75zZuac33fP
/e53z3+59yOnFURlHQGBQCWmwBAlKw8oLpZVREOBF0l+SU52fmZGaH5pZnZm
MTfNCFgk/es5nPct7GjmX6jnNgGa2UO9s5vauRcAzaFNgHp2s2d2o1u/3qn/
o0P3xzndetf8c2DnwOx2/9y2dn6rdx7Yv9F9f6t9fvu90Skk9zgISXzHnh1U
o+pf3NXqt3t1WwAgEQCYAEkBvfptzRtq3ZZa90K1uNm1tH5u6Xnn8kbH0vPu
hfVe3QuN7kXP/Ea3bkM9t94780I1s1U/9T1DIrXmBcECJd6NI0D8t9EAWiDX
0huLhzQLO+qFbUCPfqtHtwV01Hd/Uzu70Tu/0avb1Oi3NPod9fx2z/xOl25X
BdR2b0MzvVU4dDugpPZEa19E3XlhwxUgPmBgaa9/aa93cUfzxtuwaqBy/dYh
3VbP/Iu+2d2Be4aB+3v9s7ta4GRmd85P716Y3hv8fl87va+6v90x91w1vVk+
/GlSQ0/11dtNl/5NOXLnbfx/Hcj/d7j45pNWv9Or21bpDN36Vz0LL1X63W6g
I/3hBfUfJjJ0zxo69Dut+vWumfWuqXvdE591Xr/d/dEng9/dO79sOCz+bReL
e+eX/tfg4t7gwttxd0C3o17cVS3v9q4AN/JH/8LvmuVf1Q9+1S4+0y4+71rZ
7FreVOk2gU7f6x3HuflZ2bOtPLjhdZ2DK/uDKwYgC2Boef/C/zG8uH9xwQAY
WXo5uvzqyvLu9ZUX43NPJ+7+NDX798nZH27dW5r8j+Vb3z34aPrv1+eejeqA
CnfzBiegdGcjW+K7FFe+vPvCimF4xXDxwRsPDZceHHo7GX3w6uLKq0s/HPTf
3zg7pa8Z+0auuZlapU6r6MoCFDVl5VY0FDY2F7edOV1ZW9937up/jen+KL04
DndimiDxJgQ33nvtow8Nlx/uXX24N/6j4fLP++M/7Y+vGq48MlxfNVz/0XD1
0YFq9neBcsAhIg8XlAn2jjd2Fxu5hYKYQpCT0MjpGM89mEXmmMGxLAcvlneM
on+8efRDlAPLBIY5iqbz8psnVl99uPryxurLj38G7E/+tD+5+vLmo1efrL76
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
/wTxj18f
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJwtVmdUE0i73nPvn/vnfipEQAVlRRZEIKEoxUCkhZAEkkgqhIT0QEISSIAU
IARIJfTepINUKd9SREBaABugiLCABQsK6K6eXdzv2/vjZu+5c96Z874zZ57n
nOeZmTM/0oU32f/xww8/iP/LPNykpQelpNBk0SfNBU4gTuAIWMwIgYTFYaX4
0v/TPGn///3vHJY1A1fOIVXzEblLBM0CyWjC5i9htEtozSJGt0yrWMnqWG8e
260a/IVWtEgrnosvmiflL5N0D0naOZx2BqeZxaln8No5vG4er1vAaeexmlms
Zg6rNWE1JlT2eGSuCZm3HJlnSio3/bz0dub50dCjD43jW9rWhYq+x5PLLxdX
tlY2tkZmliUFvaqy2xUdE7KKUWHFJKPQFFfwiGhcIuQv4fUmvM5ENCyaw8xi
zvH6B3jdMjLzZ7RmKUq7yCycHl3c/v7vP79//9fx9+9r68+fbu68/nCw+uLl
+OyTueX1vpEZpkAuTs/I1erwFCZTKBPmFIv0LYLCQU7JNL1onlKwQDKYCHpz
zBMNC3iDCaebQ2QMRBsex2inskoHX+x++PLH719//+Pw6Oju1PTq819WX/yy
vfPyz3/99fX4eGN7V5Zn4IpkaTIlEgmDBIADQ4OhKAyBxuFK8/g5NYn6bm7h
BKNoPr7YRClcJhea8IbZyKwBvHYeJ2kQZpQ9WN3sGhr7eXp+YGK6trN3enl1
9sHK1vbu//z11/HxHzsr65qC0qTUzPLa9hjCTUSIfwQUEhoGCQz0C4QEBoUj
IglkapKUnVHK1Xbzi+9KaubI+fehkhaUos8HLYoX5PaPToPhBGKCkiErpitK
FcWtTf3j7/cP/jg+/vbt2+vlp1W1DTKluupW901MVCjEFxbsFx7iFx7qHx4S
EBYCDgzw8Q8E+weHRN7EkxOEvMxiWkYdRqgPYBXb+RLZ6QV3ZxfpAoUwuyIp
t54qrySklOSWd37+9ZsZ/7dv396tbjQ1tytzdHVN3eEIhKcn6KqXh483COzj
cSPA+0agdzDYBxLg7+3r72tuflevB0JgUTejKXSvmOwL4Lg0bd3g+ERda29t
W39952B1+3DRrcHOwemDwy+/fv16+Otv+xtbdfWNyRJ5Y9udRKEYjcEGBcN8
ffzA/tdCQgLAYF9PkJsH6IqbhzfIw9XL67IH6DLQ3cUd5OpFVjpBmYbq20KF
iibKYKeqkzL1cm1JrrGi687Yp0+fD798MT1e3VtZb2lsZXCT6tsHDOVNqcoC
jigzjsGnsngUBhdLiIMEQ6/5+l4BeTs7Ozpesne4ZHfRwc7+oq07SeEEY1S3
D6FiWd5Q7LWoeA9E/FUkFYyKTc8ref/h0CxOfUfv+tRiX0cPVySp6xiS6xt5
mWUkVioujktLkDISpVSOKIaeSIhlBMGQ4ciogCAo0MPbwfHSOVtrT0quB5p/
q2soBEME3kCC4LHusDhgWAwwGM1IVr/e2//9+LikvuXh2PS9n8eSZRnVbXcS
ZAWxvKwbEbjAG2FINDmKwEYQOQgcExnNAIfAI3GxKGwcGkeNio6FwuABwlJM
amlz36h/BPrKdahreMwVKMkdigMGo8j87J3dt+YbV9bQujByd/7eZFpGVl3H
gLKwIVWVH89NocSxyDQBkSlBxgpg0YzgKLIXONQ/GH7tevD1sAgILNLsMkRS
zinrbugZAQZCQTcQQHgsMILgjcCDQlHkJMXW9mszfvmttpnh0ftj4zJlTk1b
X3ZhQ3VLT5qqME2mTkpV8WUaljiPniQlcMRR+BheIodFJZMIOGREhL+vxzVa
Dkdf39gz6OQT6BYIC4hmkJOkcfxULJ2fnmvcffX2zz//Xd3cea9vcHbiXopU
UdbQKdNWVjcPsCUqhVIXR+cmSjIFMj1XnIGhi5F4Co/PpVOIiYlkXgKVERd9
OZwiUld2j0xcj8BhyJya9r7N7TdbOztPVlZ3tl/+9uXXN3vv80urx5o6Fycn
5VnZlU0dmfqq6pbhFPMxU+oYrCS+RJkgyaXxZQRuJhxHJ8YzAoJCQiKQITCU
F8gdQRHJdNUKrZGTnLG2vrn36fDoy9H7Rw/frD3b3XvzfHOztKY2IUU63Te0
OHVPpdbUt/Vp9WW6/Mo8Q5kqRy9T6TLyitJz8gVSlZmFykzMzc2SpQrSU/iS
NFECJ46ZkitU6JE4Ek+smDctLD149HTxQV95VfWtJlmOJlOjVxsL2eL08f6B
2fHRVJmiprGrVJOTwWMQI6NioyNJOCyNm5SUpqBx+AJuCpFIIbMTY5msm2gM
l8Nh0Jg0sbJzaKqupQ0fzx25N5VfU5meo07LUtEEyWJFrqGkemhsnCNJv9vV
Pz8xnpIurapvHq5X35JTElHBpclxBUFh6XQeicbHEWhZAgURS8HEcAk0Hjb8
JjOSGE/lheJp9V3D9a2tkAhUSU2DUq2vbWzN1hTIc3S3WroWH668e71dXdcw
dmdo7t7d5DRpRdWtcqVIHBMswENvq1k9gRBdXEIUnkUmxclVBQgshcGTJqQo
U9kpap7UUFAJQcWUt/RUNjTAcSR1UWltU9v49Ex5fWtTS8/ugyevHz15O7dU
Wlg+fntg+s6AVC4vKavRyMTs6DA2KqwzL7GNjpcSiPFEQr5ckK0tCMGQZDlG
haaEzUhKjOeKpVlBaHJhfXvv0HDH4PCkaXFl7dnG+kb/4Igxv/TF9P03K0+O
3r6tbGobHRydHBxMEQuMJZVd1cYKpSiNTr5dpC7OSpUkCZOTkzXZMolUgcCS
aAl8KkcQGU2AI5DhcDiSxFCX1i4+ebL8eHXtydrGyrOtlaePlx/9c3R8Z2tr
7+2bjwcfmzt7ZxeWBof6haKEsqq6yoqKAqMxT5Ov0xfKM1UJglQaTxDDYEcT
40Jg8DAE3Od64NkLP1qftQFYATAUNjtF0dE3sGBa/pvj8ermxuYLc2z98n7/
44ePHw8PDlZX13ZfversaqdQYwqKy7I1Rr5YyuQlx8QzUVhCODIyICTY89o1
Vzf3Cxd/tLM/f9rG5sQpy3+cOPnfJ/4Bi+Gx0tSdPUPrW9vbr82X6cPHT4d7
e+8+fTw4OjI//t9+P/5+cHR4+Pmou7fbx8+XRI5FoKK8ffzcQF5OLq7Orm5+
AQEeV73t7e0BloCTFhaWpwEAq9NW1mcAp60tAAAkmVfc2P9w7fm7g8Ojr18/
//Z1f//T3rsPUzOzBcWlze23N3derr/YmJyeytFoLzhcuvST4/kL58+cMW+3
AlhZu4I8wBDI1WtXXS67ACwtLQCW5+xsz9qeO3PW1rxqxg9DE1OV+tHp2fXt
3XcHR3v7n1692Rufuk+Ip3n4+fuCg3TG4tWnT8sqytF4vO1FB1u7C9bWZ6ys
rCzMYFZWHt7e3p5ebu5uLi7O1tanLQAWVjanbc5YW1vbWAIApyxOBcExmFhm
z/D4i+1Xb/cPX717/2JzQyLPcPf19/QHO7kAIUHQtafrA8MDaCLBwcXF6fKV
ixcdHZ2c7M7bmaVwcXX1dHMHeQIdnRzNpcVpwAmLU6cAf3OftACcsgSgiFQq
Tzw8MbP7+v27/c9bO9sD/V0RyKir4BuQUBjIy9fRyXVkdHzONBdDpboAgWZ8
V1d3P39/d5C7WWdHp5+CwQFR6MhLTo42trYXLl60sT1naW1tecbO6py9rZ0D
FIWX5RWMTptW17eebWyPTU7K5FJvX3BsPDNDpQZDQu0uXKpraJy6P0mmUJ0v
X3EwG/CTszsQ+JOz0/+pbYdDoelM2nWwHxGH4bLpNGqs+QMTEhbu4+cPBHle
h0YxOaLmjt7iqlpDcWlRRSWDkwC86sfki8Rsbhg0/Nx5++KSsrGJUSabbnb2
tFl6G+uz586YdT5pecLS2tIL5IaOggt5LI0y3ZCnMKgzNDnyTHlamlgkTEqE
RZPiWYm9QyPdg/+saW4eGB1Jlckvu3tQMaTMYAQyDHr2/PksZXZ5ZVlQ0A0r
K4DZNADAwsnZARoeFAELiURAycRoqViQr1YW6bILddlGrdKoy9bnZWlzMg3q
HKAfmCFMHhq/t/Zsc2p2fnp2RpgsuuTkjIIhtCwuJgJx1s7usovrFVcXNxfX
SHg4FoMk4NDCJI5KKVMr5YaczPw8pUGtNOQpjWpVoTbXoM42I6uz5blZUo0q
638B6eS88A==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyVlglUU1cax3tqbW2n09pOnZnaekoLWpVqESwoshQjS9ghAUIAwx72QAiE
LSyyyWKAEGSHQAhbCGRhSchCCBAIgQBhX2Rpi2JRAUUr+zzA43hmpj2d79z3
zvfue/d3//e77977fe2KsvZ8+6233go+BtysXbB6aLRLOOQ48GATEOyNDPBw
BwdgPJAe6CuuR4BKhVfXvr+3t7f952zrDXv58uXa2tqLFy9e1//HZ68f9/5P
293b29nZef78OQDf3d39U03+wHZ290XsbO8ADsAFvK2t9fVngG2+0vlvvfuv
978AvC3A2W98IOAPZByOeHcXoGy/3Nh6sbH5aPXp/eVHS09Wl56s/fJweX7x
/vzi0uLDxw8erSyvrq2/fLl92AvQxe727t4f8XcObHNzY2lpaXhsqn94ktfT
X8Fg1zTxK5mcCnoLhcmp54oEUjmV05ZLrskjV9FauIPjUytr6xvAgHe3936f
f1gJzKNEIq1lcCqb2zLJtZjEdPegcDgSBXX2tHJ0gbn71jQLCKRKMweENthM
Wx9sAoF5orB5FdTx+V+AKP0ef3942ztPnz3j8Pm0Jn6LZCS3oRWdeMfG1Qvi
7GHt7GYKg+tbQGLSsihNHAsHF11T6+sW1toGhmAITM/UCmRuQygsX1lbe1Pq
m8qBAD558ojTyq1v5rdIx4i0pujsIkRgiKk93NwBYYVwNYTa2Ll4strEqJgE
YzvETf9QWw9fkDnEzMHN3NHthrkdEh05NjH13/xD/+naKpfHozVzmyVDmdX0
0ExiQEKqtbunsZ2tqb0jGAa/bm6RmJFdwWgxhMKtXLxd0DgnFNYE5mrtioL7
Yh08Q5ChsVxu+/bm1pv8A+U76+vrQqGI0SKgtfelVdaFpBMCElLcIqPBDg4G
EGuwLQxkBYHcdGls60LHJoPMoPbeGL+YdHRyNjIsOTg+B5dZFpdVHnUnr7qK
/nR19TX/EA78yl3iHkargNXZF3u3NDAV7x4Z4xocCvf1N7SxvWFpbQCB6pqY
JeCz6bwuG7cACMI3OYdS3igqaxIRK5glVG4Vu6ewtjUpp7SovG5xYeE1f38J
7e72SnqJeUUUVmtwbIqRJVTHAKyuo3cNdANkbKqmpXNe7QegmEDtmtrEWaVU
GDLYxsW/giGsYXc2CCSl1CZCaQ2RTMul0POrGkto7InhiTf076ysrGRkE9ER
MSExyW7+IVZ2TkamkBtgS+0bJlf1DC9evvrN2e+AgotP5oplMVklVk5I9WvX
nb0wCL/QeEJRbiW9lMWrau2q4nVTBX2kpnZx79D+OtpfyTsbGy+BxSgdn2nt
GWSJpDShlMqX1PJ6qjhd1RxxBbujsllAZfNrWOx26WAtW4SKveOJxjl6BESl
EMtZAmaHrFE8yOqWN/aM0buGAX4Vt1sgGdznb++HfeHho+7Re9z+MYZ4gN4h
o4sG6R1D9K4hRrec3TcuHlsYmluc+OmXsdmF7rG5xi55UR2H2SajsSXVLZ1t
g9NtgzPNPaNN4mF+/2SbbKq1d6ShXcbpkgH8rZ2tuQcPOdIhukhGE/TRhP3A
K0bHEKNjEJDEHxjvGJpo65Wz+J3N/PYe+YRwaEY0PM/rmxTKZkT99wTS8U75
VPfIbNfgdM/wvZHZ++MLSyNziyyxnC6QAPxfnzzm9clZvXJ27yinZ5wvneL1
TbdKJ7nSifaBCaagu7KBk1lMSc8vq2cLRfIZQC0wHF7/hGhwunf8J9nUTyOz
P08s3J9eeCCfmpeM3hP1jw5MzrZIRqm8HmBy+0cnyxkcUkMTjd/J7OijCyWN
nf28/jGBbJxIqolOysDewgdEJZVRG0UDE3zZJH9gun1kVjwyJ5v8eXj2/uTP
y2Nz97vlU7xeeUNbT0WTsLCOLZCNAb8TOip+5elzbveQmx/m/AXVHFJlQWUd
yMjC3NbpLrm2sKrewMwmMvyWjw/G1TuU3tLZ2jfKlo4J5bNtw/dkE4ujMw8O
sKO1XAmJJSxoEGRXN2dRWKlltIYOmYsnSknp9PyDx5xOWTGlPjAshiHoKa5i
GFrY2SK8CynMiMQMc5hjKDYSjYkkkKhs8XB9m7RZMkoor0dFJAkloy3i4QJq
K7G2BV/FukNhppfTEwtrcUQyLodMqGDaOLqfVVaRTS4chHG2XSoX9MjZQHxE
3fT2Xrqwj8rrZnT2cSTyJvFQRUt3MVNI5Ukzy+pUruh8dPyEi0/gXZrgdjE9
ubguobAqNpcSkVmGxRdj0vLCMovC0nL9QmJgLr4MflcBlZNDacDgEqIS8VmF
lQ0iKaNzoL69HwiFaGSmY3S2QTSIL2elkBn5dD7CJ/jKdeNzlzSUL/1wK7c6
Nqc6CthtCCQcoSw6mxyRUYJJuRuUTHTDxASGJ8SkEotrGEEJd70i0n40hoBM
oaYwj6TCGnwFM6uyKa+eW8ISFDP5d8j0iAwSLo8SlU0CWznCPdA3rB0UlM76
R2dEZ1fiCORIQmlYeiEmKcc7MtUpMNorKs0eGRQYlZhHacgoKLfzCrd2RWsZ
WOub2epZOKKS87EZ5DA8KZJIjiuqTyipx2aRvKLw6JR899AEXSMI3D3AARmo
/L2qg3d4wK0cZESqMybO3jfcxjPEDol19ItExRHM7d2Q6AhSXXNmPklL3/KU
4tkvFL5VUDx/Xk3LGIaEuoW4Y5N847I8Iu+4hSVZOPs6BUR7R2eYO/mY2SJw
yfiM/HJNXZApzNPWK9wGGeqIwnmExvuEJ/tgE8Pj8R5BOCVlFXf/EABeVss0
soS//957R48cBcr77/3lww8+On78MwMowhkdr6YD1jI0v6iq6eQT5h6W/KOJ
rS0CWUCpu00sAXY8qLN/SEI2Jj4LiU3wCI6Mx+fUNXKGRkaJuXlHjhy5rKmb
iifUNfLMnPyUVa98duLkBx8eP3bsr+8effeTT/5m6uTvE0cwhblaOCEdvCIQ
QbccA6IuaYLUNPWiUzKjUnKA+bJyQNq5oYBZ0wEZgYyMwRaWJhYWMLg91Nbm
xIkTp778sopS8eDhr/ll1Zb2CKDhZW3Q9xo/fqemraFnZosMC4gnhKXnB9++
64K9beMbCfUI/vrMRTV1rcjbGfHEEpAxVEXt2vc/XFM8o6ygoKR05uwFVTVd
EMj+plNUXExJSamAz1tb2z+/ftvYKCwhnTyl8OnfP1c4fe6qrr6mnpGGjqG6
joGGHlgHbK1nCTewcdY1gX58/B/X9PT9w2K9Q2K0QSaqalev6xtD7Bx8UZhU
fBaNwRgYHl5a/vXZi+fAhvz62H24/LiOztLW1fvnyS++UvhG7bK6uoamisrl
06fPKSp+e/rM+dPnLn53SV3pW+Wj7xxTPHfBJwTn4hVkaGIVFIwl5ha1cPlj
U1OPV9c2NrcOM8LDxAzoArgD/KXlRxy+MC2D4BeEcbzpagWxA5uY64EMNa5q
q6iqnz134auvFD8/eerTTz878vY773/wsboWyBaOKCgqmZicfryyurG5CaRq
B6f3Ycp56L2yw5P3xW+/Ab1Mz83L5MNtHeJ6ZlMpuSqTmHcrKTUkAucTgEa4
edrB4MbGZhYWUCw2itPKW1lb3TlAvab9zyTzXwA839s=
      "], {{0, 32}, {32, 0}}, {0,
       255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
gIQEBUv5chiCD9YXDDg1Lx2tL1fani+ank6r/z7T9uui5plN82Re/3Re+2Le
uqeyDIRIKEqGETwIEhCIRYBZCIyACApCeAiGyXR6/s7NdU2VDJ4/jRgMEdl0
DgHHYgawrqir3zhb3zjvv3Xr+paNvy4Z+pb1z1d0L1b0z5dM/SuGQXv38aaj
EEwKlIoz8lMZXP9FJW3YEJuzLSMmXalKi9lcnHb8+4NdA61P35kTM+L84ok4
jpArAyFCVLrCMnD1jaN10NU27DX0O0y/2rT/WGzrW1K/XtG/Wja/WNYO2s0X
rjX4S0h6XurTIfPR01/5fwJbtuX+8kbb+/vdX4bafh1Tv1zW96+oB5atR0/t
9/NJOIFEoCRSSWXH8vtsmoGVlreO+8Nu/Wu7sd+m7bepXy2rf1vSvVk2vVhu
e72kua49T6Jxtpdveb1iuffgzwQKNSlD9Y8PflWaQZfud4d/jT+9dwad7ZoH
VwUiAQqy+Sx5RFTQXww1v9k1A4u3hxxtoz7j2NqD9+6OYZfxvds44jQPu6yD
bt07n7Gt5ye2QFz3/aEBr67ntxZZWFhiWkLfiOatUzPk0g071CNOwzu3esit
G5ixFpRkIyBDxAs7fCS///2VUZf6neP+iEc3sWae+PRo/OPD0fWuD6uW9x7z
sMfsP5SR1Y471ot8qewnXeOAu61vuj1/Z35UfPyToba3Lv2w2/zBrR91GT54
DG8duvd2a8P5rygEXnJ8ht7y3bSzZWHNNLPePr2un/loHFl7OLL2YHS9Z/Rj
15CnfdCpGVxRj/u6m01NIYoQ85Or7736YeeDkxeqQiMUnX3X3nkNwy7TmM/w
3qUbcvn57eNei76zScgR5uXlvvhwd8p9d8Frnl9rn/+onVlVz358NOnrnvBa
J7wdox7jmMcw5tQvrD3UdJxN3xT7z9/vTa4aprwPWg3nwsNlXU+uTq1aJjzG
aY9x3G1+52p/7zZM+Ywv3jbv+7Kw9vie+dWe+VXt8nrn8h9W26f22VWt8z9P
F9ceLq51L653z61apt36eY/Rvtbb9fCHE8d2jc0aJ53qeU/H0Kj+wL6tvY+v
L6x1LPgMix7LnK970mce9+pmvIZ345pO6w1r7+WlT93zqwbbqtn+R6fto3Fx
vd3978cLnk4/YcFrWfSZZ126WYduxdv1aqDll4c3bY6uBU/7vMvk9PU23zhl
7bq84DUt+tpWfNYFj3Xaq5v2aeZcht+H2sZGHs05eqbchnmfacGrt3/qtH/q
WF43L6/1TNnbJ1a0Y0ttI0ut4yv3Zp3aRbfl9eCdN690c0vWaadxxmlyf+q+
fbP2+s36KYd20nnd5jEvetrnfPcmXS0zS/qX/fcX516srPZOu40Lq5YFr3p5
tcP1r26/zbg7ppymWY95wq4bt2sm7Opph3be3nHt2tGW5nqbs2tqRe8X4Fy3
WjvONzbtGbG1TjhuzdjbZp335n2tk47msUnt3et/mhh54vnj8eK61bbWYfPp
7Wvd9vVux8fuOW/PtKtjxm2ZcZlsvs55d+ec0zwxaak7VNpyq35+RTO93Drr
aJ9z6HusP164eGDUz7erJ1Zuzbha53xam09rMjRU7yl69Vxj9/XOevT+fNpX
uxzrf132PbB5uv8LdqyINQ==
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJy9Vgs01OsWPyVk3v8ZY15mzHjGeKaZMV6ZKM/q9EAPEo00CnlEM0JRHjEh
RKSu0jmVTuidlMYMTkMqisqN3l6DkylkTM6fWnfdtbpndW9rnbvX/u//931r
f3vv79t7fftHC4pYvXXuTz/9FD0fFKsD4zhRUYH8NShw4h0ezQsJD+a6h8cE
hwRH2QSpgIvUr9/MeHp6+vPfSdN/P/2bl/9TeF83K2d48rMSJHAAiinlj1j+
Vhk0OKVQKKeUSoVSMTUF8gzNjsBFcPjD9mejVn6xPz4xMSqX/zE0Mjw4NCQD
fyOjo6Mfxz5OTk4q/5dTfFWeVk5/ngJtg9tHB4d7nz7rrBM1l1eIC0rrs4vq
c4oaSsrun6tqrxO9ePRI9q53fGx89ga/72Vy9uwK5fikQi4bkDVLGuuzDtcG
BF3kOFcyWZWMhRcZjEqGVYUN45yD3UlX92L/oMJ96XdqRYOyIYViEryvmQT9
tZfJKcXElGJ07MOTzifVuUey3TzKzE2qjY0rFhhXmtOrLU2rLcwumhpc0SNW
kPH7tbVXUelsE7bvqoDS0lM93S8/fZpUgMlSKv/SvkLxXi5vFUnOh+44Zc34
ZSErne20jensZ+seusI/dh3vwFrucU+/S45LS4wWOOno6xlamxky7FjuXu4+
6am57W2dHz7IwTuY/k9HGHn1rrvjWXNV1eU1vreYjNIlXttW+q9bxV3jFrDK
M2jb1qTd/PxYQV5kRGpSsOCEdyDfhsNhLbW182TbujjZeXm5rktKSLsnbR0b
G5+t3xn+PFvg05/BhH5uOlhwJkZw3cv9mZ31Cc+NMduSkxMKM/YdS4rLiQtL
O5B8LDOzLOPg6UOppzKTS/P3nzi7eafAhsO0djbQN2UuXOzIdHF1XL5nV7Lo
jvht9z8H37waHRma/DST0qmZ0p6SOjtfZ1u9Ylo9dlua7h9RkHHq8gWJuLbt
8m93TxbfvHa1/eql1urqlsvVrZfPS8/+KilMLv7H0tUbjc20AW09qr4RxcRS
z8qNtWTvFt6NjGxxQYn019+e3W7s7+r+OPoBLMU3NmbP7Rb2cmxfLnW5tdq3
Jiz+3qHSjjNV0tNXrx+/0nij+e6d9gfSnra2N487eivO1HD9w6I4K47bLmER
yAQU1hxNWkkzEFhal7u43ly5uvbntdd8/Wt4O38X5j25emvgSc9oTKwsft97
QfJoLH84mv82nP9me9yLHbHPInffi9jVHJ/ckn74wdGyh+XnHlZeLopKWEZf
5GJgVOmxJseKuRGP3U/QrDLW/d3G4qHjokf2i9rtmG0OtlJnJ8nylbe2hDZk
FfRv4/XGxQ+lZg+lHRzKzfmjqEx+pEwuPCZPy5clpg3sSR1IynyTfuiVML9b
WNgceyDHZUWyueX9DQHd3uvvOdl3scyeW9Ke0LW7jIlddGKHhXanKfGBCb6F
TpMwLa57enSaYDvNqU9sGV2LGc/d2N1rV7z083m9edPrwOAX4THdkbtfhYa+
i4rq5Sf0JST2J6R0cMM71wcOxghG92W9P5AzHBHVt27tu+Wu/S4Ob1lmXQv1
7tsaNZhTmoxwzTR0gyGpXVvtGh66XxOZScCIyLDHFFg7FfGQhmylAm2WRm3W
9HZ9bLsJoc2c9sjauIO5sMOG+dTBtsNtSY9/QN9OwQNu5Gn3NRdWrX25M1Ie
x+/j85+WHKlL4F/hbrxrx5ASYE04DZ4mxkHPdJnJongyvpEKu6uDEOsgxRRU
Iw3bpKvVrINuoWLuUrFSqlYzCd9KBKQkeBMJ+oAKiA31eAam7nTWWoZjlovX
c+91r2PC37TUtjZILpb/0hQb26SLK0PPZ5L0fVb6cf14y+hWp4mIFtx8CQ4i
wcMlOLgID6snIEREdD0JI9bFiSwNRJYLbtH1xBRMC1YtBQ61pBi6clasdvdx
NbIuIWLbWUZdGbu7juS3xsbdW+UpIaD3oCBsa6eQLaGRoeH2jh7x2vhmzLxG
LZUG7DyJpgrI9ei5YvQ8CUatHg8TGZJum1BrDEh3iMg7GFUvBGDLdN60gRsV
tsvF0T2YTG4gox6wjDvsrR6b0u4RkFcB6HYA4e0bkJGWmSiID+JGrKPp3UCr
S7DzRJpzRVgVkOswc0ToOfWaKrdn3GlIcBoirPodjHolSpUBYH19ArmBW3eE
hq9c7u1raVMFqDfj1GtI6FMkfA4WeRwF4WKxG/y3FB89cexoaWhI5DKa0XlA
ox6rWoeeV4dRvYlRrcHMu6Y555rm3BuaKjVolZuYubfRKrUY1ZOAqqUmKTpy
T2FeYY4wNzM908fJLR9QF6FV87QALsthgw61GEDyWKwtW8GHRngkr8jT9We2
Dv0UAS/W0bpFJYr1qfW6pDodfC0ZW6uNrdNG3yYCN3GwS0ToJS14ERJmhdcN
8AvZtyf5aH5xcFCwK5uTBEDK0eoZKBRPf0GYjl4ymXKm+ChfkJSTXbgvMSVi
e4wJnpaEBUqJyGw8kE7AJpG0kojYFCIulUzMohKzdbULqaTTFMIFCiFPC2WG
wYdwwxJ3J+Vm5vr7b+awOWFwmBCtFgBTd4RCmAjAk26WlS3c5B+Ud7g4NSWd
G7BNC45hwyAucKgtRMMCAjGCQg0gGoZQkCF0GNQMAbdBIbxRyHAMhoeAU9Qh
O3jhwvTsjT5+hw/l2zOcPKBQPhzmAYVTAUAHR1nGcT57voLPjw8JCQ3bEW5l
YW2ygM6xtTc3XEAjkslEbRKehMfiNDFoAEBhAACNRGGQKDwSTkYiqAgEGY/j
LF6aIwTvP3/3LrD0yGg1NSpEg4xCUymURdYMXkjIyMhIT09PRUVFdHT03qS9
Fy5ckEgk4LSkuKSwsPBw7mGhUJiWlpqSkpKYmCgQCGJjY0HNiIgIUGZmpmek
Z21cH7RhfQCb7WBkaMRgMNw93LlcLqhfXl4ulUrBRgN2TxB4vH37ViaTjY2N
ffr0CZRyuRxcfP/+PRjA8PDwEIhQZIMDAwP9/f19fX29vb2glMn6BwcHa2/e
LigoKik+VlVVJRaL29vawIDB9Q8fZt5/sEXOwIfZBj0De2bBwHfpixq4b1Ix
Pj7xEQwDjGdiYgKMDbT5xdoMlJpt+t9Cyu/jTuW/EBbo6As+UX6r9aXF/zBM
/W/oTy5/lwM=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
B/VLJ2WijQQy3kqYaKvgN5Vz68t4jR/+D+qpCCg=
      "], {{0, 32}, {32, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 0}}, {0, 
      255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxt1mdUlFcaB/Cc3S/7cb/uyW5OshtPoq4ayyZGsUQUa0TBRkQQFFBD6Cgd
ZmCYwswwnelMn2F674XpBaZQpEhHrGAsiIsmyl7E9eyHPec39zz3vnf+9z1T
zvt8kVuclv+HTz75pPxPYEjLufVDWVlOdfqfweRsUfn1gqK8q0eLKvIK8sp2
5v4RLH7+4bVaN7bQ1jTBqACklQas1R/AaU1wOhgbYFSgvoXyUWMrFYKgNyOZ
MFQnHM1FYHhrQN3axgHgGF4zgrGmBcn8CEyhcPoHSEYziglGcARIAyOIBdam
YL0FxWptYyMwHFQ77yMklovC8tB4QRueh8JxgTYcH1i7CjbD0Z0fYDlAK6YT
hmYDLW2sNWtTcAnZvvp2NIGPIQqwJGE7QBbhyGIcWYTvkBBpEgJVDOApEhxZ
gqd0Ae0kMZYoBKejCQIMSQSgicI2ggCF5wNIHA8ABVgB6yCNQBWR6BIyowug
MKUUpqyDJe9gyahsBZOnZnBVdI4S1FSWgspWdrAUFKaczJCtITGkAJEhJdC7
8OA2/gsH7oomAetkpozWqaBzVCAKYPHVbIGmU6jlCHVcsUEgNfO7jFyxniPS
dQoBLYuvYfLAZhXYCdB5yjU0rpLKkb+nWCtoXAVYZwrU4F0ggScxgCiB1CiU
m8QKs0Rp7VI5ZBpHl8oGapHCIpKbAbCBJwGb9aDgSw0ciQ7olGiB1UKsBdgi
DQCm3C49X2YUykCgZTVQbZNpbXKdXaF3qAwujdmntXjVpm6V0aU0OAGwLtPa
pRor0KW2ABK1RaQy/w+TQGEEhEqjWGWWgJ0fAp0qYzeI0phdWku3zurW27xm
V8jSHTI6/Qa7z2D36u1endWjMXevUZtcgNLklBvscoPt/bhKprcBoFAYHeCq
2uzSrAZ6jA6f0ekzOT3mbp/V7bd5gk5/rzsQdfl6nN6I3QOEbN0Bi9NndgXM
zqDJEVg92unTrx7t0dncOlu31ubSWF1awObSO9wGhxfsAfut7qDdG3b4wk5f
uNsfcQd7PKGor6cv1NMfDCf84YQv3OcNxT2BXm8o5gglbJ6Y1RM1eXuN7h6z
N2rzxRz+uCMQtQZ6rP4eqzdi9UVsPhAYcfl7XIHe7mDUHYp5w/FAOBGM9IV7
BsLRgXBiKN4/GksM98aHI4nRcN9oIDYsN7nxAiWKJoRTeGiODM/TQIn8Ogyr
BsNswLGR4P/C0zDkVpk54AwP+Hv7A73xQHQgGBsMJYYiiaFoYjjWNwJi44N3
+kYmR8Zmb49M3R6dHhyb67k9RRfrSyDtDRR+dgX06KVCCF0Co8oziqDbj2fv
Oltw5hfI8czylIzin1uoVe0cikTvjg7GhsfiQ+MgChgcnR4anR6+MwNiRybu
3pl5MDM3PzX7aObe/MDYHENiyClrLmjAo4XG9ILq7HJYcSs1pxRRiWBvPZ5V
0s7Nh1C27svYvPdCEZZDdYVhAiWxSx8YnBibfQiiwDhx9xFIm777eObewuz9
J3cfP1t4+urug6dD4/e0tkBBOeRYZvG3J65sT7m4fmfqqZyqIxdLDqcVQPHC
I1nFRKXr+JWqzzYeXLftRNKFQozZTXOFkF1GutrRPzY7++jp3Pyz+/PPH84v
Pl54ufBkaeHp0pOXyy9e/u7wJFgyB3CrmXwhv/ZEZvnhU3m7D2Ylp16vR3Ph
eHFxHa4cRs25iTh6uXRbcsb3KZe3J19KK4RegbbXsqXNnUqaQD0y/ejpyzdP
F5d/XXz9/OXy0qvlpX+/fvX72ydPFqlcXSWSSxA5CUIHXe7lKL2dEiuRqSd0
6plyB5ZtzCpGkCTdtXhJVbugCiOoRYuheCWCrkWy5QSZqVPv0zljtycX7s0v
P36+/Gx5+dXvv715+/rN2ze/raxMTN6nCe04YTfbGEfw3UxDny4wbglPCQwx
W3Q2OPLA5BuSGsM6V7/SHheYonxzQuEet0UfhQYfhodmfP3jnuiEJzLhCo15
eiaDfbMDk/NzC68WX78D4W9XVgaG5wSankoYC0ZTYpWxdt0g1zUudM/i5XGZ
fyY09eL2vcWBqWexkceRgXtG75DKOaBwDZkj0/1TT+7+uvR4cfnewtLE/efx
sYeOnnFwVWbpU1riztDY2PTjt2/fuUOjEKx0667UpKPZLQL/TU6khhOqYAZr
OTGkfBAuCZJ1vQRFmKaJ63yT1Q3Y0mqkxBBkK90tRC6xU8DgSURSnd7uI7Al
OaVNhXWY61WIY+fziqpbmTzZ4uJSdGimGs7OuQHNvgG70SxuVw+3yWL1gt46
XgIqGaxkuBtZbhjXX0l25VUS1q/f8eXX3xXXYOkyT24prLSiMTc7v64WVgtB
5xbX7Nh7MuVE5snzuduTDt8oq8OQOiem788vvuoQ6lvxgppW2i00XxebU4bG
DdEHfOs4xzTCs40wdbdxwmA5xrBj/8WjqTlHT1/97sC5DoENRpTiKGImW6rS
e+QGd3d0RKLzd3a5cDwjhChpJktrUUy7O/LbyrtgYpgqUDe2sS4XQeWOAbE1
4ep7qPVOyx13xJYBgS7OkPqbO0x7D1+6WoG5dhOzfc/pulZ6C1GWV44qrifW
odgoqhj8vDF0NRQnRrE0EJKkFssrayLqLZ6VlZX5Zy84clNZPengsVwiTc+R
RfjmQYHljtgxKXaMCLQRkTZMlniPpV29CWOBhN3J53Ku1zXiZT830K9V4fPL
Wwsqmkuq0ZdvNGbkVeX9UpOZV5p+seB0Rr7VGVh8vjQ5PYei8I6eufr3dVvT
06+QmVqKwAYna6A4WT1W2NQubKOpsDx76rl8CJJOYCj2p5w/e6kERjPeQkvT
syv3HTy988CPe/ad2rXv9M7k9J0HTn1/MG13ypmzWYWx/lG7LSiVmcputSYl
p32z48CefSePpebsP/TTt0npm3cc3/yvY9t2p+45/FPWjcZDJ7JqmkiEjq69
B1KPnMyEYLqyCxF7DmX9kJJx7NTl9HMFx1NzwdF7D6bt2v9jesYV8Fh58/Zd
38BUpHfE4eoVy2wsno7GVoHOBAqnlVehcwtqUs9eS0o+u+XbIxu3Jq//Jvla
MayovHXDpu+/WLdl286Urzbt3rT9wK79p5KPXDyZng/Gz77Y9umnX3/++QYY
DP38xau371YGhqYSA+PRxJ1QdCQQHfH3Dvt7hj3h23ZPXGcJCGQWLFlcWYfN
vFJ58Pil/UcuJh1I/8tfN3z6t6//8eXmL9dtWb9hx8bNuzZs+WHTtkPAVxuT
NvxzV8qRMwyWaHh06v6jX/VGr1bvVuu6lfpVCp0LeF+DwinXuSQqN19qZ/D0
GLKoBkK4eqMmI7Pw3IXr6Weunz5dkJZ27ez5wvMXi37KLsvJr/65BFrTgMGR
uFIVeMz2hqJDNLqygyqndEhJNCmRJgUfL6FDApoxEl1MpIlW+zoqaKtAE6Uk
MRVEppQMGi2yCIvjIzCrUDgRlrja9ZFocipLzeCADmq1p1rtf1QWcKvNoHOG
UBqbyA1QSh2EXNtEAuogRKD2vZqmVXVQcl0zub6Z1NBMaoSSG5s7GmCUBlhH
E5wKviwYggFHsZDoThSG04blonFcLIGHI/HJNGnlTVRFBbKsHF5SgfilrLWw
FPZ/FZXDPyquQAAllUig9Caq/FbbzVttVdWYmtr22jocUN9AaGwiQaCUFhj9
P46rbxA=
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}]}], "}"}]], "Output",
 CellChangeTimes->{3.722434804481246*^9, 3.72243519258927*^9, 
  3.722438637103706*^9, 
  3.7224591862699747`*^9},ExpressionUUID->"76c3cc2b-ef60-4628-9afb-\
289c5262e397"]
}, Open  ]]
}, Open  ]],

Cell["\<\

\
\>", "Subtitle",
 CellChangeTimes->{{3.722439730222426*^9, 3.722439758283247*^9}, 
   3.722459558783186*^9, {3.7229558204325624`*^9, 
   3.7229558319365587`*^9}},ExpressionUUID->"8ee2f912-97c7-43d5-bd21-\
14dfc6beeb69"]
}, Open  ]]
},
WindowSize->{1397, 855},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (April 18, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 248, 6, 166, "Title", "ExpressionUUID" -> \
"38be4325-55f0-4fb7-aecc-5b616013a50d"],
Cell[CellGroupData[{
Cell[853, 32, 1061, 21, 429, "Chapter", "ExpressionUUID" -> \
"e0174c19-564c-45a3-bba1-1c0012751a5e"],
Cell[1917, 55, 996, 22, 105, "Input", "ExpressionUUID" -> \
"1d88d65a-9c8a-4d2d-96cd-7b400b2cd1f7"],
Cell[2916, 79, 1387, 36, 143, "Input", "ExpressionUUID" -> \
"1a73dcbe-df03-4891-8c57-111d388ae0cd"],
Cell[4306, 117, 1116379, 18310, 340, "Text", "ExpressionUUID" -> \
"c092710b-33a1-4425-bd7b-e4453b14d3cb"],
Cell[CellGroupData[{
Cell[1120710, 18431, 2610, 62, 549, "Input", "ExpressionUUID" -> \
"78e0de04-6239-44bb-a6cc-8f7241498857"],
Cell[1123323, 18495, 28246, 590, 260, "Output", "ExpressionUUID" -> \
"2534d886-1f27-4b8d-a614-a03cde27fb24"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1151606, 19090, 716, 17, 103, "Input", "ExpressionUUID" -> \
"89e33cb6-3235-4ab3-bb87-defd7daabac9"],
Cell[1152325, 19109, 27550, 576, 246, "Output", "ExpressionUUID" -> \
"41c31062-a559-408f-abb6-fbabca23ea7d"],
Cell[1179878, 19687, 174, 3, 30, "Output", "ExpressionUUID" -> \
"caa3efc6-8846-4bab-bcea-0e87cf9bd35b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1180089, 19695, 3513, 83, 385, "Input", "ExpressionUUID" -> \
"f1194439-08ea-4f7d-8a19-b68e2799b2fe"],
Cell[1183605, 19780, 297, 7, 22, "Print", "ExpressionUUID" -> \
"7473d007-9bc5-4196-a1cf-c199df387eac"]
}, Open  ]],
Cell[1183917, 19790, 517, 8, 50, "Input", "ExpressionUUID" -> \
"2176689d-12bd-4467-86e6-f56d51da6329"],
Cell[1184437, 19800, 5871, 113, 497, "Input", "ExpressionUUID" -> \
"d177f09c-1a1e-46c5-bb7e-0ade4a962a7e"],
Cell[CellGroupData[{
Cell[1190333, 19917, 1206, 29, 104, "Input", "ExpressionUUID" -> \
"41546604-b241-4eaa-ab0d-5bbd6a1c41fe"],
Cell[1191542, 19948, 16485, 343, 225, "Output", "ExpressionUUID" -> \
"9a31df3b-b3cd-45e6-bd0e-2f6468955050"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1208064, 20296, 198, 4, 50, "Input", "ExpressionUUID" -> \
"c68cf146-d332-4c56-a372-8d946c1e83a5"],
Cell[1208265, 20302, 1092, 19, 50, "Output", "ExpressionUUID" -> \
"04e1fe09-6de9-46bb-8106-6a2a08e45b92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1209394, 20326, 3746, 89, 589, "Input", "ExpressionUUID" -> \
"d76e176e-67c0-44dd-852e-2778777987e6"],
Cell[1213143, 20417, 16521, 337, 228, "Output", "ExpressionUUID" -> \
"2c3fb588-e05d-406e-a42a-64792647a6d2"]
}, Open  ]],
Cell[1229679, 20757, 3777, 83, 515, "Input", "ExpressionUUID" -> \
"c0c3b525-a473-41ce-959a-0c067ac6a5e1"],
Cell[CellGroupData[{
Cell[1233481, 20844, 1180, 30, 141, "Input", "ExpressionUUID" -> \
"b31172e0-6222-47ab-9da0-ffb4e3b6dc56"],
Cell[1234664, 20876, 372, 8, 22, "Print", "ExpressionUUID" -> \
"ddffe2dd-e006-4480-bd83-44728fdbf2fe"],
Cell[1235039, 20886, 16667, 346, 225, "Output", "ExpressionUUID" -> \
"139a074a-7ed1-4768-bdce-51c62915c32f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1251755, 21238, 1108, 21, 336, "Subtitle", "ExpressionUUID" -> \
"f693a5eb-bcd1-4c79-9899-d76ca8640249"],
Cell[CellGroupData[{
Cell[1252888, 21263, 705, 15, 105, "Input", "ExpressionUUID" -> \
"7d507978-3b53-4396-960e-9b4259946eee"],
Cell[1253596, 21280, 199518, 4483, 327, "Output", "ExpressionUUID" -> \
"3a05afa5-6ded-4dbc-8a00-6d2e8d3c4bc0"],
Cell[1453117, 25765, 202537, 4565, 327, "Output", "ExpressionUUID" -> \
"7c5db925-a554-48e1-9f7c-d93dc2056735"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1655691, 30335, 1583, 40, 218, "Input", "ExpressionUUID" -> \
"d9c7ddf2-c973-455d-89d1-64b288d3b3f8"],
Cell[1657277, 30377, 19895, 457, 80, "Output", "ExpressionUUID" -> \
"129e0d74-38ef-4f67-bd8a-f9429161cac0"],
Cell[1677175, 30836, 20747, 469, 80, "Output", "ExpressionUUID" -> \
"d515ecec-bf47-40d4-a2b8-9812df317580"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1697983, 31312, 550, 9, 67, "Title", "ExpressionUUID" -> \
"143c047b-c1f4-4610-8f5d-7f69079a0e22"],
Cell[CellGroupData[{
Cell[1698558, 31325, 799, 18, 582, "Chapter", "ExpressionUUID" -> \
"5357a7a0-f14e-4360-8c3e-eea812413d3e"],
Cell[CellGroupData[{
Cell[1699382, 31347, 1745, 49, 254, "Input", "ExpressionUUID" -> \
"1ebbdc4a-8715-42a8-b880-ec343e6e5561"],
Cell[1701130, 31398, 17565, 352, 87, "Output", "ExpressionUUID" -> \
"9a33e824-b3d9-4ee8-824e-b70db663f60e"]
}, Open  ]],
Cell[1718710, 31753, 18014, 358, 131, "Input", "ExpressionUUID" -> \
"4a67ac46-0ec3-4d3b-a3e1-77c0d45b1ee5"],
Cell[CellGroupData[{
Cell[1736749, 32115, 7069, 158, 1165, "Input", "ExpressionUUID" -> \
"bfefa32f-6c36-4add-bd3a-71cb1931053e"],
Cell[1743821, 32275, 26004, 544, 245, "Output", "ExpressionUUID" -> \
"d32bc2b5-f1a4-4e42-8e06-0a4854667f81"],
Cell[CellGroupData[{
Cell[1769850, 32823, 272, 7, 22, "Print", "ExpressionUUID" -> \
"67abb787-f31a-43f1-84ae-64185b3295c7"],
Cell[1770125, 32832, 451, 9, 22, "Print", "ExpressionUUID" -> \
"22dea9ca-6dda-44ba-b615-8b70e4b5b205"],
Cell[1770579, 32843, 272, 7, 22, "Print", "ExpressionUUID" -> \
"bc4b2e07-1093-4ca2-9ed9-89fde175b55d"],
Cell[1770854, 32852, 447, 9, 22, "Print", "ExpressionUUID" -> \
"161d9277-6557-4304-9b1e-b3863600f39b"],
Cell[1771304, 32863, 272, 7, 22, "Print", "ExpressionUUID" -> \
"ae3729e8-5885-4621-a118-7826b1798b8d"],
Cell[1771579, 32872, 451, 9, 22, "Print", "ExpressionUUID" -> \
"d0ca67b2-679e-41e5-b81d-ea7308d0c499"],
Cell[1772033, 32883, 269, 6, 22, "Print", "ExpressionUUID" -> \
"b26496a7-7896-406e-a3cb-17f5f57b3c51"],
Cell[1772305, 32891, 449, 9, 22, "Print", "ExpressionUUID" -> \
"ecd81388-1926-4f4c-87a2-c9370ab570c7"],
Cell[1772757, 32902, 269, 6, 22, "Print", "ExpressionUUID" -> \
"69162a02-f6e1-4f01-b3c4-f893dde719d4"],
Cell[1773029, 32910, 508, 11, 22, "Print", "ExpressionUUID" -> \
"4f096be8-8938-4582-91c1-1687b15aa562"],
Cell[1773540, 32923, 269, 6, 22, "Print", "ExpressionUUID" -> \
"aaac3592-880d-4095-a5d6-eaeb2188b676"],
Cell[1773812, 32931, 482, 10, 22, "Print", "ExpressionUUID" -> \
"81ef48fb-4f87-46b9-bd6f-3ba8b51182c0"],
Cell[1774297, 32943, 272, 7, 22, "Print", "ExpressionUUID" -> \
"7e191ed2-8613-4b9f-9d7e-b62a4c9432ea"],
Cell[1774572, 32952, 512, 11, 22, "Print", "ExpressionUUID" -> \
"0e6e7698-47c9-4608-9e6c-3040929bb294"],
Cell[1775087, 32965, 272, 7, 22, "Print", "ExpressionUUID" -> \
"abb47335-86b2-4ea8-b986-66a7156e233e"],
Cell[1775362, 32974, 444, 8, 22, "Print", "ExpressionUUID" -> \
"5381fe3a-df37-44e7-8763-b28fd13711aa"],
Cell[1775809, 32984, 272, 7, 22, "Print", "ExpressionUUID" -> \
"a1d28d1c-d861-4d33-87a7-afa10ed5c86b"],
Cell[1776084, 32993, 508, 11, 22, "Print", "ExpressionUUID" -> \
"41c15618-2419-4844-9890-24bdd1ea2314"],
Cell[1776595, 33006, 274, 7, 22, "Print", "ExpressionUUID" -> \
"7ab60c53-ae4a-41c9-9568-60f1e87fe126"],
Cell[1776872, 33015, 484, 10, 22, "Print", "ExpressionUUID" -> \
"1f787612-f95a-4cc2-bd82-e056f790389f"],
Cell[1777359, 33027, 271, 6, 22, "Print", "ExpressionUUID" -> \
"bf6fa520-76bd-49d8-9cf3-35947d80b0b9"],
Cell[1777633, 33035, 510, 11, 22, "Print", "ExpressionUUID" -> \
"1503ad52-56d1-4a16-93db-a207d66b927e"],
Cell[1778146, 33048, 274, 7, 22, "Print", "ExpressionUUID" -> \
"491efab3-818e-45a7-bce5-728a48dca581"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1778469, 33061, 980, 26, 160, "Input", "ExpressionUUID" -> \
"aac6be73-16eb-4a87-af62-998f9cdf9faa"],
Cell[1779452, 33089, 326, 8, 22, "Print", "ExpressionUUID" -> \
"fc7da6ce-585f-4e5b-9756-0a5ac016f74e"],
Cell[1779781, 33099, 16094, 330, 225, "Output", "ExpressionUUID" -> \
"18fc9f3d-5682-4e14-b109-e566d86070df"]
}, Open  ]],
Cell[1795890, 33432, 144, 2, 50, "Input", "ExpressionUUID" -> \
"74015a23-a097-4690-a62d-9a0ef1ca20b2"],
Cell[1796037, 33436, 283023, 4653, 324, "Text", "ExpressionUUID" -> \
"09e6a146-0a6c-4b32-9610-93777be838bd"],
Cell[CellGroupData[{
Cell[2079085, 38093, 6533, 155, 1238, "Input", "ExpressionUUID" -> \
"7a1afb40-2a63-4e66-ae93-a5325e258a0a"],
Cell[2085621, 38250, 32255, 675, 290, "Output", "ExpressionUUID" -> \
"75d8039e-576d-4a4c-be9c-14492ebc6eef"],
Cell[CellGroupData[{
Cell[2117901, 38929, 250, 7, 22, "Print", "ExpressionUUID" -> \
"c3399772-8804-4e09-9d66-fb5abd54fed8"],
Cell[2118154, 38938, 427, 9, 22, "Print", "ExpressionUUID" -> \
"aafbfe94-48cf-4a2e-b0b7-89006e299769"],
Cell[2118584, 38949, 250, 7, 22, "Print", "ExpressionUUID" -> \
"b7828eca-347b-4cfe-a536-bb1a9ddb8ed1"],
Cell[2118837, 38958, 421, 9, 22, "Print", "ExpressionUUID" -> \
"e8eaf260-ea0e-4b7e-b96c-b6536a9b3526"],
Cell[2119261, 38969, 252, 7, 22, "Print", "ExpressionUUID" -> \
"e0704a2e-d749-4332-a92d-0972726c2b82"],
Cell[2119516, 38978, 431, 9, 22, "Print", "ExpressionUUID" -> \
"095634d8-cb57-451d-8387-73fb1faf5565"],
Cell[2119950, 38989, 250, 7, 22, "Print", "ExpressionUUID" -> \
"f82d043c-d46f-4c15-876c-9bf2667c4ba3"],
Cell[2120203, 38998, 425, 9, 22, "Print", "ExpressionUUID" -> \
"7a6b54d5-71f0-4080-b41d-06499f58e00e"],
Cell[2120631, 39009, 250, 7, 22, "Print", "ExpressionUUID" -> \
"76885355-467b-45e7-a44e-2867be713e50"],
Cell[2120884, 39018, 449, 9, 22, "Print", "ExpressionUUID" -> \
"07264bf3-36cb-4577-aad9-7f065701de88"],
Cell[2121336, 39029, 250, 7, 22, "Print", "ExpressionUUID" -> \
"3fe728ba-3f23-47d1-a516-0758e215d467"],
Cell[2121589, 39038, 457, 10, 22, "Print", "ExpressionUUID" -> \
"3ee8b25f-010a-4fba-8b23-1dc418fcb92d"],
Cell[2122049, 39050, 252, 7, 22, "Print", "ExpressionUUID" -> \
"773dd2fc-c173-475e-a3ec-dc796e34c0eb"],
Cell[2122304, 39059, 431, 9, 22, "Print", "ExpressionUUID" -> \
"4b69c60e-d020-40d3-b6f8-4369c3639493"],
Cell[2122738, 39070, 252, 7, 22, "Print", "ExpressionUUID" -> \
"dbe005ac-d772-45e4-a3d1-da683b3484ac"],
Cell[2122993, 39079, 457, 10, 22, "Print", "ExpressionUUID" -> \
"b5eb44f6-8560-4acd-8836-9627d9fb8a41"],
Cell[2123453, 39091, 250, 7, 22, "Print", "ExpressionUUID" -> \
"4e8eb2af-73e1-4b8c-84a3-56af7e049a5b"],
Cell[2123706, 39100, 425, 9, 22, "Print", "ExpressionUUID" -> \
"9b8cbb36-716f-444b-aa3b-4feeb4bd0d8b"],
Cell[2124134, 39111, 252, 7, 22, "Print", "ExpressionUUID" -> \
"77b5ca8e-5404-4611-a2a0-23e6ce07f405"],
Cell[2124389, 39120, 423, 9, 22, "Print", "ExpressionUUID" -> \
"b1d01b7c-5925-41f3-aa84-7a84a638452f"],
Cell[2124815, 39131, 252, 7, 22, "Print", "ExpressionUUID" -> \
"1746128e-785e-4b94-baed-e48f1dd3549a"],
Cell[2125070, 39140, 431, 9, 22, "Print", "ExpressionUUID" -> \
"54d4b680-8015-4153-a244-cbe5f6c92950"],
Cell[2125504, 39151, 254, 7, 22, "Print", "ExpressionUUID" -> \
"de6add39-994c-43cf-9065-e54e1af57516"],
Cell[2125761, 39160, 429, 9, 22, "Print", "ExpressionUUID" -> \
"f49e530a-2497-4c93-a5a4-f40d9455583a"],
Cell[2126193, 39171, 252, 7, 22, "Print", "ExpressionUUID" -> \
"4501c068-78d0-4530-9d5c-f5a48f4cdc96"],
Cell[2126448, 39180, 429, 9, 22, "Print", "ExpressionUUID" -> \
"772d26b1-6809-4c45-a15e-4aeb92a0a2ca"],
Cell[2126880, 39191, 254, 7, 22, "Print", "ExpressionUUID" -> \
"b33316bb-f885-4552-b934-cbe14808b82e"],
Cell[2127137, 39200, 421, 8, 22, "Print", "ExpressionUUID" -> \
"40b1560f-b6b3-42da-bf2b-c223dbe1427c"],
Cell[2127561, 39210, 252, 7, 22, "Print", "ExpressionUUID" -> \
"f23d4735-d5b1-4879-a4fe-58ddfef8743a"],
Cell[2127816, 39219, 425, 9, 22, "Print", "ExpressionUUID" -> \
"749cad86-0ea3-4338-87ca-5caca3cd953c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2128290, 39234, 1005, 27, 181, "Input", "ExpressionUUID" -> \
"1f90abee-5f7a-4c01-9ca5-a7d46c8fa1c0"],
Cell[2129298, 39263, 298, 8, 22, "Print", "ExpressionUUID" -> \
"2275cb02-e90d-4512-8ef0-5314695494d5"],
Cell[2129599, 39273, 16450, 335, 228, "Output", "ExpressionUUID" -> \
"b263c37c-8b47-4b93-b5a7-fb6bc9735498"]
}, Open  ]],
Cell[2146064, 39611, 3014, 71, 699, "Input", "ExpressionUUID" -> \
"a1c0c1c5-92fc-47cb-b3e1-8ac5f0608996"],
Cell[2149081, 39684, 194799, 3207, 247, "Text", "ExpressionUUID" -> \
"967ad006-dfa9-424e-bef4-74716f404d88"],
Cell[CellGroupData[{
Cell[2343905, 42895, 4185, 92, 589, "Input", "ExpressionUUID" -> \
"b10250a9-6e35-4c49-ad18-481cc48321df"],
Cell[CellGroupData[{
Cell[2348115, 42991, 341, 8, 22, "Print", "ExpressionUUID" -> \
"4b0dbfd0-c25d-4e26-8748-c570bcd2bf27"],
Cell[2348459, 43001, 540, 10, 22, "Print", "ExpressionUUID" -> \
"cf306ed9-a14f-4250-a040-aee63f84239f"],
Cell[2349002, 43013, 341, 8, 22, "Print", "ExpressionUUID" -> \
"586f4cb4-d4f8-4541-84d6-43820233b34e"],
Cell[2349346, 43023, 549, 11, 22, "Print", "ExpressionUUID" -> \
"bd3f82ba-bf3c-4664-88cb-0e8bb7008159"],
Cell[2349898, 43036, 343, 8, 22, "Print", "ExpressionUUID" -> \
"7dd5d070-d639-443f-bcef-949e3d2e5f0a"],
Cell[2350244, 43046, 608, 13, 22, "Print", "ExpressionUUID" -> \
"174971dd-6f46-4373-b554-60f3678a87dc"],
Cell[2350855, 43061, 341, 8, 22, "Print", "ExpressionUUID" -> \
"b6bd7c8a-8a66-4584-94fe-7d3c9f1b8bdb"],
Cell[2351199, 43071, 581, 12, 22, "Print", "ExpressionUUID" -> \
"58a1309e-c589-433b-96e8-399b7bd7480a"],
Cell[2351783, 43085, 341, 8, 22, "Print", "ExpressionUUID" -> \
"48c48c23-db0e-4f2b-ab2d-df842954b650"],
Cell[2352127, 43095, 549, 11, 22, "Print", "ExpressionUUID" -> \
"c0fc837c-63d7-491a-99c5-ba01a22c6e6b"],
Cell[2352679, 43108, 341, 8, 22, "Print", "ExpressionUUID" -> \
"d812c57d-5663-4ed0-82b7-88698dd5418a"],
Cell[2353023, 43118, 551, 11, 22, "Print", "ExpressionUUID" -> \
"beeab7ec-feb3-4b03-ac8f-149b74c7d03e"],
Cell[2353577, 43131, 341, 8, 22, "Print", "ExpressionUUID" -> \
"96fea926-8ec1-4691-91a7-0f3d138dd6af"],
Cell[2353921, 43141, 543, 10, 22, "Print", "ExpressionUUID" -> \
"edf071e5-72e1-4cfb-a437-def3df25afd3"],
Cell[2354467, 43153, 341, 8, 22, "Print", "ExpressionUUID" -> \
"ad5eecc4-8594-4c1b-b0fb-341a8336ccf5"],
Cell[2354811, 43163, 576, 11, 22, "Print", "ExpressionUUID" -> \
"eb9e24da-7cf5-4497-8557-e87b72d0ba16"],
Cell[2355390, 43176, 341, 8, 22, "Print", "ExpressionUUID" -> \
"4156c255-95aa-4295-a383-c02e0745059d"],
Cell[2355734, 43186, 608, 13, 22, "Print", "ExpressionUUID" -> \
"dc8d5c6f-80e4-45f0-b2b5-707335ce4ab2"],
Cell[2356345, 43201, 340, 7, 22, "Print", "ExpressionUUID" -> \
"0a5d215a-6f05-4b3b-9f92-b88dc7b038c2"],
Cell[2356688, 43210, 579, 12, 22, "Print", "ExpressionUUID" -> \
"dce4e7d4-54a7-44a8-a659-6992270d17e7"],
Cell[2357270, 43224, 343, 8, 22, "Print", "ExpressionUUID" -> \
"3f8575a7-fa34-4712-95a2-e301b3551fa0"],
Cell[2357616, 43234, 579, 12, 22, "Print", "ExpressionUUID" -> \
"bb87b133-de6f-4af4-97bc-f0f34d13ca52"],
Cell[2358198, 43248, 343, 8, 22, "Print", "ExpressionUUID" -> \
"228d41b0-664e-4efb-b8f6-8ece45577a69"],
Cell[2358544, 43258, 571, 11, 22, "Print", "ExpressionUUID" -> \
"81cd5548-9d05-4c06-8117-f277a3fcb7a1"],
Cell[2359118, 43271, 345, 8, 22, "Print", "ExpressionUUID" -> \
"1f86f6d5-fab4-475a-a2e0-c74289bbd281"],
Cell[2359466, 43281, 576, 12, 22, "Print", "ExpressionUUID" -> \
"d81683d7-ba90-4082-914c-fba8bcca2325"],
Cell[2360045, 43295, 345, 8, 22, "Print", "ExpressionUUID" -> \
"c61f75e0-023c-479a-8212-9511a8f8fc31"],
Cell[2360393, 43305, 542, 10, 22, "Print", "ExpressionUUID" -> \
"d5379b17-d146-42dc-85da-e3a423de1dcc"],
Cell[2360938, 43317, 340, 7, 22, "Print", "ExpressionUUID" -> \
"98962af7-facc-42dc-9e46-5dbf8c082850"],
Cell[2361281, 43326, 576, 12, 22, "Print", "ExpressionUUID" -> \
"48b36b76-968c-4384-bb4e-0772d0b5c8cb"],
Cell[2361860, 43340, 343, 8, 22, "Print", "ExpressionUUID" -> \
"720048b9-dba0-4ae0-875e-fe4d99eccbb3"],
Cell[2362206, 43350, 576, 12, 22, "Print", "ExpressionUUID" -> \
"5be64e58-a38e-4129-bba8-9cbfe9b826c8"],
Cell[2362785, 43364, 343, 8, 22, "Print", "ExpressionUUID" -> \
"2f451cf3-0189-43a4-9963-b422e6b61e85"],
Cell[2363131, 43374, 610, 13, 22, "Print", "ExpressionUUID" -> \
"b2c1d00e-3914-4973-b8ff-7cbad0a88194"],
Cell[2363744, 43389, 343, 8, 22, "Print", "ExpressionUUID" -> \
"aeb361b5-59de-4816-9364-4ddb454e8fc1"],
Cell[2364090, 43399, 576, 12, 22, "Print", "ExpressionUUID" -> \
"1816b05d-0184-4be6-a808-4f13688eea79"],
Cell[2364669, 43413, 345, 8, 22, "Print", "ExpressionUUID" -> \
"bc9a116c-ed82-4662-975a-ff35f12458ed"],
Cell[2365017, 43423, 576, 12, 22, "Print", "ExpressionUUID" -> \
"689891d4-90ed-4b6c-a577-3ad0b1c7ed45"],
Cell[2365596, 43437, 345, 8, 22, "Print", "ExpressionUUID" -> \
"b4e80873-506a-47f2-81ce-e55f45c2001f"],
Cell[2365944, 43447, 544, 10, 22, "Print", "ExpressionUUID" -> \
"84408360-e3e7-4fc0-b08b-d3abd42f0176"],
Cell[2366491, 43459, 345, 8, 22, "Print", "ExpressionUUID" -> \
"0abf8c39-4c62-4d28-84d3-63f7cbf489ec"],
Cell[2366839, 43469, 547, 10, 22, "Print", "ExpressionUUID" -> \
"38ea1752-2f4f-4235-8f38-f5435699c4c9"],
Cell[2367389, 43481, 345, 8, 22, "Print", "ExpressionUUID" -> \
"393cca26-10bb-4939-8849-5f85e1ca79d2"],
Cell[2367737, 43491, 609, 13, 22, "Print", "ExpressionUUID" -> \
"cc294500-230a-4f20-bb72-b254c53a1baf"],
Cell[2368349, 43506, 345, 8, 22, "Print", "ExpressionUUID" -> \
"7b4f3291-852f-4874-92fa-72833fb0cfae"],
Cell[2368697, 43516, 581, 12, 22, "Print", "ExpressionUUID" -> \
"1db640e4-558a-49fc-8ff7-7baa1d1d2785"],
Cell[2369281, 43530, 343, 8, 22, "Print", "ExpressionUUID" -> \
"6de47381-f07c-41bb-a5b6-6319c83d1e53"],
Cell[2369627, 43540, 581, 12, 22, "Print", "ExpressionUUID" -> \
"93f2900c-3b14-401d-99e0-a0b897d947ec"],
Cell[2370211, 43554, 345, 8, 22, "Print", "ExpressionUUID" -> \
"e23522d5-5178-416e-b3bb-37a8b9d39850"],
Cell[2370559, 43564, 578, 12, 22, "Print", "ExpressionUUID" -> \
"b6bb013e-947d-4ec5-9c91-6cd7ecf4b2ac"],
Cell[2371140, 43578, 345, 8, 22, "Print", "ExpressionUUID" -> \
"95ddd306-e7e5-4843-b1ba-6bf4d31844f2"],
Cell[2371488, 43588, 544, 10, 22, "Print", "ExpressionUUID" -> \
"80b78ac7-77dc-4b90-8b6c-c496064616ba"],
Cell[2372035, 43600, 343, 8, 22, "Print", "ExpressionUUID" -> \
"64152a26-706a-4137-9661-cf287c9877c9"],
Cell[2372381, 43610, 609, 13, 22, "Print", "ExpressionUUID" -> \
"c860a3e2-ccf0-41fe-bb95-16b2be225151"],
Cell[2372993, 43625, 340, 7, 22, "Print", "ExpressionUUID" -> \
"ee3a0767-2ed1-433f-923c-aa1c2d8b658e"],
Cell[2373336, 43634, 609, 13, 22, "Print", "ExpressionUUID" -> \
"50e41628-839f-4e36-b098-bb96b5a6c77f"],
Cell[2373948, 43649, 345, 8, 22, "Print", "ExpressionUUID" -> \
"1b5c385c-c1a7-4525-b654-fe55ef123aca"],
Cell[2374296, 43659, 578, 12, 22, "Print", "ExpressionUUID" -> \
"208def7d-a8f7-4436-a94c-4be7146f8d22"],
Cell[2374877, 43673, 343, 8, 22, "Print", "ExpressionUUID" -> \
"ec765a77-7b2c-4f7e-95ec-cdfd89044676"],
Cell[2375223, 43683, 578, 12, 22, "Print", "ExpressionUUID" -> \
"07513475-7b54-40c8-9038-025615265d04"],
Cell[2375804, 43697, 345, 8, 22, "Print", "ExpressionUUID" -> \
"976f94a0-f948-4338-ba73-66a8e99e2754"],
Cell[2376152, 43707, 574, 12, 22, "Print", "ExpressionUUID" -> \
"58f70c32-7c09-424e-bfbf-7d40e651623d"],
Cell[2376729, 43721, 343, 8, 22, "Print", "ExpressionUUID" -> \
"2a3448be-148d-48d2-a4f9-ef763f8066a6"],
Cell[2377075, 43731, 544, 10, 22, "Print", "ExpressionUUID" -> \
"61bde1f7-d266-489c-8c76-980ac4add93c"],
Cell[2377622, 43743, 343, 8, 22, "Print", "ExpressionUUID" -> \
"175ccb9c-2005-4d3b-be48-1028fdb9f491"],
Cell[2377968, 43753, 544, 10, 22, "Print", "ExpressionUUID" -> \
"3074dacc-6ccf-4e7d-9633-09c97edd676a"],
Cell[2378515, 43765, 343, 8, 22, "Print", "ExpressionUUID" -> \
"7d74b690-ba80-4b10-b749-9564adbbb517"],
Cell[2378861, 43775, 609, 13, 22, "Print", "ExpressionUUID" -> \
"82f36262-58e8-4bbc-83e5-9d746b8bcd60"],
Cell[2379473, 43790, 343, 8, 22, "Print", "ExpressionUUID" -> \
"e40f9a0e-556a-411e-9997-bc6f1d31d0f0"],
Cell[2379819, 43800, 578, 12, 22, "Print", "ExpressionUUID" -> \
"d5e768e4-7afa-4eac-a0c8-c971e93f2d79"],
Cell[2380400, 43814, 345, 8, 22, "Print", "ExpressionUUID" -> \
"c9aec02e-6707-41cd-8c9a-82cda35c1b6a"],
Cell[2380748, 43824, 574, 12, 22, "Print", "ExpressionUUID" -> \
"373f9c02-e182-4657-ac77-87337d4222b5"],
Cell[2381325, 43838, 343, 8, 22, "Print", "ExpressionUUID" -> \
"fb99437f-4407-4f67-acd3-ab1edc18f7d4"],
Cell[2381671, 43848, 609, 13, 22, "Print", "ExpressionUUID" -> \
"4b7add75-7530-4baa-992c-129e22c1fed6"],
Cell[2382283, 43863, 343, 8, 22, "Print", "ExpressionUUID" -> \
"8e3b4274-383a-4b38-b955-55dcd0a9b0ac"],
Cell[2382629, 43873, 578, 12, 22, "Print", "ExpressionUUID" -> \
"0c9affc5-9f29-48f0-a03b-5551385fbbbd"],
Cell[2383210, 43887, 345, 8, 22, "Print", "ExpressionUUID" -> \
"1b1ba451-2308-460b-8750-4e6434de5f33"],
Cell[2383558, 43897, 576, 12, 22, "Print", "ExpressionUUID" -> \
"7bb340b4-a907-4258-873d-8908ade1eae4"],
Cell[2384137, 43911, 343, 8, 22, "Print", "ExpressionUUID" -> \
"3020d4ff-8c81-4104-9c23-0abfad79421e"],
Cell[2384483, 43921, 578, 12, 22, "Print", "ExpressionUUID" -> \
"d2d217df-dd8e-4df5-8cae-884f4bc0b15f"],
Cell[2385064, 43935, 343, 8, 22, "Print", "ExpressionUUID" -> \
"8c6af0e0-178b-4a8a-8c63-fe2a00c66b61"],
Cell[2385410, 43945, 575, 11, 22, "Print", "ExpressionUUID" -> \
"07d8c68f-dbaa-4e4f-81ab-af9d7f052cad"],
Cell[2385988, 43958, 343, 8, 22, "Print", "ExpressionUUID" -> \
"33eab3c3-dc01-4beb-9ea4-3c3e1d3a1088"],
Cell[2386334, 43968, 606, 12, 22, "Print", "ExpressionUUID" -> \
"0cd5f6d6-d8b5-4add-8b5a-09aae7f70b5f"],
Cell[2386943, 43982, 345, 8, 22, "Print", "ExpressionUUID" -> \
"ee36648e-faa0-4f84-bbfb-4253d7226153"],
Cell[2387291, 43992, 578, 12, 22, "Print", "ExpressionUUID" -> \
"f56c9bc7-3585-4064-9aed-2a366c4498d0"],
Cell[2387872, 44006, 340, 7, 22, "Print", "ExpressionUUID" -> \
"770255a3-848c-4991-8fb7-bf4aea378fdd"],
Cell[2388215, 44015, 581, 12, 22, "Print", "ExpressionUUID" -> \
"2aed4957-ad86-43be-a12d-0704af55de84"],
Cell[2388799, 44029, 345, 8, 22, "Print", "ExpressionUUID" -> \
"1492d5d3-4a06-49b6-8db6-53cd856e2861"],
Cell[2389147, 44039, 581, 12, 22, "Print", "ExpressionUUID" -> \
"65273dfe-754b-42d8-b9b8-0c8b64cdeef9"],
Cell[2389731, 44053, 345, 8, 22, "Print", "ExpressionUUID" -> \
"184c9e68-ca3c-4890-abed-46e6b81efacc"],
Cell[2390079, 44063, 608, 12, 22, "Print", "ExpressionUUID" -> \
"62012547-87b4-4c75-b5a3-f64e0da18492"],
Cell[2390690, 44077, 343, 8, 22, "Print", "ExpressionUUID" -> \
"c3745621-ad3f-4005-adbf-5da98d496e66"],
Cell[2391036, 44087, 585, 12, 22, "Print", "ExpressionUUID" -> \
"48358bb1-1efd-4ed3-9558-8da5090ea0d9"],
Cell[2391624, 44101, 343, 8, 22, "Print", "ExpressionUUID" -> \
"6b4a0c53-149d-4acd-88bb-45d37f3bb3b8"],
Cell[2391970, 44111, 569, 12, 22, "Print", "ExpressionUUID" -> \
"ae630581-559f-4d52-ab70-82c7af6ee8a6"],
Cell[2392542, 44125, 343, 8, 22, "Print", "ExpressionUUID" -> \
"0a0b85ac-8e8f-42c4-8aba-037eae0c9784"],
Cell[2392888, 44135, 510, 10, 22, "Print", "ExpressionUUID" -> \
"77d6e6ba-a565-42f4-8251-140d78885e0a"],
Cell[2393401, 44147, 343, 8, 22, "Print", "ExpressionUUID" -> \
"80e20c74-1182-4ea3-9a44-056caff16f36"],
Cell[2393747, 44157, 508, 10, 22, "Print", "ExpressionUUID" -> \
"e9f81428-905a-482e-b870-794e30d5ed06"],
Cell[2394258, 44169, 343, 8, 22, "Print", "ExpressionUUID" -> \
"ed1672d9-8102-452c-a3a0-b9c0693681fb"],
Cell[2394604, 44179, 571, 12, 22, "Print", "ExpressionUUID" -> \
"4b418479-6973-4058-a9e4-570632a4eaff"],
Cell[2395178, 44193, 343, 8, 22, "Print", "ExpressionUUID" -> \
"bc9d8f5f-b847-4bec-a75a-38d7f2e9ad30"],
Cell[2395524, 44203, 539, 11, 22, "Print", "ExpressionUUID" -> \
"85eb9933-362e-45e6-a647-2c3a4fd139ee"],
Cell[2396066, 44216, 345, 8, 22, "Print", "ExpressionUUID" -> \
"1d9d1d02-da29-4334-aa84-e7afd0d29ba9"],
Cell[2396414, 44226, 566, 11, 22, "Print", "ExpressionUUID" -> \
"a2a9512e-78ed-402e-903b-5639ed0f2b18"],
Cell[2396983, 44239, 343, 8, 22, "Print", "ExpressionUUID" -> \
"ca6d6bc6-456f-4783-9d1c-a7a0022e5d85"],
Cell[2397329, 44249, 571, 12, 22, "Print", "ExpressionUUID" -> \
"446c2bae-dbb3-4e88-9146-9b658ae1f86c"],
Cell[2397903, 44263, 343, 8, 22, "Print", "ExpressionUUID" -> \
"88ece935-c415-4be6-9987-5432ca0f7dd7"],
Cell[2398249, 44273, 536, 10, 22, "Print", "ExpressionUUID" -> \
"253e6344-53cb-4bc9-8873-f5d6743f625a"],
Cell[2398788, 44285, 345, 8, 22, "Print", "ExpressionUUID" -> \
"b38fc54e-91e9-440d-b0c0-c0aee305a008"],
Cell[2399136, 44295, 571, 12, 22, "Print", "ExpressionUUID" -> \
"42af5fba-4996-4dbb-8464-72d6d95db2ca"],
Cell[2399710, 44309, 343, 8, 22, "Print", "ExpressionUUID" -> \
"0b31ed34-a0b7-4519-8f05-d974a9c13389"],
Cell[2400056, 44319, 571, 12, 22, "Print", "ExpressionUUID" -> \
"ae14e579-b963-4862-9dc2-2bf0d4db6840"],
Cell[2400630, 44333, 343, 8, 22, "Print", "ExpressionUUID" -> \
"be5e8d66-5004-4b5b-b83d-7684d6df9bde"],
Cell[2400976, 44343, 539, 11, 22, "Print", "ExpressionUUID" -> \
"f1f1f202-7587-486c-8947-44c7c4997079"],
Cell[2401518, 44356, 345, 8, 22, "Print", "ExpressionUUID" -> \
"a179d1bd-49a4-484b-b6da-2412b3b84bc2"],
Cell[2401866, 44366, 541, 11, 22, "Print", "ExpressionUUID" -> \
"cf09fe7f-af26-472b-b500-222e6d6d9c5f"],
Cell[2402410, 44379, 343, 8, 22, "Print", "ExpressionUUID" -> \
"1efb285f-db2e-4dec-952c-451242c9d8fa"],
Cell[2402756, 44389, 539, 11, 22, "Print", "ExpressionUUID" -> \
"d6044c54-20ea-40be-a1d8-48d8de50dbad"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2403344, 44406, 981, 26, 122, "Input", "ExpressionUUID" -> \
"cda32630-1f41-4058-bb01-4c7528897d85"],
Cell[2404328, 44434, 298, 8, 22, "Print", "ExpressionUUID" -> \
"18e771f3-387b-403c-81e7-ab854a43b9de"],
Cell[2404629, 44444, 17794, 365, 225, "Output", "ExpressionUUID" -> \
"8fb049f4-cb3a-40f6-9e72-d8ed3c7b89c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2422460, 44814, 824, 17, 122, "Input", "ExpressionUUID" -> \
"16da4410-4065-4313-973a-37ddf93469ef"],
Cell[2423287, 44833, 208709, 4578, 321, "Output", "ExpressionUUID" -> \
"0c8e5adb-6fe4-4028-973c-205fa12bc625"],
Cell[2631999, 49413, 253087, 5401, 321, "Output", "ExpressionUUID" -> \
"28c92a16-e29c-4ac7-a234-8e80268950db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2885123, 54819, 3565, 82, 772, "Input", "ExpressionUUID" -> \
"738253d1-06fb-4db6-913c-c8022e84854a"],
Cell[2888691, 54903, 38960, 812, 335, "Output", "ExpressionUUID" -> \
"5dc44749-4700-49b3-8af9-73db8ff5103e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2927688, 55720, 3268, 74, 552, "Input", "ExpressionUUID" -> \
"ff1c8a4c-a8a6-4286-a45c-6cdc93a47702"],
Cell[CellGroupData[{
Cell[2930981, 55798, 394, 9, 22, "Print", "ExpressionUUID" -> \
"caaa6ae6-118c-460b-b2ed-2cf678fb50df"],
Cell[2931378, 55809, 571, 11, 22, "Print", "ExpressionUUID" -> \
"518b0df3-587c-40a6-b8d6-4b04d97e5c24"],
Cell[2931952, 55822, 396, 9, 22, "Print", "ExpressionUUID" -> \
"9edfc8b6-5db6-43db-bd45-a16553fbf6af"],
Cell[2932351, 55833, 629, 13, 22, "Print", "ExpressionUUID" -> \
"8e30e86e-66f7-482e-91b2-71087a1f9809"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2933029, 55852, 1213, 31, 162, "Input", "ExpressionUUID" -> \
"f4e9d9f5-bf0a-49d6-a751-4de0029b88f2"],
Cell[2934245, 55885, 420, 10, 22, "Print", "ExpressionUUID" -> \
"19a3f77b-d82d-45c9-87be-9bc27f737de8"],
Cell[2934668, 55897, 16544, 338, 225, "Output", "ExpressionUUID" -> \
"e1d2a830-d740-48ff-bdc5-8bef8af5847a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2951261, 56241, 266, 7, 91, "Subtitle", "ExpressionUUID" -> \
"74577e02-6c5e-49eb-a397-5be3b29fd5b5"],
Cell[CellGroupData[{
Cell[2951552, 56252, 4820, 113, 682, "Input", "ExpressionUUID" -> \
"319c8479-539f-44de-a65a-83836955e43b"],
Cell[CellGroupData[{
Cell[2956397, 56369, 504, 10, 22, "Print", "ExpressionUUID" -> \
"64aa72d7-ab94-4234-a70e-5ed3f7f7b86a"],
Cell[2956904, 56381, 683, 12, 22, "Print", "ExpressionUUID" -> \
"bb8d00ed-8ceb-4d00-adf0-d39db9b7cea5"],
Cell[2957590, 56395, 504, 10, 22, "Print", "ExpressionUUID" -> \
"d133675a-2933-456b-b277-f5338a16b321"],
Cell[2958097, 56407, 706, 12, 22, "Print", "ExpressionUUID" -> \
"b14da69d-719f-4ca4-b840-0087e27ff461"],
Cell[2958806, 56421, 504, 10, 22, "Print", "ExpressionUUID" -> \
"f59679af-1939-4024-a10a-693be39add15"],
Cell[2959313, 56433, 685, 12, 22, "Print", "ExpressionUUID" -> \
"03bbabeb-9838-4636-8427-0030e6e6fec7"],
Cell[2960001, 56447, 504, 10, 22, "Print", "ExpressionUUID" -> \
"55689273-e58a-4a33-89e2-70311f444f13"],
Cell[2960508, 56459, 742, 14, 22, "Print", "ExpressionUUID" -> \
"61c85aeb-e4f7-4511-9a04-c60fde0cf019"],
Cell[2961253, 56475, 504, 10, 22, "Print", "ExpressionUUID" -> \
"ea0eac89-68c9-47bf-8313-05e41a127e57"],
Cell[2961760, 56487, 771, 15, 22, "Print", "ExpressionUUID" -> \
"ba344d19-666e-4f85-ac52-6133836873f8"],
Cell[2962534, 56504, 504, 10, 22, "Print", "ExpressionUUID" -> \
"6e42a274-8a18-4daa-b0a8-b5e4d21f0506"],
Cell[2963041, 56516, 771, 15, 22, "Print", "ExpressionUUID" -> \
"ac476d52-13f5-4b50-b0fd-ca17c1fce6a9"],
Cell[2963815, 56533, 504, 10, 22, "Print", "ExpressionUUID" -> \
"a04f4036-26fd-4c37-a519-45396a10343f"],
Cell[2964322, 56545, 681, 12, 22, "Print", "ExpressionUUID" -> \
"3d9990c1-8559-4fdf-a446-19baafa81e45"],
Cell[2965006, 56559, 504, 10, 22, "Print", "ExpressionUUID" -> \
"5372db89-775a-4cb9-9931-51abe405843c"],
Cell[2965513, 56571, 773, 15, 22, "Print", "ExpressionUUID" -> \
"f6dd3183-b9e9-4e1c-b363-5b75e2db7e8e"],
Cell[2966289, 56588, 504, 10, 22, "Print", "ExpressionUUID" -> \
"04c2f8d2-68c3-4196-a34f-4d8afc33f5d1"],
Cell[2966796, 56600, 714, 13, 22, "Print", "ExpressionUUID" -> \
"0261e06d-6561-4413-a87f-80e763cc9f54"],
Cell[2967513, 56615, 508, 10, 22, "Print", "ExpressionUUID" -> \
"ae443148-dd95-4e8f-bb32-fb1327e5e400"],
Cell[2968024, 56627, 740, 14, 22, "Print", "ExpressionUUID" -> \
"92531b82-6822-455d-9ec8-9e26c59c88dd"],
Cell[2968767, 56643, 503, 9, 22, "Print", "ExpressionUUID" -> \
"c9922486-7d01-4ea4-b672-b893bcee70c7"],
Cell[2969273, 56654, 714, 13, 22, "Print", "ExpressionUUID" -> \
"5e48e589-c8d6-4da0-8f33-8018a0ff36cd"],
Cell[2969990, 56669, 508, 10, 22, "Print", "ExpressionUUID" -> \
"29220bdd-ddbf-47a6-94ce-2944f14c0aa8"],
Cell[2970501, 56681, 771, 15, 22, "Print", "ExpressionUUID" -> \
"17fc9023-ff33-4460-9055-22745f2089c9"],
Cell[2971275, 56698, 506, 10, 22, "Print", "ExpressionUUID" -> \
"a4863253-3f6f-46df-ade0-be354a3db5d7"],
Cell[2971784, 56710, 771, 15, 22, "Print", "ExpressionUUID" -> \
"838a4208-fa13-4aa9-8b8c-37e31d812cba"],
Cell[2972558, 56727, 506, 10, 22, "Print", "ExpressionUUID" -> \
"34aaad71-e657-4ba3-9588-a844897ad909"],
Cell[2973067, 56739, 740, 14, 22, "Print", "ExpressionUUID" -> \
"56f4496b-eaf7-46be-ab0b-ad358accdf72"],
Cell[2973810, 56755, 506, 10, 22, "Print", "ExpressionUUID" -> \
"ec74c607-bb39-43d2-bcd1-2bf6747c4dd7"],
Cell[2974319, 56767, 737, 13, 22, "Print", "ExpressionUUID" -> \
"86ee203d-5803-4ad0-877a-9277e18a2669"],
Cell[2975059, 56782, 506, 10, 22, "Print", "ExpressionUUID" -> \
"ba23ee82-4dbf-49a4-bda4-894c2ca8b670"],
Cell[2975568, 56794, 742, 14, 22, "Print", "ExpressionUUID" -> \
"bdf82cb7-6b03-4c52-a70d-f561e4b7cd48"],
Cell[2976313, 56810, 506, 10, 22, "Print", "ExpressionUUID" -> \
"4b45f64b-709b-4c77-ba07-958e049615cd"],
Cell[2976822, 56822, 740, 14, 22, "Print", "ExpressionUUID" -> \
"2821ff00-7638-4862-aa22-5baec3dc8c4e"],
Cell[2977565, 56838, 506, 10, 22, "Print", "ExpressionUUID" -> \
"00594df9-10ad-46db-8564-248bcee3ca49"],
Cell[2978074, 56850, 675, 12, 22, "Print", "ExpressionUUID" -> \
"e829d68a-01e6-4b91-953f-2378e4a193d2"],
Cell[2978752, 56864, 508, 10, 22, "Print", "ExpressionUUID" -> \
"1ca20e60-6af2-4327-a354-d0f6857367d2"],
Cell[2979263, 56876, 739, 14, 22, "Print", "ExpressionUUID" -> \
"47e7be76-670c-4c23-9ce4-1f124a3bb0f9"],
Cell[2980005, 56892, 506, 10, 22, "Print", "ExpressionUUID" -> \
"32f92e99-6a67-4af5-936b-11265f9e94a1"],
Cell[2980514, 56904, 739, 14, 22, "Print", "ExpressionUUID" -> \
"8e47d1d8-1587-4b26-a868-d9fdbacd8d43"],
Cell[2981256, 56920, 506, 10, 22, "Print", "ExpressionUUID" -> \
"ff20cc2a-7604-4d33-a48e-3908a281b4d0"],
Cell[2981765, 56932, 739, 14, 22, "Print", "ExpressionUUID" -> \
"62ac4a40-8134-4894-a8f9-4f0a0ef32b56"],
Cell[2982507, 56948, 506, 10, 22, "Print", "ExpressionUUID" -> \
"1f9f7d26-fad5-4c13-9476-074905148e40"],
Cell[2983016, 56960, 739, 14, 22, "Print", "ExpressionUUID" -> \
"e4294c10-994f-4ddb-860c-3439b239b320"],
Cell[2983758, 56976, 506, 10, 22, "Print", "ExpressionUUID" -> \
"63b920d8-3807-4058-a061-443dbad3dcde"],
Cell[2984267, 56988, 773, 15, 22, "Print", "ExpressionUUID" -> \
"3c96e79c-26f9-4b1d-ad05-3a67027d75f2"],
Cell[2985043, 57005, 506, 10, 22, "Print", "ExpressionUUID" -> \
"7cdeef4a-3824-48a4-9a05-bc8239d2cf3f"],
Cell[2985552, 57017, 770, 14, 22, "Print", "ExpressionUUID" -> \
"b70176c6-1c4f-4b75-8c39-9976e0012021"],
Cell[2986325, 57033, 508, 10, 22, "Print", "ExpressionUUID" -> \
"f3a5df5e-9709-4061-8bb8-86c01220053b"],
Cell[2986836, 57045, 708, 12, 22, "Print", "ExpressionUUID" -> \
"8caeb232-1260-4c43-b16f-637eba8760a7"],
Cell[2987547, 57059, 552, 11, 22, "Print", "ExpressionUUID" -> \
"34d609be-ac50-4b08-9f60-f4b6630f4c16"]
}, Open  ]],
Cell[2988114, 57073, 16746, 346, 225, "Output", "ExpressionUUID" -> \
"18cf8b6c-e2db-4622-ba94-1d9412ab4b4b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3004909, 57425, 657, 14, 266, "Subtitle", "ExpressionUUID" -> \
"2a31b4fc-5675-4af1-bf15-1084949a8f73"],
Cell[3005569, 57441, 147, 3, 50, "Input", "ExpressionUUID" -> \
"f8a6ee60-111c-46d4-be66-554e3b7f8d38"],
Cell[CellGroupData[{
Cell[3005741, 57448, 2181, 51, 328, "Input", "ExpressionUUID" -> \
"7c0362c9-5d01-4d90-9b41-9fce0f8a3d74"],
Cell[3007925, 57501, 38150, 795, 321, "Output", "ExpressionUUID" -> \
"d5d76ace-86c9-4a0a-ba75-3ef40b22972d"],
Cell[3046078, 58298, 144746, 3653, 321, "Output", "ExpressionUUID" -> \
"77d81b32-0dc9-4290-bed0-2e445379f969"],
Cell[3190827, 61953, 142037, 3576, 321, "Output", "ExpressionUUID" -> \
"611bf5c3-29ba-4c71-8393-9579e0e56963"],
Cell[3332867, 65531, 122271, 2134, 89, "Output", "ExpressionUUID" -> \
"edf68085-0faf-4965-a540-25839a6573bf"],
Cell[3455141, 67667, 127583, 2226, 89, "Output", "ExpressionUUID" -> \
"76c3cc2b-ef60-4628-9afb-289c5262e397"]
}, Open  ]]
}, Open  ]],
Cell[3582751, 69897, 232, 7, 91, "Subtitle", "ExpressionUUID" -> \
"8ee2f912-97c7-43d5-bd21-14dfc6beeb69"]
}, Open  ]]
}
]
*)

